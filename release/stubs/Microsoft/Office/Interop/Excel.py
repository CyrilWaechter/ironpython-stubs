# encoding: utf-8
# module Microsoft.Office.Interop.Excel calls itself Excel
# from Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class AboveAverage:
    # no doc
    def Delete(self):
        """ Delete(self: AboveAverage) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: AboveAverage, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: AboveAverage) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: AboveAverage) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AboveBelow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AboveBelow(self: AboveAverage) -> XlAboveBelow

Set: AboveBelow(self: AboveAverage) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AboveAverage) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: AboveAverage) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: AboveAverage) -> Borders

"""

    CalcFor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalcFor(self: AboveAverage) -> XlCalcFor

Set: CalcFor(self: AboveAverage) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AboveAverage) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: AboveAverage) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: AboveAverage) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: AboveAverage) -> object

Set: NumberFormat(self: AboveAverage) = value
"""

    NumStdDev = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumStdDev(self: AboveAverage) -> int

Set: NumStdDev(self: AboveAverage) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AboveAverage) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: AboveAverage) -> int

Set: Priority(self: AboveAverage) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: AboveAverage) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: AboveAverage) -> XlPivotConditionScope

Set: ScopeType(self: AboveAverage) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: AboveAverage) -> bool

Set: StopIfTrue(self: AboveAverage) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: AboveAverage) -> int

"""



class Action:
    # no doc
    def Execute(self):
        """ Execute(self: Action) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Action) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Action) -> str

"""

    Content = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Content(self: Action) -> str

"""

    Coordinate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinate(self: Action) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Action) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Action) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Action) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Action) -> XlActionType

"""



class Actions(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Actions) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Actions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Actions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Actions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Actions) -> object

"""



class AddIn:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AddIn) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: AddIn) -> str

"""

    CLSID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CLSID(self: AddIn) -> str

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: AddIn) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AddIn) -> XlCreator

"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: AddIn) -> str

"""

    Installed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Installed(self: AddIn) -> bool

Set: Installed(self: AddIn) = value
"""

    IsOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsOpen(self: AddIn) -> bool

"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: AddIn) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AddIn) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AddIn) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AddIn) -> str

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: AddIn) -> str

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: AddIn) -> str

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: AddIn) -> str

"""



class AddIns(IEnumerable):
    # no doc
    def Add(self, Filename, CopyFile):
        """ Add(self: AddIns, Filename: str, CopyFile: object) -> AddIn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AddIns) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AddIns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AddIns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AddIns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AddIns) -> object

"""



class AddIns2(IEnumerable):
    # no doc
    def Add(self, Filename, CopyFile):
        """ Add(self: AddIns2, Filename: str, CopyFile: object) -> AddIn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AddIns2) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AddIns2) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AddIns2) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AddIns2) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AddIns2) -> object

"""



class Adjustments(_IMsoDispObj):
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Adjustments) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Adjustments) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Adjustments) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Adjustments) -> object

"""



class AllowEditRange:
    # no doc
    def ChangePassword(self, Password):
        """ ChangePassword(self: AllowEditRange, Password: str) """
        pass

    def Delete(self):
        """ Delete(self: AllowEditRange) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: AllowEditRange, Password: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: AllowEditRange) -> Range

Set: Range(self: AllowEditRange) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: AllowEditRange) -> str

Set: Title(self: AllowEditRange) = value
"""

    Users = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Users(self: AllowEditRange) -> UserAccessList

"""



class AllowEditRanges(IEnumerable):
    # no doc
    def Add(self, Title, Range, Password):
        """ Add(self: AllowEditRanges, Title: str, Range: Range, Password: object) -> AllowEditRange """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AllowEditRanges) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AllowEditRanges) -> int

"""



class AppEvents:
    # no doc
    def AfterCalculate(self):
        """ AfterCalculate(self: AppEvents) """
        pass

    def NewWorkbook(self, Wb):
        """ NewWorkbook(self: AppEvents, Wb: Workbook) """
        pass

    def ProtectedViewWindowActivate(self, Pvw):
        """ ProtectedViewWindowActivate(self: AppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowBeforeClose(self, Pvw, Reason, Cancel):
        """ ProtectedViewWindowBeforeClose(self: AppEvents, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        pass

    def ProtectedViewWindowBeforeEdit(self, Pvw, Cancel):
        """ ProtectedViewWindowBeforeEdit(self: AppEvents, Pvw: ProtectedViewWindow) -> bool """
        pass

    def ProtectedViewWindowDeactivate(self, Pvw):
        """ ProtectedViewWindowDeactivate(self: AppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowOpen(self, Pvw):
        """ ProtectedViewWindowOpen(self: AppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowResize(self, Pvw):
        """ ProtectedViewWindowResize(self: AppEvents, Pvw: ProtectedViewWindow) """
        pass

    def SheetActivate(self, Sh):
        """ SheetActivate(self: AppEvents, Sh: object) """
        pass

    def SheetBeforeDelete(self, Sh):
        """ SheetBeforeDelete(self: AppEvents, Sh: object) """
        pass

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel):
        """ SheetBeforeDoubleClick(self: AppEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetBeforeRightClick(self, Sh, Target, Cancel):
        """ SheetBeforeRightClick(self: AppEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetCalculate(self, Sh):
        """ SheetCalculate(self: AppEvents, Sh: object) """
        pass

    def SheetChange(self, Sh, Target):
        """ SheetChange(self: AppEvents, Sh: object, Target: Range) """
        pass

    def SheetDeactivate(self, Sh):
        """ SheetDeactivate(self: AppEvents, Sh: object) """
        pass

    def SheetFollowHyperlink(self, Sh, Target):
        """ SheetFollowHyperlink(self: AppEvents, Sh: object, Target: Hyperlink) """
        pass

    def SheetLensGalleryRenderComplete(self, Sh):
        """ SheetLensGalleryRenderComplete(self: AppEvents, Sh: object) """
        pass

    def SheetPivotTableAfterValueChange(self, Sh, TargetPivotTable, TargetRange):
        """ SheetPivotTableAfterValueChange(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeAllocateChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeCommitChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeDiscardChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ SheetPivotTableBeforeDiscardChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def SheetPivotTableUpdate(self, Sh, Target):
        """ SheetPivotTableUpdate(self: AppEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetSelectionChange(self, Sh, Target):
        """ SheetSelectionChange(self: AppEvents, Sh: object, Target: Range) """
        pass

    def SheetTableUpdate(self, Sh, Target):
        """ SheetTableUpdate(self: AppEvents, Sh: object, Target: TableObject) """
        pass

    def WindowActivate(self, Wb, Wn):
        """ WindowActivate(self: AppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WindowDeactivate(self, Wb, Wn):
        """ WindowDeactivate(self: AppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WindowResize(self, Wb, Wn):
        """ WindowResize(self: AppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WorkbookActivate(self, Wb):
        """ WorkbookActivate(self: AppEvents, Wb: Workbook) """
        pass

    def WorkbookAddinInstall(self, Wb):
        """ WorkbookAddinInstall(self: AppEvents, Wb: Workbook) """
        pass

    def WorkbookAddinUninstall(self, Wb):
        """ WorkbookAddinUninstall(self: AppEvents, Wb: Workbook) """
        pass

    def WorkbookAfterSave(self, Wb, Success):
        """ WorkbookAfterSave(self: AppEvents, Wb: Workbook, Success: bool) """
        pass

    def WorkbookAfterXmlExport(self, Wb, Map, Url, Result):
        """ WorkbookAfterXmlExport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def WorkbookAfterXmlImport(self, Wb, Map, IsRefresh, Result):
        """ WorkbookAfterXmlImport(self: AppEvents, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def WorkbookBeforeClose(self, Wb, Cancel):
        """ WorkbookBeforeClose(self: AppEvents, Wb: Workbook) -> bool """
        pass

    def WorkbookBeforePrint(self, Wb, Cancel):
        """ WorkbookBeforePrint(self: AppEvents, Wb: Workbook) -> bool """
        pass

    def WorkbookBeforeSave(self, Wb, SaveAsUI, Cancel):
        """ WorkbookBeforeSave(self: AppEvents, Wb: Workbook, SaveAsUI: bool) -> bool """
        pass

    def WorkbookBeforeXmlExport(self, Wb, Map, Url, Cancel):
        """ WorkbookBeforeXmlExport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        pass

    def WorkbookBeforeXmlImport(self, Wb, Map, Url, IsRefresh, Cancel):
        """ WorkbookBeforeXmlImport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def WorkbookDeactivate(self, Wb):
        """ WorkbookDeactivate(self: AppEvents, Wb: Workbook) """
        pass

    def WorkbookModelChange(self, Wb, Changes):
        """ WorkbookModelChange(self: AppEvents, Wb: Workbook, Changes: ModelChanges) """
        pass

    def WorkbookNewChart(self, Wb, Ch):
        """ WorkbookNewChart(self: AppEvents, Wb: Workbook, Ch: Chart) """
        pass

    def WorkbookNewSheet(self, Wb, Sh):
        """ WorkbookNewSheet(self: AppEvents, Wb: Workbook, Sh: object) """
        pass

    def WorkbookOpen(self, Wb):
        """ WorkbookOpen(self: AppEvents, Wb: Workbook) """
        pass

    def WorkbookPivotTableCloseConnection(self, Wb, Target):
        """ WorkbookPivotTableCloseConnection(self: AppEvents, Wb: Workbook, Target: PivotTable) """
        pass

    def WorkbookPivotTableOpenConnection(self, Wb, Target):
        """ WorkbookPivotTableOpenConnection(self: AppEvents, Wb: Workbook, Target: PivotTable) """
        pass

    def WorkbookRowsetComplete(self, Wb, Description, Sheet, Success):
        """ WorkbookRowsetComplete(self: AppEvents, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        pass

    def WorkbookSync(self, Wb, SyncEventType):
        """ WorkbookSync(self: AppEvents, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AppEvents_AfterCalculateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_AfterCalculateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: AppEvents_AfterCalculateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_Event:
    # no doc
# Error generating skeleton for function add_AfterCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewWorkbook: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowBeforeEdit: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookNewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookNewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookPivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookPivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookRowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewWorkbook: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowBeforeEdit: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookNewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookNewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookPivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookPivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookRowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookSync: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AfterCalculate = None
    NewWorkbook = None
    ProtectedViewWindowActivate = None
    ProtectedViewWindowBeforeClose = None
    ProtectedViewWindowBeforeEdit = None
    ProtectedViewWindowDeactivate = None
    ProtectedViewWindowOpen = None
    ProtectedViewWindowResize = None
    SheetActivate = None
    SheetBeforeDelete = None
    SheetBeforeDoubleClick = None
    SheetBeforeRightClick = None
    SheetCalculate = None
    SheetChange = None
    SheetDeactivate = None
    SheetFollowHyperlink = None
    SheetLensGalleryRenderComplete = None
    SheetPivotTableAfterValueChange = None
    SheetPivotTableBeforeAllocateChanges = None
    SheetPivotTableBeforeCommitChanges = None
    SheetPivotTableBeforeDiscardChanges = None
    SheetPivotTableUpdate = None
    SheetSelectionChange = None
    SheetTableUpdate = None
    WindowActivate = None
    WindowDeactivate = None
    WindowResize = None
    WorkbookActivate = None
    WorkbookAddinInstall = None
    WorkbookAddinUninstall = None
    WorkbookAfterSave = None
    WorkbookAfterXmlExport = None
    WorkbookAfterXmlImport = None
    WorkbookBeforeClose = None
    WorkbookBeforePrint = None
    WorkbookBeforeSave = None
    WorkbookBeforeXmlExport = None
    WorkbookBeforeXmlImport = None
    WorkbookDeactivate = None
    WorkbookModelChange = None
    WorkbookNewChart = None
    WorkbookNewSheet = None
    WorkbookOpen = None
    WorkbookPivotTableCloseConnection = None
    WorkbookPivotTableOpenConnection = None
    WorkbookRowsetComplete = None
    WorkbookSync = None


class AppEvents_NewWorkbookEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_NewWorkbookEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_NewWorkbookEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw):
        """ Invoke(self: AppEvents_ProtectedViewWindowActivateEventHandler, Pvw: ProtectedViewWindow) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowBeforeCloseEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowBeforeCloseEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw, Reason, Cancel):
        """ Invoke(self: AppEvents_ProtectedViewWindowBeforeCloseEventHandler, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowBeforeEditEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowBeforeEditEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw, Cancel):
        """ Invoke(self: AppEvents_ProtectedViewWindowBeforeEditEventHandler, Pvw: ProtectedViewWindow) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw):
        """ Invoke(self: AppEvents_ProtectedViewWindowDeactivateEventHandler, Pvw: ProtectedViewWindow) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowOpenEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowOpenEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw):
        """ Invoke(self: AppEvents_ProtectedViewWindowOpenEventHandler, Pvw: ProtectedViewWindow) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_ProtectedViewWindowResizeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_ProtectedViewWindowResizeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Pvw):
        """ Invoke(self: AppEvents_ProtectedViewWindowResizeEventHandler, Pvw: ProtectedViewWindow) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: AppEvents_SheetActivateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetBeforeDeleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetBeforeDeleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: AppEvents_SheetBeforeDeleteEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetBeforeDoubleClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target, Cancel):
        """ Invoke(self: AppEvents_SheetBeforeDoubleClickEventHandler, Sh: object, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetBeforeRightClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetBeforeRightClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target, Cancel):
        """ Invoke(self: AppEvents_SheetBeforeRightClickEventHandler, Sh: object, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetCalculateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetCalculateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: AppEvents_SheetCalculateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: AppEvents_SheetChangeEventHandler, Sh: object, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: AppEvents_SheetDeactivateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetFollowHyperlinkEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetFollowHyperlinkEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: AppEvents_SheetFollowHyperlinkEventHandler, Sh: object, Target: Hyperlink) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetLensGalleryRenderCompleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetLensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: AppEvents_SheetLensGalleryRenderCompleteEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetPivotTableAfterValueChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetPivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, TargetRange):
        """ Invoke(self: AppEvents_SheetPivotTableAfterValueChangeEventHandler, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetPivotTableBeforeCommitChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetPivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: AppEvents_SheetPivotTableBeforeCommitChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ Invoke(self: AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetPivotTableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetPivotTableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: AppEvents_SheetPivotTableUpdateEventHandler, Sh: object, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetSelectionChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetSelectionChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: AppEvents_SheetSelectionChangeEventHandler, Sh: object, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SheetTableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_SheetTableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: AppEvents_SheetTableUpdateEventHandler, Sh: object, Target: TableObject) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_SinkHelper(object, AppEvents):
    # no doc
    def AfterCalculate(self):
        """ AfterCalculate(self: AppEvents_SinkHelper) """
        pass

# Error generating skeleton for function NewWorkbook: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowBeforeEdit: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function ProtectedViewWindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookAddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookAddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookAfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookAfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookAfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookBeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookBeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookBeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookBeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookNewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookNewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookPivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookPivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookRowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WorkbookSync: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_AfterCalculateDelegate = None
    m_dwCookie = None
    m_NewWorkbookDelegate = None
    m_ProtectedViewWindowActivateDelegate = None
    m_ProtectedViewWindowBeforeCloseDelegate = None
    m_ProtectedViewWindowBeforeEditDelegate = None
    m_ProtectedViewWindowDeactivateDelegate = None
    m_ProtectedViewWindowOpenDelegate = None
    m_ProtectedViewWindowResizeDelegate = None
    m_SheetActivateDelegate = None
    m_SheetBeforeDeleteDelegate = None
    m_SheetBeforeDoubleClickDelegate = None
    m_SheetBeforeRightClickDelegate = None
    m_SheetCalculateDelegate = None
    m_SheetChangeDelegate = None
    m_SheetDeactivateDelegate = None
    m_SheetFollowHyperlinkDelegate = None
    m_SheetLensGalleryRenderCompleteDelegate = None
    m_SheetPivotTableAfterValueChangeDelegate = None
    m_SheetPivotTableBeforeAllocateChangesDelegate = None
    m_SheetPivotTableBeforeCommitChangesDelegate = None
    m_SheetPivotTableBeforeDiscardChangesDelegate = None
    m_SheetPivotTableUpdateDelegate = None
    m_SheetSelectionChangeDelegate = None
    m_SheetTableUpdateDelegate = None
    m_WindowActivateDelegate = None
    m_WindowDeactivateDelegate = None
    m_WindowResizeDelegate = None
    m_WorkbookActivateDelegate = None
    m_WorkbookAddinInstallDelegate = None
    m_WorkbookAddinUninstallDelegate = None
    m_WorkbookAfterSaveDelegate = None
    m_WorkbookAfterXmlExportDelegate = None
    m_WorkbookAfterXmlImportDelegate = None
    m_WorkbookBeforeCloseDelegate = None
    m_WorkbookBeforePrintDelegate = None
    m_WorkbookBeforeSaveDelegate = None
    m_WorkbookBeforeXmlExportDelegate = None
    m_WorkbookBeforeXmlImportDelegate = None
    m_WorkbookDeactivateDelegate = None
    m_WorkbookModelChangeDelegate = None
    m_WorkbookNewChartDelegate = None
    m_WorkbookNewSheetDelegate = None
    m_WorkbookOpenDelegate = None
    m_WorkbookPivotTableCloseConnectionDelegate = None
    m_WorkbookPivotTableOpenConnectionDelegate = None
    m_WorkbookRowsetCompleteDelegate = None
    m_WorkbookSyncDelegate = None


class AppEvents_WindowActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WindowActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Wn):
        """ Invoke(self: AppEvents_WindowActivateEventHandler, Wb: Workbook, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WindowDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Wn):
        """ Invoke(self: AppEvents_WindowDeactivateEventHandler, Wb: Workbook, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WindowResizeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WindowResizeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Wn):
        """ Invoke(self: AppEvents_WindowResizeEventHandler, Wb: Workbook, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_WorkbookActivateEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookAddinInstallEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookAddinInstallEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_WorkbookAddinInstallEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookAddinUninstallEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookAddinUninstallEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_WorkbookAddinUninstallEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookAfterSaveEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookAfterSaveEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Success):
        """ Invoke(self: AppEvents_WorkbookAfterSaveEventHandler, Wb: Workbook, Success: bool) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookAfterXmlExportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookAfterXmlExportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Map, Url, Result):
        """ Invoke(self: AppEvents_WorkbookAfterXmlExportEventHandler, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookAfterXmlImportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookAfterXmlImportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Map, IsRefresh, Result):
        """ Invoke(self: AppEvents_WorkbookAfterXmlImportEventHandler, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookBeforeCloseEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookBeforeCloseEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Cancel):
        """ Invoke(self: AppEvents_WorkbookBeforeCloseEventHandler, Wb: Workbook) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookBeforePrintEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookBeforePrintEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Cancel):
        """ Invoke(self: AppEvents_WorkbookBeforePrintEventHandler, Wb: Workbook) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookBeforeSaveEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookBeforeSaveEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, SaveAsUI, Cancel):
        """ Invoke(self: AppEvents_WorkbookBeforeSaveEventHandler, Wb: Workbook, SaveAsUI: bool) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookBeforeXmlExportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookBeforeXmlExportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Map, Url, Cancel):
        """ Invoke(self: AppEvents_WorkbookBeforeXmlExportEventHandler, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookBeforeXmlImportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookBeforeXmlImportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Map, Url, IsRefresh, Cancel):
        """ Invoke(self: AppEvents_WorkbookBeforeXmlImportEventHandler, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_WorkbookDeactivateEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookModelChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookModelChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Changes):
        """ Invoke(self: AppEvents_WorkbookModelChangeEventHandler, Wb: Workbook, Changes: ModelChanges) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookNewChartEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookNewChartEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Ch):
        """ Invoke(self: AppEvents_WorkbookNewChartEventHandler, Wb: Workbook, Ch: Chart) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookNewSheetEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookNewSheetEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Sh):
        """ Invoke(self: AppEvents_WorkbookNewSheetEventHandler, Wb: Workbook, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookOpenEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookOpenEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb):
        """ Invoke(self: AppEvents_WorkbookOpenEventHandler, Wb: Workbook) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookPivotTableCloseConnectionEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookPivotTableCloseConnectionEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Target):
        """ Invoke(self: AppEvents_WorkbookPivotTableCloseConnectionEventHandler, Wb: Workbook, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookPivotTableOpenConnectionEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookPivotTableOpenConnectionEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Target):
        """ Invoke(self: AppEvents_WorkbookPivotTableOpenConnectionEventHandler, Wb: Workbook, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookRowsetCompleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookRowsetCompleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, Description, Sheet, Success):
        """ Invoke(self: AppEvents_WorkbookRowsetCompleteEventHandler, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class AppEvents_WorkbookSyncEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ AppEvents_WorkbookSyncEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wb, SyncEventType):
        """ Invoke(self: AppEvents_WorkbookSyncEventHandler, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class _Application:
    # no doc
    def ActivateMicrosoftApp(self, Index):
        """ ActivateMicrosoftApp(self: _Application, Index: XlMSApplication) """
        pass

    def AddChartAutoFormat(self, Chart, Name, Description):
        """ AddChartAutoFormat(self: _Application, Chart: object, Name: str, Description: object) """
        pass

    def AddCustomList(self, ListArray, ByRow):
        """ AddCustomList(self: _Application, ListArray: object, ByRow: object) """
        pass

    def Calculate(self):
        """ Calculate(self: _Application) """
        pass

    def CalculateFull(self):
        """ CalculateFull(self: _Application) """
        pass

    def CalculateFullRebuild(self):
        """ CalculateFullRebuild(self: _Application) """
        pass

    def CalculateUntilAsyncQueriesDone(self):
        """ CalculateUntilAsyncQueriesDone(self: _Application) """
        pass

    def CentimetersToPoints(self, Centimeters):
        """ CentimetersToPoints(self: _Application, Centimeters: float) -> float """
        pass

    def CheckAbort(self, KeepAbort):
        """ CheckAbort(self: _Application, KeepAbort: object) """
        pass

    def CheckSpelling(self, Word, CustomDictionary, IgnoreUppercase):
        """ CheckSpelling(self: _Application, Word: str, CustomDictionary: object, IgnoreUppercase: object) -> bool """
        pass

    def ConvertFormula(self, Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo):
        """ ConvertFormula(self: _Application, Formula: object, FromReferenceStyle: XlReferenceStyle, ToReferenceStyle: object, ToAbsolute: object, RelativeTo: object) -> object """
        pass

    def DDEExecute(self, Channel, String):
        """ DDEExecute(self: _Application, Channel: int, String: str) """
        pass

    def DDEInitiate(self, App, Topic):
        """ DDEInitiate(self: _Application, App: str, Topic: str) -> int """
        pass

    def DDEPoke(self, Channel, Item, Data):
        """ DDEPoke(self: _Application, Channel: int, Item: object, Data: object) """
        pass

    def DDERequest(self, Channel, Item):
        """ DDERequest(self: _Application, Channel: int, Item: str) -> object """
        pass

    def DDETerminate(self, Channel):
        """ DDETerminate(self: _Application, Channel: int) """
        pass

    def DeleteChartAutoFormat(self, Name):
        """ DeleteChartAutoFormat(self: _Application, Name: str) """
        pass

    def DeleteCustomList(self, ListNum):
        """ DeleteCustomList(self: _Application, ListNum: int) """
        pass

    def DisplayXMLSourcePane(self, XmlMap):
        """ DisplayXMLSourcePane(self: _Application, XmlMap: object) """
        pass

    def DoubleClick(self):
        """ DoubleClick(self: _Application) """
        pass

    def Dummy1(self, Arg1, Arg2, Arg3, Arg4):
        """ Dummy1(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Dummy10(self, arg):
        """ Dummy10(self: _Application, arg: object) -> bool """
        pass

    def Dummy11(self):
        """ Dummy11(self: _Application) """
        pass

    def Dummy12(self, p1, p2):
        """ Dummy12(self: _Application, p1: PivotTable, p2: PivotTable) """
        pass

    def Dummy13(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy13(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy14(self):
        """ Dummy14(self: _Application) """
        pass

    def Dummy2(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ Dummy2(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> object """
        pass

    def Dummy20(self, grfCompareFunctions):
        """ Dummy20(self: _Application, grfCompareFunctions: int) -> object """
        pass

    def Dummy3(self):
        """ Dummy3(self: _Application) -> object """
        pass

    def Dummy4(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15):
        """ Dummy4(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object) -> object """
        pass

    def Dummy5(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13):
        """ Dummy5(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object) -> object """
        pass

    def Dummy6(self):
        """ Dummy6(self: _Application) -> object """
        pass

    def Dummy7(self):
        """ Dummy7(self: _Application) -> object """
        pass

    def Dummy8(self, Arg1):
        """ Dummy8(self: _Application, Arg1: object) -> object """
        pass

    def Dummy9(self):
        """ Dummy9(self: _Application) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: _Application, Name: object) -> object """
        pass

    def ExecuteExcel4Macro(self, String):
        """ ExecuteExcel4Macro(self: _Application, String: str) -> object """
        pass

    def FindFile(self):
        """ FindFile(self: _Application) -> bool """
        pass

    def GetCustomListContents(self, ListNum):
        """ GetCustomListContents(self: _Application, ListNum: int) -> object """
        pass

    def GetCustomListNum(self, ListArray):
        """ GetCustomListNum(self: _Application, ListArray: object) -> int """
        pass

    def GetOpenFilename(self, FileFilter, FilterIndex, Title, ButtonText, MultiSelect):
        """ GetOpenFilename(self: _Application, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object, MultiSelect: object) -> object """
        pass

    def GetPhonetic(self, Text):
        """ GetPhonetic(self: _Application, Text: object) -> str """
        pass

    def GetSaveAsFilename(self, InitialFilename, FileFilter, FilterIndex, Title, ButtonText):
        """ GetSaveAsFilename(self: _Application, InitialFilename: object, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object) -> object """
        pass

    def Goto(self, Reference, Scroll):
        """ Goto(self: _Application, Reference: object, Scroll: object) """
        pass

    def Help(self, HelpFile, HelpContextID):
        """ Help(self: _Application, HelpFile: object, HelpContextID: object) """
        pass

    def InchesToPoints(self, Inches):
        """ InchesToPoints(self: _Application, Inches: float) -> float """
        pass

    def InputBox(self, Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type):
        """ InputBox(self: _Application, Prompt: str, Title: object, Default: object, Left: object, Top: object, HelpFile: object, HelpContextID: object, Type: object) -> object """
        pass

    def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Intersect(self: _Application, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile):
        """ MacroOptions(self: _Application, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object) """
        pass

    def MacroOptions2(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, ArgumentDescriptions):
        """ MacroOptions2(self: _Application, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object, ArgumentDescriptions: object) """
        pass

    def MailLogoff(self):
        """ MailLogoff(self: _Application) """
        pass

    def MailLogon(self, Name, Password, DownloadNewMail):
        """ MailLogon(self: _Application, Name: object, Password: object, DownloadNewMail: object) """
        pass

    def NextLetter(self):
        """ NextLetter(self: _Application) -> Workbook """
        pass

    def OnKey(self, Key, Procedure):
        """ OnKey(self: _Application, Key: str, Procedure: object) """
        pass

    def OnRepeat(self, Text, Procedure):
        """ OnRepeat(self: _Application, Text: str, Procedure: str) """
        pass

    def OnTime(self, EarliestTime, Procedure, LatestTime, Schedule):
        """ OnTime(self: _Application, EarliestTime: object, Procedure: str, LatestTime: object, Schedule: object) """
        pass

    def OnUndo(self, Text, Procedure):
        """ OnUndo(self: _Application, Text: str, Procedure: str) """
        pass

    def Quit(self):
        """ Quit(self: _Application) """
        pass

    def RecordMacro(self, BasicCode, XlmCode):
        """ RecordMacro(self: _Application, BasicCode: object, XlmCode: object) """
        pass

    def RegisterXLL(self, Filename):
        """ RegisterXLL(self: _Application, Filename: str) -> bool """
        pass

    def Repeat(self):
        """ Repeat(self: _Application) """
        pass

    def ResetTipWizard(self):
        """ ResetTipWizard(self: _Application) """
        pass

    def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: _Application, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Save(self, Filename):
        """ Save(self: _Application, Filename: object) """
        pass

    def SaveWorkspace(self, Filename):
        """ SaveWorkspace(self: _Application, Filename: object) """
        pass

    def SendKeys(self, Keys, Wait):
        """ SendKeys(self: _Application, Keys: object, Wait: object) """
        pass

    def SetDefaultChart(self, FormatName, Gallery):
        """ SetDefaultChart(self: _Application, FormatName: object, Gallery: object) """
        pass

    def SharePointVersion(self, bstrUrl):
        """ SharePointVersion(self: _Application, bstrUrl: str) -> int """
        pass

    def Support(self, Object, ID, arg):
        """ Support(self: _Application, Object: object, ID: int, arg: object) -> object """
        pass

    def Undo(self):
        """ Undo(self: _Application) """
        pass

    def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Union(self: _Application, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def Volatile(self, Volatile):
        """ Volatile(self: _Application, Volatile: object) """
        pass

    def Wait(self, Time):
        """ Wait(self: _Application, Time: object) -> bool """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: _Application, Name: object) -> object """
        pass

    def _FindFile(self):
        """ _FindFile(self: _Application) """
        pass

    def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _Run2(self: _Application, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def _Wait(self, Time):
        """ _Wait(self: _Application, Time: object) """
        pass

    def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _WSFunction(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: _Application) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: _Application) -> Chart

"""

    ActiveDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveDialog(self: _Application) -> DialogSheet

"""

    ActiveEncryptionSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveEncryptionSession(self: _Application) -> int

"""

    ActiveMenuBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveMenuBar(self: _Application) -> MenuBar

"""

    ActivePrinter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePrinter(self: _Application) -> str

Set: ActivePrinter(self: _Application) = value
"""

    ActiveProtectedViewWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveProtectedViewWindow(self: _Application) -> ProtectedViewWindow

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: _Application) -> object

"""

    ActiveWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWindow(self: _Application) -> Window

"""

    ActiveWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWorkbook(self: _Application) -> Workbook

"""

    AddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns(self: _Application) -> AddIns

"""

    AddIns2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns2(self: _Application) -> AddIns2

"""

    AlertBeforeOverwriting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlertBeforeOverwriting(self: _Application) -> bool

Set: AlertBeforeOverwriting(self: _Application) = value
"""

    AltStartupPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltStartupPath(self: _Application) -> str

Set: AltStartupPath(self: _Application) = value
"""

    AlwaysUseClearType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseClearType(self: _Application) -> bool

Set: AlwaysUseClearType(self: _Application) = value
"""

    AnswerWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AnswerWizard(self: _Application) -> AnswerWizard

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _Application) -> Application

"""

    ArbitraryXMLSupportAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArbitraryXMLSupportAvailable(self: _Application) -> bool

"""

    AskToUpdateLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AskToUpdateLinks(self: _Application) -> bool

Set: AskToUpdateLinks(self: _Application) = value
"""

    Assistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistance(self: _Application) -> IAssistance

"""

    Assistant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistant(self: _Application) -> Assistant

"""

    AutoCorrect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoCorrect(self: _Application) -> AutoCorrect

"""

    AutoFormatAsYouTypeReplaceHyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFormatAsYouTypeReplaceHyperlinks(self: _Application) -> bool

Set: AutoFormatAsYouTypeReplaceHyperlinks(self: _Application) = value
"""

    AutomationSecurity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutomationSecurity(self: _Application) -> MsoAutomationSecurity

Set: AutomationSecurity(self: _Application) = value
"""

    AutoPercentEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoPercentEntry(self: _Application) -> bool

Set: AutoPercentEntry(self: _Application) = value
"""

    AutoRecover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoRecover(self: _Application) -> AutoRecover

"""

    Build = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Build(self: _Application) -> int

"""

    CalculateBeforeSave = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculateBeforeSave(self: _Application) -> bool

Set: CalculateBeforeSave(self: _Application) = value
"""

    Calculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Calculation(self: _Application) -> XlCalculation

Set: Calculation(self: _Application) = value
"""

    CalculationInterruptKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationInterruptKey(self: _Application) -> XlCalculationInterruptKey

Set: CalculationInterruptKey(self: _Application) = value
"""

    CalculationState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationState(self: _Application) -> XlCalculationState

"""

    CalculationVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationVersion(self: _Application) -> int

"""

    CanPlaySounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanPlaySounds(self: _Application) -> bool

"""

    CanRecordSounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanRecordSounds(self: _Application) -> bool

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: _Application) -> str

Set: Caption(self: _Application) = value
"""

    CellDragAndDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CellDragAndDrop(self: _Application) -> bool

Set: CellDragAndDrop(self: _Application) = value
"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: _Application) -> Range

"""

    ChartDataPointTrack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartDataPointTrack(self: _Application) -> bool

Set: ChartDataPointTrack(self: _Application) = value
"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: _Application) -> Sheets

"""

    ClusterConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClusterConnector(self: _Application) -> str

Set: ClusterConnector(self: _Application) = value
"""

    ColorButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorButtons(self: _Application) -> bool

Set: ColorButtons(self: _Application) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: _Application) -> Range

"""

    COMAddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: COMAddIns(self: _Application) -> COMAddIns

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: _Application) -> CommandBars

"""

    CommandUnderlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandUnderlines(self: _Application) -> XlCommandUnderlines

Set: CommandUnderlines(self: _Application) = value
"""

    ConstrainNumeric = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstrainNumeric(self: _Application) -> bool

Set: ConstrainNumeric(self: _Application) = value
"""

    ControlCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlCharacters(self: _Application) -> bool

Set: ControlCharacters(self: _Application) = value
"""

    CopyObjectsWithCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CopyObjectsWithCells(self: _Application) -> bool

Set: CopyObjectsWithCells(self: _Application) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _Application) -> XlCreator

"""

    Cursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cursor(self: _Application) -> XlMousePointer

Set: Cursor(self: _Application) = value
"""

    CursorMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CursorMovement(self: _Application) -> int

Set: CursorMovement(self: _Application) = value
"""

    CustomListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomListCount(self: _Application) -> int

"""

    CutCopyMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CutCopyMode(self: _Application) -> XlCutCopyMode

Set: CutCopyMode(self: _Application) = value
"""

    DataEntryMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataEntryMode(self: _Application) -> int

Set: DataEntryMode(self: _Application) = value
"""

    DDEAppReturnCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DDEAppReturnCode(self: _Application) -> int

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: _Application) -> str

Set: DecimalSeparator(self: _Application) = value
"""

    DefaultFilePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultFilePath(self: _Application) -> str

Set: DefaultFilePath(self: _Application) = value
"""

    DefaultSaveFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSaveFormat(self: _Application) -> XlFileFormat

Set: DefaultSaveFormat(self: _Application) = value
"""

    DefaultSheetDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSheetDirection(self: _Application) -> int

Set: DefaultSheetDirection(self: _Application) = value
"""

    DefaultWebOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultWebOptions(self: _Application) -> DefaultWebOptions

"""

    DeferAsyncQueries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DeferAsyncQueries(self: _Application) -> bool

Set: DeferAsyncQueries(self: _Application) = value
"""

    Dialogs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dialogs(self: _Application) -> Dialogs

"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: _Application) -> Sheets

"""

    DisplayAlerts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAlerts(self: _Application) -> bool

Set: DisplayAlerts(self: _Application) = value
"""

    DisplayClipboardWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayClipboardWindow(self: _Application) -> bool

Set: DisplayClipboardWindow(self: _Application) = value
"""

    DisplayCommentIndicator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayCommentIndicator(self: _Application) -> XlCommentDisplayMode

Set: DisplayCommentIndicator(self: _Application) = value
"""

    DisplayDocumentActionTaskPane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDocumentActionTaskPane(self: _Application) -> bool

Set: DisplayDocumentActionTaskPane(self: _Application) = value
"""

    DisplayDocumentInformationPanel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDocumentInformationPanel(self: _Application) -> bool

Set: DisplayDocumentInformationPanel(self: _Application) = value
"""

    DisplayExcel4Menus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayExcel4Menus(self: _Application) -> bool

Set: DisplayExcel4Menus(self: _Application) = value
"""

    DisplayFormulaAutoComplete = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulaAutoComplete(self: _Application) -> bool

Set: DisplayFormulaAutoComplete(self: _Application) = value
"""

    DisplayFormulaBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulaBar(self: _Application) -> bool

Set: DisplayFormulaBar(self: _Application) = value
"""

    DisplayFullScreen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFullScreen(self: _Application) -> bool

Set: DisplayFullScreen(self: _Application) = value
"""

    DisplayFunctionToolTips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFunctionToolTips(self: _Application) -> bool

Set: DisplayFunctionToolTips(self: _Application) = value
"""

    DisplayInfoWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInfoWindow(self: _Application) -> bool

Set: DisplayInfoWindow(self: _Application) = value
"""

    DisplayInsertOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInsertOptions(self: _Application) -> bool

Set: DisplayInsertOptions(self: _Application) = value
"""

    DisplayNoteIndicator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayNoteIndicator(self: _Application) -> bool

Set: DisplayNoteIndicator(self: _Application) = value
"""

    DisplayPasteOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPasteOptions(self: _Application) -> bool

Set: DisplayPasteOptions(self: _Application) = value
"""

    DisplayRecentFiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRecentFiles(self: _Application) -> bool

Set: DisplayRecentFiles(self: _Application) = value
"""

    DisplayScrollBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayScrollBars(self: _Application) -> bool

Set: DisplayScrollBars(self: _Application) = value
"""

    DisplayStatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayStatusBar(self: _Application) -> bool

Set: DisplayStatusBar(self: _Application) = value
"""

    Dummy101 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy101(self: _Application) -> object

"""

    Dummy22 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy22(self: _Application) -> bool

Set: Dummy22(self: _Application) = value
"""

    Dummy23 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy23(self: _Application) -> bool

Set: Dummy23(self: _Application) = value
"""

    EditDirectlyInCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditDirectlyInCell(self: _Application) -> bool

Set: EditDirectlyInCell(self: _Application) = value
"""

    EnableAnimations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAnimations(self: _Application) -> bool

Set: EnableAnimations(self: _Application) = value
"""

    EnableAutoComplete = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoComplete(self: _Application) -> bool

Set: EnableAutoComplete(self: _Application) = value
"""

    EnableCancelKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCancelKey(self: _Application) -> XlEnableCancelKey

Set: EnableCancelKey(self: _Application) = value
"""

    EnableCheckFileExtensions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCheckFileExtensions(self: _Application) -> bool

Set: EnableCheckFileExtensions(self: _Application) = value
"""

    EnableEvents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEvents(self: _Application) -> bool

Set: EnableEvents(self: _Application) = value
"""

    EnableLargeOperationAlert = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLargeOperationAlert(self: _Application) -> bool

Set: EnableLargeOperationAlert(self: _Application) = value
"""

    EnableLivePreview = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLivePreview(self: _Application) -> bool

Set: EnableLivePreview(self: _Application) = value
"""

    EnableMacroAnimations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableMacroAnimations(self: _Application) -> bool

Set: EnableMacroAnimations(self: _Application) = value
"""

    EnableSound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSound(self: _Application) -> bool

Set: EnableSound(self: _Application) = value
"""

    EnableTipWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableTipWizard(self: _Application) -> bool

Set: EnableTipWizard(self: _Application) = value
"""

    ErrorCheckingOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorCheckingOptions(self: _Application) -> ErrorCheckingOptions

"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: _Application) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: _Application) -> Sheets

"""

    ExtendList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtendList(self: _Application) -> bool

Set: ExtendList(self: _Application) = value
"""

    FeatureInstall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FeatureInstall(self: _Application) -> MsoFeatureInstall

Set: FeatureInstall(self: _Application) = value
"""

    FileExportConverters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileExportConverters(self: _Application) -> FileExportConverters

"""

    FileFind = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFind(self: _Application) -> IFind

"""

    FileSearch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileSearch(self: _Application) -> FileSearch

"""

    FileValidation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileValidation(self: _Application) -> MsoFileValidationMode

Set: FileValidation(self: _Application) = value
"""

    FileValidationPivot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileValidationPivot(self: _Application) -> XlFileValidationPivotMode

Set: FileValidationPivot(self: _Application) = value
"""

    FindFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FindFormat(self: _Application) -> CellFormat

Set: FindFormat(self: _Application) = value
"""

    FixedDecimal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FixedDecimal(self: _Application) -> bool

Set: FixedDecimal(self: _Application) = value
"""

    FixedDecimalPlaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FixedDecimalPlaces(self: _Application) -> int

Set: FixedDecimalPlaces(self: _Application) = value
"""

    FlashFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlashFill(self: _Application) -> bool

Set: FlashFill(self: _Application) = value
"""

    FlashFillMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlashFillMode(self: _Application) -> bool

Set: FlashFillMode(self: _Application) = value
"""

    FormulaBarHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaBarHeight(self: _Application) -> int

Set: FormulaBarHeight(self: _Application) = value
"""

    GenerateGetPivotData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerateGetPivotData(self: _Application) -> bool

Set: GenerateGetPivotData(self: _Application) = value
"""

    GenerateTableRefs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerateTableRefs(self: _Application) -> XlGenerateTableRefs

Set: GenerateTableRefs(self: _Application) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: _Application) -> float

Set: Height(self: _Application) = value
"""

    HighQualityModeForGraphics = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HighQualityModeForGraphics(self: _Application) -> bool

Set: HighQualityModeForGraphics(self: _Application) = value
"""

    Hinstance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hinstance(self: _Application) -> int

"""

    HinstancePtr = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HinstancePtr(self: _Application) -> object

"""

    Hwnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hwnd(self: _Application) -> int

"""

    IgnoreRemoteRequests = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreRemoteRequests(self: _Application) -> bool

Set: IgnoreRemoteRequests(self: _Application) = value
"""

    Interactive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interactive(self: _Application) -> bool

Set: Interactive(self: _Application) = value
"""

    IsSandboxed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsSandboxed(self: _Application) -> bool

"""

    Iteration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Iteration(self: _Application) -> bool

Set: Iteration(self: _Application) = value
"""

    LanguageSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LanguageSettings(self: _Application) -> LanguageSettings

"""

    LargeButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeButtons(self: _Application) -> bool

Set: LargeButtons(self: _Application) = value
"""

    LargeOperationCellThousandCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeOperationCellThousandCount(self: _Application) -> int

Set: LargeOperationCellThousandCount(self: _Application) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: _Application) -> float

Set: Left(self: _Application) = value
"""

    LibraryPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LibraryPath(self: _Application) -> str

"""

    MailSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailSession(self: _Application) -> object

"""

    MailSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailSystem(self: _Application) -> XlMailSystem

"""

    MapPaperSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MapPaperSize(self: _Application) -> bool

Set: MapPaperSize(self: _Application) = value
"""

    MathCoprocessorAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MathCoprocessorAvailable(self: _Application) -> bool

"""

    MaxChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxChange(self: _Application) -> float

Set: MaxChange(self: _Application) = value
"""

    MaxIterations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxIterations(self: _Application) -> int

Set: MaxIterations(self: _Application) = value
"""

    MeasurementUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasurementUnit(self: _Application) -> int

Set: MeasurementUnit(self: _Application) = value
"""

    MemoryFree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryFree(self: _Application) -> int

"""

    MemoryTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryTotal(self: _Application) -> int

"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: _Application) -> int

"""

    MenuBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuBars(self: _Application) -> MenuBars

"""

    MergeInstances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeInstances(self: _Application) -> bool

Set: MergeInstances(self: _Application) = value
"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: _Application) -> Modules

"""

    MouseAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MouseAvailable(self: _Application) -> bool

"""

    MoveAfterReturn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MoveAfterReturn(self: _Application) -> bool

Set: MoveAfterReturn(self: _Application) = value
"""

    MoveAfterReturnDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MoveAfterReturnDirection(self: _Application) -> XlDirection

Set: MoveAfterReturnDirection(self: _Application) = value
"""

    MultiThreadedCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiThreadedCalculation(self: _Application) -> MultiThreadedCalculation

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _Application) -> str

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: _Application) -> Names

"""

    NetworkTemplatesPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NetworkTemplatesPath(self: _Application) -> str

"""

    NewWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NewWorkbook(self: _Application) -> NewFile

"""

    ODBCErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCErrors(self: _Application) -> ODBCErrors

"""

    ODBCTimeout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCTimeout(self: _Application) -> int

Set: ODBCTimeout(self: _Application) = value
"""

    OLEDBErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEDBErrors(self: _Application) -> OLEDBErrors

"""

    OnCalculate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnCalculate(self: _Application) -> str

Set: OnCalculate(self: _Application) = value
"""

    OnData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnData(self: _Application) -> str

Set: OnData(self: _Application) = value
"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: _Application) -> str

Set: OnDoubleClick(self: _Application) = value
"""

    OnEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnEntry(self: _Application) -> str

Set: OnEntry(self: _Application) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: _Application) -> str

Set: OnSheetActivate(self: _Application) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: _Application) -> str

Set: OnSheetDeactivate(self: _Application) = value
"""

    OnWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnWindow(self: _Application) -> str

Set: OnWindow(self: _Application) = value
"""

    OperatingSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OperatingSystem(self: _Application) -> str

"""

    OrganizationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrganizationName(self: _Application) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _Application) -> Application

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: _Application) -> str

"""

    PathSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PathSeparator(self: _Application) -> str

"""

    PivotTableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTableSelection(self: _Application) -> bool

Set: PivotTableSelection(self: _Application) = value
"""

    PrintCommunication = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintCommunication(self: _Application) -> bool

Set: PrintCommunication(self: _Application) = value
"""

    ProductCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductCode(self: _Application) -> str

"""

    PromptForSummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptForSummaryInfo(self: _Application) -> bool

Set: PromptForSummaryInfo(self: _Application) = value
"""

    ProtectedViewWindows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectedViewWindows(self: _Application) -> ProtectedViewWindows

"""

    QuickAnalysis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QuickAnalysis(self: _Application) -> QuickAnalysis

"""

    Quitting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Quitting(self: _Application) -> bool

"""

    Ready = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ready(self: _Application) -> bool

"""

    RecentFiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecentFiles(self: _Application) -> RecentFiles

"""

    RecordRelative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordRelative(self: _Application) -> bool

"""

    ReferenceStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReferenceStyle(self: _Application) -> XlReferenceStyle

Set: ReferenceStyle(self: _Application) = value
"""

    ReplaceFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReplaceFormat(self: _Application) -> CellFormat

Set: ReplaceFormat(self: _Application) = value
"""

    RollZoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RollZoom(self: _Application) -> bool

Set: RollZoom(self: _Application) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: _Application) -> Range

"""

    RTD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RTD(self: _Application) -> RTD

"""

    SaveISO8601Dates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveISO8601Dates(self: _Application) -> bool

Set: SaveISO8601Dates(self: _Application) = value
"""

    ScreenUpdating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenUpdating(self: _Application) -> bool

Set: ScreenUpdating(self: _Application) = value
"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: _Application) -> object

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: _Application) -> Sheets

"""

    SheetsInNewWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetsInNewWorkbook(self: _Application) -> int

Set: SheetsInNewWorkbook(self: _Application) = value
"""

    ShowChartTipNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowChartTipNames(self: _Application) -> bool

Set: ShowChartTipNames(self: _Application) = value
"""

    ShowChartTipValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowChartTipValues(self: _Application) -> bool

Set: ShowChartTipValues(self: _Application) = value
"""

    ShowDevTools = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDevTools(self: _Application) -> bool

Set: ShowDevTools(self: _Application) = value
"""

    ShowMenuFloaties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowMenuFloaties(self: _Application) -> bool

Set: ShowMenuFloaties(self: _Application) = value
"""

    ShowQuickAnalysis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowQuickAnalysis(self: _Application) -> bool

Set: ShowQuickAnalysis(self: _Application) = value
"""

    ShowSelectionFloaties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSelectionFloaties(self: _Application) -> bool

Set: ShowSelectionFloaties(self: _Application) = value
"""

    ShowStartupDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowStartupDialog(self: _Application) -> bool

Set: ShowStartupDialog(self: _Application) = value
"""

    ShowToolTips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowToolTips(self: _Application) -> bool

Set: ShowToolTips(self: _Application) = value
"""

    ShowWindowsInTaskbar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowWindowsInTaskbar(self: _Application) -> bool

Set: ShowWindowsInTaskbar(self: _Application) = value
"""

    SmartArtColors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtColors(self: _Application) -> SmartArtColors

"""

    SmartArtLayouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtLayouts(self: _Application) -> SmartArtLayouts

"""

    SmartArtQuickStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtQuickStyles(self: _Application) -> SmartArtQuickStyles

"""

    SmartTagRecognizers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagRecognizers(self: _Application) -> SmartTagRecognizers

"""

    Speech = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Speech(self: _Application) -> Speech

"""

    SpellingOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpellingOptions(self: _Application) -> SpellingOptions

"""

    StandardFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFont(self: _Application) -> str

Set: StandardFont(self: _Application) = value
"""

    StandardFontSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFontSize(self: _Application) -> float

Set: StandardFontSize(self: _Application) = value
"""

    StartupPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartupPath(self: _Application) -> str

"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: _Application) -> object

Set: StatusBar(self: _Application) = value
"""

    TemplatesPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplatesPath(self: _Application) -> str

"""

    ThisCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisCell(self: _Application) -> Range

"""

    ThisWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisWorkbook(self: _Application) -> Workbook

"""

    ThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThousandsSeparator(self: _Application) -> str

Set: ThousandsSeparator(self: _Application) = value
"""

    Toolbars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Toolbars(self: _Application) -> Toolbars

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: _Application) -> float

Set: Top(self: _Application) = value
"""

    TransitionMenuKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionMenuKey(self: _Application) -> str

Set: TransitionMenuKey(self: _Application) = value
"""

    TransitionMenuKeyAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionMenuKeyAction(self: _Application) -> int

Set: TransitionMenuKeyAction(self: _Application) = value
"""

    TransitionNavigKeys = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionNavigKeys(self: _Application) -> bool

Set: TransitionNavigKeys(self: _Application) = value
"""

    UILanguage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UILanguage(self: _Application) -> int

Set: UILanguage(self: _Application) = value
"""

    UsableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableHeight(self: _Application) -> float

"""

    UsableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableWidth(self: _Application) -> float

"""

    UseClusterConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseClusterConnector(self: _Application) -> bool

Set: UseClusterConnector(self: _Application) = value
"""

    UsedObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsedObjects(self: _Application) -> UsedObjects

"""

    UserControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserControl(self: _Application) -> bool

Set: UserControl(self: _Application) = value
"""

    UserLibraryPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserLibraryPath(self: _Application) -> str

"""

    UserName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserName(self: _Application) -> str

Set: UserName(self: _Application) = value
"""

    UseSystemSeparators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseSystemSeparators(self: _Application) -> bool

Set: UseSystemSeparators(self: _Application) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: _Application) -> str

"""

    VBE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBE(self: _Application) -> VBE

"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: _Application) -> str

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: _Application) -> bool

Set: Visible(self: _Application) = value
"""

    WarnOnFunctionNameConflict = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WarnOnFunctionNameConflict(self: _Application) -> bool

Set: WarnOnFunctionNameConflict(self: _Application) = value
"""

    Watches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Watches(self: _Application) -> Watches

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: _Application) -> float

Set: Width(self: _Application) = value
"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: _Application) -> Windows

"""

    WindowsForPens = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowsForPens(self: _Application) -> bool

"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: _Application) -> XlWindowState

Set: WindowState(self: _Application) = value
"""

    Workbooks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbooks(self: _Application) -> Workbooks

"""

    WorksheetFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetFunction(self: _Application) -> WorksheetFunction

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: _Application) -> Sheets

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: _Application) -> str

"""



class Application(_Application, AppEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ApplicationClass(__ComObject, _Application, Application, AppEvents_Event):
    """ ApplicationClass() """
    def ActivateMicrosoftApp(self, Index):
        """ ActivateMicrosoftApp(self: ApplicationClass, Index: XlMSApplication) """
        pass

    def AddChartAutoFormat(self, Chart, Name, Description):
        """ AddChartAutoFormat(self: ApplicationClass, Chart: object, Name: str, Description: object) """
        pass

    def AddCustomList(self, ListArray, ByRow):
        """ AddCustomList(self: ApplicationClass, ListArray: object, ByRow: object) """
        pass

# Error generating skeleton for function add_AfterCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewWorkbook: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowBeforeEdit: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ProtectedViewWindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookAfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookBeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookNewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookNewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookPivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookPivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookRowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WorkbookSync: sequence item 1: expected string, NoneType found

    def Calculate(self):
        """ Calculate(self: ApplicationClass) """
        pass

    def CalculateFull(self):
        """ CalculateFull(self: ApplicationClass) """
        pass

    def CalculateFullRebuild(self):
        """ CalculateFullRebuild(self: ApplicationClass) """
        pass

    def CalculateUntilAsyncQueriesDone(self):
        """ CalculateUntilAsyncQueriesDone(self: ApplicationClass) """
        pass

    def CentimetersToPoints(self, Centimeters):
        """ CentimetersToPoints(self: ApplicationClass, Centimeters: float) -> float """
        pass

    def CheckAbort(self, KeepAbort):
        """ CheckAbort(self: ApplicationClass, KeepAbort: object) """
        pass

    def CheckSpelling(self, Word, CustomDictionary, IgnoreUppercase):
        """ CheckSpelling(self: ApplicationClass, Word: str, CustomDictionary: object, IgnoreUppercase: object) -> bool """
        pass

    def ConvertFormula(self, Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo):
        """ ConvertFormula(self: ApplicationClass, Formula: object, FromReferenceStyle: XlReferenceStyle, ToReferenceStyle: object, ToAbsolute: object, RelativeTo: object) -> object """
        pass

    def DDEExecute(self, Channel, String):
        """ DDEExecute(self: ApplicationClass, Channel: int, String: str) """
        pass

    def DDEInitiate(self, App, Topic):
        """ DDEInitiate(self: ApplicationClass, App: str, Topic: str) -> int """
        pass

    def DDEPoke(self, Channel, Item, Data):
        """ DDEPoke(self: ApplicationClass, Channel: int, Item: object, Data: object) """
        pass

    def DDERequest(self, Channel, Item):
        """ DDERequest(self: ApplicationClass, Channel: int, Item: str) -> object """
        pass

    def DDETerminate(self, Channel):
        """ DDETerminate(self: ApplicationClass, Channel: int) """
        pass

    def DeleteChartAutoFormat(self, Name):
        """ DeleteChartAutoFormat(self: ApplicationClass, Name: str) """
        pass

    def DeleteCustomList(self, ListNum):
        """ DeleteCustomList(self: ApplicationClass, ListNum: int) """
        pass

    def DisplayXMLSourcePane(self, XmlMap):
        """ DisplayXMLSourcePane(self: ApplicationClass, XmlMap: object) """
        pass

    def DoubleClick(self):
        """ DoubleClick(self: ApplicationClass) """
        pass

    def Dummy1(self, Arg1, Arg2, Arg3, Arg4):
        """ Dummy1(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Dummy10(self, arg):
        """ Dummy10(self: ApplicationClass, arg: object) -> bool """
        pass

    def Dummy11(self):
        """ Dummy11(self: ApplicationClass) """
        pass

    def Dummy12(self, p1, p2):
        """ Dummy12(self: ApplicationClass, p1: PivotTable, p2: PivotTable) """
        pass

    def Dummy13(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy13(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy14(self):
        """ Dummy14(self: ApplicationClass) """
        pass

    def Dummy2(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ Dummy2(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> object """
        pass

    def Dummy20(self, grfCompareFunctions):
        """ Dummy20(self: ApplicationClass, grfCompareFunctions: int) -> object """
        pass

    def Dummy3(self):
        """ Dummy3(self: ApplicationClass) -> object """
        pass

    def Dummy4(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15):
        """ Dummy4(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object) -> object """
        pass

    def Dummy5(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13):
        """ Dummy5(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object) -> object """
        pass

    def Dummy6(self):
        """ Dummy6(self: ApplicationClass) -> object """
        pass

    def Dummy7(self):
        """ Dummy7(self: ApplicationClass) -> object """
        pass

    def Dummy8(self, Arg1):
        """ Dummy8(self: ApplicationClass, Arg1: object) -> object """
        pass

    def Dummy9(self):
        """ Dummy9(self: ApplicationClass) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: ApplicationClass, Name: object) -> object """
        pass

    def ExecuteExcel4Macro(self, String):
        """ ExecuteExcel4Macro(self: ApplicationClass, String: str) -> object """
        pass

    def FindFile(self):
        """ FindFile(self: ApplicationClass) -> bool """
        pass

    def GetCustomListContents(self, ListNum):
        """ GetCustomListContents(self: ApplicationClass, ListNum: int) -> object """
        pass

    def GetCustomListNum(self, ListArray):
        """ GetCustomListNum(self: ApplicationClass, ListArray: object) -> int """
        pass

    def GetOpenFilename(self, FileFilter, FilterIndex, Title, ButtonText, MultiSelect):
        """ GetOpenFilename(self: ApplicationClass, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object, MultiSelect: object) -> object """
        pass

    def GetPhonetic(self, Text):
        """ GetPhonetic(self: ApplicationClass, Text: object) -> str """
        pass

    def GetSaveAsFilename(self, InitialFilename, FileFilter, FilterIndex, Title, ButtonText):
        """ GetSaveAsFilename(self: ApplicationClass, InitialFilename: object, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object) -> object """
        pass

    def Goto(self, Reference, Scroll):
        """ Goto(self: ApplicationClass, Reference: object, Scroll: object) """
        pass

    def Help(self, HelpFile, HelpContextID):
        """ Help(self: ApplicationClass, HelpFile: object, HelpContextID: object) """
        pass

    def InchesToPoints(self, Inches):
        """ InchesToPoints(self: ApplicationClass, Inches: float) -> float """
        pass

    def InputBox(self, Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type):
        """ InputBox(self: ApplicationClass, Prompt: str, Title: object, Default: object, Left: object, Top: object, HelpFile: object, HelpContextID: object, Type: object) -> object """
        pass

    def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Intersect(self: ApplicationClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile):
        """ MacroOptions(self: ApplicationClass, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object) """
        pass

    def MacroOptions2(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, ArgumentDescriptions):
        """ MacroOptions2(self: ApplicationClass, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object, ArgumentDescriptions: object) """
        pass

    def MailLogoff(self):
        """ MailLogoff(self: ApplicationClass) """
        pass

    def MailLogon(self, Name, Password, DownloadNewMail):
        """ MailLogon(self: ApplicationClass, Name: object, Password: object, DownloadNewMail: object) """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def NextLetter(self):
        """ NextLetter(self: ApplicationClass) -> Workbook """
        pass

    def OnKey(self, Key, Procedure):
        """ OnKey(self: ApplicationClass, Key: str, Procedure: object) """
        pass

    def OnRepeat(self, Text, Procedure):
        """ OnRepeat(self: ApplicationClass, Text: str, Procedure: str) """
        pass

    def OnTime(self, EarliestTime, Procedure, LatestTime, Schedule):
        """ OnTime(self: ApplicationClass, EarliestTime: object, Procedure: str, LatestTime: object, Schedule: object) """
        pass

    def OnUndo(self, Text, Procedure):
        """ OnUndo(self: ApplicationClass, Text: str, Procedure: str) """
        pass

    def Quit(self):
        """ Quit(self: ApplicationClass) """
        pass

    def RecordMacro(self, BasicCode, XlmCode):
        """ RecordMacro(self: ApplicationClass, BasicCode: object, XlmCode: object) """
        pass

    def RegisterXLL(self, Filename):
        """ RegisterXLL(self: ApplicationClass, Filename: str) -> bool """
        pass

# Error generating skeleton for function remove_AfterCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewWorkbook: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowBeforeEdit: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ProtectedViewWindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookAfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookBeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookNewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookNewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookOpen: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookPivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookPivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookRowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WorkbookSync: sequence item 1: expected string, NoneType found

    def Repeat(self):
        """ Repeat(self: ApplicationClass) """
        pass

    def ResetTipWizard(self):
        """ ResetTipWizard(self: ApplicationClass) """
        pass

    def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: ApplicationClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Save(self, Filename):
        """ Save(self: ApplicationClass, Filename: object) """
        pass

    def SaveWorkspace(self, Filename):
        """ SaveWorkspace(self: ApplicationClass, Filename: object) """
        pass

    def SendKeys(self, Keys, Wait):
        """ SendKeys(self: ApplicationClass, Keys: object, Wait: object) """
        pass

    def SetDefaultChart(self, FormatName, Gallery):
        """ SetDefaultChart(self: ApplicationClass, FormatName: object, Gallery: object) """
        pass

    def SharePointVersion(self, bstrUrl):
        """ SharePointVersion(self: ApplicationClass, bstrUrl: str) -> int """
        pass

    def Support(self, Object, ID, arg):
        """ Support(self: ApplicationClass, Object: object, ID: int, arg: object) -> object """
        pass

    def Undo(self):
        """ Undo(self: ApplicationClass) """
        pass

    def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Union(self: ApplicationClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def Volatile(self, Volatile):
        """ Volatile(self: ApplicationClass, Volatile: object) """
        pass

    def Wait(self, Time):
        """ Wait(self: ApplicationClass, Time: object) -> bool """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: ApplicationClass, Name: object) -> object """
        pass

    def _FindFile(self):
        """ _FindFile(self: ApplicationClass) """
        pass

    def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _Run2(self: ApplicationClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def _Wait(self, Time):
        """ _Wait(self: ApplicationClass, Time: object) """
        pass

    def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _WSFunction(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: ApplicationClass) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: ApplicationClass) -> Chart

"""

    ActiveDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveDialog(self: ApplicationClass) -> DialogSheet

"""

    ActiveEncryptionSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveEncryptionSession(self: ApplicationClass) -> int

"""

    ActiveMenuBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveMenuBar(self: ApplicationClass) -> MenuBar

"""

    ActivePrinter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePrinter(self: ApplicationClass) -> str

Set: ActivePrinter(self: ApplicationClass) = value
"""

    ActiveProtectedViewWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveProtectedViewWindow(self: ApplicationClass) -> ProtectedViewWindow

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: ApplicationClass) -> object

"""

    ActiveWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWindow(self: ApplicationClass) -> Window

"""

    ActiveWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWorkbook(self: ApplicationClass) -> Workbook

"""

    AddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns(self: ApplicationClass) -> AddIns

"""

    AddIns2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns2(self: ApplicationClass) -> AddIns2

"""

    AlertBeforeOverwriting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlertBeforeOverwriting(self: ApplicationClass) -> bool

Set: AlertBeforeOverwriting(self: ApplicationClass) = value
"""

    AltStartupPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltStartupPath(self: ApplicationClass) -> str

Set: AltStartupPath(self: ApplicationClass) = value
"""

    AlwaysUseClearType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseClearType(self: ApplicationClass) -> bool

Set: AlwaysUseClearType(self: ApplicationClass) = value
"""

    AnswerWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AnswerWizard(self: ApplicationClass) -> AnswerWizard

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ApplicationClass) -> Application

"""

    ArbitraryXMLSupportAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArbitraryXMLSupportAvailable(self: ApplicationClass) -> bool

"""

    AskToUpdateLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AskToUpdateLinks(self: ApplicationClass) -> bool

Set: AskToUpdateLinks(self: ApplicationClass) = value
"""

    Assistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistance(self: ApplicationClass) -> IAssistance

"""

    Assistant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistant(self: ApplicationClass) -> Assistant

"""

    AutoCorrect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoCorrect(self: ApplicationClass) -> AutoCorrect

"""

    AutoFormatAsYouTypeReplaceHyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFormatAsYouTypeReplaceHyperlinks(self: ApplicationClass) -> bool

Set: AutoFormatAsYouTypeReplaceHyperlinks(self: ApplicationClass) = value
"""

    AutomationSecurity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutomationSecurity(self: ApplicationClass) -> MsoAutomationSecurity

Set: AutomationSecurity(self: ApplicationClass) = value
"""

    AutoPercentEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoPercentEntry(self: ApplicationClass) -> bool

Set: AutoPercentEntry(self: ApplicationClass) = value
"""

    AutoRecover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoRecover(self: ApplicationClass) -> AutoRecover

"""

    Build = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Build(self: ApplicationClass) -> int

"""

    CalculateBeforeSave = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculateBeforeSave(self: ApplicationClass) -> bool

Set: CalculateBeforeSave(self: ApplicationClass) = value
"""

    Calculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Calculation(self: ApplicationClass) -> XlCalculation

Set: Calculation(self: ApplicationClass) = value
"""

    CalculationInterruptKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationInterruptKey(self: ApplicationClass) -> XlCalculationInterruptKey

Set: CalculationInterruptKey(self: ApplicationClass) = value
"""

    CalculationState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationState(self: ApplicationClass) -> XlCalculationState

"""

    CalculationVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationVersion(self: ApplicationClass) -> int

"""

    CanPlaySounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanPlaySounds(self: ApplicationClass) -> bool

"""

    CanRecordSounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanRecordSounds(self: ApplicationClass) -> bool

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ApplicationClass) -> str

Set: Caption(self: ApplicationClass) = value
"""

    CellDragAndDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CellDragAndDrop(self: ApplicationClass) -> bool

Set: CellDragAndDrop(self: ApplicationClass) = value
"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: ApplicationClass) -> Range

"""

    ChartDataPointTrack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartDataPointTrack(self: ApplicationClass) -> bool

Set: ChartDataPointTrack(self: ApplicationClass) = value
"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: ApplicationClass) -> Sheets

"""

    ClusterConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClusterConnector(self: ApplicationClass) -> str

Set: ClusterConnector(self: ApplicationClass) = value
"""

    ColorButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorButtons(self: ApplicationClass) -> bool

Set: ColorButtons(self: ApplicationClass) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: ApplicationClass) -> Range

"""

    COMAddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: COMAddIns(self: ApplicationClass) -> COMAddIns

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: ApplicationClass) -> CommandBars

"""

    CommandUnderlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandUnderlines(self: ApplicationClass) -> XlCommandUnderlines

Set: CommandUnderlines(self: ApplicationClass) = value
"""

    ConstrainNumeric = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstrainNumeric(self: ApplicationClass) -> bool

Set: ConstrainNumeric(self: ApplicationClass) = value
"""

    ControlCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlCharacters(self: ApplicationClass) -> bool

Set: ControlCharacters(self: ApplicationClass) = value
"""

    CopyObjectsWithCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CopyObjectsWithCells(self: ApplicationClass) -> bool

Set: CopyObjectsWithCells(self: ApplicationClass) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ApplicationClass) -> XlCreator

"""

    Cursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cursor(self: ApplicationClass) -> XlMousePointer

Set: Cursor(self: ApplicationClass) = value
"""

    CursorMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CursorMovement(self: ApplicationClass) -> int

Set: CursorMovement(self: ApplicationClass) = value
"""

    CustomListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomListCount(self: ApplicationClass) -> int

"""

    CutCopyMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CutCopyMode(self: ApplicationClass) -> XlCutCopyMode

Set: CutCopyMode(self: ApplicationClass) = value
"""

    DataEntryMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataEntryMode(self: ApplicationClass) -> int

Set: DataEntryMode(self: ApplicationClass) = value
"""

    DDEAppReturnCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DDEAppReturnCode(self: ApplicationClass) -> int

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: ApplicationClass) -> str

Set: DecimalSeparator(self: ApplicationClass) = value
"""

    DefaultFilePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultFilePath(self: ApplicationClass) -> str

Set: DefaultFilePath(self: ApplicationClass) = value
"""

    DefaultSaveFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSaveFormat(self: ApplicationClass) -> XlFileFormat

Set: DefaultSaveFormat(self: ApplicationClass) = value
"""

    DefaultSheetDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSheetDirection(self: ApplicationClass) -> int

Set: DefaultSheetDirection(self: ApplicationClass) = value
"""

    DefaultWebOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultWebOptions(self: ApplicationClass) -> DefaultWebOptions

"""

    DeferAsyncQueries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DeferAsyncQueries(self: ApplicationClass) -> bool

Set: DeferAsyncQueries(self: ApplicationClass) = value
"""

    Dialogs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dialogs(self: ApplicationClass) -> Dialogs

"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: ApplicationClass) -> Sheets

"""

    DisplayAlerts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAlerts(self: ApplicationClass) -> bool

Set: DisplayAlerts(self: ApplicationClass) = value
"""

    DisplayClipboardWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayClipboardWindow(self: ApplicationClass) -> bool

Set: DisplayClipboardWindow(self: ApplicationClass) = value
"""

    DisplayCommentIndicator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayCommentIndicator(self: ApplicationClass) -> XlCommentDisplayMode

Set: DisplayCommentIndicator(self: ApplicationClass) = value
"""

    DisplayDocumentActionTaskPane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDocumentActionTaskPane(self: ApplicationClass) -> bool

Set: DisplayDocumentActionTaskPane(self: ApplicationClass) = value
"""

    DisplayDocumentInformationPanel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDocumentInformationPanel(self: ApplicationClass) -> bool

Set: DisplayDocumentInformationPanel(self: ApplicationClass) = value
"""

    DisplayExcel4Menus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayExcel4Menus(self: ApplicationClass) -> bool

Set: DisplayExcel4Menus(self: ApplicationClass) = value
"""

    DisplayFormulaAutoComplete = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulaAutoComplete(self: ApplicationClass) -> bool

Set: DisplayFormulaAutoComplete(self: ApplicationClass) = value
"""

    DisplayFormulaBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulaBar(self: ApplicationClass) -> bool

Set: DisplayFormulaBar(self: ApplicationClass) = value
"""

    DisplayFullScreen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFullScreen(self: ApplicationClass) -> bool

Set: DisplayFullScreen(self: ApplicationClass) = value
"""

    DisplayFunctionToolTips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFunctionToolTips(self: ApplicationClass) -> bool

Set: DisplayFunctionToolTips(self: ApplicationClass) = value
"""

    DisplayInfoWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInfoWindow(self: ApplicationClass) -> bool

Set: DisplayInfoWindow(self: ApplicationClass) = value
"""

    DisplayInsertOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInsertOptions(self: ApplicationClass) -> bool

Set: DisplayInsertOptions(self: ApplicationClass) = value
"""

    DisplayNoteIndicator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayNoteIndicator(self: ApplicationClass) -> bool

Set: DisplayNoteIndicator(self: ApplicationClass) = value
"""

    DisplayPasteOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPasteOptions(self: ApplicationClass) -> bool

Set: DisplayPasteOptions(self: ApplicationClass) = value
"""

    DisplayRecentFiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRecentFiles(self: ApplicationClass) -> bool

Set: DisplayRecentFiles(self: ApplicationClass) = value
"""

    DisplayScrollBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayScrollBars(self: ApplicationClass) -> bool

Set: DisplayScrollBars(self: ApplicationClass) = value
"""

    DisplayStatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayStatusBar(self: ApplicationClass) -> bool

Set: DisplayStatusBar(self: ApplicationClass) = value
"""

    Dummy101 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy101(self: ApplicationClass) -> object

"""

    Dummy22 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy22(self: ApplicationClass) -> bool

Set: Dummy22(self: ApplicationClass) = value
"""

    Dummy23 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy23(self: ApplicationClass) -> bool

Set: Dummy23(self: ApplicationClass) = value
"""

    EditDirectlyInCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditDirectlyInCell(self: ApplicationClass) -> bool

Set: EditDirectlyInCell(self: ApplicationClass) = value
"""

    EnableAnimations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAnimations(self: ApplicationClass) -> bool

Set: EnableAnimations(self: ApplicationClass) = value
"""

    EnableAutoComplete = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoComplete(self: ApplicationClass) -> bool

Set: EnableAutoComplete(self: ApplicationClass) = value
"""

    EnableCancelKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCancelKey(self: ApplicationClass) -> XlEnableCancelKey

Set: EnableCancelKey(self: ApplicationClass) = value
"""

    EnableCheckFileExtensions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCheckFileExtensions(self: ApplicationClass) -> bool

Set: EnableCheckFileExtensions(self: ApplicationClass) = value
"""

    EnableEvents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEvents(self: ApplicationClass) -> bool

Set: EnableEvents(self: ApplicationClass) = value
"""

    EnableLargeOperationAlert = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLargeOperationAlert(self: ApplicationClass) -> bool

Set: EnableLargeOperationAlert(self: ApplicationClass) = value
"""

    EnableLivePreview = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLivePreview(self: ApplicationClass) -> bool

Set: EnableLivePreview(self: ApplicationClass) = value
"""

    EnableMacroAnimations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableMacroAnimations(self: ApplicationClass) -> bool

Set: EnableMacroAnimations(self: ApplicationClass) = value
"""

    EnableSound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSound(self: ApplicationClass) -> bool

Set: EnableSound(self: ApplicationClass) = value
"""

    EnableTipWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableTipWizard(self: ApplicationClass) -> bool

Set: EnableTipWizard(self: ApplicationClass) = value
"""

    ErrorCheckingOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorCheckingOptions(self: ApplicationClass) -> ErrorCheckingOptions

"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: ApplicationClass) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: ApplicationClass) -> Sheets

"""

    ExtendList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtendList(self: ApplicationClass) -> bool

Set: ExtendList(self: ApplicationClass) = value
"""

    FeatureInstall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FeatureInstall(self: ApplicationClass) -> MsoFeatureInstall

Set: FeatureInstall(self: ApplicationClass) = value
"""

    FileExportConverters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileExportConverters(self: ApplicationClass) -> FileExportConverters

"""

    FileFind = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFind(self: ApplicationClass) -> IFind

"""

    FileSearch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileSearch(self: ApplicationClass) -> FileSearch

"""

    FileValidation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileValidation(self: ApplicationClass) -> MsoFileValidationMode

Set: FileValidation(self: ApplicationClass) = value
"""

    FileValidationPivot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileValidationPivot(self: ApplicationClass) -> XlFileValidationPivotMode

Set: FileValidationPivot(self: ApplicationClass) = value
"""

    FindFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FindFormat(self: ApplicationClass) -> CellFormat

Set: FindFormat(self: ApplicationClass) = value
"""

    FixedDecimal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FixedDecimal(self: ApplicationClass) -> bool

Set: FixedDecimal(self: ApplicationClass) = value
"""

    FixedDecimalPlaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FixedDecimalPlaces(self: ApplicationClass) -> int

Set: FixedDecimalPlaces(self: ApplicationClass) = value
"""

    FlashFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlashFill(self: ApplicationClass) -> bool

Set: FlashFill(self: ApplicationClass) = value
"""

    FlashFillMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlashFillMode(self: ApplicationClass) -> bool

Set: FlashFillMode(self: ApplicationClass) = value
"""

    FormulaBarHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaBarHeight(self: ApplicationClass) -> int

Set: FormulaBarHeight(self: ApplicationClass) = value
"""

    GenerateGetPivotData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerateGetPivotData(self: ApplicationClass) -> bool

Set: GenerateGetPivotData(self: ApplicationClass) = value
"""

    GenerateTableRefs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerateTableRefs(self: ApplicationClass) -> XlGenerateTableRefs

Set: GenerateTableRefs(self: ApplicationClass) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ApplicationClass) -> float

Set: Height(self: ApplicationClass) = value
"""

    HighQualityModeForGraphics = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HighQualityModeForGraphics(self: ApplicationClass) -> bool

Set: HighQualityModeForGraphics(self: ApplicationClass) = value
"""

    Hinstance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hinstance(self: ApplicationClass) -> int

"""

    HinstancePtr = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HinstancePtr(self: ApplicationClass) -> object

"""

    Hwnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hwnd(self: ApplicationClass) -> int

"""

    IgnoreRemoteRequests = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreRemoteRequests(self: ApplicationClass) -> bool

Set: IgnoreRemoteRequests(self: ApplicationClass) = value
"""

    Interactive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interactive(self: ApplicationClass) -> bool

Set: Interactive(self: ApplicationClass) = value
"""

    IsSandboxed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsSandboxed(self: ApplicationClass) -> bool

"""

    Iteration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Iteration(self: ApplicationClass) -> bool

Set: Iteration(self: ApplicationClass) = value
"""

    LanguageSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LanguageSettings(self: ApplicationClass) -> LanguageSettings

"""

    LargeButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeButtons(self: ApplicationClass) -> bool

Set: LargeButtons(self: ApplicationClass) = value
"""

    LargeOperationCellThousandCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeOperationCellThousandCount(self: ApplicationClass) -> int

Set: LargeOperationCellThousandCount(self: ApplicationClass) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ApplicationClass) -> float

Set: Left(self: ApplicationClass) = value
"""

    LibraryPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LibraryPath(self: ApplicationClass) -> str

"""

    MailSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailSession(self: ApplicationClass) -> object

"""

    MailSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailSystem(self: ApplicationClass) -> XlMailSystem

"""

    MapPaperSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MapPaperSize(self: ApplicationClass) -> bool

Set: MapPaperSize(self: ApplicationClass) = value
"""

    MathCoprocessorAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MathCoprocessorAvailable(self: ApplicationClass) -> bool

"""

    MaxChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxChange(self: ApplicationClass) -> float

Set: MaxChange(self: ApplicationClass) = value
"""

    MaxIterations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxIterations(self: ApplicationClass) -> int

Set: MaxIterations(self: ApplicationClass) = value
"""

    MeasurementUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasurementUnit(self: ApplicationClass) -> int

Set: MeasurementUnit(self: ApplicationClass) = value
"""

    MemoryFree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryFree(self: ApplicationClass) -> int

"""

    MemoryTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryTotal(self: ApplicationClass) -> int

"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: ApplicationClass) -> int

"""

    MenuBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuBars(self: ApplicationClass) -> MenuBars

"""

    MergeInstances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeInstances(self: ApplicationClass) -> bool

Set: MergeInstances(self: ApplicationClass) = value
"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: ApplicationClass) -> Modules

"""

    MouseAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MouseAvailable(self: ApplicationClass) -> bool

"""

    MoveAfterReturn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MoveAfterReturn(self: ApplicationClass) -> bool

Set: MoveAfterReturn(self: ApplicationClass) = value
"""

    MoveAfterReturnDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MoveAfterReturnDirection(self: ApplicationClass) -> XlDirection

Set: MoveAfterReturnDirection(self: ApplicationClass) = value
"""

    MultiThreadedCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiThreadedCalculation(self: ApplicationClass) -> MultiThreadedCalculation

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ApplicationClass) -> str

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: ApplicationClass) -> Names

"""

    NetworkTemplatesPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NetworkTemplatesPath(self: ApplicationClass) -> str

"""

    NewWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NewWorkbook(self: ApplicationClass) -> NewFile

"""

    ODBCErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCErrors(self: ApplicationClass) -> ODBCErrors

"""

    ODBCTimeout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCTimeout(self: ApplicationClass) -> int

Set: ODBCTimeout(self: ApplicationClass) = value
"""

    OLEDBErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEDBErrors(self: ApplicationClass) -> OLEDBErrors

"""

    OnCalculate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnCalculate(self: ApplicationClass) -> str

Set: OnCalculate(self: ApplicationClass) = value
"""

    OnData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnData(self: ApplicationClass) -> str

Set: OnData(self: ApplicationClass) = value
"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: ApplicationClass) -> str

Set: OnDoubleClick(self: ApplicationClass) = value
"""

    OnEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnEntry(self: ApplicationClass) -> str

Set: OnEntry(self: ApplicationClass) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: ApplicationClass) -> str

Set: OnSheetActivate(self: ApplicationClass) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: ApplicationClass) -> str

Set: OnSheetDeactivate(self: ApplicationClass) = value
"""

    OnWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnWindow(self: ApplicationClass) -> str

Set: OnWindow(self: ApplicationClass) = value
"""

    OperatingSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OperatingSystem(self: ApplicationClass) -> str

"""

    OrganizationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrganizationName(self: ApplicationClass) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ApplicationClass) -> Application

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: ApplicationClass) -> str

"""

    PathSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PathSeparator(self: ApplicationClass) -> str

"""

    PivotTableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTableSelection(self: ApplicationClass) -> bool

Set: PivotTableSelection(self: ApplicationClass) = value
"""

    PrintCommunication = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintCommunication(self: ApplicationClass) -> bool

Set: PrintCommunication(self: ApplicationClass) = value
"""

    ProductCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductCode(self: ApplicationClass) -> str

"""

    PromptForSummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptForSummaryInfo(self: ApplicationClass) -> bool

Set: PromptForSummaryInfo(self: ApplicationClass) = value
"""

    ProtectedViewWindows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectedViewWindows(self: ApplicationClass) -> ProtectedViewWindows

"""

    QuickAnalysis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QuickAnalysis(self: ApplicationClass) -> QuickAnalysis

"""

    Quitting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Quitting(self: ApplicationClass) -> bool

"""

    Ready = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ready(self: ApplicationClass) -> bool

"""

    RecentFiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecentFiles(self: ApplicationClass) -> RecentFiles

"""

    RecordRelative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordRelative(self: ApplicationClass) -> bool

"""

    ReferenceStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReferenceStyle(self: ApplicationClass) -> XlReferenceStyle

Set: ReferenceStyle(self: ApplicationClass) = value
"""

    ReplaceFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReplaceFormat(self: ApplicationClass) -> CellFormat

Set: ReplaceFormat(self: ApplicationClass) = value
"""

    RollZoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RollZoom(self: ApplicationClass) -> bool

Set: RollZoom(self: ApplicationClass) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: ApplicationClass) -> Range

"""

    RTD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RTD(self: ApplicationClass) -> RTD

"""

    SaveISO8601Dates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveISO8601Dates(self: ApplicationClass) -> bool

Set: SaveISO8601Dates(self: ApplicationClass) = value
"""

    ScreenUpdating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenUpdating(self: ApplicationClass) -> bool

Set: ScreenUpdating(self: ApplicationClass) = value
"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: ApplicationClass) -> object

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: ApplicationClass) -> Sheets

"""

    SheetsInNewWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetsInNewWorkbook(self: ApplicationClass) -> int

Set: SheetsInNewWorkbook(self: ApplicationClass) = value
"""

    ShowChartTipNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowChartTipNames(self: ApplicationClass) -> bool

Set: ShowChartTipNames(self: ApplicationClass) = value
"""

    ShowChartTipValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowChartTipValues(self: ApplicationClass) -> bool

Set: ShowChartTipValues(self: ApplicationClass) = value
"""

    ShowDevTools = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDevTools(self: ApplicationClass) -> bool

Set: ShowDevTools(self: ApplicationClass) = value
"""

    ShowMenuFloaties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowMenuFloaties(self: ApplicationClass) -> bool

Set: ShowMenuFloaties(self: ApplicationClass) = value
"""

    ShowQuickAnalysis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowQuickAnalysis(self: ApplicationClass) -> bool

Set: ShowQuickAnalysis(self: ApplicationClass) = value
"""

    ShowSelectionFloaties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSelectionFloaties(self: ApplicationClass) -> bool

Set: ShowSelectionFloaties(self: ApplicationClass) = value
"""

    ShowStartupDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowStartupDialog(self: ApplicationClass) -> bool

Set: ShowStartupDialog(self: ApplicationClass) = value
"""

    ShowToolTips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowToolTips(self: ApplicationClass) -> bool

Set: ShowToolTips(self: ApplicationClass) = value
"""

    ShowWindowsInTaskbar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowWindowsInTaskbar(self: ApplicationClass) -> bool

Set: ShowWindowsInTaskbar(self: ApplicationClass) = value
"""

    SmartArtColors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtColors(self: ApplicationClass) -> SmartArtColors

"""

    SmartArtLayouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtLayouts(self: ApplicationClass) -> SmartArtLayouts

"""

    SmartArtQuickStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArtQuickStyles(self: ApplicationClass) -> SmartArtQuickStyles

"""

    SmartTagRecognizers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagRecognizers(self: ApplicationClass) -> SmartTagRecognizers

"""

    Speech = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Speech(self: ApplicationClass) -> Speech

"""

    SpellingOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpellingOptions(self: ApplicationClass) -> SpellingOptions

"""

    StandardFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFont(self: ApplicationClass) -> str

Set: StandardFont(self: ApplicationClass) = value
"""

    StandardFontSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFontSize(self: ApplicationClass) -> float

Set: StandardFontSize(self: ApplicationClass) = value
"""

    StartupPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartupPath(self: ApplicationClass) -> str

"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: ApplicationClass) -> object

Set: StatusBar(self: ApplicationClass) = value
"""

    TemplatesPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplatesPath(self: ApplicationClass) -> str

"""

    ThisCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisCell(self: ApplicationClass) -> Range

"""

    ThisWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisWorkbook(self: ApplicationClass) -> Workbook

"""

    ThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThousandsSeparator(self: ApplicationClass) -> str

Set: ThousandsSeparator(self: ApplicationClass) = value
"""

    Toolbars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Toolbars(self: ApplicationClass) -> Toolbars

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ApplicationClass) -> float

Set: Top(self: ApplicationClass) = value
"""

    TransitionMenuKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionMenuKey(self: ApplicationClass) -> str

Set: TransitionMenuKey(self: ApplicationClass) = value
"""

    TransitionMenuKeyAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionMenuKeyAction(self: ApplicationClass) -> int

Set: TransitionMenuKeyAction(self: ApplicationClass) = value
"""

    TransitionNavigKeys = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionNavigKeys(self: ApplicationClass) -> bool

Set: TransitionNavigKeys(self: ApplicationClass) = value
"""

    UILanguage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UILanguage(self: ApplicationClass) -> int

Set: UILanguage(self: ApplicationClass) = value
"""

    UsableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableHeight(self: ApplicationClass) -> float

"""

    UsableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableWidth(self: ApplicationClass) -> float

"""

    UseClusterConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseClusterConnector(self: ApplicationClass) -> bool

Set: UseClusterConnector(self: ApplicationClass) = value
"""

    UsedObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsedObjects(self: ApplicationClass) -> UsedObjects

"""

    UserControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserControl(self: ApplicationClass) -> bool

Set: UserControl(self: ApplicationClass) = value
"""

    UserLibraryPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserLibraryPath(self: ApplicationClass) -> str

"""

    UserName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserName(self: ApplicationClass) -> str

Set: UserName(self: ApplicationClass) = value
"""

    UseSystemSeparators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseSystemSeparators(self: ApplicationClass) -> bool

Set: UseSystemSeparators(self: ApplicationClass) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ApplicationClass) -> str

"""

    VBE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBE(self: ApplicationClass) -> VBE

"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: ApplicationClass) -> str

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ApplicationClass) -> bool

Set: Visible(self: ApplicationClass) = value
"""

    WarnOnFunctionNameConflict = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WarnOnFunctionNameConflict(self: ApplicationClass) -> bool

Set: WarnOnFunctionNameConflict(self: ApplicationClass) = value
"""

    Watches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Watches(self: ApplicationClass) -> Watches

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ApplicationClass) -> float

Set: Width(self: ApplicationClass) = value
"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: ApplicationClass) -> Windows

"""

    WindowsForPens = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowsForPens(self: ApplicationClass) -> bool

"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: ApplicationClass) -> XlWindowState

Set: WindowState(self: ApplicationClass) = value
"""

    Workbooks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbooks(self: ApplicationClass) -> Workbooks

"""

    WorksheetFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetFunction(self: ApplicationClass) -> WorksheetFunction

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: ApplicationClass) -> Sheets

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ApplicationClass) -> str

"""


    AfterCalculate = None
    AppEvents_Event_NewWorkbook = None
    ProtectedViewWindowActivate = None
    ProtectedViewWindowBeforeClose = None
    ProtectedViewWindowBeforeEdit = None
    ProtectedViewWindowDeactivate = None
    ProtectedViewWindowOpen = None
    ProtectedViewWindowResize = None
    SheetActivate = None
    SheetBeforeDelete = None
    SheetBeforeDoubleClick = None
    SheetBeforeRightClick = None
    SheetCalculate = None
    SheetChange = None
    SheetDeactivate = None
    SheetFollowHyperlink = None
    SheetLensGalleryRenderComplete = None
    SheetPivotTableAfterValueChange = None
    SheetPivotTableBeforeAllocateChanges = None
    SheetPivotTableBeforeCommitChanges = None
    SheetPivotTableBeforeDiscardChanges = None
    SheetPivotTableUpdate = None
    SheetSelectionChange = None
    SheetTableUpdate = None
    WindowActivate = None
    WindowDeactivate = None
    WindowResize = None
    WorkbookActivate = None
    WorkbookAddinInstall = None
    WorkbookAddinUninstall = None
    WorkbookAfterSave = None
    WorkbookAfterXmlExport = None
    WorkbookAfterXmlImport = None
    WorkbookBeforeClose = None
    WorkbookBeforePrint = None
    WorkbookBeforeSave = None
    WorkbookBeforeXmlExport = None
    WorkbookBeforeXmlImport = None
    WorkbookDeactivate = None
    WorkbookModelChange = None
    WorkbookNewChart = None
    WorkbookNewSheet = None
    WorkbookOpen = None
    WorkbookPivotTableCloseConnection = None
    WorkbookPivotTableOpenConnection = None
    WorkbookRowsetComplete = None
    WorkbookSync = None


class Arc:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Arc) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Arc, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Arc) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Arc, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Arc) -> object """
        pass

    def Delete(self):
        """ Delete(self: Arc) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Arc) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Arc, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Arc) -> object """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: Arc) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Arc) -> bool

Set: AddIndent(self: Arc) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Arc) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Arc) -> object

Set: AutoScaleFont(self: Arc) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Arc) -> bool

Set: AutoSize(self: Arc) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Arc) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Arc) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Arc) -> str

Set: Caption(self: Arc) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Arc) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Arc) -> bool

Set: Enabled(self: Arc) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Arc) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Arc) -> str

Set: Formula(self: Arc) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Arc) -> float

Set: Height(self: Arc) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Arc) -> object

Set: HorizontalAlignment(self: Arc) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Arc) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Arc) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Arc) -> float

Set: Left(self: Arc) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Arc) -> bool

Set: Locked(self: Arc) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Arc) -> bool

Set: LockedText(self: Arc) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Arc) -> str

Set: Name(self: Arc) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Arc) -> str

Set: OnAction(self: Arc) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Arc) -> object

Set: Orientation(self: Arc) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Arc) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Arc) -> object

Set: Placement(self: Arc) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Arc) -> bool

Set: PrintObject(self: Arc) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Arc) -> int

Set: ReadingOrder(self: Arc) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Arc) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Arc) -> str

Set: Text(self: Arc) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Arc) -> float

Set: Top(self: Arc) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Arc) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Arc) -> object

Set: VerticalAlignment(self: Arc) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Arc) -> bool

Set: Visible(self: Arc) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Arc) -> float

Set: Width(self: Arc) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Arc) -> int

"""



class Arcs(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2):
        """ Add(self: Arcs, X1: float, Y1: float, X2: float, Y2: float) -> Arc """
        pass

    def BringToFront(self):
        """ BringToFront(self: Arcs) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Arcs, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Arcs) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Arcs, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Arcs) -> object """
        pass

    def Delete(self):
        """ Delete(self: Arcs) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Arcs) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Arcs) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Arcs) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Arcs, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Arcs, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Arcs) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Arcs) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Arcs) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Arcs) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Arcs) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: Arcs) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Arcs) -> bool

Set: AddIndent(self: Arcs) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Arcs) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Arcs) -> object

Set: AutoScaleFont(self: Arcs) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Arcs) -> bool

Set: AutoSize(self: Arcs) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Arcs) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Arcs) -> str

Set: Caption(self: Arcs) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Arcs) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Arcs) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Arcs) -> bool

Set: Enabled(self: Arcs) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Arcs) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Arcs) -> str

Set: Formula(self: Arcs) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Arcs) -> float

Set: Height(self: Arcs) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Arcs) -> object

Set: HorizontalAlignment(self: Arcs) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Arcs) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Arcs) -> float

Set: Left(self: Arcs) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Arcs) -> bool

Set: Locked(self: Arcs) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Arcs) -> bool

Set: LockedText(self: Arcs) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Arcs) -> str

Set: OnAction(self: Arcs) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Arcs) -> object

Set: Orientation(self: Arcs) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Arcs) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Arcs) -> object

Set: Placement(self: Arcs) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Arcs) -> bool

Set: PrintObject(self: Arcs) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Arcs) -> int

Set: ReadingOrder(self: Arcs) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Arcs) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Arcs) -> str

Set: Text(self: Arcs) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Arcs) -> float

Set: Top(self: Arcs) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Arcs) -> object

Set: VerticalAlignment(self: Arcs) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Arcs) -> bool

Set: Visible(self: Arcs) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Arcs) -> float

Set: Width(self: Arcs) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Arcs) -> int

"""



class Areas(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Areas) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Areas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Areas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Areas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Areas) -> object

"""



class AutoCorrect:
    # no doc
    def AddReplacement(self, What, Replacement):
        """ AddReplacement(self: AutoCorrect, What: str, Replacement: str) -> object """
        pass

    def DeleteReplacement(self, What):
        """ DeleteReplacement(self: AutoCorrect, What: str) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AutoCorrect) -> Application

"""

    AutoExpandListRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoExpandListRange(self: AutoCorrect) -> bool

Set: AutoExpandListRange(self: AutoCorrect) = value
"""

    AutoFillFormulasInLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFillFormulasInLists(self: AutoCorrect) -> bool

Set: AutoFillFormulasInLists(self: AutoCorrect) = value
"""

    CapitalizeNamesOfDays = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CapitalizeNamesOfDays(self: AutoCorrect) -> bool

Set: CapitalizeNamesOfDays(self: AutoCorrect) = value
"""

    CorrectCapsLock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CorrectCapsLock(self: AutoCorrect) -> bool

Set: CorrectCapsLock(self: AutoCorrect) = value
"""

    CorrectSentenceCap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CorrectSentenceCap(self: AutoCorrect) -> bool

Set: CorrectSentenceCap(self: AutoCorrect) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AutoCorrect) -> XlCreator

"""

    DisplayAutoCorrectOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutoCorrectOptions(self: AutoCorrect) -> bool

Set: DisplayAutoCorrectOptions(self: AutoCorrect) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AutoCorrect) -> object

"""

    ReplaceText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReplaceText(self: AutoCorrect) -> bool

Set: ReplaceText(self: AutoCorrect) = value
"""

    TwoInitialCapitals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TwoInitialCapitals(self: AutoCorrect) -> bool

Set: TwoInitialCapitals(self: AutoCorrect) = value
"""



class AutoFilter:
    # no doc
    def ApplyFilter(self):
        """ ApplyFilter(self: AutoFilter) """
        pass

    def ShowAllData(self):
        """ ShowAllData(self: AutoFilter) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AutoFilter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AutoFilter) -> XlCreator

"""

    FilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterMode(self: AutoFilter) -> bool

"""

    Filters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Filters(self: AutoFilter) -> Filters

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AutoFilter) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: AutoFilter) -> Range

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: AutoFilter) -> Sort

"""



class AutoRecover:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AutoRecover) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AutoRecover) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: AutoRecover) -> bool

Set: Enabled(self: AutoRecover) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AutoRecover) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AutoRecover) -> str

Set: Path(self: AutoRecover) = value
"""

    Time = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Time(self: AutoRecover) -> int

Set: Time(self: AutoRecover) = value
"""



class Axes(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Axes) -> IEnumerator """
        pass

    def Item(self, Type, AxisGroup):
        """ Item(self: Axes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        pass

    def _Default(self, Type, AxisGroup):
        """ _Default(self: Axes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Axes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Axes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Axes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Axes) -> object

"""



class Axis:
    # no doc
    def Delete(self):
        """ Delete(self: Axis) -> object """
        pass

    def Select(self):
        """ Select(self: Axis) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Axis) -> Application

"""

    AxisBetweenCategories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisBetweenCategories(self: Axis) -> bool

Set: AxisBetweenCategories(self: Axis) = value
"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: Axis) -> XlAxisGroup

"""

    AxisTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisTitle(self: Axis) -> AxisTitle

"""

    BaseUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseUnit(self: Axis) -> XlTimeUnit

Set: BaseUnit(self: Axis) = value
"""

    BaseUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseUnitIsAuto(self: Axis) -> bool

Set: BaseUnitIsAuto(self: Axis) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Axis) -> Border

"""

    CategoryNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryNames(self: Axis) -> object

Set: CategoryNames(self: Axis) = value
"""

    CategoryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryType(self: Axis) -> XlCategoryType

Set: CategoryType(self: Axis) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Axis) -> XlCreator

"""

    Crosses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Crosses(self: Axis) -> XlAxisCrosses

Set: Crosses(self: Axis) = value
"""

    CrossesAt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossesAt(self: Axis) -> float

Set: CrossesAt(self: Axis) = value
"""

    DisplayUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnit(self: Axis) -> XlDisplayUnit

Set: DisplayUnit(self: Axis) = value
"""

    DisplayUnitCustom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnitCustom(self: Axis) -> float

Set: DisplayUnitCustom(self: Axis) = value
"""

    DisplayUnitLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnitLabel(self: Axis) -> DisplayUnitLabel

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Axis) -> ChartFormat

"""

    HasDisplayUnitLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDisplayUnitLabel(self: Axis) -> bool

Set: HasDisplayUnitLabel(self: Axis) = value
"""

    HasMajorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMajorGridlines(self: Axis) -> bool

Set: HasMajorGridlines(self: Axis) = value
"""

    HasMinorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMinorGridlines(self: Axis) -> bool

Set: HasMinorGridlines(self: Axis) = value
"""

    HasTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasTitle(self: Axis) -> bool

Set: HasTitle(self: Axis) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Axis) -> float

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Axis) -> float

"""

    LogBase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LogBase(self: Axis) -> float

Set: LogBase(self: Axis) = value
"""

    MajorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorGridlines(self: Axis) -> Gridlines

"""

    MajorTickMark = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorTickMark(self: Axis) -> XlTickMark

Set: MajorTickMark(self: Axis) = value
"""

    MajorUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnit(self: Axis) -> float

Set: MajorUnit(self: Axis) = value
"""

    MajorUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnitIsAuto(self: Axis) -> bool

Set: MajorUnitIsAuto(self: Axis) = value
"""

    MajorUnitScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnitScale(self: Axis) -> XlTimeUnit

Set: MajorUnitScale(self: Axis) = value
"""

    MaximumScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaximumScale(self: Axis) -> float

Set: MaximumScale(self: Axis) = value
"""

    MaximumScaleIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaximumScaleIsAuto(self: Axis) -> bool

Set: MaximumScaleIsAuto(self: Axis) = value
"""

    MinimumScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumScale(self: Axis) -> float

Set: MinimumScale(self: Axis) = value
"""

    MinimumScaleIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumScaleIsAuto(self: Axis) -> bool

Set: MinimumScaleIsAuto(self: Axis) = value
"""

    MinorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorGridlines(self: Axis) -> Gridlines

"""

    MinorTickMark = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorTickMark(self: Axis) -> XlTickMark

Set: MinorTickMark(self: Axis) = value
"""

    MinorUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnit(self: Axis) -> float

Set: MinorUnit(self: Axis) = value
"""

    MinorUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnitIsAuto(self: Axis) -> bool

Set: MinorUnitIsAuto(self: Axis) = value
"""

    MinorUnitScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnitScale(self: Axis) -> XlTimeUnit

Set: MinorUnitScale(self: Axis) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Axis) -> object

"""

    ReversePlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReversePlotOrder(self: Axis) -> bool

Set: ReversePlotOrder(self: Axis) = value
"""

    ScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleType(self: Axis) -> XlScaleType

Set: ScaleType(self: Axis) = value
"""

    TickLabelPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelPosition(self: Axis) -> XlTickLabelPosition

Set: TickLabelPosition(self: Axis) = value
"""

    TickLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabels(self: Axis) -> TickLabels

"""

    TickLabelSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelSpacing(self: Axis) -> int

Set: TickLabelSpacing(self: Axis) = value
"""

    TickLabelSpacingIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelSpacingIsAuto(self: Axis) -> bool

Set: TickLabelSpacingIsAuto(self: Axis) = value
"""

    TickMarkSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickMarkSpacing(self: Axis) -> int

Set: TickMarkSpacing(self: Axis) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Axis) -> float

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Axis) -> XlAxisType

Set: Type(self: Axis) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Axis) -> float

"""



class AxisTitle:
    # no doc
    def Delete(self):
        """ Delete(self: AxisTitle) -> object """
        pass

    def Select(self):
        """ Select(self: AxisTitle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AxisTitle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: AxisTitle) -> object

Set: AutoScaleFont(self: AxisTitle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: AxisTitle) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: AxisTitle) -> str

Set: Caption(self: AxisTitle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: AxisTitle) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: AxisTitle) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: AxisTitle) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: AxisTitle) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: AxisTitle) -> str

Set: Formula(self: AxisTitle) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: AxisTitle) -> str

Set: FormulaLocal(self: AxisTitle) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: AxisTitle) -> str

Set: FormulaR1C1(self: AxisTitle) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: AxisTitle) -> str

Set: FormulaR1C1Local(self: AxisTitle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AxisTitle) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: AxisTitle) -> object

Set: HorizontalAlignment(self: AxisTitle) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: AxisTitle) -> bool

Set: IncludeInLayout(self: AxisTitle) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: AxisTitle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: AxisTitle) -> float

Set: Left(self: AxisTitle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AxisTitle) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: AxisTitle) -> object

Set: Orientation(self: AxisTitle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: AxisTitle) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AxisTitle) -> XlChartElementPosition

Set: Position(self: AxisTitle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: AxisTitle) -> int

Set: ReadingOrder(self: AxisTitle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: AxisTitle) -> bool

Set: Shadow(self: AxisTitle) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: AxisTitle) -> str

Set: Text(self: AxisTitle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: AxisTitle) -> float

Set: Top(self: AxisTitle) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: AxisTitle) -> object

Set: VerticalAlignment(self: AxisTitle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AxisTitle) -> float

"""



class Border:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Border) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: Border) -> object

Set: Color(self: Border) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: Border) -> object

Set: ColorIndex(self: Border) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Border) -> XlCreator

"""

    LineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineStyle(self: Border) -> object

Set: LineStyle(self: Border) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Border) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: Border) -> object

Set: ThemeColor(self: Border) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: Border) -> object

Set: TintAndShade(self: Border) = value
"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weight(self: Border) -> object

Set: Weight(self: Border) = value
"""



class Borders(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Borders) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Borders) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: Borders) -> object

Set: Color(self: Borders) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: Borders) -> object

Set: ColorIndex(self: Borders) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Borders) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Borders) -> XlCreator

"""

    LineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineStyle(self: Borders) -> object

Set: LineStyle(self: Borders) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Borders) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: Borders) -> object

Set: ThemeColor(self: Borders) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: Borders) -> object

Set: TintAndShade(self: Borders) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Borders) -> object

Set: Value(self: Borders) = value
"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weight(self: Borders) -> object

Set: Weight(self: Borders) = value
"""



class Button:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Button) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Button, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Button) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Button, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Button) -> object """
        pass

    def Delete(self):
        """ Delete(self: Button) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Button) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Button, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Button) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: Button) -> object

Set: Accelerator(self: Button) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Button) -> bool

Set: AddIndent(self: Button) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Button) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Button) -> object

Set: AutoScaleFont(self: Button) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Button) -> bool

Set: AutoSize(self: Button) = value
"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Button) -> Range

"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: Button) -> bool

Set: CancelButton(self: Button) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Button) -> str

Set: Caption(self: Button) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Button) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: Button) -> bool

Set: DefaultButton(self: Button) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: Button) -> bool

Set: DismissButton(self: Button) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Button) -> bool

Set: Enabled(self: Button) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Button) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Button) -> str

Set: Formula(self: Button) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Button) -> float

Set: Height(self: Button) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: Button) -> bool

Set: HelpButton(self: Button) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Button) -> object

Set: HorizontalAlignment(self: Button) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Button) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Button) -> float

Set: Left(self: Button) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Button) -> bool

Set: Locked(self: Button) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Button) -> bool

Set: LockedText(self: Button) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Button) -> str

Set: Name(self: Button) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Button) -> str

Set: OnAction(self: Button) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Button) -> object

Set: Orientation(self: Button) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Button) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: Button) -> object

Set: PhoneticAccelerator(self: Button) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Button) -> object

Set: Placement(self: Button) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Button) -> bool

Set: PrintObject(self: Button) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Button) -> int

Set: ReadingOrder(self: Button) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Button) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Button) -> str

Set: Text(self: Button) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Button) -> float

Set: Top(self: Button) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Button) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Button) -> object

Set: VerticalAlignment(self: Button) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Button) -> bool

Set: Visible(self: Button) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Button) -> float

Set: Width(self: Button) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Button) -> int

"""



class Buttons(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Buttons, Left: float, Top: float, Width: float, Height: float) -> Button """
        pass

    def BringToFront(self):
        """ BringToFront(self: Buttons) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Buttons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Buttons) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Buttons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Buttons) -> object """
        pass

    def Delete(self):
        """ Delete(self: Buttons) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Buttons) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Buttons) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Buttons) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Buttons, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Buttons, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Buttons) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Buttons) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Buttons) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Buttons) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Buttons) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: Buttons) -> object

Set: Accelerator(self: Buttons) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Buttons) -> bool

Set: AddIndent(self: Buttons) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Buttons) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Buttons) -> object

Set: AutoScaleFont(self: Buttons) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Buttons) -> bool

Set: AutoSize(self: Buttons) = value
"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: Buttons) -> bool

Set: CancelButton(self: Buttons) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Buttons) -> str

Set: Caption(self: Buttons) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Buttons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Buttons) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: Buttons) -> bool

Set: DefaultButton(self: Buttons) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: Buttons) -> bool

Set: DismissButton(self: Buttons) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Buttons) -> bool

Set: Enabled(self: Buttons) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Buttons) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Buttons) -> str

Set: Formula(self: Buttons) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Buttons) -> float

Set: Height(self: Buttons) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: Buttons) -> bool

Set: HelpButton(self: Buttons) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Buttons) -> object

Set: HorizontalAlignment(self: Buttons) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Buttons) -> float

Set: Left(self: Buttons) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Buttons) -> bool

Set: Locked(self: Buttons) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Buttons) -> bool

Set: LockedText(self: Buttons) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Buttons) -> str

Set: OnAction(self: Buttons) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Buttons) -> object

Set: Orientation(self: Buttons) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Buttons) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: Buttons) -> object

Set: PhoneticAccelerator(self: Buttons) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Buttons) -> object

Set: Placement(self: Buttons) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Buttons) -> bool

Set: PrintObject(self: Buttons) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Buttons) -> int

Set: ReadingOrder(self: Buttons) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Buttons) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Buttons) -> str

Set: Text(self: Buttons) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Buttons) -> float

Set: Top(self: Buttons) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Buttons) -> object

Set: VerticalAlignment(self: Buttons) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Buttons) -> bool

Set: Visible(self: Buttons) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Buttons) -> float

Set: Width(self: Buttons) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Buttons) -> int

"""



class CalculatedFields(IEnumerable):
    # no doc
    def Add(self, Name, Formula, UseStandardFormula):
        """ Add(self: CalculatedFields, Name: str, Formula: str, UseStandardFormula: object) -> PivotField """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CalculatedFields) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: CalculatedFields, Index: object) -> PivotField """
        pass

    def _Add(self, Name, Formula):
        """ _Add(self: CalculatedFields, Name: str, Formula: str) -> PivotField """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CalculatedFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CalculatedFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CalculatedFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CalculatedFields) -> object

"""



class CalculatedItems(IEnumerable):
    # no doc
    def Add(self, Name, Formula, UseStandardFormula):
        """ Add(self: CalculatedItems, Name: str, Formula: str, UseStandardFormula: object) -> PivotItem """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CalculatedItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: CalculatedItems, Index: object) -> PivotItem """
        pass

    def _Add(self, Name, Formula):
        """ _Add(self: CalculatedItems, Name: str, Formula: str) -> PivotItem """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CalculatedItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CalculatedItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CalculatedItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CalculatedItems) -> object

"""



class CalculatedMember:
    # no doc
    def Delete(self):
        """ Delete(self: CalculatedMember) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CalculatedMember) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CalculatedMember) -> XlCreator

"""

    DisplayFolder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFolder(self: CalculatedMember) -> str

"""

    Dynamic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dynamic(self: CalculatedMember) -> bool

"""

    FlattenHierarchies = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlattenHierarchies(self: CalculatedMember) -> bool

Set: FlattenHierarchies(self: CalculatedMember) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: CalculatedMember) -> str

"""

    HierarchizeDistinct = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HierarchizeDistinct(self: CalculatedMember) -> bool

Set: HierarchizeDistinct(self: CalculatedMember) = value
"""

    IsValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsValid(self: CalculatedMember) -> bool

"""

    MeasureGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasureGroup(self: CalculatedMember) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: CalculatedMember) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: CalculatedMember) -> XlCalcMemNumberFormatType

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CalculatedMember) -> object

"""

    ParentHierarchy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentHierarchy(self: CalculatedMember) -> str

"""

    ParentMember = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentMember(self: CalculatedMember) -> str

"""

    SolveOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolveOrder(self: CalculatedMember) -> int

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: CalculatedMember) -> str

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: CalculatedMember) -> XlCalculatedMemberType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: CalculatedMember) -> str

"""



class CalculatedMembers(IEnumerable):
    # no doc
    def Add(self, Name, Formula, SolveOrder, Type):
        """ Add(self: CalculatedMembers, Name: str, Formula: str, SolveOrder: object, Type: object) -> CalculatedMember """
        pass

    def Add2(self, Name, Formula, SolveOrder, Type, Dynamic, DisplayFolder, HierarchizeDistinct):
        """ Add2(self: CalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, Dynamic: object, DisplayFolder: object, HierarchizeDistinct: object) -> CalculatedMember """
        pass

    def AddCalculatedMember(self, Name, Formula, SolveOrder, Type, DisplayFolder, MeasureGroup, ParentHierarchy, ParentMember, NumberFormat):
        """ AddCalculatedMember(self: CalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, DisplayFolder: object, MeasureGroup: object, ParentHierarchy: object, ParentMember: object, NumberFormat: object) -> CalculatedMember """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CalculatedMembers) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CalculatedMembers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CalculatedMembers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CalculatedMembers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CalculatedMembers) -> object

"""



class CalloutFormat(_IMsoDispObj):
    # no doc
    def AutomaticLength(self):
        """ AutomaticLength(self: CalloutFormat) """
        pass

    def CustomDrop(self, Drop):
        """ CustomDrop(self: CalloutFormat, Drop: Single) """
        pass

    def CustomLength(self, Length):
        """ CustomLength(self: CalloutFormat, Length: Single) """
        pass

    def PresetDrop(self, DropType):
        """ PresetDrop(self: CalloutFormat, DropType: MsoCalloutDropType) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accent(self: CalloutFormat) -> MsoTriState

Set: Accent(self: CalloutFormat) = value
"""

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Angle(self: CalloutFormat) -> MsoCalloutAngleType

Set: Angle(self: CalloutFormat) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CalloutFormat) -> object

"""

    AutoAttach = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoAttach(self: CalloutFormat) -> MsoTriState

Set: AutoAttach(self: CalloutFormat) = value
"""

    AutoLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLength(self: CalloutFormat) -> MsoTriState

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: CalloutFormat) -> MsoTriState

Set: Border(self: CalloutFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CalloutFormat) -> int

"""

    Drop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Drop(self: CalloutFormat) -> Single

"""

    DropType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropType(self: CalloutFormat) -> MsoCalloutDropType

"""

    Gap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Gap(self: CalloutFormat) -> Single

Set: Gap(self: CalloutFormat) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: CalloutFormat) -> Single

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CalloutFormat) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: CalloutFormat) -> MsoCalloutType

Set: Type(self: CalloutFormat) = value
"""



class CategoryCollection:
    # no doc
    def Item(self, Index):
        """ Item(self: CategoryCollection, Index: object) -> ChartCategory """
        pass

    def _Default(self, Index):
        """ _Default(self: CategoryCollection, Index: object) -> ChartCategory """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CategoryCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CategoryCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CategoryCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CategoryCollection) -> object

"""



class CellFormat:
    # no doc
    def Clear(self):
        """ Clear(self: CellFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: CellFormat) -> object

Set: AddIndent(self: CellFormat) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CellFormat) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: CellFormat) -> Borders

Set: Borders(self: CellFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CellFormat) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: CellFormat) -> Font

Set: Font(self: CellFormat) = value
"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: CellFormat) -> object

Set: FormulaHidden(self: CellFormat) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: CellFormat) -> object

Set: HorizontalAlignment(self: CellFormat) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: CellFormat) -> object

Set: IndentLevel(self: CellFormat) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: CellFormat) -> Interior

Set: Interior(self: CellFormat) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: CellFormat) -> object

Set: Locked(self: CellFormat) = value
"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: CellFormat) -> object

Set: MergeCells(self: CellFormat) = value
"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: CellFormat) -> object

Set: NumberFormat(self: CellFormat) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: CellFormat) -> object

Set: NumberFormatLocal(self: CellFormat) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: CellFormat) -> object

Set: Orientation(self: CellFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CellFormat) -> object

"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: CellFormat) -> object

Set: ShrinkToFit(self: CellFormat) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: CellFormat) -> object

Set: VerticalAlignment(self: CellFormat) = value
"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: CellFormat) -> object

Set: WrapText(self: CellFormat) = value
"""



class Characters:
    # no doc
    def Delete(self):
        """ Delete(self: Characters) -> object """
        pass

    def Insert(self, String):
        """ Insert(self: Characters, String: str) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Characters) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Characters) -> str

Set: Caption(self: Characters) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Characters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Characters) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Characters) -> Font

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Characters) -> object

"""

    PhoneticCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticCharacters(self: Characters) -> str

Set: PhoneticCharacters(self: Characters) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Characters) -> str

Set: Text(self: Characters) = value
"""



class ChartEvents_Event:
    # no doc
# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_DragOver: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_DragPlot: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseDown: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseMove: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseUp: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Resize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Select: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SeriesChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_DragOver: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_DragPlot: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseDown: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseMove: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseUp: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Resize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Select: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SeriesChange: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Activate = None
    BeforeDoubleClick = None
    BeforeRightClick = None
    Calculate = None
    Deactivate = None
    DragOver = None
    DragPlot = None
    MouseDown = None
    MouseMove = None
    MouseUp = None
    Resize = None
    Select = None
    SeriesChange = None


class _Chart:
    # no doc
    def Activate(self):
        """ Activate(self: _Chart) """
        pass

    def ApplyChartTemplate(self, Filename):
        """ ApplyChartTemplate(self: _Chart, Filename: str) """
        pass

    def ApplyCustomType(self, ChartType, TypeName):
        """ ApplyCustomType(self: _Chart, ChartType: XlChartType, TypeName: object) """
        pass

    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: _Chart, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) """
        pass

    def ApplyLayout(self, Layout, ChartType):
        """ ApplyLayout(self: _Chart, Layout: int, ChartType: object) """
        pass

    def Arcs(self, Index):
        """ Arcs(self: _Chart, Index: object) -> object """
        pass

    def AreaGroups(self, Index):
        """ AreaGroups(self: _Chart, Index: object) -> object """
        pass

    def AutoFormat(self, Gallery, Format):
        """ AutoFormat(self: _Chart, Gallery: int, Format: object) """
        pass

    def Axes(self, Type, AxisGroup):
        """ Axes(self: _Chart, Type: object, AxisGroup: XlAxisGroup) -> object """
        pass

    def BarGroups(self, Index):
        """ BarGroups(self: _Chart, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: _Chart, Index: object) -> object """
        pass

    def ChartGroups(self, Index):
        """ ChartGroups(self: _Chart, Index: object) -> object """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: _Chart, Index: object) -> object """
        pass

    def ChartWizard(self, Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle):
        """ ChartWizard(self: _Chart, Source: object, Gallery: object, Format: object, PlotBy: object, CategoryLabels: object, SeriesLabels: object, HasLegend: object, Title: object, CategoryTitle: object, ValueTitle: object, ExtraTitle: object) """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: _Chart, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: _Chart, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def ClearToMatchColorStyle(self):
        """ ClearToMatchColorStyle(self: _Chart) """
        pass

    def ClearToMatchStyle(self):
        """ ClearToMatchStyle(self: _Chart) """
        pass

    def ColumnGroups(self, Index):
        """ ColumnGroups(self: _Chart, Index: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: _Chart, Before: object, After: object) """
        pass

    def CopyChartBuild(self):
        """ CopyChartBuild(self: _Chart) """
        pass

    def CopyPicture(self, Appearance, Format, Size):
        """ CopyPicture(self: _Chart, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat, Size: XlPictureAppearance) """
        pass

    def CreatePublisher(self, Edition, Appearance, Size, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU):
        """ CreatePublisher(self: _Chart, Edition: object, Appearance: XlPictureAppearance, Size: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) """
        pass

    def Delete(self):
        """ Delete(self: _Chart) """
        pass

    def DeleteHiddenContent(self):
        """ DeleteHiddenContent(self: _Chart) """
        pass

    def Deselect(self):
        """ Deselect(self: _Chart) """
        pass

    def DoughnutGroups(self, Index):
        """ DoughnutGroups(self: _Chart, Index: object) -> object """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: _Chart, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: _Chart, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: _Chart, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: _Chart, Name: object) -> object """
        pass

    def Export(self, Filename, FilterName, Interactive):
        """ Export(self: _Chart, Filename: str, FilterName: object, Interactive: object) -> bool """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: _Chart, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FullSeriesCollection(self, Index):
        """ FullSeriesCollection(self: _Chart, Index: object) -> object """
        pass

    def GetChartElement(self, x, y, ElementID, Arg1, Arg2):
        """ GetChartElement(self: _Chart, x: int, y: int, ElementID: int, Arg1: int, Arg2: int) -> (int, int, int) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: _Chart, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: _Chart, Index: object) -> object """
        pass

    def Labels(self, Index):
        """ Labels(self: _Chart, Index: object) -> object """
        pass

    def LineGroups(self, Index):
        """ LineGroups(self: _Chart, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: _Chart, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: _Chart, Index: object) -> object """
        pass

    def Location(self, Where, Name):
        """ Location(self: _Chart, Where: XlChartLocation, Name: object) -> Chart """
        pass

    def Move(self, Before, After):
        """ Move(self: _Chart, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: _Chart, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: _Chart, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: _Chart, Index: object) -> object """
        pass

    def Paste(self, Type):
        """ Paste(self: _Chart, Type: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: _Chart, Index: object) -> object """
        pass

    def PieGroups(self, Index):
        """ PieGroups(self: _Chart, Index: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: _Chart, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ Protect(self: _Chart, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def RadarGroups(self, Index):
        """ RadarGroups(self: _Chart, Index: object) -> object """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: _Chart, Index: object) -> object """
        pass

    def Refresh(self):
        """ Refresh(self: _Chart) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: _Chart, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def SaveChartTemplate(self, Filename):
        """ SaveChartTemplate(self: _Chart, Filename: str) """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: _Chart, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: _Chart, Replace: object) """
        pass

    def SeriesCollection(self, Index):
        """ SeriesCollection(self: _Chart, Index: object) -> object """
        pass

    def SetBackgroundPicture(self, Filename):
        """ SetBackgroundPicture(self: _Chart, Filename: str) """
        pass

    def SetDefaultChart(self, Name):
        """ SetDefaultChart(self: _Chart, Name: object) """
        pass

    def SetElement(self, Element):
        """ SetElement(self: _Chart, Element: MsoChartElementType) """
        pass

    def SetSourceData(self, Source, PlotBy):
        """ SetSourceData(self: _Chart, Source: Range, PlotBy: object) """
        pass

    def Spinners(self, Index):
        """ Spinners(self: _Chart, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: _Chart, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: _Chart, Password: object) """
        pass

    def XYGroups(self, Index):
        """ XYGroups(self: _Chart, Index: object) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: _Chart, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: _Chart) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: _Chart, Name: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: _Chart, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: _Chart, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _Chart) -> Application

"""

    Area3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area3DGroup(self: _Chart) -> ChartGroup

"""

    AutoScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaling(self: _Chart) -> bool

Set: AutoScaling(self: _Chart) = value
"""

    BackWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackWall(self: _Chart) -> Walls

"""

    Bar3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bar3DGroup(self: _Chart) -> ChartGroup

"""

    BarShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarShape(self: _Chart) -> XlBarShape

Set: BarShape(self: _Chart) = value
"""

    CategoryLabelLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryLabelLevel(self: _Chart) -> XlCategoryLabelLevel

Set: CategoryLabelLevel(self: _Chart) = value
"""

    ChartArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartArea(self: _Chart) -> ChartArea

"""

    ChartColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartColor(self: _Chart) -> object

Set: ChartColor(self: _Chart) = value
"""

    ChartStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartStyle(self: _Chart) -> object

Set: ChartStyle(self: _Chart) = value
"""

    ChartTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartTitle(self: _Chart) -> ChartTitle

"""

    ChartType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartType(self: _Chart) -> XlChartType

Set: ChartType(self: _Chart) = value
"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: _Chart) -> str

"""

    Column3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Column3DGroup(self: _Chart) -> ChartGroup

"""

    Corners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Corners(self: _Chart) -> Corners

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _Chart) -> XlCreator

"""

    DataTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataTable(self: _Chart) -> DataTable

"""

    DepthPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DepthPercent(self: _Chart) -> int

Set: DepthPercent(self: _Chart) = value
"""

    DisplayBlanksAs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayBlanksAs(self: _Chart) -> XlDisplayBlanksAs

Set: DisplayBlanksAs(self: _Chart) = value
"""

    Dummy24 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy24(self: _Chart) -> bool

Set: Dummy24(self: _Chart) = value
"""

    Dummy25 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy25(self: _Chart) -> bool

Set: Dummy25(self: _Chart) = value
"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: _Chart) -> int

Set: Elevation(self: _Chart) = value
"""

    Floor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Floor(self: _Chart) -> Floor

"""

    GapDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GapDepth(self: _Chart) -> int

Set: GapDepth(self: _Chart) = value
"""

    HasDataTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataTable(self: _Chart) -> bool

Set: HasDataTable(self: _Chart) = value
"""

    HasHiddenContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasHiddenContent(self: _Chart) -> bool

"""

    HasLegend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLegend(self: _Chart) -> bool

Set: HasLegend(self: _Chart) = value
"""

    HasPivotFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasPivotFields(self: _Chart) -> bool

Set: HasPivotFields(self: _Chart) = value
"""

    HasTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasTitle(self: _Chart) -> bool

Set: HasTitle(self: _Chart) = value
"""

    HeightPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeightPercent(self: _Chart) -> int

Set: HeightPercent(self: _Chart) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: _Chart) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: _Chart) -> int

"""

    Legend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Legend(self: _Chart) -> Legend

"""

    Line3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line3DGroup(self: _Chart) -> ChartGroup

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: _Chart) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _Chart) -> str

Set: Name(self: _Chart) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: _Chart) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: _Chart) -> str

Set: OnDoubleClick(self: _Chart) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: _Chart) -> str

Set: OnSheetActivate(self: _Chart) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: _Chart) -> str

Set: OnSheetDeactivate(self: _Chart) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: _Chart) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _Chart) -> object

"""

    Perspective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Perspective(self: _Chart) -> int

Set: Perspective(self: _Chart) = value
"""

    Pie3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pie3DGroup(self: _Chart) -> ChartGroup

"""

    PivotLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLayout(self: _Chart) -> PivotLayout

"""

    PlotArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotArea(self: _Chart) -> PlotArea

"""

    PlotBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotBy(self: _Chart) -> XlRowCol

Set: PlotBy(self: _Chart) = value
"""

    PlotVisibleOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotVisibleOnly(self: _Chart) -> bool

Set: PlotVisibleOnly(self: _Chart) = value
"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: _Chart) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: _Chart) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: _Chart) -> bool

"""

    ProtectData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectData(self: _Chart) -> bool

Set: ProtectData(self: _Chart) = value
"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: _Chart) -> bool

"""

    ProtectFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectFormatting(self: _Chart) -> bool

Set: ProtectFormatting(self: _Chart) = value
"""

    ProtectGoalSeek = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectGoalSeek(self: _Chart) -> bool

Set: ProtectGoalSeek(self: _Chart) = value
"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: _Chart) -> bool

"""

    ProtectSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectSelection(self: _Chart) -> bool

Set: ProtectSelection(self: _Chart) = value
"""

    RightAngleAxes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightAngleAxes(self: _Chart) -> object

Set: RightAngleAxes(self: _Chart) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: _Chart) -> object

Set: Rotation(self: _Chart) = value
"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: _Chart) -> Scripts

"""

    SeriesNameLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesNameLevel(self: _Chart) -> XlSeriesNameLevel

Set: SeriesNameLevel(self: _Chart) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: _Chart) -> Shapes

"""

    ShowAllFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllFieldButtons(self: _Chart) -> bool

Set: ShowAllFieldButtons(self: _Chart) = value
"""

    ShowAxisFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAxisFieldButtons(self: _Chart) -> bool

Set: ShowAxisFieldButtons(self: _Chart) = value
"""

    ShowDataLabelsOverMaximum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDataLabelsOverMaximum(self: _Chart) -> bool

Set: ShowDataLabelsOverMaximum(self: _Chart) = value
"""

    ShowLegendFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendFieldButtons(self: _Chart) -> bool

Set: ShowLegendFieldButtons(self: _Chart) = value
"""

    ShowReportFilterFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowReportFilterFieldButtons(self: _Chart) -> bool

Set: ShowReportFilterFieldButtons(self: _Chart) = value
"""

    ShowValueFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValueFieldButtons(self: _Chart) -> bool

Set: ShowValueFieldButtons(self: _Chart) = value
"""

    ShowWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowWindow(self: _Chart) -> bool

Set: ShowWindow(self: _Chart) = value
"""

    SideWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SideWall(self: _Chart) -> Walls

"""

    SizeWithWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SizeWithWindow(self: _Chart) -> bool

Set: SizeWithWindow(self: _Chart) = value
"""

    SubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubType(self: _Chart) -> int

Set: SubType(self: _Chart) = value
"""

    SurfaceGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceGroup(self: _Chart) -> ChartGroup

"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: _Chart) -> Tab

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: _Chart) -> int

Set: Type(self: _Chart) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: _Chart) -> XlSheetVisibility

Set: Visible(self: _Chart) = value
"""

    Walls = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Walls(self: _Chart) -> Walls

"""

    WallsAndGridlines2D = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WallsAndGridlines2D(self: _Chart) -> bool

Set: WallsAndGridlines2D(self: _Chart) = value
"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: _Chart) -> str

Set: _CodeName(self: _Chart) = value
"""



class Chart(_Chart, ChartEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ChartArea:
    # no doc
    def Clear(self):
        """ Clear(self: ChartArea) -> object """
        pass

    def ClearContents(self):
        """ ClearContents(self: ChartArea) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: ChartArea) -> object """
        pass

    def Copy(self):
        """ Copy(self: ChartArea) -> object """
        pass

    def Select(self):
        """ Select(self: ChartArea) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartArea) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ChartArea) -> object

Set: AutoScaleFont(self: ChartArea) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ChartArea) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartArea) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ChartArea) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ChartArea) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ChartArea) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ChartArea) -> float

Set: Height(self: ChartArea) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ChartArea) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ChartArea) -> float

Set: Left(self: ChartArea) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ChartArea) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartArea) -> object

"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: ChartArea) -> bool

Set: RoundedCorners(self: ChartArea) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ChartArea) -> bool

Set: Shadow(self: ChartArea) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ChartArea) -> float

Set: Top(self: ChartArea) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ChartArea) -> float

Set: Width(self: ChartArea) = value
"""



class ChartCategory:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartCategory) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartCategory) -> XlCreator

"""

    IsFiltered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsFiltered(self: ChartCategory) -> bool

Set: IsFiltered(self: ChartCategory) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ChartCategory) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartCategory) -> object

"""



class ChartClass(__ComObject, _Chart, Chart, ChartEvents_Event):
    """ ChartClass() """
    def Activate(self):
        """ Activate(self: ChartClass) """
        pass

# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_DragOver: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_DragPlot: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseDown: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseMove: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_MouseUp: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Resize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Select: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SeriesChange: sequence item 1: expected string, NoneType found

    def ApplyChartTemplate(self, Filename):
        """ ApplyChartTemplate(self: ChartClass, Filename: str) """
        pass

    def ApplyCustomType(self, ChartType, TypeName):
        """ ApplyCustomType(self: ChartClass, ChartType: XlChartType, TypeName: object) """
        pass

    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: ChartClass, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) """
        pass

    def ApplyLayout(self, Layout, ChartType):
        """ ApplyLayout(self: ChartClass, Layout: int, ChartType: object) """
        pass

    def Arcs(self, Index):
        """ Arcs(self: ChartClass, Index: object) -> object """
        pass

    def AreaGroups(self, Index):
        """ AreaGroups(self: ChartClass, Index: object) -> object """
        pass

    def AutoFormat(self, Gallery, Format):
        """ AutoFormat(self: ChartClass, Gallery: int, Format: object) """
        pass

    def Axes(self, Type, AxisGroup):
        """ Axes(self: ChartClass, Type: object, AxisGroup: XlAxisGroup) -> object """
        pass

    def BarGroups(self, Index):
        """ BarGroups(self: ChartClass, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: ChartClass, Index: object) -> object """
        pass

    def ChartGroups(self, Index):
        """ ChartGroups(self: ChartClass, Index: object) -> object """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: ChartClass, Index: object) -> object """
        pass

    def ChartWizard(self, Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle):
        """ ChartWizard(self: ChartClass, Source: object, Gallery: object, Format: object, PlotBy: object, CategoryLabels: object, SeriesLabels: object, HasLegend: object, Title: object, CategoryTitle: object, ValueTitle: object, ExtraTitle: object) """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: ChartClass, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ChartClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def ClearToMatchColorStyle(self):
        """ ClearToMatchColorStyle(self: ChartClass) """
        pass

    def ClearToMatchStyle(self):
        """ ClearToMatchStyle(self: ChartClass) """
        pass

    def ColumnGroups(self, Index):
        """ ColumnGroups(self: ChartClass, Index: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: ChartClass, Before: object, After: object) """
        pass

    def CopyChartBuild(self):
        """ CopyChartBuild(self: ChartClass) """
        pass

    def CopyPicture(self, Appearance, Format, Size):
        """ CopyPicture(self: ChartClass, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat, Size: XlPictureAppearance) """
        pass

    def CreatePublisher(self, Edition, Appearance, Size, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU):
        """ CreatePublisher(self: ChartClass, Edition: object, Appearance: XlPictureAppearance, Size: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) """
        pass

    def Delete(self):
        """ Delete(self: ChartClass) """
        pass

    def DeleteHiddenContent(self):
        """ DeleteHiddenContent(self: ChartClass) """
        pass

    def Deselect(self):
        """ Deselect(self: ChartClass) """
        pass

    def DoughnutGroups(self, Index):
        """ DoughnutGroups(self: ChartClass, Index: object) -> object """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: ChartClass, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: ChartClass, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: ChartClass, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: ChartClass, Name: object) -> object """
        pass

    def Export(self, Filename, FilterName, Interactive):
        """ Export(self: ChartClass, Filename: str, FilterName: object, Interactive: object) -> bool """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: ChartClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FullSeriesCollection(self, Index):
        """ FullSeriesCollection(self: ChartClass, Index: object) -> object """
        pass

    def GetChartElement(self, x, y, ElementID, Arg1, Arg2):
        """ GetChartElement(self: ChartClass, x: int, y: int, ElementID: int, Arg1: int, Arg2: int) -> (int, int, int) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: ChartClass, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: ChartClass, Index: object) -> object """
        pass

    def Labels(self, Index):
        """ Labels(self: ChartClass, Index: object) -> object """
        pass

    def LineGroups(self, Index):
        """ LineGroups(self: ChartClass, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: ChartClass, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: ChartClass, Index: object) -> object """
        pass

    def Location(self, Where, Name):
        """ Location(self: ChartClass, Where: XlChartLocation, Name: object) -> Chart """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def Move(self, Before, After):
        """ Move(self: ChartClass, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: ChartClass, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: ChartClass, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: ChartClass, Index: object) -> object """
        pass

    def Paste(self, Type):
        """ Paste(self: ChartClass, Type: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: ChartClass, Index: object) -> object """
        pass

    def PieGroups(self, Index):
        """ PieGroups(self: ChartClass, Index: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: ChartClass, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ Protect(self: ChartClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def RadarGroups(self, Index):
        """ RadarGroups(self: ChartClass, Index: object) -> object """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: ChartClass, Index: object) -> object """
        pass

    def Refresh(self):
        """ Refresh(self: ChartClass) """
        pass

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_DragOver: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_DragPlot: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseDown: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseMove: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_MouseUp: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Resize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Select: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SeriesChange: sequence item 1: expected string, NoneType found

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: ChartClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def SaveChartTemplate(self, Filename):
        """ SaveChartTemplate(self: ChartClass, Filename: str) """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: ChartClass, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ChartClass, Replace: object) """
        pass

    def SeriesCollection(self, Index):
        """ SeriesCollection(self: ChartClass, Index: object) -> object """
        pass

    def SetBackgroundPicture(self, Filename):
        """ SetBackgroundPicture(self: ChartClass, Filename: str) """
        pass

    def SetDefaultChart(self, Name):
        """ SetDefaultChart(self: ChartClass, Name: object) """
        pass

    def SetElement(self, Element):
        """ SetElement(self: ChartClass, Element: MsoChartElementType) """
        pass

    def SetSourceData(self, Source, PlotBy):
        """ SetSourceData(self: ChartClass, Source: Range, PlotBy: object) """
        pass

    def Spinners(self, Index):
        """ Spinners(self: ChartClass, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: ChartClass, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: ChartClass, Password: object) """
        pass

    def XYGroups(self, Index):
        """ XYGroups(self: ChartClass, Index: object) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: ChartClass, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: ChartClass) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: ChartClass, Name: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: ChartClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: ChartClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartClass) -> Application

"""

    Area3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area3DGroup(self: ChartClass) -> ChartGroup

"""

    AutoScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaling(self: ChartClass) -> bool

Set: AutoScaling(self: ChartClass) = value
"""

    BackWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackWall(self: ChartClass) -> Walls

"""

    Bar3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bar3DGroup(self: ChartClass) -> ChartGroup

"""

    BarShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarShape(self: ChartClass) -> XlBarShape

Set: BarShape(self: ChartClass) = value
"""

    CategoryLabelLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryLabelLevel(self: ChartClass) -> XlCategoryLabelLevel

Set: CategoryLabelLevel(self: ChartClass) = value
"""

    ChartArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartArea(self: ChartClass) -> ChartArea

"""

    ChartColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartColor(self: ChartClass) -> object

Set: ChartColor(self: ChartClass) = value
"""

    ChartStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartStyle(self: ChartClass) -> object

Set: ChartStyle(self: ChartClass) = value
"""

    ChartTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartTitle(self: ChartClass) -> ChartTitle

"""

    ChartType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartType(self: ChartClass) -> XlChartType

Set: ChartType(self: ChartClass) = value
"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: ChartClass) -> str

"""

    Column3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Column3DGroup(self: ChartClass) -> ChartGroup

"""

    Corners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Corners(self: ChartClass) -> Corners

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartClass) -> XlCreator

"""

    DataTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataTable(self: ChartClass) -> DataTable

"""

    DepthPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DepthPercent(self: ChartClass) -> int

Set: DepthPercent(self: ChartClass) = value
"""

    DisplayBlanksAs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayBlanksAs(self: ChartClass) -> XlDisplayBlanksAs

Set: DisplayBlanksAs(self: ChartClass) = value
"""

    Dummy24 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy24(self: ChartClass) -> bool

Set: Dummy24(self: ChartClass) = value
"""

    Dummy25 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy25(self: ChartClass) -> bool

Set: Dummy25(self: ChartClass) = value
"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: ChartClass) -> int

Set: Elevation(self: ChartClass) = value
"""

    Floor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Floor(self: ChartClass) -> Floor

"""

    GapDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GapDepth(self: ChartClass) -> int

Set: GapDepth(self: ChartClass) = value
"""

    HasDataTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataTable(self: ChartClass) -> bool

Set: HasDataTable(self: ChartClass) = value
"""

    HasHiddenContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasHiddenContent(self: ChartClass) -> bool

"""

    HasLegend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLegend(self: ChartClass) -> bool

Set: HasLegend(self: ChartClass) = value
"""

    HasPivotFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasPivotFields(self: ChartClass) -> bool

Set: HasPivotFields(self: ChartClass) = value
"""

    HasTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasTitle(self: ChartClass) -> bool

Set: HasTitle(self: ChartClass) = value
"""

    HeightPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeightPercent(self: ChartClass) -> int

Set: HeightPercent(self: ChartClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: ChartClass) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ChartClass) -> int

"""

    Legend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Legend(self: ChartClass) -> Legend

"""

    Line3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line3DGroup(self: ChartClass) -> ChartGroup

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: ChartClass) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ChartClass) -> str

Set: Name(self: ChartClass) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: ChartClass) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: ChartClass) -> str

Set: OnDoubleClick(self: ChartClass) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: ChartClass) -> str

Set: OnSheetActivate(self: ChartClass) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: ChartClass) -> str

Set: OnSheetDeactivate(self: ChartClass) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: ChartClass) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartClass) -> object

"""

    Perspective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Perspective(self: ChartClass) -> int

Set: Perspective(self: ChartClass) = value
"""

    Pie3DGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pie3DGroup(self: ChartClass) -> ChartGroup

"""

    PivotLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLayout(self: ChartClass) -> PivotLayout

"""

    PlotArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotArea(self: ChartClass) -> PlotArea

"""

    PlotBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotBy(self: ChartClass) -> XlRowCol

Set: PlotBy(self: ChartClass) = value
"""

    PlotVisibleOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotVisibleOnly(self: ChartClass) -> bool

Set: PlotVisibleOnly(self: ChartClass) = value
"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: ChartClass) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: ChartClass) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: ChartClass) -> bool

"""

    ProtectData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectData(self: ChartClass) -> bool

Set: ProtectData(self: ChartClass) = value
"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: ChartClass) -> bool

"""

    ProtectFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectFormatting(self: ChartClass) -> bool

Set: ProtectFormatting(self: ChartClass) = value
"""

    ProtectGoalSeek = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectGoalSeek(self: ChartClass) -> bool

Set: ProtectGoalSeek(self: ChartClass) = value
"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: ChartClass) -> bool

"""

    ProtectSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectSelection(self: ChartClass) -> bool

Set: ProtectSelection(self: ChartClass) = value
"""

    RightAngleAxes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightAngleAxes(self: ChartClass) -> object

Set: RightAngleAxes(self: ChartClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: ChartClass) -> object

Set: Rotation(self: ChartClass) = value
"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: ChartClass) -> Scripts

"""

    SeriesNameLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesNameLevel(self: ChartClass) -> XlSeriesNameLevel

Set: SeriesNameLevel(self: ChartClass) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: ChartClass) -> Shapes

"""

    ShowAllFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllFieldButtons(self: ChartClass) -> bool

Set: ShowAllFieldButtons(self: ChartClass) = value
"""

    ShowAxisFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAxisFieldButtons(self: ChartClass) -> bool

Set: ShowAxisFieldButtons(self: ChartClass) = value
"""

    ShowDataLabelsOverMaximum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDataLabelsOverMaximum(self: ChartClass) -> bool

Set: ShowDataLabelsOverMaximum(self: ChartClass) = value
"""

    ShowLegendFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendFieldButtons(self: ChartClass) -> bool

Set: ShowLegendFieldButtons(self: ChartClass) = value
"""

    ShowReportFilterFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowReportFilterFieldButtons(self: ChartClass) -> bool

Set: ShowReportFilterFieldButtons(self: ChartClass) = value
"""

    ShowValueFieldButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValueFieldButtons(self: ChartClass) -> bool

Set: ShowValueFieldButtons(self: ChartClass) = value
"""

    ShowWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowWindow(self: ChartClass) -> bool

Set: ShowWindow(self: ChartClass) = value
"""

    SideWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SideWall(self: ChartClass) -> Walls

"""

    SizeWithWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SizeWithWindow(self: ChartClass) -> bool

Set: SizeWithWindow(self: ChartClass) = value
"""

    SubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubType(self: ChartClass) -> int

Set: SubType(self: ChartClass) = value
"""

    SurfaceGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceGroup(self: ChartClass) -> ChartGroup

"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: ChartClass) -> Tab

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ChartClass) -> int

Set: Type(self: ChartClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ChartClass) -> XlSheetVisibility

Set: Visible(self: ChartClass) = value
"""

    Walls = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Walls(self: ChartClass) -> Walls

"""

    WallsAndGridlines2D = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WallsAndGridlines2D(self: ChartClass) -> bool

Set: WallsAndGridlines2D(self: ChartClass) = value
"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: ChartClass) -> str

Set: _CodeName(self: ChartClass) = value
"""


    BeforeDoubleClick = None
    BeforeRightClick = None
    Calculate = None
    ChartEvents_Event_Activate = None
    ChartEvents_Event_Select = None
    Deactivate = None
    DragOver = None
    DragPlot = None
    MouseDown = None
    MouseMove = None
    MouseUp = None
    Resize = None
    SeriesChange = None


class ChartColorFormat:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartColorFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartColorFormat) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartColorFormat) -> object

"""

    RGB = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RGB(self: ChartColorFormat) -> int

"""

    SchemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SchemeColor(self: ChartColorFormat) -> int

Set: SchemeColor(self: ChartColorFormat) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ChartColorFormat) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ChartColorFormat) -> int

"""



class ChartEvents:
    # no doc
    def Activate(self):
        """ Activate(self: ChartEvents) """
        pass

    def BeforeDoubleClick(self, ElementID, Arg1, Arg2, Cancel):
        """ BeforeDoubleClick(self: ChartEvents, ElementID: int, Arg1: int, Arg2: int) -> bool """
        pass

    def BeforeRightClick(self, Cancel):
        """ BeforeRightClick(self: ChartEvents) -> bool """
        pass

    def Calculate(self):
        """ Calculate(self: ChartEvents) """
        pass

    def Deactivate(self):
        """ Deactivate(self: ChartEvents) """
        pass

    def DragOver(self):
        """ DragOver(self: ChartEvents) """
        pass

    def DragPlot(self):
        """ DragPlot(self: ChartEvents) """
        pass

    def MouseDown(self, Button, Shift, x, y):
        """ MouseDown(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def MouseMove(self, Button, Shift, x, y):
        """ MouseMove(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def MouseUp(self, Button, Shift, x, y):
        """ MouseUp(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def Resize(self):
        """ Resize(self: ChartEvents) """
        pass

    def Select(self, ElementID, Arg1, Arg2):
        """ Select(self: ChartEvents, ElementID: int, Arg1: int, Arg2: int) """
        pass

    def SeriesChange(self, SeriesIndex, PointIndex):
        """ SeriesChange(self: ChartEvents, SeriesIndex: int, PointIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ChartEvents_ActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_ActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_ActivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_BeforeDoubleClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_BeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, ElementID, Arg1, Arg2, Cancel):
        """ Invoke(self: ChartEvents_BeforeDoubleClickEventHandler, ElementID: int, Arg1: int, Arg2: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_BeforeRightClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_BeforeRightClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Cancel):
        """ Invoke(self: ChartEvents_BeforeRightClickEventHandler) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_CalculateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_CalculateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_CalculateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_DeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_DeactivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_DragOverEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_DragOverEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_DragOverEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_DragPlotEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_DragPlotEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_DragPlotEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_MouseDownEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Button, Shift, x, y):
        """ Invoke(self: ChartEvents_MouseDownEventHandler, Button: int, Shift: int, x: int, y: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_MouseMoveEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Button, Shift, x, y):
        """ Invoke(self: ChartEvents_MouseMoveEventHandler, Button: int, Shift: int, x: int, y: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_MouseUpEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Button, Shift, x, y):
        """ Invoke(self: ChartEvents_MouseUpEventHandler, Button: int, Shift: int, x: int, y: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_ResizeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_ResizeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: ChartEvents_ResizeEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_SelectEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_SelectEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, ElementID, Arg1, Arg2):
        """ Invoke(self: ChartEvents_SelectEventHandler, ElementID: int, Arg1: int, Arg2: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_SeriesChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ ChartEvents_SeriesChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, SeriesIndex, PointIndex):
        """ Invoke(self: ChartEvents_SeriesChangeEventHandler, SeriesIndex: int, PointIndex: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ChartEvents_SinkHelper(object, ChartEvents):
    # no doc
    def Activate(self):
        """ Activate(self: ChartEvents_SinkHelper) """
        pass

# Error generating skeleton for function BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeRightClick: sequence item 1: expected string, NoneType found

    def Calculate(self):
        """ Calculate(self: ChartEvents_SinkHelper) """
        pass

    def Deactivate(self):
        """ Deactivate(self: ChartEvents_SinkHelper) """
        pass

    def DragOver(self):
        """ DragOver(self: ChartEvents_SinkHelper) """
        pass

    def DragPlot(self):
        """ DragPlot(self: ChartEvents_SinkHelper) """
        pass

# Error generating skeleton for function MouseDown: sequence item 1: expected string, NoneType found

# Error generating skeleton for function MouseMove: sequence item 1: expected string, NoneType found

# Error generating skeleton for function MouseUp: sequence item 1: expected string, NoneType found

    def Resize(self):
        """ Resize(self: ChartEvents_SinkHelper) """
        pass

# Error generating skeleton for function Select: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SeriesChange: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_ActivateDelegate = None
    m_BeforeDoubleClickDelegate = None
    m_BeforeRightClickDelegate = None
    m_CalculateDelegate = None
    m_DeactivateDelegate = None
    m_DragOverDelegate = None
    m_DragPlotDelegate = None
    m_dwCookie = None
    m_MouseDownDelegate = None
    m_MouseMoveDelegate = None
    m_MouseUpDelegate = None
    m_ResizeDelegate = None
    m_SelectDelegate = None
    m_SeriesChangeDelegate = None


class ChartFillFormat:
    # no doc
    def OneColorGradient(self, Style, Variant, Degree):
        """ OneColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        pass

    def Patterned(self, Pattern):
        """ Patterned(self: ChartFillFormat, Pattern: MsoPatternType) """
        pass

    def PresetGradient(self, Style, Variant, PresetGradientType):
        """ PresetGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        pass

    def PresetTextured(self, PresetTexture):
        """ PresetTextured(self: ChartFillFormat, PresetTexture: MsoPresetTexture) """
        pass

    def Solid(self):
        """ Solid(self: ChartFillFormat) """
        pass

    def TwoColorGradient(self, Style, Variant):
        """ TwoColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int) """
        pass

    def UserPicture(self, PictureFile, PictureFormat, PictureStackUnit, PicturePlacement):
        """ UserPicture(self: ChartFillFormat, PictureFile: object, PictureFormat: object, PictureStackUnit: object, PicturePlacement: object) """
        pass

    def UserTextured(self, TextureFile):
        """ UserTextured(self: ChartFillFormat, TextureFile: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartFillFormat) -> Application

"""

    BackColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackColor(self: ChartFillFormat) -> ChartColorFormat

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartFillFormat) -> XlCreator

"""

    ForeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeColor(self: ChartFillFormat) -> ChartColorFormat

"""

    GradientColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColorType(self: ChartFillFormat) -> MsoGradientColorType

"""

    GradientDegree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientDegree(self: ChartFillFormat) -> Single

"""

    GradientStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientStyle(self: ChartFillFormat) -> MsoGradientStyle

"""

    GradientVariant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientVariant(self: ChartFillFormat) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartFillFormat) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: ChartFillFormat) -> MsoPatternType

"""

    PresetGradientType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetGradientType(self: ChartFillFormat) -> MsoPresetGradientType

"""

    PresetTexture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetTexture(self: ChartFillFormat) -> MsoPresetTexture

"""

    TextureName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureName(self: ChartFillFormat) -> str

"""

    TextureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureType(self: ChartFillFormat) -> MsoTextureType

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ChartFillFormat) -> MsoFillType

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ChartFillFormat) -> MsoTriState

Set: Visible(self: ChartFillFormat) = value
"""



class ChartFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: ChartFormat) -> Adjustments

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartFormat) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: ChartFormat) -> MsoAutoShapeType

Set: AutoShapeType(self: ChartFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartFormat) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ChartFormat) -> FillFormat

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: ChartFormat) -> GlowFormat

"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: ChartFormat) -> LineFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartFormat) -> object

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: ChartFormat) -> PictureFormat

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ChartFormat) -> ShadowFormat

"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: ChartFormat) -> SoftEdgeFormat

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: ChartFormat) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: ChartFormat) -> ThreeDFormat

"""



class ChartGroup:
    # no doc
    def CategoryCollection(self, Index):
        """ CategoryCollection(self: ChartGroup, Index: object) -> object """
        pass

    def FullCategoryCollection(self, Index):
        """ FullCategoryCollection(self: ChartGroup, Index: object) -> object """
        pass

    def SeriesCollection(self, Index):
        """ SeriesCollection(self: ChartGroup, Index: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartGroup) -> Application

"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: ChartGroup) -> XlAxisGroup

Set: AxisGroup(self: ChartGroup) = value
"""

    BubbleScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BubbleScale(self: ChartGroup) -> int

Set: BubbleScale(self: ChartGroup) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartGroup) -> XlCreator

"""

    DoughnutHoleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoughnutHoleSize(self: ChartGroup) -> int

Set: DoughnutHoleSize(self: ChartGroup) = value
"""

    DownBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownBars(self: ChartGroup) -> DownBars

"""

    DropLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropLines(self: ChartGroup) -> DropLines

"""

    FirstSliceAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstSliceAngle(self: ChartGroup) -> int

Set: FirstSliceAngle(self: ChartGroup) = value
"""

    GapWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GapWidth(self: ChartGroup) -> int

Set: GapWidth(self: ChartGroup) = value
"""

    Has3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DShading(self: ChartGroup) -> bool

Set: Has3DShading(self: ChartGroup) = value
"""

    HasDropLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDropLines(self: ChartGroup) -> bool

Set: HasDropLines(self: ChartGroup) = value
"""

    HasHiLoLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasHiLoLines(self: ChartGroup) -> bool

Set: HasHiLoLines(self: ChartGroup) = value
"""

    HasRadarAxisLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasRadarAxisLabels(self: ChartGroup) -> bool

Set: HasRadarAxisLabels(self: ChartGroup) = value
"""

    HasSeriesLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSeriesLines(self: ChartGroup) -> bool

Set: HasSeriesLines(self: ChartGroup) = value
"""

    HasUpDownBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasUpDownBars(self: ChartGroup) -> bool

Set: HasUpDownBars(self: ChartGroup) = value
"""

    HiLoLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HiLoLines(self: ChartGroup) -> HiLoLines

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ChartGroup) -> int

"""

    Overlap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Overlap(self: ChartGroup) -> int

Set: Overlap(self: ChartGroup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartGroup) -> object

"""

    RadarAxisLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadarAxisLabels(self: ChartGroup) -> TickLabels

"""

    SecondPlotSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPlotSize(self: ChartGroup) -> int

Set: SecondPlotSize(self: ChartGroup) = value
"""

    SeriesLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesLines(self: ChartGroup) -> SeriesLines

"""

    ShowNegativeBubbles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowNegativeBubbles(self: ChartGroup) -> bool

Set: ShowNegativeBubbles(self: ChartGroup) = value
"""

    SizeRepresents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SizeRepresents(self: ChartGroup) -> XlSizeRepresents

Set: SizeRepresents(self: ChartGroup) = value
"""

    SplitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitType(self: ChartGroup) -> XlChartSplitType

Set: SplitType(self: ChartGroup) = value
"""

    SplitValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitValue(self: ChartGroup) -> object

Set: SplitValue(self: ChartGroup) = value
"""

    SubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubType(self: ChartGroup) -> int

Set: SubType(self: ChartGroup) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ChartGroup) -> int

Set: Type(self: ChartGroup) = value
"""

    UpBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpBars(self: ChartGroup) -> UpBars

"""

    VaryByCategories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VaryByCategories(self: ChartGroup) -> bool

Set: VaryByCategories(self: ChartGroup) = value
"""



class ChartGroups(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ChartGroups) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ChartGroups, Index: object) -> ChartGroup """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartGroups) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ChartGroups) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartGroups) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartGroups) -> object

"""



class ChartObject:
    # no doc
    def Activate(self):
        """ Activate(self: ChartObject) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: ChartObject) -> object """
        pass

    def Copy(self):
        """ Copy(self: ChartObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ChartObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ChartObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: ChartObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ChartObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ChartObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ChartObject) -> object """
        pass

    def _Copy(self):
        """ _Copy(self: ChartObject) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartObject) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ChartObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ChartObject) -> Range

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: ChartObject) -> Chart

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ChartObject) -> bool

Set: Enabled(self: ChartObject) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ChartObject) -> float

Set: Height(self: ChartObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ChartObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ChartObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ChartObject) -> float

Set: Left(self: ChartObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ChartObject) -> bool

Set: Locked(self: ChartObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ChartObject) -> str

Set: Name(self: ChartObject) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ChartObject) -> str

Set: OnAction(self: ChartObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ChartObject) -> object

Set: Placement(self: ChartObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ChartObject) -> bool

Set: PrintObject(self: ChartObject) = value
"""

    ProtectChartObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectChartObject(self: ChartObject) -> bool

Set: ProtectChartObject(self: ChartObject) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: ChartObject) -> bool

Set: RoundedCorners(self: ChartObject) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ChartObject) -> bool

Set: Shadow(self: ChartObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ChartObject) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ChartObject) -> float

Set: Top(self: ChartObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ChartObject) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ChartObject) -> bool

Set: Visible(self: ChartObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ChartObject) -> float

Set: Width(self: ChartObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ChartObject) -> int

"""



class ChartObjects(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ChartObjects, Left: float, Top: float, Width: float, Height: float) -> ChartObject """
        pass

    def BringToFront(self):
        """ BringToFront(self: ChartObjects) -> object """
        pass

    def Copy(self):
        """ Copy(self: ChartObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ChartObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ChartObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: ChartObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ChartObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ChartObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ChartObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ChartObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ChartObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ChartObjects) -> object """
        pass

    def _Copy(self):
        """ _Copy(self: ChartObjects) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: ChartObjects, Index: object) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ChartObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ChartObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ChartObjects) """
        pass

    def _Dummy25(self):
        """ _Dummy25(self: ChartObjects) """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: ChartObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: ChartObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ChartObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartObjects) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ChartObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ChartObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ChartObjects) -> bool

Set: Enabled(self: ChartObjects) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ChartObjects) -> float

Set: Height(self: ChartObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ChartObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ChartObjects) -> float

Set: Left(self: ChartObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ChartObjects) -> bool

Set: Locked(self: ChartObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ChartObjects) -> str

Set: OnAction(self: ChartObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ChartObjects) -> object

Set: Placement(self: ChartObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ChartObjects) -> bool

Set: PrintObject(self: ChartObjects) = value
"""

    ProtectChartObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectChartObject(self: ChartObjects) -> bool

Set: ProtectChartObject(self: ChartObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: ChartObjects) -> bool

Set: RoundedCorners(self: ChartObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ChartObjects) -> bool

Set: Shadow(self: ChartObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ChartObjects) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ChartObjects) -> float

Set: Top(self: ChartObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ChartObjects) -> bool

Set: Visible(self: ChartObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ChartObjects) -> float

Set: Width(self: ChartObjects) = value
"""



class Charts(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: Charts, Before: object, After: object, Count: object) -> Chart """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: Charts, Before: object, After: object, Count: object, NewLayout: object) -> Chart """
        pass

    def Copy(self, Before, After):
        """ Copy(self: Charts, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: Charts) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Charts) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: Charts, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOut_2(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut_2(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: Charts, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Charts, Replace: object) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: Charts) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Charts) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Charts) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Charts) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: Charts) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Charts) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Charts) -> object

Set: Visible(self: Charts) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: Charts) -> VPageBreaks

"""



class ChartTitle:
    # no doc
    def Delete(self):
        """ Delete(self: ChartTitle) -> object """
        pass

    def Select(self):
        """ Select(self: ChartTitle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartTitle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ChartTitle) -> object

Set: AutoScaleFont(self: ChartTitle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ChartTitle) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ChartTitle) -> str

Set: Caption(self: ChartTitle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartTitle) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ChartTitle) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ChartTitle) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ChartTitle) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ChartTitle) -> str

Set: Formula(self: ChartTitle) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: ChartTitle) -> str

Set: FormulaLocal(self: ChartTitle) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: ChartTitle) -> str

Set: FormulaR1C1(self: ChartTitle) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: ChartTitle) -> str

Set: FormulaR1C1Local(self: ChartTitle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ChartTitle) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: ChartTitle) -> object

Set: HorizontalAlignment(self: ChartTitle) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: ChartTitle) -> bool

Set: IncludeInLayout(self: ChartTitle) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ChartTitle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ChartTitle) -> float

Set: Left(self: ChartTitle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ChartTitle) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ChartTitle) -> object

Set: Orientation(self: ChartTitle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartTitle) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: ChartTitle) -> XlChartElementPosition

Set: Position(self: ChartTitle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: ChartTitle) -> int

Set: ReadingOrder(self: ChartTitle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ChartTitle) -> bool

Set: Shadow(self: ChartTitle) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ChartTitle) -> str

Set: Text(self: ChartTitle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ChartTitle) -> float

Set: Top(self: ChartTitle) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: ChartTitle) -> object

Set: VerticalAlignment(self: ChartTitle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ChartTitle) -> float

"""



class ChartView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ChartView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ChartView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ChartView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: ChartView) -> object

"""



class CheckBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: CheckBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: CheckBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: CheckBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: CheckBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: CheckBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: CheckBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: CheckBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: CheckBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: CheckBox) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: CheckBox) -> object

Set: Accelerator(self: CheckBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CheckBox) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: CheckBox) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: CheckBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: CheckBox) -> str

Set: Caption(self: CheckBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CheckBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: CheckBox) -> bool

Set: Display3DShading(self: CheckBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: CheckBox) -> bool

Set: Enabled(self: CheckBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: CheckBox) -> float

Set: Height(self: CheckBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: CheckBox) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: CheckBox) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: CheckBox) -> float

Set: Left(self: CheckBox) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: CheckBox) -> str

Set: LinkedCell(self: CheckBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: CheckBox) -> bool

Set: Locked(self: CheckBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: CheckBox) -> bool

Set: LockedText(self: CheckBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: CheckBox) -> str

Set: Name(self: CheckBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: CheckBox) -> str

Set: OnAction(self: CheckBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CheckBox) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: CheckBox) -> object

Set: PhoneticAccelerator(self: CheckBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: CheckBox) -> object

Set: Placement(self: CheckBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: CheckBox) -> bool

Set: PrintObject(self: CheckBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: CheckBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: CheckBox) -> str

Set: Text(self: CheckBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: CheckBox) -> float

Set: Top(self: CheckBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: CheckBox) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: CheckBox) -> object

Set: Value(self: CheckBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: CheckBox) -> bool

Set: Visible(self: CheckBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: CheckBox) -> float

Set: Width(self: CheckBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: CheckBox) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: CheckBox) -> int

Set: _Default(self: CheckBox) = value
"""



class CheckBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: CheckBoxes, Left: float, Top: float, Width: float, Height: float) -> CheckBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: CheckBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: CheckBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: CheckBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: CheckBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: CheckBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: CheckBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: CheckBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CheckBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: CheckBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: CheckBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: CheckBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: CheckBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: CheckBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: CheckBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: CheckBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: CheckBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: CheckBoxes) -> object

Set: Accelerator(self: CheckBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CheckBoxes) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: CheckBoxes) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: CheckBoxes) -> str

Set: Caption(self: CheckBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CheckBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CheckBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: CheckBoxes) -> bool

Set: Display3DShading(self: CheckBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: CheckBoxes) -> bool

Set: Enabled(self: CheckBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: CheckBoxes) -> float

Set: Height(self: CheckBoxes) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: CheckBoxes) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: CheckBoxes) -> float

Set: Left(self: CheckBoxes) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: CheckBoxes) -> str

Set: LinkedCell(self: CheckBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: CheckBoxes) -> bool

Set: Locked(self: CheckBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: CheckBoxes) -> bool

Set: LockedText(self: CheckBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: CheckBoxes) -> str

Set: OnAction(self: CheckBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CheckBoxes) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: CheckBoxes) -> object

Set: PhoneticAccelerator(self: CheckBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: CheckBoxes) -> object

Set: Placement(self: CheckBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: CheckBoxes) -> bool

Set: PrintObject(self: CheckBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: CheckBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: CheckBoxes) -> str

Set: Text(self: CheckBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: CheckBoxes) -> float

Set: Top(self: CheckBoxes) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: CheckBoxes) -> object

Set: Value(self: CheckBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: CheckBoxes) -> bool

Set: Visible(self: CheckBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: CheckBoxes) -> float

Set: Width(self: CheckBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: CheckBoxes) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: CheckBoxes) -> int

Set: _Default(self: CheckBoxes) = value
"""



class ColorFormat(_IMsoDispObj):
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ColorFormat) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: ColorFormat) -> Single

Set: Brightness(self: ColorFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ColorFormat) -> int

"""

    ObjectThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectThemeColor(self: ColorFormat) -> MsoThemeColorIndex

Set: ObjectThemeColor(self: ColorFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ColorFormat) -> object

"""

    RGB = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RGB(self: ColorFormat) -> int

Set: RGB(self: ColorFormat) = value
"""

    SchemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SchemeColor(self: ColorFormat) -> int

Set: SchemeColor(self: ColorFormat) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: ColorFormat) -> Single

Set: TintAndShade(self: ColorFormat) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ColorFormat) -> MsoColorType

"""



class ColorScale:
    # no doc
    def Delete(self):
        """ Delete(self: ColorScale) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: ColorScale, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: ColorScale) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: ColorScale) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ColorScale) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: ColorScale) -> Range

"""

    ColorScaleCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorScaleCriteria(self: ColorScale) -> ColorScaleCriteria

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ColorScale) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ColorScale) -> str

Set: Formula(self: ColorScale) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ColorScale) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: ColorScale) -> int

Set: Priority(self: ColorScale) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: ColorScale) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: ColorScale) -> XlPivotConditionScope

Set: ScopeType(self: ColorScale) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: ColorScale) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ColorScale) -> int

"""



class ColorScaleCriteria(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ColorScaleCriteria) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ColorScaleCriteria) -> int

"""



class ColorScaleCriterion:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FormatColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormatColor(self: ColorScaleCriterion) -> FormatColor

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ColorScaleCriterion) -> int

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ColorScaleCriterion) -> XlConditionValueTypes

Set: Type(self: ColorScaleCriterion) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ColorScaleCriterion) -> object

Set: Value(self: ColorScaleCriterion) = value
"""



class ColorStop:
    # no doc
    def Delete(self):
        """ Delete(self: ColorStop) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ColorStop) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: ColorStop) -> object

Set: Color(self: ColorStop) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ColorStop) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ColorStop) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: ColorStop) -> float

Set: Position(self: ColorStop) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: ColorStop) -> int

Set: ThemeColor(self: ColorStop) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: ColorStop) -> object

Set: TintAndShade(self: ColorStop) = value
"""



class ColorStops(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: ColorStops, Position: float) -> ColorStop """
        pass

    def Clear(self):
        """ Clear(self: ColorStops) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ColorStops) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ColorStops, Index: object) -> ColorStop """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ColorStops) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ColorStops) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ColorStops) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ColorStops) -> object

"""



class Comment:
    # no doc
    def Delete(self):
        """ Delete(self: Comment) """
        pass

    def Next(self):
        """ Next(self: Comment) -> Comment """
        pass

    def Previous(self):
        """ Previous(self: Comment) -> Comment """
        pass

    def Text(self, Text, Start, Overwrite):
        """ Text(self: Comment, Text: object, Start: object, Overwrite: object) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Comment) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: Comment) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Comment) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Comment) -> object

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: Comment) -> Shape

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Comment) -> bool

Set: Visible(self: Comment) = value
"""



class Comments(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Comments) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Comments, Index: int) -> Comment """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Comments) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Comments) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Comments) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Comments) -> object

"""



class ConditionValue:
    # no doc
    def Modify(self, newtype, newvalue):
        """ Modify(self: ConditionValue, newtype: XlConditionValueTypes, newvalue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ConditionValue) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ConditionValue) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ConditionValue) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ConditionValue) -> XlConditionValueTypes

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ConditionValue) -> object

"""



class Connections(IEnumerable):
    # no doc
    def Add(self, Name, Description, ConnectionString, CommandText, lCmdtype):
        """ Add(self: Connections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object) -> WorkbookConnection """
        pass

    def Add2(self, Name, Description, ConnectionString, CommandText, lCmdtype, CreateModelConnection, ImportRelationships):
        """ Add2(self: Connections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        pass

    def AddFromFile(self, Filename):
        """ AddFromFile(self: Connections, Filename: str) -> WorkbookConnection """
        pass

    def AddFromFile2(self, Filename, CreateModelConnection, ImportRelationships):
        """ AddFromFile2(self: Connections, Filename: str, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Connections) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Connections, Index: object) -> WorkbookConnection """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Connections) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Connections) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Connections) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Connections) -> object

"""



class ConnectorFormat:
    # no doc
    def BeginConnect(self, ConnectedShape, ConnectionSite):
        """ BeginConnect(self: ConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        pass

    def BeginDisconnect(self):
        """ BeginDisconnect(self: ConnectorFormat) """
        pass

    def EndConnect(self, ConnectedShape, ConnectionSite):
        """ EndConnect(self: ConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        pass

    def EndDisconnect(self):
        """ EndDisconnect(self: ConnectorFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ConnectorFormat) -> Application

"""

    BeginConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnected(self: ConnectorFormat) -> MsoTriState

"""

    BeginConnectedShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnectedShape(self: ConnectorFormat) -> Shape

"""

    BeginConnectionSite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnectionSite(self: ConnectorFormat) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ConnectorFormat) -> XlCreator

"""

    EndConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnected(self: ConnectorFormat) -> MsoTriState

"""

    EndConnectedShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnectedShape(self: ConnectorFormat) -> Shape

"""

    EndConnectionSite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnectionSite(self: ConnectorFormat) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ConnectorFormat) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ConnectorFormat) -> MsoConnectorType

Set: Type(self: ConnectorFormat) = value
"""



class Constants(Enum, IComparable, IFormattable, IConvertible):
    """ enum Constants, values: xl3DBar (-4099), xl3DEffects1 (13), xl3DEffects2 (14), xl3DSurface (-4103), xlAbove (0), xlAccounting1 (4), xlAccounting2 (5), xlAccounting3 (6), xlAccounting4 (17), xlAdd (2), xlAll (-4104), xlAllExceptBorders (7), xlAutomatic (-4105), xlBar (2), xlBelow (1), xlBidi (-5000), xlBidiCalendar (3), xlBoth (1), xlBottom (-4107), xlCascade (7), xlCenter (-4108), xlCenterAcrossSelection (7), xlChart4 (2), xlChartSeries (17), xlChartShort (6), xlChartTitles (18), xlChecker (9), xlCircle (8), xlClassic1 (1), xlClassic2 (2), xlClassic3 (3), xlClosed (3), xlColor1 (7), xlColor2 (8), xlColor3 (9), xlColumn (3), xlCombination (-4111), xlComplete (4), xlConstants (2), xlContents (2), xlContext (-5002), xlCorner (2), xlCrissCross (16), xlCross (4), xlCustom (-4114), xlDebugCodePane (13), xlDefaultAutoFormat (-1), xlDesktop (9), xlDiamond (2), xlDirect (1), xlDistributed (-4117), xlDivide (5), xlDoubleAccounting (5), xlDoubleClosed (5), xlDoubleOpen (4), xlDoubleQuote (1), xlDrawingObject (14), xlEntireChart (20), xlExcelMenus (1), xlExtended (3), xlFill (5), xlFirst (0), xlFixedValue (1), xlFloating (5), xlFormats (-4122), xlFormula (5), xlFullScript (1), xlGeneral (1), xlGray16 (17), xlGray25 (-4124), xlGray50 (-4125), xlGray75 (-4126), xlGray8 (18), xlGregorian (2), xlGrid (15), xlGridline (22), xlHigh (-4127), xlHindiNumerals (3), xlIcons (1), xlImmediatePane (12), xlInside (2), xlInteger (2), xlJustify (-4130), xlLast (1), xlLastCell (11), xlLatin (-5001), xlLeft (-4131), xlLeftToRight (2), xlLightDown (13), xlLightHorizontal (11), xlLightUp (14), xlLightVertical (12), xlList1 (10), xlList2 (11), xlList3 (12), xlLocalFormat1 (15), xlLocalFormat2 (16), xlLogicalCursor (1), xlLong (3), xlLotusHelp (2), xlLow (-4134), xlLTR (-5003), xlMacrosheetCell (7), xlManual (-4135), xlMaximum (2), xlMinimum (4), xlMinusValues (3), xlMixed (2), xlMixedAuthorizedScript (4), xlMixedScript (3), xlModule (-4141), xlMultiply (4), xlNarrow (1), xlNextToAxis (4), xlNoDocuments (3), xlNone (-4142), xlNotes (-4144), xlOff (-4146), xlOn (1), xlOpaque (3), xlOpen (2), xlOutside (3), xlPartial (3), xlPartialScript (2), xlPercent (2), xlPlus (9), xlPlusValues (2), xlReference (4), xlRight (-4152), xlRTL (-5004), xlScale (3), xlSemiautomatic (2), xlSemiGray75 (10), xlShort (1), xlShowLabel (4), xlShowLabelAndPercent (5), xlShowPercent (3), xlShowValue (2), xlSimple (-4154), xlSingle (2), xlSingleAccounting (4), xlSingleQuote (2), xlSolid (1), xlSquare (1), xlStar (5), xlStError (4), xlStrict (2), xlSubtract (3), xlSystem (1), xlTextBox (16), xlTiled (1), xlTitleBar (8), xlToolbar (1), xlToolbarButton (2), xlTop (-4160), xlTopToBottom (1), xlTransparent (2), xlTriangle (3), xlVeryHidden (2), xlVisible (12), xlVisualCursor (2), xlWatchPane (11), xlWide (3), xlWorkbookTab (6), xlWorksheet4 (1), xlWorksheetCell (3), xlWorksheetShort (5) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xl3DBar = None
    xl3DEffects1 = None
    xl3DEffects2 = None
    xl3DSurface = None
    xlAbove = None
    xlAccounting1 = None
    xlAccounting2 = None
    xlAccounting3 = None
    xlAccounting4 = None
    xlAdd = None
    xlAll = None
    xlAllExceptBorders = None
    xlAutomatic = None
    xlBar = None
    xlBelow = None
    xlBidi = None
    xlBidiCalendar = None
    xlBoth = None
    xlBottom = None
    xlCascade = None
    xlCenter = None
    xlCenterAcrossSelection = None
    xlChart4 = None
    xlChartSeries = None
    xlChartShort = None
    xlChartTitles = None
    xlChecker = None
    xlCircle = None
    xlClassic1 = None
    xlClassic2 = None
    xlClassic3 = None
    xlClosed = None
    xlColor1 = None
    xlColor2 = None
    xlColor3 = None
    xlColumn = None
    xlCombination = None
    xlComplete = None
    xlConstants = None
    xlContents = None
    xlContext = None
    xlCorner = None
    xlCrissCross = None
    xlCross = None
    xlCustom = None
    xlDebugCodePane = None
    xlDefaultAutoFormat = None
    xlDesktop = None
    xlDiamond = None
    xlDirect = None
    xlDistributed = None
    xlDivide = None
    xlDoubleAccounting = None
    xlDoubleClosed = None
    xlDoubleOpen = None
    xlDoubleQuote = None
    xlDrawingObject = None
    xlEntireChart = None
    xlExcelMenus = None
    xlExtended = None
    xlFill = None
    xlFirst = None
    xlFixedValue = None
    xlFloating = None
    xlFormats = None
    xlFormula = None
    xlFullScript = None
    xlGeneral = None
    xlGray16 = None
    xlGray25 = None
    xlGray50 = None
    xlGray75 = None
    xlGray8 = None
    xlGregorian = None
    xlGrid = None
    xlGridline = None
    xlHigh = None
    xlHindiNumerals = None
    xlIcons = None
    xlImmediatePane = None
    xlInside = None
    xlInteger = None
    xlJustify = None
    xlLast = None
    xlLastCell = None
    xlLatin = None
    xlLeft = None
    xlLeftToRight = None
    xlLightDown = None
    xlLightHorizontal = None
    xlLightUp = None
    xlLightVertical = None
    xlList1 = None
    xlList2 = None
    xlList3 = None
    xlLocalFormat1 = None
    xlLocalFormat2 = None
    xlLogicalCursor = None
    xlLong = None
    xlLotusHelp = None
    xlLow = None
    xlLTR = None
    xlMacrosheetCell = None
    xlManual = None
    xlMaximum = None
    xlMinimum = None
    xlMinusValues = None
    xlMixed = None
    xlMixedAuthorizedScript = None
    xlMixedScript = None
    xlModule = None
    xlMultiply = None
    xlNarrow = None
    xlNextToAxis = None
    xlNoDocuments = None
    xlNone = None
    xlNotes = None
    xlOff = None
    xlOn = None
    xlOpaque = None
    xlOpen = None
    xlOutside = None
    xlPartial = None
    xlPartialScript = None
    xlPercent = None
    xlPlus = None
    xlPlusValues = None
    xlReference = None
    xlRight = None
    xlRTL = None
    xlScale = None
    xlSemiautomatic = None
    xlSemiGray75 = None
    xlShort = None
    xlShowLabel = None
    xlShowLabelAndPercent = None
    xlShowPercent = None
    xlShowValue = None
    xlSimple = None
    xlSingle = None
    xlSingleAccounting = None
    xlSingleQuote = None
    xlSolid = None
    xlSquare = None
    xlStar = None
    xlStError = None
    xlStrict = None
    xlSubtract = None
    xlSystem = None
    xlTextBox = None
    xlTiled = None
    xlTitleBar = None
    xlToolbar = None
    xlToolbarButton = None
    xlTop = None
    xlTopToBottom = None
    xlTransparent = None
    xlTriangle = None
    xlVeryHidden = None
    xlVisible = None
    xlVisualCursor = None
    xlWatchPane = None
    xlWide = None
    xlWorkbookTab = None
    xlWorksheet4 = None
    xlWorksheetCell = None
    xlWorksheetShort = None


class ControlFormat:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: ControlFormat, Text: str, Index: object) """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: ControlFormat) """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: ControlFormat, Index: int, Count: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ControlFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ControlFormat) -> XlCreator

"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: ControlFormat) -> int

Set: DropDownLines(self: ControlFormat) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ControlFormat) -> bool

Set: Enabled(self: ControlFormat) = value
"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: ControlFormat) -> int

Set: LargeChange(self: ControlFormat) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ControlFormat) -> str

Set: LinkedCell(self: ControlFormat) = value
"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: ControlFormat) -> int

Set: ListCount(self: ControlFormat) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: ControlFormat) -> str

Set: ListFillRange(self: ControlFormat) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: ControlFormat) -> int

Set: ListIndex(self: ControlFormat) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ControlFormat) -> bool

Set: LockedText(self: ControlFormat) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: ControlFormat) -> int

Set: Max(self: ControlFormat) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: ControlFormat) -> int

Set: Min(self: ControlFormat) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: ControlFormat) -> int

Set: MultiSelect(self: ControlFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ControlFormat) -> object

"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ControlFormat) -> bool

Set: PrintObject(self: ControlFormat) = value
"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: ControlFormat) -> int

Set: SmallChange(self: ControlFormat) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ControlFormat) -> int

Set: Value(self: ControlFormat) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ControlFormat) -> int

Set: _Default(self: ControlFormat) = value
"""



class Corners:
    # no doc
    def Select(self):
        """ Select(self: Corners) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Corners) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Corners) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Corners) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Corners) -> object

"""



class CubeField:
    # no doc
    def AddMemberPropertyField(self, Property, PropertyOrder):
        """ AddMemberPropertyField(self: CubeField, Property: str, PropertyOrder: object) """
        pass

    def AddMemberPropertyFieldEx(self, Property, PropertyOrder, PropertyDisplayedIn):
        """ AddMemberPropertyFieldEx(self: CubeField, Property: str, PropertyOrder: object, PropertyDisplayedIn: object) """
        pass

    def ClearManualFilter(self):
        """ ClearManualFilter(self: CubeField) """
        pass

    def CreatePivotFields(self):
        """ CreatePivotFields(self: CubeField) """
        pass

    def Delete(self):
        """ Delete(self: CubeField) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllItemsVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllItemsVisible(self: CubeField) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CubeField) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: CubeField) -> str

Set: Caption(self: CubeField) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CubeField) -> XlCreator

"""

    CubeFieldSubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFieldSubType(self: CubeField) -> XlCubeFieldSubType

"""

    CubeFieldType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFieldType(self: CubeField) -> XlCubeFieldType

"""

    CurrentPageName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPageName(self: CubeField) -> str

Set: CurrentPageName(self: CubeField) = value
"""

    DragToColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToColumn(self: CubeField) -> bool

Set: DragToColumn(self: CubeField) = value
"""

    DragToData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToData(self: CubeField) -> bool

Set: DragToData(self: CubeField) = value
"""

    DragToHide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToHide(self: CubeField) -> bool

Set: DragToHide(self: CubeField) = value
"""

    DragToPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToPage(self: CubeField) -> bool

Set: DragToPage(self: CubeField) = value
"""

    DragToRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToRow(self: CubeField) -> bool

Set: DragToRow(self: CubeField) = value
"""

    EnableMultiplePageItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableMultiplePageItems(self: CubeField) -> bool

Set: EnableMultiplePageItems(self: CubeField) = value
"""

    FlattenHierarchies = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlattenHierarchies(self: CubeField) -> bool

Set: FlattenHierarchies(self: CubeField) = value
"""

    HasMemberProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMemberProperties(self: CubeField) -> bool

"""

    HiddenLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HiddenLevels(self: CubeField) -> int

Set: HiddenLevels(self: CubeField) = value
"""

    HierarchizeDistinct = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HierarchizeDistinct(self: CubeField) -> bool

Set: HierarchizeDistinct(self: CubeField) = value
"""

    IncludeNewItemsInFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeNewItemsInFilter(self: CubeField) -> bool

Set: IncludeNewItemsInFilter(self: CubeField) = value
"""

    IsDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDate(self: CubeField) -> bool

"""

    LayoutForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutForm(self: CubeField) -> XlLayoutFormType

Set: LayoutForm(self: CubeField) = value
"""

    LayoutSubtotalLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutSubtotalLocation(self: CubeField) -> XlSubtototalLocationType

Set: LayoutSubtotalLocation(self: CubeField) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: CubeField) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: CubeField) -> XlPivotFieldOrientation

Set: Orientation(self: CubeField) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CubeField) -> object

"""

    PivotFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotFields(self: CubeField) -> PivotFields

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: CubeField) -> int

Set: Position(self: CubeField) = value
"""

    ShowInFieldList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowInFieldList(self: CubeField) -> bool

Set: ShowInFieldList(self: CubeField) = value
"""

    TreeviewControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TreeviewControl(self: CubeField) -> TreeviewControl

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: CubeField) -> str

"""

    _Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Caption(self: CubeField) -> str

"""



class CubeFields(IEnumerable):
    # no doc
    def AddSet(self, Name, Caption):
        """ AddSet(self: CubeFields, Name: str, Caption: str) -> CubeField """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CubeFields) -> IEnumerator """
        pass

    def GetMeasure(self, AttributeHierarchy, Function, Caption):
        """ GetMeasure(self: CubeFields, AttributeHierarchy: object, Function: XlConsolidationFunction, Caption: object) -> CubeField """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CubeFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CubeFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CubeFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CubeFields) -> object

"""



class CustomProperties(IEnumerable):
    # no doc
    def Add(self, Name, Value):
        """ Add(self: CustomProperties, Name: str, Value: object) -> CustomProperty """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CustomProperties) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CustomProperties) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CustomProperties) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CustomProperties) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CustomProperties) -> object

"""



class CustomProperty:
    # no doc
    def Delete(self):
        """ Delete(self: CustomProperty) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CustomProperty) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CustomProperty) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: CustomProperty) -> str

Set: Name(self: CustomProperty) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CustomProperty) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: CustomProperty) -> object

Set: Value(self: CustomProperty) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: CustomProperty) -> object

"""



class CustomView:
    # no doc
    def Delete(self):
        """ Delete(self: CustomView) """
        pass

    def Show(self):
        """ Show(self: CustomView) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CustomView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CustomView) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: CustomView) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CustomView) -> object

"""

    PrintSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintSettings(self: CustomView) -> bool

"""

    RowColSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowColSettings(self: CustomView) -> bool

"""



class CustomViews(IEnumerable):
    # no doc
    def Add(self, ViewName, PrintSettings, RowColSettings):
        """ Add(self: CustomViews, ViewName: str, PrintSettings: object, RowColSettings: object) -> CustomView """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: CustomViews) -> IEnumerator """
        pass

    def Item(self, ViewName):
        """ Item(self: CustomViews, ViewName: object) -> CustomView """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: CustomViews) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: CustomViews) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: CustomViews) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: CustomViews) -> object

"""



class Databar:
    # no doc
    def Delete(self):
        """ Delete(self: Databar) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: Databar, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: Databar) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: Databar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Databar) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: Databar) -> Range

"""

    AxisColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisColor(self: Databar) -> object

"""

    AxisPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisPosition(self: Databar) -> XlDataBarAxisPosition

Set: AxisPosition(self: Databar) = value
"""

    BarBorder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarBorder(self: Databar) -> DataBarBorder

"""

    BarColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarColor(self: Databar) -> object

"""

    BarFillType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarFillType(self: Databar) -> XlDataBarFillType

Set: BarFillType(self: Databar) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Databar) -> XlCreator

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: Databar) -> int

Set: Direction(self: Databar) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Databar) -> str

Set: Formula(self: Databar) = value
"""

    MaxPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxPoint(self: Databar) -> ConditionValue

"""

    MinPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinPoint(self: Databar) -> ConditionValue

"""

    NegativeBarFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NegativeBarFormat(self: Databar) -> NegativeBarFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Databar) -> object

"""

    PercentMax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentMax(self: Databar) -> int

Set: PercentMax(self: Databar) = value
"""

    PercentMin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentMin(self: Databar) -> int

Set: PercentMin(self: Databar) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: Databar) -> int

Set: Priority(self: Databar) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: Databar) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: Databar) -> XlPivotConditionScope

Set: ScopeType(self: Databar) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: Databar) -> bool

Set: ShowValue(self: Databar) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: Databar) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Databar) -> int

"""



class DataBarBorder:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DataBarBorder) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: DataBarBorder) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DataBarBorder) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DataBarBorder) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: DataBarBorder) -> XlDataBarBorderType

Set: Type(self: DataBarBorder) = value
"""



class DataFeedConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: DataFeedConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: DataFeedConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: DataFeedConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: DataFeedConnection) -> bool

Set: AlwaysUseConnectionFile(self: DataFeedConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DataFeedConnection) -> Application

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: DataFeedConnection) -> object

Set: CommandText(self: DataFeedConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: DataFeedConnection) -> XlCmdType

Set: CommandType(self: DataFeedConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: DataFeedConnection) -> object

Set: Connection(self: DataFeedConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DataFeedConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: DataFeedConnection) -> bool

Set: EnableRefresh(self: DataFeedConnection) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DataFeedConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: DataFeedConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: DataFeedConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: DataFeedConnection) -> bool

Set: RefreshOnFileOpen(self: DataFeedConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: DataFeedConnection) -> int

Set: RefreshPeriod(self: DataFeedConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: DataFeedConnection) -> bool

Set: SavePassword(self: DataFeedConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: DataFeedConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: DataFeedConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: DataFeedConnection) -> str

Set: SourceConnectionFile(self: DataFeedConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: DataFeedConnection) -> str

Set: SourceDataFile(self: DataFeedConnection) = value
"""



class DataLabel:
    # no doc
    def Delete(self):
        """ Delete(self: DataLabel) -> object """
        pass

    def Select(self):
        """ Select(self: DataLabel) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DataLabel) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: DataLabel) -> object

Set: AutoScaleFont(self: DataLabel) = value
"""

    AutoText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoText(self: DataLabel) -> bool

Set: AutoText(self: DataLabel) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DataLabel) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DataLabel) -> str

Set: Caption(self: DataLabel) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DataLabel) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: DataLabel) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DataLabel) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DataLabel) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: DataLabel) -> str

Set: Formula(self: DataLabel) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: DataLabel) -> str

Set: FormulaLocal(self: DataLabel) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: DataLabel) -> str

Set: FormulaR1C1(self: DataLabel) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: DataLabel) -> str

Set: FormulaR1C1Local(self: DataLabel) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DataLabel) -> float

Set: Height(self: DataLabel) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: DataLabel) -> object

Set: HorizontalAlignment(self: DataLabel) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DataLabel) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DataLabel) -> float

Set: Left(self: DataLabel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DataLabel) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: DataLabel) -> str

Set: NumberFormat(self: DataLabel) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: DataLabel) -> bool

Set: NumberFormatLinked(self: DataLabel) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: DataLabel) -> object

Set: NumberFormatLocal(self: DataLabel) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: DataLabel) -> object

Set: Orientation(self: DataLabel) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DataLabel) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: DataLabel) -> XlDataLabelPosition

Set: Position(self: DataLabel) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: DataLabel) -> int

Set: ReadingOrder(self: DataLabel) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Separator(self: DataLabel) -> object

Set: Separator(self: DataLabel) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: DataLabel) -> bool

Set: Shadow(self: DataLabel) = value
"""

    ShowBubbleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowBubbleSize(self: DataLabel) -> bool

Set: ShowBubbleSize(self: DataLabel) = value
"""

    ShowCategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCategoryName(self: DataLabel) -> bool

Set: ShowCategoryName(self: DataLabel) = value
"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: DataLabel) -> bool

Set: ShowLegendKey(self: DataLabel) = value
"""

    ShowPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPercentage(self: DataLabel) -> bool

Set: ShowPercentage(self: DataLabel) = value
"""

    ShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRange(self: DataLabel) -> bool

Set: ShowRange(self: DataLabel) = value
"""

    ShowSeriesName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSeriesName(self: DataLabel) -> bool

Set: ShowSeriesName(self: DataLabel) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: DataLabel) -> bool

Set: ShowValue(self: DataLabel) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DataLabel) -> str

Set: Text(self: DataLabel) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DataLabel) -> float

Set: Top(self: DataLabel) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: DataLabel) -> object

Set: Type(self: DataLabel) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: DataLabel) -> object

Set: VerticalAlignment(self: DataLabel) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DataLabel) -> float

Set: Width(self: DataLabel) = value
"""

    _Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Height(self: DataLabel) -> float

"""

    _Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Width(self: DataLabel) -> float

"""



class DataLabels(IEnumerable):
    # no doc
    def Delete(self):
        """ Delete(self: DataLabels) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: DataLabels) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: DataLabels, Index: object) -> DataLabel """
        pass

    def Propagate(self, Index):
        """ Propagate(self: DataLabels, Index: object) """
        pass

    def Select(self):
        """ Select(self: DataLabels) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: DataLabels, Index: object) -> DataLabel """
        pass

    def _Dummy10(self):
        """ _Dummy10(self: DataLabels) """
        pass

    def _Dummy13(self):
        """ _Dummy13(self: DataLabels) """
        pass

    def _Dummy16(self):
        """ _Dummy16(self: DataLabels) """
        pass

    def _Dummy17(self):
        """ _Dummy17(self: DataLabels) """
        pass

    def _Dummy9(self):
        """ _Dummy9(self: DataLabels) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DataLabels) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: DataLabels) -> object

Set: AutoScaleFont(self: DataLabels) = value
"""

    AutoText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoText(self: DataLabels) -> bool

Set: AutoText(self: DataLabels) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DataLabels) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DataLabels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DataLabels) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: DataLabels) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DataLabels) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DataLabels) -> ChartFormat

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: DataLabels) -> object

Set: HorizontalAlignment(self: DataLabels) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DataLabels) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DataLabels) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: DataLabels) -> str

Set: NumberFormat(self: DataLabels) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: DataLabels) -> bool

Set: NumberFormatLinked(self: DataLabels) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: DataLabels) -> object

Set: NumberFormatLocal(self: DataLabels) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: DataLabels) -> object

Set: Orientation(self: DataLabels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DataLabels) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: DataLabels) -> XlDataLabelPosition

Set: Position(self: DataLabels) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: DataLabels) -> int

Set: ReadingOrder(self: DataLabels) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Separator(self: DataLabels) -> object

Set: Separator(self: DataLabels) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: DataLabels) -> bool

Set: Shadow(self: DataLabels) = value
"""

    ShowBubbleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowBubbleSize(self: DataLabels) -> bool

Set: ShowBubbleSize(self: DataLabels) = value
"""

    ShowCategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCategoryName(self: DataLabels) -> bool

Set: ShowCategoryName(self: DataLabels) = value
"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: DataLabels) -> bool

Set: ShowLegendKey(self: DataLabels) = value
"""

    ShowPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPercentage(self: DataLabels) -> bool

Set: ShowPercentage(self: DataLabels) = value
"""

    ShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRange(self: DataLabels) -> bool

Set: ShowRange(self: DataLabels) = value
"""

    ShowSeriesName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSeriesName(self: DataLabels) -> bool

Set: ShowSeriesName(self: DataLabels) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: DataLabels) -> bool

Set: ShowValue(self: DataLabels) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: DataLabels) -> object

Set: Type(self: DataLabels) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: DataLabels) -> object

Set: VerticalAlignment(self: DataLabels) = value
"""



class DataTable:
    # no doc
    def Delete(self):
        """ Delete(self: DataTable) """
        pass

    def Select(self):
        """ Select(self: DataTable) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DataTable) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: DataTable) -> object

Set: AutoScaleFont(self: DataTable) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DataTable) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DataTable) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DataTable) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DataTable) -> ChartFormat

"""

    HasBorderHorizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderHorizontal(self: DataTable) -> bool

Set: HasBorderHorizontal(self: DataTable) = value
"""

    HasBorderOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderOutline(self: DataTable) -> bool

Set: HasBorderOutline(self: DataTable) = value
"""

    HasBorderVertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderVertical(self: DataTable) -> bool

Set: HasBorderVertical(self: DataTable) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DataTable) -> object

"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: DataTable) -> bool

Set: ShowLegendKey(self: DataTable) = value
"""



class DefaultWebOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowPNG = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowPNG(self: DefaultWebOptions) -> bool

Set: AllowPNG(self: DefaultWebOptions) = value
"""

    AlwaysSaveInDefaultEncoding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) -> bool

Set: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DefaultWebOptions) -> Application

"""

    CheckIfOfficeIsHTMLEditor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) -> bool

Set: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DefaultWebOptions) -> XlCreator

"""

    DownloadComponents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownloadComponents(self: DefaultWebOptions) -> bool

Set: DownloadComponents(self: DefaultWebOptions) = value
"""

    Encoding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Encoding(self: DefaultWebOptions) -> MsoEncoding

Set: Encoding(self: DefaultWebOptions) = value
"""

    FolderSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FolderSuffix(self: DefaultWebOptions) -> str

"""

    Fonts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fonts(self: DefaultWebOptions) -> WebPageFonts

"""

    LoadPictures = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LoadPictures(self: DefaultWebOptions) -> bool

Set: LoadPictures(self: DefaultWebOptions) = value
"""

    LocationOfComponents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocationOfComponents(self: DefaultWebOptions) -> str

Set: LocationOfComponents(self: DefaultWebOptions) = value
"""

    OrganizeInFolder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrganizeInFolder(self: DefaultWebOptions) -> bool

Set: OrganizeInFolder(self: DefaultWebOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DefaultWebOptions) -> object

"""

    PixelsPerInch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PixelsPerInch(self: DefaultWebOptions) -> int

Set: PixelsPerInch(self: DefaultWebOptions) = value
"""

    RelyOnCSS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelyOnCSS(self: DefaultWebOptions) -> bool

Set: RelyOnCSS(self: DefaultWebOptions) = value
"""

    RelyOnVML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelyOnVML(self: DefaultWebOptions) -> bool

Set: RelyOnVML(self: DefaultWebOptions) = value
"""

    SaveHiddenData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveHiddenData(self: DefaultWebOptions) -> bool

Set: SaveHiddenData(self: DefaultWebOptions) = value
"""

    SaveNewWebPagesAsWebArchives = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) -> bool

Set: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) = value
"""

    ScreenSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenSize(self: DefaultWebOptions) -> MsoScreenSize

Set: ScreenSize(self: DefaultWebOptions) = value
"""

    TargetBrowser = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TargetBrowser(self: DefaultWebOptions) -> MsoTargetBrowser

Set: TargetBrowser(self: DefaultWebOptions) = value
"""

    UpdateLinksOnSave = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpdateLinksOnSave(self: DefaultWebOptions) -> bool

Set: UpdateLinksOnSave(self: DefaultWebOptions) = value
"""

    UseLongFileNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLongFileNames(self: DefaultWebOptions) -> bool

Set: UseLongFileNames(self: DefaultWebOptions) = value
"""



class Diagram:
    # no doc
    def Convert(self, Type):
        """ Convert(self: Diagram, Type: MsoDiagramType) """
        pass

    def FitText(self):
        """ FitText(self: Diagram) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Diagram) -> Application

"""

    AutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFormat(self: Diagram) -> MsoTriState

Set: AutoFormat(self: Diagram) = value
"""

    AutoLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLayout(self: Diagram) -> MsoTriState

Set: AutoLayout(self: Diagram) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Diagram) -> XlCreator

"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: Diagram) -> DiagramNodes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Diagram) -> object

"""

    Reverse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reverse(self: Diagram) -> MsoTriState

Set: Reverse(self: Diagram) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Diagram) -> MsoDiagramType

"""



class DiagramNode(_IMsoDispObj):
    # no doc
    def AddNode(self, pos, nodeType):
        """ AddNode(self: DiagramNode, pos: MsoRelativeNodePosition, nodeType: MsoDiagramNodeType) -> DiagramNode """
        pass

    def CloneNode(self, copyChildren, pTargetNode, pos):
        """ CloneNode(self: DiagramNode, copyChildren: bool, pTargetNode: DiagramNode, pos: MsoRelativeNodePosition) -> DiagramNode """
        pass

    def Delete(self):
        """ Delete(self: DiagramNode) """
        pass

    def MoveNode(self, pTargetNode, pos):
        """ MoveNode(self: DiagramNode, pTargetNode: DiagramNode, pos: MsoRelativeNodePosition) """
        pass

    def NextNode(self):
        """ NextNode(self: DiagramNode) -> DiagramNode """
        pass

    def PrevNode(self):
        """ PrevNode(self: DiagramNode) -> DiagramNode """
        pass

    def ReplaceNode(self, pTargetNode):
        """ ReplaceNode(self: DiagramNode, pTargetNode: DiagramNode) """
        pass

    def SwapNode(self, pTargetNode, swapChildren):
        """ SwapNode(self: DiagramNode, pTargetNode: DiagramNode, swapChildren: bool) """
        pass

    def TransferChildren(self, pReceivingNode):
        """ TransferChildren(self: DiagramNode, pReceivingNode: DiagramNode) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DiagramNode) -> object

"""

    Children = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Children(self: DiagramNode) -> DiagramNodeChildren

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DiagramNode) -> int

"""

    Diagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diagram(self: DiagramNode) -> IMsoDiagram

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: DiagramNode) -> MsoOrgChartLayoutType

Set: Layout(self: DiagramNode) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DiagramNode) -> object

"""

    Root = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Root(self: DiagramNode) -> DiagramNode

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: DiagramNode) -> Shape

"""

    TextShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextShape(self: DiagramNode) -> Shape

"""



class DiagramNodeChildren(_IMsoDispObj, IEnumerable):
    # no doc
    def AddNode(self, Index, nodeType):
        """ AddNode(self: DiagramNodeChildren, Index: object, nodeType: MsoDiagramNodeType) -> DiagramNode """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: DiagramNodeChildren) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: DiagramNodeChildren, Index: object) -> DiagramNode """
        pass

    def SelectAll(self):
        """ SelectAll(self: DiagramNodeChildren) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DiagramNodeChildren) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DiagramNodeChildren) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DiagramNodeChildren) -> int

"""

    FirstChild = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstChild(self: DiagramNodeChildren) -> DiagramNode

"""

    LastChild = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LastChild(self: DiagramNodeChildren) -> DiagramNode

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DiagramNodeChildren) -> object

"""



class DiagramNodes(_IMsoDispObj, IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: DiagramNodes) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: DiagramNodes, Index: object) -> DiagramNode """
        pass

    def SelectAll(self):
        """ SelectAll(self: DiagramNodes) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DiagramNodes) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DiagramNodes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DiagramNodes) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DiagramNodes) -> object

"""



class Dialog:
    # no doc
    def Show(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Show(self: Dialog, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Dialog) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Dialog) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Dialog) -> object

"""



class DialogFrame:
    # no doc
    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: DialogFrame, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: DialogFrame, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: DialogFrame, Replace: object) -> object """
        pass

    def _Dummy10(self):
        """ _Dummy10(self: DialogFrame) """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: DialogFrame) """
        pass

    def _Dummy17(self):
        """ _Dummy17(self: DialogFrame) """
        pass

    def _Dummy18(self):
        """ _Dummy18(self: DialogFrame) """
        pass

    def _Dummy20(self):
        """ _Dummy20(self: DialogFrame) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: DialogFrame) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: DialogFrame) """
        pass

    def _Dummy25(self):
        """ _Dummy25(self: DialogFrame) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: DialogFrame) """
        pass

    def _Dummy4(self):
        """ _Dummy4(self: DialogFrame) """
        pass

    def _Dummy5(self):
        """ _Dummy5(self: DialogFrame) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: DialogFrame) """
        pass

    def _Dummy8(self):
        """ _Dummy8(self: DialogFrame) """
        pass

    def _Dummy9(self):
        """ _Dummy9(self: DialogFrame) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DialogFrame) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DialogFrame) -> str

Set: Caption(self: DialogFrame) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DialogFrame) -> XlCreator

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DialogFrame) -> float

Set: Height(self: DialogFrame) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DialogFrame) -> float

Set: Left(self: DialogFrame) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: DialogFrame) -> bool

Set: Locked(self: DialogFrame) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: DialogFrame) -> bool

Set: LockedText(self: DialogFrame) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DialogFrame) -> str

Set: Name(self: DialogFrame) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: DialogFrame) -> str

Set: OnAction(self: DialogFrame) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DialogFrame) -> object

"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: DialogFrame) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DialogFrame) -> str

Set: Text(self: DialogFrame) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DialogFrame) -> float

Set: Top(self: DialogFrame) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DialogFrame) -> float

Set: Width(self: DialogFrame) = value
"""



class Dialogs(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Dialogs) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Dialogs) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Dialogs) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Dialogs) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Dialogs) -> object

"""



class DialogSheet:
    # no doc
    def Activate(self):
        """ Activate(self: DialogSheet) """
        pass

    def Arcs(self, Index):
        """ Arcs(self: DialogSheet, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: DialogSheet, Index: object) -> object """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: DialogSheet, Index: object) -> object """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: DialogSheet, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: DialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def CircleInvalid(self):
        """ CircleInvalid(self: DialogSheet) """
        pass

    def ClearCircles(self):
        """ ClearCircles(self: DialogSheet) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: DialogSheet, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: DialogSheet) """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: DialogSheet, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: DialogSheet, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: DialogSheet, Index: object) -> object """
        pass

    def EditBoxes(self, Index):
        """ EditBoxes(self: DialogSheet, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: DialogSheet, Name: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: DialogSheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: DialogSheet, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: DialogSheet, Index: object) -> object """
        pass

    def Hide(self, Cancel):
        """ Hide(self: DialogSheet, Cancel: object) -> bool """
        pass

    def Labels(self, Index):
        """ Labels(self: DialogSheet, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: DialogSheet, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: DialogSheet, Index: object) -> object """
        pass

    def Move(self, Before, After):
        """ Move(self: DialogSheet, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: DialogSheet, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: DialogSheet, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: DialogSheet, Index: object) -> object """
        pass

    def Paste(self, Destination, Link):
        """ Paste(self: DialogSheet, Destination: object, Link: object) """
        pass

    def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting):
        """ PasteSpecial(self: DialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: DialogSheet, Index: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: DialogSheet, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables):
        """ Protect(self: DialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: DialogSheet, Index: object) -> object """
        pass

    def ResetAllPageBreaks(self):
        """ ResetAllPageBreaks(self: DialogSheet) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: DialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: DialogSheet, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: DialogSheet, Replace: object) """
        pass

    def Show(self):
        """ Show(self: DialogSheet) -> bool """
        pass

    def Spinners(self, Index):
        """ Spinners(self: DialogSheet, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: DialogSheet, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: DialogSheet, Password: object) """
        pass

    def _CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript):
        """ _CheckSpelling(self: DialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        pass

    def _Dummy113(self):
        """ _Dummy113(self: DialogSheet) """
        pass

    def _Dummy114(self):
        """ _Dummy114(self: DialogSheet) """
        pass

    def _Dummy115(self):
        """ _Dummy115(self: DialogSheet) """
        pass

    def _Dummy29(self):
        """ _Dummy29(self: DialogSheet) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: DialogSheet) """
        pass

    def _Dummy32(self):
        """ _Dummy32(self: DialogSheet) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: DialogSheet) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: DialogSheet) """
        pass

    def _Dummy40(self):
        """ _Dummy40(self: DialogSheet) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: DialogSheet) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: DialogSheet) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: DialogSheet) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: DialogSheet) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: DialogSheet) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: DialogSheet) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: DialogSheet) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: DialogSheet) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: DialogSheet) """
        pass

    def _Dummy69(self):
        """ _Dummy69(self: DialogSheet) """
        pass

    def _Dummy74(self):
        """ _Dummy74(self: DialogSheet) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: DialogSheet) """
        pass

    def _Dummy76(self):
        """ _Dummy76(self: DialogSheet) """
        pass

    def _Dummy78(self):
        """ _Dummy78(self: DialogSheet) """
        pass

    def _Dummy79(self):
        """ _Dummy79(self: DialogSheet) """
        pass

    def _Dummy82(self):
        """ _Dummy82(self: DialogSheet) """
        pass

    def _Dummy83(self):
        """ _Dummy83(self: DialogSheet) """
        pass

    def _Dummy85(self):
        """ _Dummy85(self: DialogSheet) """
        pass

    def _Dummy86(self):
        """ _Dummy86(self: DialogSheet) """
        pass

    def _Dummy88(self):
        """ _Dummy88(self: DialogSheet) """
        pass

    def _Dummy89(self):
        """ _Dummy89(self: DialogSheet) """
        pass

    def _Dummy90(self):
        """ _Dummy90(self: DialogSheet) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: DialogSheet, Name: object) -> object """
        pass

    def _PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel):
        """ _PasteSpecial(self: DialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: DialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: DialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DialogSheet) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: DialogSheet) -> AutoFilter

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: DialogSheet) -> str

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: DialogSheet) -> Comments

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DialogSheet) -> XlCreator

"""

    CustomProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomProperties(self: DialogSheet) -> CustomProperties

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: DialogSheet) -> object

Set: DefaultButton(self: DialogSheet) = value
"""

    DialogFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogFrame(self: DialogSheet) -> DialogFrame

"""

    DisplayAutomaticPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutomaticPageBreaks(self: DialogSheet) -> bool

Set: DisplayAutomaticPageBreaks(self: DialogSheet) = value
"""

    DisplayPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPageBreaks(self: DialogSheet) -> bool

Set: DisplayPageBreaks(self: DialogSheet) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: DialogSheet) -> bool

Set: DisplayRightToLeft(self: DialogSheet) = value
"""

    EnableAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoFilter(self: DialogSheet) -> bool

Set: EnableAutoFilter(self: DialogSheet) = value
"""

    EnableCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCalculation(self: DialogSheet) -> bool

Set: EnableCalculation(self: DialogSheet) = value
"""

    EnableFormatConditionsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFormatConditionsCalculation(self: DialogSheet) -> bool

Set: EnableFormatConditionsCalculation(self: DialogSheet) = value
"""

    EnableOutlining = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableOutlining(self: DialogSheet) -> bool

Set: EnableOutlining(self: DialogSheet) = value
"""

    EnablePivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnablePivotTable(self: DialogSheet) -> bool

Set: EnablePivotTable(self: DialogSheet) = value
"""

    EnableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSelection(self: DialogSheet) -> XlEnableSelection

Set: EnableSelection(self: DialogSheet) = value
"""

    Focus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Focus(self: DialogSheet) -> object

Set: Focus(self: DialogSheet) = value
"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: DialogSheet) -> HPageBreaks

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: DialogSheet) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: DialogSheet) -> int

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: DialogSheet) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DialogSheet) -> str

Set: Name(self: DialogSheet) = value
"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: DialogSheet) -> Names

"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: DialogSheet) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: DialogSheet) -> str

Set: OnDoubleClick(self: DialogSheet) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: DialogSheet) -> str

Set: OnSheetActivate(self: DialogSheet) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: DialogSheet) -> str

Set: OnSheetDeactivate(self: DialogSheet) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: DialogSheet) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DialogSheet) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: DialogSheet) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: DialogSheet) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: DialogSheet) -> bool

"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: DialogSheet) -> bool

"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: DialogSheet) -> Protection

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: DialogSheet) -> bool

"""

    ProtectScenarios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectScenarios(self: DialogSheet) -> bool

"""

    QueryTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTables(self: DialogSheet) -> QueryTables

"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: DialogSheet) -> Scripts

"""

    ScrollArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollArea(self: DialogSheet) -> str

Set: ScrollArea(self: DialogSheet) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: DialogSheet) -> Shapes

"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: DialogSheet) -> SmartTags

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: DialogSheet) -> Sort

"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: DialogSheet) -> Tab

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: DialogSheet) -> XlSheetVisibility

Set: Visible(self: DialogSheet) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: DialogSheet) -> VPageBreaks

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: DialogSheet) -> str

Set: _CodeName(self: DialogSheet) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: DialogSheet) -> int

Set: _DisplayRightToLeft(self: DialogSheet) = value
"""



class DialogSheets(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: DialogSheets, Before: object, After: object, Count: object) -> DialogSheet """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: DialogSheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: DialogSheets, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: DialogSheets) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: DialogSheets) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: DialogSheets, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: DialogSheets, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: DialogSheets, Replace: object) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: DialogSheets) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DialogSheets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DialogSheets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DialogSheets) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: DialogSheets) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DialogSheets) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: DialogSheets) -> object

Set: Visible(self: DialogSheets) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: DialogSheets) -> VPageBreaks

"""



class DialogSheetView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DialogSheetView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DialogSheetView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DialogSheetView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: DialogSheetView) -> object

"""



class DisplayFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: DisplayFormat) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DisplayFormat) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: DisplayFormat) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DisplayFormat) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DisplayFormat) -> Font

"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: DisplayFormat) -> object

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: DisplayFormat) -> object

"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: DisplayFormat) -> object

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DisplayFormat) -> Interior

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: DisplayFormat) -> object

"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: DisplayFormat) -> object

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: DisplayFormat) -> object

"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: DisplayFormat) -> object

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: DisplayFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DisplayFormat) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: DisplayFormat) -> int

"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: DisplayFormat) -> object

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: DisplayFormat) -> object

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: DisplayFormat) -> object

"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: DisplayFormat) -> object

"""



class DisplayUnitLabel:
    # no doc
    def Delete(self):
        """ Delete(self: DisplayUnitLabel) -> object """
        pass

    def Select(self):
        """ Select(self: DisplayUnitLabel) -> object """
        pass

    def _Dummy21(self):
        """ _Dummy21(self: DisplayUnitLabel) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DisplayUnitLabel) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: DisplayUnitLabel) -> object

Set: AutoScaleFont(self: DisplayUnitLabel) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DisplayUnitLabel) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DisplayUnitLabel) -> str

Set: Caption(self: DisplayUnitLabel) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DisplayUnitLabel) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: DisplayUnitLabel) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DisplayUnitLabel) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DisplayUnitLabel) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: DisplayUnitLabel) -> str

Set: Formula(self: DisplayUnitLabel) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: DisplayUnitLabel) -> str

Set: FormulaLocal(self: DisplayUnitLabel) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: DisplayUnitLabel) -> str

Set: FormulaR1C1(self: DisplayUnitLabel) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: DisplayUnitLabel) -> str

Set: FormulaR1C1Local(self: DisplayUnitLabel) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DisplayUnitLabel) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: DisplayUnitLabel) -> object

Set: HorizontalAlignment(self: DisplayUnitLabel) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DisplayUnitLabel) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DisplayUnitLabel) -> float

Set: Left(self: DisplayUnitLabel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DisplayUnitLabel) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: DisplayUnitLabel) -> object

Set: Orientation(self: DisplayUnitLabel) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DisplayUnitLabel) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: DisplayUnitLabel) -> XlChartElementPosition

Set: Position(self: DisplayUnitLabel) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: DisplayUnitLabel) -> int

Set: ReadingOrder(self: DisplayUnitLabel) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: DisplayUnitLabel) -> bool

Set: Shadow(self: DisplayUnitLabel) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DisplayUnitLabel) -> str

Set: Text(self: DisplayUnitLabel) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DisplayUnitLabel) -> float

Set: Top(self: DisplayUnitLabel) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: DisplayUnitLabel) -> object

Set: VerticalAlignment(self: DisplayUnitLabel) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DisplayUnitLabel) -> float

"""



class DocEvents:
    # no doc
    def Activate(self):
        """ Activate(self: DocEvents) """
        pass

    def BeforeDelete(self):
        """ BeforeDelete(self: DocEvents) """
        pass

    def BeforeDoubleClick(self, Target, Cancel):
        """ BeforeDoubleClick(self: DocEvents, Target: Range) -> bool """
        pass

    def BeforeRightClick(self, Target, Cancel):
        """ BeforeRightClick(self: DocEvents, Target: Range) -> bool """
        pass

    def Calculate(self):
        """ Calculate(self: DocEvents) """
        pass

    def Change(self, Target):
        """ Change(self: DocEvents, Target: Range) """
        pass

    def Deactivate(self):
        """ Deactivate(self: DocEvents) """
        pass

    def FollowHyperlink(self, Target):
        """ FollowHyperlink(self: DocEvents, Target: Hyperlink) """
        pass

    def LensGalleryRenderComplete(self):
        """ LensGalleryRenderComplete(self: DocEvents) """
        pass

    def PivotTableAfterValueChange(self, TargetPivotTable, TargetRange):
        """ PivotTableAfterValueChange(self: DocEvents, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def PivotTableBeforeAllocateChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ PivotTableBeforeAllocateChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def PivotTableBeforeCommitChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ PivotTableBeforeCommitChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def PivotTableBeforeDiscardChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ PivotTableBeforeDiscardChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def PivotTableChangeSync(self, Target):
        """ PivotTableChangeSync(self: DocEvents, Target: PivotTable) """
        pass

    def PivotTableUpdate(self, Target):
        """ PivotTableUpdate(self: DocEvents, Target: PivotTable) """
        pass

    def SelectionChange(self, Target):
        """ SelectionChange(self: DocEvents, Target: Range) """
        pass

    def TableUpdate(self, Target):
        """ TableUpdate(self: DocEvents, Target: TableObject) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DocEvents_ActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_ActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: DocEvents_ActivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_BeforeDeleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_BeforeDeleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: DocEvents_BeforeDeleteEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_BeforeDoubleClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_BeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target, Cancel):
        """ Invoke(self: DocEvents_BeforeDoubleClickEventHandler, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_BeforeRightClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_BeforeRightClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target, Cancel):
        """ Invoke(self: DocEvents_BeforeRightClickEventHandler, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_CalculateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_CalculateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: DocEvents_CalculateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_ChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_ChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_ChangeEventHandler, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_DeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: DocEvents_DeactivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_Event:
    # no doc
# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Change: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_FollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_LensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_TableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Change: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_FollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_LensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_TableUpdate: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Activate = None
    BeforeDelete = None
    BeforeDoubleClick = None
    BeforeRightClick = None
    Calculate = None
    Change = None
    Deactivate = None
    FollowHyperlink = None
    LensGalleryRenderComplete = None
    PivotTableAfterValueChange = None
    PivotTableBeforeAllocateChanges = None
    PivotTableBeforeCommitChanges = None
    PivotTableBeforeDiscardChanges = None
    PivotTableChangeSync = None
    PivotTableUpdate = None
    SelectionChange = None
    TableUpdate = None


class DocEvents_FollowHyperlinkEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_FollowHyperlinkEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_FollowHyperlinkEventHandler, Target: Hyperlink) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_LensGalleryRenderCompleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_LensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: DocEvents_LensGalleryRenderCompleteEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableAfterValueChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, TargetPivotTable, TargetRange):
        """ Invoke(self: DocEvents_PivotTableAfterValueChangeEventHandler, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableBeforeAllocateChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: DocEvents_PivotTableBeforeAllocateChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableBeforeCommitChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: DocEvents_PivotTableBeforeCommitChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableBeforeDiscardChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ Invoke(self: DocEvents_PivotTableBeforeDiscardChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableChangeSyncEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableChangeSyncEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_PivotTableChangeSyncEventHandler, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_PivotTableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_PivotTableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_PivotTableUpdateEventHandler, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_SelectionChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_SelectionChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_SelectionChangeEventHandler, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DocEvents_SinkHelper(object, DocEvents):
    # no doc
    def Activate(self):
        """ Activate(self: DocEvents_SinkHelper) """
        pass

    def BeforeDelete(self):
        """ BeforeDelete(self: DocEvents_SinkHelper) """
        pass

# Error generating skeleton for function BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeRightClick: sequence item 1: expected string, NoneType found

    def Calculate(self):
        """ Calculate(self: DocEvents_SinkHelper) """
        pass

# Error generating skeleton for function Change: sequence item 1: expected string, NoneType found

    def Deactivate(self):
        """ Deactivate(self: DocEvents_SinkHelper) """
        pass

# Error generating skeleton for function FollowHyperlink: sequence item 1: expected string, NoneType found

    def LensGalleryRenderComplete(self):
        """ LensGalleryRenderComplete(self: DocEvents_SinkHelper) """
        pass

# Error generating skeleton for function PivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function TableUpdate: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_ActivateDelegate = None
    m_BeforeDeleteDelegate = None
    m_BeforeDoubleClickDelegate = None
    m_BeforeRightClickDelegate = None
    m_CalculateDelegate = None
    m_ChangeDelegate = None
    m_DeactivateDelegate = None
    m_dwCookie = None
    m_FollowHyperlinkDelegate = None
    m_LensGalleryRenderCompleteDelegate = None
    m_PivotTableAfterValueChangeDelegate = None
    m_PivotTableBeforeAllocateChangesDelegate = None
    m_PivotTableBeforeCommitChangesDelegate = None
    m_PivotTableBeforeDiscardChangesDelegate = None
    m_PivotTableChangeSyncDelegate = None
    m_PivotTableUpdateDelegate = None
    m_SelectionChangeDelegate = None
    m_TableUpdateDelegate = None


class DocEvents_TableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DocEvents_TableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: DocEvents_TableUpdateEventHandler, Target: TableObject) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DownBars:
    # no doc
    def Delete(self):
        """ Delete(self: DownBars) -> object """
        pass

    def Select(self):
        """ Select(self: DownBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DownBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DownBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DownBars) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: DownBars) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DownBars) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DownBars) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DownBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DownBars) -> object

"""



class Drawing:
    # no doc
    def AddVertex(self, Left, Top):
        """ AddVertex(self: Drawing, Left: float, Top: float) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: Drawing) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Drawing, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Drawing) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Drawing, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Drawing) -> object """
        pass

    def Delete(self):
        """ Delete(self: Drawing) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Drawing) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: Drawing, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Drawing, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Drawing) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Drawing) -> bool

Set: AddIndent(self: Drawing) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Drawing) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Drawing) -> object

Set: AutoScaleFont(self: Drawing) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Drawing) -> bool

Set: AutoSize(self: Drawing) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Drawing) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Drawing) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Drawing) -> str

Set: Caption(self: Drawing) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Drawing) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Drawing) -> bool

Set: Enabled(self: Drawing) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Drawing) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Drawing) -> str

Set: Formula(self: Drawing) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Drawing) -> float

Set: Height(self: Drawing) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Drawing) -> object

Set: HorizontalAlignment(self: Drawing) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Drawing) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Drawing) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Drawing) -> float

Set: Left(self: Drawing) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Drawing) -> bool

Set: Locked(self: Drawing) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Drawing) -> bool

Set: LockedText(self: Drawing) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Drawing) -> str

Set: Name(self: Drawing) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Drawing) -> str

Set: OnAction(self: Drawing) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Drawing) -> object

Set: Orientation(self: Drawing) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Drawing) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Drawing) -> object

Set: Placement(self: Drawing) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Drawing) -> bool

Set: PrintObject(self: Drawing) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Drawing) -> int

Set: ReadingOrder(self: Drawing) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Drawing) -> bool

Set: Shadow(self: Drawing) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Drawing) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Drawing) -> str

Set: Text(self: Drawing) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Drawing) -> float

Set: Top(self: Drawing) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Drawing) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Drawing) -> object

Set: VerticalAlignment(self: Drawing) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Drawing) -> bool

Set: Visible(self: Drawing) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Drawing) -> float

Set: Width(self: Drawing) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Drawing) -> int

"""



class DrawingObjects(IEnumerable):
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: DrawingObjects, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: DrawingObjects) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: DrawingObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: DrawingObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: DrawingObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: DrawingObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: DrawingObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: DrawingObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: DrawingObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: DrawingObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: DrawingObjects, Index: object) -> object """
        pass

    def LinkCombo(self, Link):
        """ LinkCombo(self: DrawingObjects, Link: object) -> object """
        pass

    def List(self, Index):
        """ List(self: DrawingObjects, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: DrawingObjects) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: DrawingObjects, Index: int, Count: object) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: DrawingObjects, Vertex: int, Insert: object, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: DrawingObjects, Replace: object) -> object """
        pass

    def Selected(self, Index):
        """ Selected(self: DrawingObjects, Index: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: DrawingObjects) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: DrawingObjects) -> object """
        pass

    def Vertices(self, Index1, Index2):
        """ Vertices(self: DrawingObjects, Index1: object, Index2: object) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: DrawingObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: DrawingObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: DrawingObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: DrawingObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: DrawingObjects) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: DrawingObjects) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: DrawingObjects) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: DrawingObjects) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: DrawingObjects) -> object

Set: Accelerator(self: DrawingObjects) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: DrawingObjects) -> bool

Set: AddIndent(self: DrawingObjects) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DrawingObjects) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: DrawingObjects) -> object

Set: ArrowHeadLength(self: DrawingObjects) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: DrawingObjects) -> object

Set: ArrowHeadStyle(self: DrawingObjects) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: DrawingObjects) -> object

Set: ArrowHeadWidth(self: DrawingObjects) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: DrawingObjects) -> bool

Set: AutoSize(self: DrawingObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DrawingObjects) -> Border

"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: DrawingObjects) -> bool

Set: CancelButton(self: DrawingObjects) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DrawingObjects) -> str

Set: Caption(self: DrawingObjects) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DrawingObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DrawingObjects) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: DrawingObjects) -> bool

Set: DefaultButton(self: DrawingObjects) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: DrawingObjects) -> bool

Set: DismissButton(self: DrawingObjects) = value
"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: DrawingObjects) -> bool

Set: Display3DShading(self: DrawingObjects) = value
"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: DrawingObjects) -> bool

Set: DisplayVerticalScrollBar(self: DrawingObjects) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: DrawingObjects) -> int

Set: DropDownLines(self: DrawingObjects) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: DrawingObjects) -> bool

Set: Enabled(self: DrawingObjects) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: DrawingObjects) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DrawingObjects) -> float

Set: Height(self: DrawingObjects) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: DrawingObjects) -> bool

Set: HelpButton(self: DrawingObjects) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: DrawingObjects) -> object

Set: HorizontalAlignment(self: DrawingObjects) = value
"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: DrawingObjects) -> int

Set: InputType(self: DrawingObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: DrawingObjects) -> Interior

"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: DrawingObjects) -> int

Set: LargeChange(self: DrawingObjects) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DrawingObjects) -> float

Set: Left(self: DrawingObjects) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: DrawingObjects) -> str

Set: LinkedCell(self: DrawingObjects) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: DrawingObjects) -> str

Set: ListFillRange(self: DrawingObjects) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: DrawingObjects) -> int

Set: ListIndex(self: DrawingObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: DrawingObjects) -> bool

Set: Locked(self: DrawingObjects) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: DrawingObjects) -> bool

Set: LockedText(self: DrawingObjects) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: DrawingObjects) -> int

Set: Max(self: DrawingObjects) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: DrawingObjects) -> int

Set: Min(self: DrawingObjects) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: DrawingObjects) -> bool

Set: MultiLine(self: DrawingObjects) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: DrawingObjects) -> bool

Set: MultiSelect(self: DrawingObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: DrawingObjects) -> str

Set: OnAction(self: DrawingObjects) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: DrawingObjects) -> object

Set: Orientation(self: DrawingObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DrawingObjects) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: DrawingObjects) -> object

Set: PhoneticAccelerator(self: DrawingObjects) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: DrawingObjects) -> object

Set: Placement(self: DrawingObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: DrawingObjects) -> bool

Set: PrintObject(self: DrawingObjects) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: DrawingObjects) -> int

Set: ReadingOrder(self: DrawingObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: DrawingObjects) -> bool

Set: RoundedCorners(self: DrawingObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: DrawingObjects) -> bool

Set: Shadow(self: DrawingObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: DrawingObjects) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: DrawingObjects) -> int

Set: SmallChange(self: DrawingObjects) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DrawingObjects) -> str

Set: Text(self: DrawingObjects) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DrawingObjects) -> float

Set: Top(self: DrawingObjects) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: DrawingObjects) -> int

Set: Value(self: DrawingObjects) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: DrawingObjects) -> object

Set: VerticalAlignment(self: DrawingObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: DrawingObjects) -> bool

Set: Visible(self: DrawingObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DrawingObjects) -> float

Set: Width(self: DrawingObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: DrawingObjects) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: DrawingObjects) -> int

Set: _Default(self: DrawingObjects) = value
"""



class Drawings(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2, Closed):
        """ Add(self: Drawings, X1: float, Y1: float, X2: float, Y2: float, Closed: bool) -> Drawing """
        pass

    def BringToFront(self):
        """ BringToFront(self: Drawings) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Drawings, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Drawings) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Drawings, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Drawings) -> object """
        pass

    def Delete(self):
        """ Delete(self: Drawings) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Drawings) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Drawings) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Drawings) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Drawings, Index: object) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: Drawings, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Drawings, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Drawings) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Drawings) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Drawings) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Drawings) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Drawings) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: Drawings) """
        pass

    def _Dummy46(self):
        """ _Dummy46(self: Drawings) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Drawings) -> bool

Set: AddIndent(self: Drawings) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Drawings) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Drawings) -> object

Set: AutoScaleFont(self: Drawings) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Drawings) -> bool

Set: AutoSize(self: Drawings) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Drawings) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Drawings) -> str

Set: Caption(self: Drawings) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Drawings) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Drawings) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Drawings) -> bool

Set: Enabled(self: Drawings) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Drawings) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Drawings) -> str

Set: Formula(self: Drawings) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Drawings) -> float

Set: Height(self: Drawings) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Drawings) -> object

Set: HorizontalAlignment(self: Drawings) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Drawings) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Drawings) -> float

Set: Left(self: Drawings) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Drawings) -> bool

Set: Locked(self: Drawings) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Drawings) -> bool

Set: LockedText(self: Drawings) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Drawings) -> str

Set: OnAction(self: Drawings) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Drawings) -> object

Set: Orientation(self: Drawings) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Drawings) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Drawings) -> object

Set: Placement(self: Drawings) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Drawings) -> bool

Set: PrintObject(self: Drawings) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Drawings) -> int

Set: ReadingOrder(self: Drawings) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Drawings) -> bool

Set: Shadow(self: Drawings) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Drawings) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Drawings) -> str

Set: Text(self: Drawings) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Drawings) -> float

Set: Top(self: Drawings) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Drawings) -> object

Set: VerticalAlignment(self: Drawings) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Drawings) -> bool

Set: Visible(self: Drawings) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Drawings) -> float

Set: Width(self: Drawings) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Drawings) -> int

"""



class DropDown:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: DropDown, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: DropDown) -> object """
        pass

    def Copy(self):
        """ Copy(self: DropDown) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: DropDown, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: DropDown) -> object """
        pass

    def Delete(self):
        """ Delete(self: DropDown) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: DropDown) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: DropDown) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: DropDown, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: DropDown, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: DropDown) -> object """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: DropDown) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DropDown) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: DropDown) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DropDown) -> str

Set: Caption(self: DropDown) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DropDown) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: DropDown) -> bool

Set: Display3DShading(self: DropDown) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: DropDown) -> int

Set: DropDownLines(self: DropDown) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: DropDown) -> bool

Set: Enabled(self: DropDown) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DropDown) -> float

Set: Height(self: DropDown) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: DropDown) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DropDown) -> float

Set: Left(self: DropDown) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: DropDown) -> str

Set: LinkedCell(self: DropDown) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: DropDown) -> object

"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: DropDown) -> int

"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: DropDown) -> str

Set: ListFillRange(self: DropDown) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: DropDown) -> int

Set: ListIndex(self: DropDown) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: DropDown) -> bool

Set: Locked(self: DropDown) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DropDown) -> str

Set: Name(self: DropDown) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: DropDown) -> str

Set: OnAction(self: DropDown) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DropDown) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: DropDown) -> object

Set: Placement(self: DropDown) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: DropDown) -> bool

Set: PrintObject(self: DropDown) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: DropDown) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DropDown) -> str

Set: Text(self: DropDown) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DropDown) -> float

Set: Top(self: DropDown) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: DropDown) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: DropDown) -> int

Set: Value(self: DropDown) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: DropDown) -> bool

Set: Visible(self: DropDown) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DropDown) -> float

Set: Width(self: DropDown) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: DropDown) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: DropDown) -> int

Set: _Default(self: DropDown) = value
"""



class DropDowns(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height, Editable):
        """ Add(self: DropDowns, Left: float, Top: float, Width: float, Height: float, Editable: object) -> DropDown """
        pass

    def AddItem(self, Text, Index):
        """ AddItem(self: DropDowns, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: DropDowns) -> object """
        pass

    def Copy(self):
        """ Copy(self: DropDowns) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: DropDowns, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: DropDowns) -> object """
        pass

    def Delete(self):
        """ Delete(self: DropDowns) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: DropDowns) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: DropDowns) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: DropDowns) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: DropDowns, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: DropDowns) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: DropDowns, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: DropDowns, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: DropDowns) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: DropDowns) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: DropDowns) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: DropDowns) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: DropDowns) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: DropDowns) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: DropDowns) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: DropDowns) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DropDowns) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: DropDowns) -> str

Set: Caption(self: DropDowns) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: DropDowns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DropDowns) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: DropDowns) -> bool

Set: Display3DShading(self: DropDowns) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: DropDowns) -> int

Set: DropDownLines(self: DropDowns) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: DropDowns) -> bool

Set: Enabled(self: DropDowns) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: DropDowns) -> float

Set: Height(self: DropDowns) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: DropDowns) -> float

Set: Left(self: DropDowns) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: DropDowns) -> str

Set: LinkedCell(self: DropDowns) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: DropDowns) -> str

Set: ListFillRange(self: DropDowns) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: DropDowns) -> int

Set: ListIndex(self: DropDowns) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: DropDowns) -> bool

Set: Locked(self: DropDowns) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: DropDowns) -> str

Set: OnAction(self: DropDowns) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DropDowns) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: DropDowns) -> object

Set: Placement(self: DropDowns) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: DropDowns) -> bool

Set: PrintObject(self: DropDowns) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: DropDowns) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: DropDowns) -> str

Set: Text(self: DropDowns) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: DropDowns) -> float

Set: Top(self: DropDowns) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: DropDowns) -> int

Set: Value(self: DropDowns) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: DropDowns) -> bool

Set: Visible(self: DropDowns) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: DropDowns) -> float

Set: Width(self: DropDowns) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: DropDowns) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: DropDowns) -> int

Set: _Default(self: DropDowns) = value
"""



class DropLines:
    # no doc
    def Delete(self):
        """ Delete(self: DropLines) -> object """
        pass

    def Select(self):
        """ Select(self: DropLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: DropLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: DropLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: DropLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: DropLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: DropLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: DropLines) -> object

"""



class EditBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: EditBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: EditBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: EditBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: EditBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: EditBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: EditBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: EditBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: EditBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: EditBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: EditBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: EditBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: EditBox) -> str

Set: Caption(self: EditBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: EditBox) -> XlCreator

"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: EditBox) -> bool

Set: DisplayVerticalScrollBar(self: EditBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: EditBox) -> bool

Set: Enabled(self: EditBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: EditBox) -> float

Set: Height(self: EditBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: EditBox) -> int

"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: EditBox) -> int

Set: InputType(self: EditBox) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: EditBox) -> float

Set: Left(self: EditBox) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: EditBox) -> str

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: EditBox) -> bool

Set: Locked(self: EditBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: EditBox) -> bool

Set: LockedText(self: EditBox) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: EditBox) -> bool

Set: MultiLine(self: EditBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: EditBox) -> str

Set: Name(self: EditBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: EditBox) -> str

Set: OnAction(self: EditBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: EditBox) -> object

"""

    PasswordEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEdit(self: EditBox) -> bool

Set: PasswordEdit(self: EditBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: EditBox) -> object

Set: Placement(self: EditBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: EditBox) -> bool

Set: PrintObject(self: EditBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: EditBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: EditBox) -> str

Set: Text(self: EditBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: EditBox) -> float

Set: Top(self: EditBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: EditBox) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: EditBox) -> bool

Set: Visible(self: EditBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: EditBox) -> float

Set: Width(self: EditBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: EditBox) -> int

"""



class EditBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: EditBoxes, Left: float, Top: float, Width: float, Height: float) -> EditBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: EditBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: EditBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: EditBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: EditBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: EditBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: EditBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: EditBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: EditBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: EditBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: EditBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: EditBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: EditBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: EditBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: EditBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: EditBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: EditBoxes) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: EditBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: EditBoxes) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: EditBoxes) -> str

Set: Caption(self: EditBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: EditBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: EditBoxes) -> XlCreator

"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: EditBoxes) -> bool

Set: DisplayVerticalScrollBar(self: EditBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: EditBoxes) -> bool

Set: Enabled(self: EditBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: EditBoxes) -> float

Set: Height(self: EditBoxes) = value
"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: EditBoxes) -> int

Set: InputType(self: EditBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: EditBoxes) -> float

Set: Left(self: EditBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: EditBoxes) -> bool

Set: Locked(self: EditBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: EditBoxes) -> bool

Set: LockedText(self: EditBoxes) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: EditBoxes) -> bool

Set: MultiLine(self: EditBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: EditBoxes) -> str

Set: OnAction(self: EditBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: EditBoxes) -> object

"""

    PasswordEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEdit(self: EditBoxes) -> bool

Set: PasswordEdit(self: EditBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: EditBoxes) -> object

Set: Placement(self: EditBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: EditBoxes) -> bool

Set: PrintObject(self: EditBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: EditBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: EditBoxes) -> str

Set: Text(self: EditBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: EditBoxes) -> float

Set: Top(self: EditBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: EditBoxes) -> bool

Set: Visible(self: EditBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: EditBoxes) -> float

Set: Width(self: EditBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: EditBoxes) -> int

"""



class Error:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Error) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Error) -> XlCreator

"""

    Ignore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ignore(self: Error) -> bool

Set: Ignore(self: Error) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Error) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Error) -> bool

"""



class ErrorBars:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: ErrorBars) -> object """
        pass

    def Delete(self):
        """ Delete(self: ErrorBars) -> object """
        pass

    def Select(self):
        """ Select(self: ErrorBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ErrorBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ErrorBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ErrorBars) -> XlCreator

"""

    EndStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndStyle(self: ErrorBars) -> XlEndStyleCap

Set: EndStyle(self: ErrorBars) = value
"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ErrorBars) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ErrorBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ErrorBars) -> object

"""



class ErrorCheckingOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ErrorCheckingOptions) -> Application

"""

    BackgroundChecking = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundChecking(self: ErrorCheckingOptions) -> bool

Set: BackgroundChecking(self: ErrorCheckingOptions) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ErrorCheckingOptions) -> XlCreator

"""

    EmptyCellReferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmptyCellReferences(self: ErrorCheckingOptions) -> bool

Set: EmptyCellReferences(self: ErrorCheckingOptions) = value
"""

    EvaluateToError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EvaluateToError(self: ErrorCheckingOptions) -> bool

Set: EvaluateToError(self: ErrorCheckingOptions) = value
"""

    InconsistentFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InconsistentFormula(self: ErrorCheckingOptions) -> bool

Set: InconsistentFormula(self: ErrorCheckingOptions) = value
"""

    InconsistentTableFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InconsistentTableFormula(self: ErrorCheckingOptions) -> bool

Set: InconsistentTableFormula(self: ErrorCheckingOptions) = value
"""

    IndicatorColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorColorIndex(self: ErrorCheckingOptions) -> XlColorIndex

Set: IndicatorColorIndex(self: ErrorCheckingOptions) = value
"""

    ListDataValidation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListDataValidation(self: ErrorCheckingOptions) -> bool

Set: ListDataValidation(self: ErrorCheckingOptions) = value
"""

    NumberAsText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberAsText(self: ErrorCheckingOptions) -> bool

Set: NumberAsText(self: ErrorCheckingOptions) = value
"""

    OmittedCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OmittedCells(self: ErrorCheckingOptions) -> bool

Set: OmittedCells(self: ErrorCheckingOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ErrorCheckingOptions) -> object

"""

    TextDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextDate(self: ErrorCheckingOptions) -> bool

Set: TextDate(self: ErrorCheckingOptions) = value
"""

    UnlockedFormulaCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnlockedFormulaCells(self: ErrorCheckingOptions) -> bool

Set: UnlockedFormulaCells(self: ErrorCheckingOptions) = value
"""



class Errors:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Errors) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Errors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Errors) -> object

"""



class FileExportConverter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FileExportConverter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FileExportConverter) -> XlCreator

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: FileExportConverter) -> str

"""

    Extensions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extensions(self: FileExportConverter) -> str

"""

    FileFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFormat(self: FileExportConverter) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FileExportConverter) -> object

"""



class FileExportConverters(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: FileExportConverters) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FileExportConverters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: FileExportConverters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FileExportConverters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FileExportConverters) -> object

"""



class FillFormat(_IMsoDispObj):
    # no doc
    def Background(self):
        """ Background(self: FillFormat) """
        pass

    def OneColorGradient(self, Style, Variant, Degree):
        """ OneColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        pass

    def Patterned(self, Pattern):
        """ Patterned(self: FillFormat, Pattern: MsoPatternType) """
        pass

    def PresetGradient(self, Style, Variant, PresetGradientType):
        """ PresetGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        pass

    def PresetTextured(self, PresetTexture):
        """ PresetTextured(self: FillFormat, PresetTexture: MsoPresetTexture) """
        pass

    def Solid(self):
        """ Solid(self: FillFormat) """
        pass

    def TwoColorGradient(self, Style, Variant):
        """ TwoColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int) """
        pass

    def UserPicture(self, PictureFile):
        """ UserPicture(self: FillFormat, PictureFile: str) """
        pass

    def UserTextured(self, TextureFile):
        """ UserTextured(self: FillFormat, TextureFile: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FillFormat) -> object

"""

    BackColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackColor(self: FillFormat) -> ColorFormat

Set: BackColor(self: FillFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FillFormat) -> int

"""

    ForeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeColor(self: FillFormat) -> ColorFormat

Set: ForeColor(self: FillFormat) = value
"""

    GradientAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientAngle(self: FillFormat) -> Single

Set: GradientAngle(self: FillFormat) = value
"""

    GradientColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColorType(self: FillFormat) -> MsoGradientColorType

"""

    GradientDegree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientDegree(self: FillFormat) -> Single

"""

    GradientStops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientStops(self: FillFormat) -> GradientStops

"""

    GradientStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientStyle(self: FillFormat) -> MsoGradientStyle

"""

    GradientVariant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientVariant(self: FillFormat) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FillFormat) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: FillFormat) -> MsoPatternType

"""

    PictureEffects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureEffects(self: FillFormat) -> PictureEffects

"""

    PresetGradientType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetGradientType(self: FillFormat) -> MsoPresetGradientType

"""

    PresetTexture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetTexture(self: FillFormat) -> MsoPresetTexture

"""

    RotateWithObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotateWithObject(self: FillFormat) -> MsoTriState

Set: RotateWithObject(self: FillFormat) = value
"""

    TextureAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureAlignment(self: FillFormat) -> MsoTextureAlignment

Set: TextureAlignment(self: FillFormat) = value
"""

    TextureHorizontalScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureHorizontalScale(self: FillFormat) -> Single

Set: TextureHorizontalScale(self: FillFormat) = value
"""

    TextureName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureName(self: FillFormat) -> str

"""

    TextureOffsetX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureOffsetX(self: FillFormat) -> Single

Set: TextureOffsetX(self: FillFormat) = value
"""

    TextureOffsetY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureOffsetY(self: FillFormat) -> Single

Set: TextureOffsetY(self: FillFormat) = value
"""

    TextureTile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureTile(self: FillFormat) -> MsoTriState

Set: TextureTile(self: FillFormat) = value
"""

    TextureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureType(self: FillFormat) -> MsoTextureType

"""

    TextureVerticalScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureVerticalScale(self: FillFormat) -> Single

Set: TextureVerticalScale(self: FillFormat) = value
"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Transparency(self: FillFormat) -> Single

Set: Transparency(self: FillFormat) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: FillFormat) -> MsoFillType

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: FillFormat) -> MsoTriState

Set: Visible(self: FillFormat) = value
"""



class Filter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Filter) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Filter) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Filter) -> XlCreator

"""

    Criteria1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Criteria1(self: Filter) -> object

"""

    Criteria2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Criteria2(self: Filter) -> object

"""

    On = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: On(self: Filter) -> bool

"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: Filter) -> XlAutoFilterOperator

Set: Operator(self: Filter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Filter) -> object

"""

    _Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Operator(self: Filter) -> XlAutoFilterOperator

"""



class Filters(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Filters) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Filters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Filters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Filters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Filters) -> object

"""



class Floor:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: Floor) -> object """
        pass

    def Paste(self):
        """ Paste(self: Floor) """
        pass

    def Select(self):
        """ Select(self: Floor) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Floor) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Floor) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Floor) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Floor) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Floor) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Floor) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Floor) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Floor) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: Floor) -> object

Set: PictureType(self: Floor) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: Floor) -> int

Set: Thickness(self: Floor) = value
"""



class Font:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Font) -> Application

"""

    Background = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Background(self: Font) -> object

Set: Background(self: Font) = value
"""

    Bold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bold(self: Font) -> object

Set: Bold(self: Font) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: Font) -> object

Set: Color(self: Font) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: Font) -> object

Set: ColorIndex(self: Font) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Font) -> XlCreator

"""

    FontStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontStyle(self: Font) -> object

Set: FontStyle(self: Font) = value
"""

    Italic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Italic(self: Font) -> object

Set: Italic(self: Font) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Font) -> object

Set: Name(self: Font) = value
"""

    OutlineFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OutlineFont(self: Font) -> object

Set: OutlineFont(self: Font) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Font) -> object

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Font) -> object

Set: Shadow(self: Font) = value
"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Size(self: Font) -> object

Set: Size(self: Font) = value
"""

    Strikethrough = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Strikethrough(self: Font) -> object

Set: Strikethrough(self: Font) = value
"""

    Subscript = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subscript(self: Font) -> object

Set: Subscript(self: Font) = value
"""

    Superscript = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Superscript(self: Font) -> object

Set: Superscript(self: Font) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: Font) -> object

Set: ThemeColor(self: Font) = value
"""

    ThemeFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeFont(self: Font) -> XlThemeFont

Set: ThemeFont(self: Font) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: Font) -> object

Set: TintAndShade(self: Font) = value
"""

    Underline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Underline(self: Font) -> object

Set: Underline(self: Font) = value
"""



class FormatColor:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FormatColor) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: FormatColor) -> object

Set: Color(self: FormatColor) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: FormatColor) -> XlColorIndex

Set: ColorIndex(self: FormatColor) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FormatColor) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FormatColor) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: FormatColor) -> object

Set: ThemeColor(self: FormatColor) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: FormatColor) -> object

Set: TintAndShade(self: FormatColor) = value
"""



class FormatCondition:
    # no doc
    def Delete(self):
        """ Delete(self: FormatCondition) """
        pass

    def Modify(self, Type, Operator, Formula1, Formula2):
        """ Modify(self: FormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: FormatCondition, Range: Range) """
        pass

    def ModifyEx(self, Type, Operator, Formula1, Formula2, String, Operator2):
        """ ModifyEx(self: FormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, Operator2: object) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: FormatCondition) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: FormatCondition) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FormatCondition) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: FormatCondition) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: FormatCondition) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FormatCondition) -> XlCreator

"""

    DateOperator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DateOperator(self: FormatCondition) -> XlTimePeriods

Set: DateOperator(self: FormatCondition) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: FormatCondition) -> Font

"""

    Formula1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula1(self: FormatCondition) -> str

"""

    Formula2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula2(self: FormatCondition) -> str

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: FormatCondition) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: FormatCondition) -> object

Set: NumberFormat(self: FormatCondition) = value
"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: FormatCondition) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FormatCondition) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: FormatCondition) -> int

Set: Priority(self: FormatCondition) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: FormatCondition) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: FormatCondition) -> XlPivotConditionScope

Set: ScopeType(self: FormatCondition) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: FormatCondition) -> bool

Set: StopIfTrue(self: FormatCondition) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: FormatCondition) -> str

Set: Text(self: FormatCondition) = value
"""

    TextOperator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOperator(self: FormatCondition) -> XlContainsOperator

Set: TextOperator(self: FormatCondition) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: FormatCondition) -> int

"""



class FormatConditions(IEnumerable):
    # no doc
    def Add(self, Type, Operator, Formula1, Formula2, String, TextOperator, DateOperator, ScopeType):
        """ Add(self: FormatConditions, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, TextOperator: object, DateOperator: object, ScopeType: object) -> object """
        pass

    def AddAboveAverage(self):
        """ AddAboveAverage(self: FormatConditions) -> object """
        pass

    def AddColorScale(self, ColorScaleType):
        """ AddColorScale(self: FormatConditions, ColorScaleType: int) -> object """
        pass

    def AddDatabar(self):
        """ AddDatabar(self: FormatConditions) -> object """
        pass

    def AddIconSetCondition(self):
        """ AddIconSetCondition(self: FormatConditions) -> object """
        pass

    def AddTop10(self):
        """ AddTop10(self: FormatConditions) -> object """
        pass

    def AddUniqueValues(self):
        """ AddUniqueValues(self: FormatConditions) -> object """
        pass

    def Delete(self):
        """ Delete(self: FormatConditions) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: FormatConditions) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: FormatConditions, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FormatConditions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: FormatConditions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FormatConditions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FormatConditions) -> object

"""



class FreeformBuilder:
    # no doc
    def AddNodes(self, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
        """ AddNodes(self: FreeformBuilder, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: object, Y2: object, X3: object, Y3: object) """
        pass

    def ConvertToShape(self):
        """ ConvertToShape(self: FreeformBuilder) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FreeformBuilder) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FreeformBuilder) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FreeformBuilder) -> object

"""



class FullSeriesCollection(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: FullSeriesCollection) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: FullSeriesCollection, Index: object) -> Series """
        pass

    def _Default(self, Index):
        """ _Default(self: FullSeriesCollection, Index: object) -> Series """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: FullSeriesCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: FullSeriesCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: FullSeriesCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: FullSeriesCollection) -> object

"""



class _Global:
    # no doc
    def Calculate(self):
        """ Calculate(self: _Global) """
        pass

    def DDEExecute(self, Channel, String):
        """ DDEExecute(self: _Global, Channel: int, String: str) """
        pass

    def DDEInitiate(self, App, Topic):
        """ DDEInitiate(self: _Global, App: str, Topic: str) -> int """
        pass

    def DDEPoke(self, Channel, Item, Data):
        """ DDEPoke(self: _Global, Channel: int, Item: object, Data: object) """
        pass

    def DDERequest(self, Channel, Item):
        """ DDERequest(self: _Global, Channel: int, Item: str) -> object """
        pass

    def DDETerminate(self, Channel):
        """ DDETerminate(self: _Global, Channel: int) """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: _Global, Name: object) -> object """
        pass

    def ExecuteExcel4Macro(self, String):
        """ ExecuteExcel4Macro(self: _Global, String: str) -> object """
        pass

    def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Intersect(self: _Global, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: _Global, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def SendKeys(self, Keys, Wait):
        """ SendKeys(self: _Global, Keys: object, Wait: object) """
        pass

    def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Union(self: _Global, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: _Global, Name: object) -> object """
        pass

    def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _Run2(self: _Global, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: _Global) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: _Global) -> Chart

"""

    ActiveDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveDialog(self: _Global) -> DialogSheet

"""

    ActiveMenuBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveMenuBar(self: _Global) -> MenuBar

"""

    ActivePrinter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePrinter(self: _Global) -> str

Set: ActivePrinter(self: _Global) = value
"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: _Global) -> object

"""

    ActiveWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWindow(self: _Global) -> Window

"""

    ActiveWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWorkbook(self: _Global) -> Workbook

"""

    AddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns(self: _Global) -> AddIns

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _Global) -> Application

"""

    Assistant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistant(self: _Global) -> Assistant

"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: _Global) -> Range

"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: _Global) -> Sheets

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: _Global) -> Range

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: _Global) -> CommandBars

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _Global) -> XlCreator

"""

    DDEAppReturnCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DDEAppReturnCode(self: _Global) -> int

"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: _Global) -> Sheets

"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: _Global) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: _Global) -> Sheets

"""

    MenuBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuBars(self: _Global) -> MenuBars

"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: _Global) -> Modules

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: _Global) -> Names

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _Global) -> Application

"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: _Global) -> Range

"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: _Global) -> object

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: _Global) -> Sheets

"""

    ThisWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisWorkbook(self: _Global) -> Workbook

"""

    Toolbars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Toolbars(self: _Global) -> Toolbars

"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: _Global) -> Windows

"""

    Workbooks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbooks(self: _Global) -> Workbooks

"""

    WorksheetFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetFunction(self: _Global) -> WorksheetFunction

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: _Global) -> Sheets

"""



class Global(_Global):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class GlobalClass(__ComObject, _Global, Global):
    """ GlobalClass() """
    def Calculate(self):
        """ Calculate(self: GlobalClass) """
        pass

    def DDEExecute(self, Channel, String):
        """ DDEExecute(self: GlobalClass, Channel: int, String: str) """
        pass

    def DDEInitiate(self, App, Topic):
        """ DDEInitiate(self: GlobalClass, App: str, Topic: str) -> int """
        pass

    def DDEPoke(self, Channel, Item, Data):
        """ DDEPoke(self: GlobalClass, Channel: int, Item: object, Data: object) """
        pass

    def DDERequest(self, Channel, Item):
        """ DDERequest(self: GlobalClass, Channel: int, Item: str) -> object """
        pass

    def DDETerminate(self, Channel):
        """ DDETerminate(self: GlobalClass, Channel: int) """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: GlobalClass, Name: object) -> object """
        pass

    def ExecuteExcel4Macro(self, String):
        """ ExecuteExcel4Macro(self: GlobalClass, String: str) -> object """
        pass

    def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Intersect(self: GlobalClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: GlobalClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def SendKeys(self, Keys, Wait):
        """ SendKeys(self: GlobalClass, Keys: object, Wait: object) """
        pass

    def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Union(self: GlobalClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: GlobalClass, Name: object) -> object """
        pass

    def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _Run2(self: GlobalClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: GlobalClass) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: GlobalClass) -> Chart

"""

    ActiveDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveDialog(self: GlobalClass) -> DialogSheet

"""

    ActiveMenuBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveMenuBar(self: GlobalClass) -> MenuBar

"""

    ActivePrinter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePrinter(self: GlobalClass) -> str

Set: ActivePrinter(self: GlobalClass) = value
"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: GlobalClass) -> object

"""

    ActiveWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWindow(self: GlobalClass) -> Window

"""

    ActiveWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveWorkbook(self: GlobalClass) -> Workbook

"""

    AddIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIns(self: GlobalClass) -> AddIns

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GlobalClass) -> Application

"""

    Assistant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Assistant(self: GlobalClass) -> Assistant

"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: GlobalClass) -> Range

"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: GlobalClass) -> Sheets

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: GlobalClass) -> Range

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: GlobalClass) -> CommandBars

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GlobalClass) -> XlCreator

"""

    DDEAppReturnCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DDEAppReturnCode(self: GlobalClass) -> int

"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: GlobalClass) -> Sheets

"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: GlobalClass) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: GlobalClass) -> Sheets

"""

    MenuBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuBars(self: GlobalClass) -> MenuBars

"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: GlobalClass) -> Modules

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: GlobalClass) -> Names

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GlobalClass) -> Application

"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: GlobalClass) -> Range

"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: GlobalClass) -> object

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: GlobalClass) -> Sheets

"""

    ThisWorkbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThisWorkbook(self: GlobalClass) -> Workbook

"""

    Toolbars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Toolbars(self: GlobalClass) -> Toolbars

"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: GlobalClass) -> Windows

"""

    Workbooks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbooks(self: GlobalClass) -> Workbooks

"""

    WorksheetFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetFunction(self: GlobalClass) -> WorksheetFunction

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: GlobalClass) -> Sheets

"""



class Graphic:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Graphic) -> Application

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: Graphic) -> Single

Set: Brightness(self: Graphic) = value
"""

    ColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorType(self: Graphic) -> MsoPictureColorType

Set: ColorType(self: Graphic) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: Graphic) -> Single

Set: Contrast(self: Graphic) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Graphic) -> XlCreator

"""

    CropBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropBottom(self: Graphic) -> Single

Set: CropBottom(self: Graphic) = value
"""

    CropLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropLeft(self: Graphic) -> Single

Set: CropLeft(self: Graphic) = value
"""

    CropRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropRight(self: Graphic) -> Single

Set: CropRight(self: Graphic) = value
"""

    CropTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropTop(self: Graphic) -> Single

Set: CropTop(self: Graphic) = value
"""

    Filename = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Filename(self: Graphic) -> str

Set: Filename(self: Graphic) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Graphic) -> Single

Set: Height(self: Graphic) = value
"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: Graphic) -> MsoTriState

Set: LockAspectRatio(self: Graphic) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Graphic) -> object

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Graphic) -> Single

Set: Width(self: Graphic) = value
"""



class Gridlines:
    # no doc
    def Delete(self):
        """ Delete(self: Gridlines) -> object """
        pass

    def Select(self):
        """ Select(self: Gridlines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Gridlines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Gridlines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Gridlines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Gridlines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Gridlines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Gridlines) -> object

"""



class GroupBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: GroupBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: GroupBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: GroupBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: GroupBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: GroupBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: GroupBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: GroupBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: GroupBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: GroupBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: GroupBox) -> object

Set: Accelerator(self: GroupBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GroupBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: GroupBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: GroupBox) -> str

Set: Caption(self: GroupBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GroupBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: GroupBox) -> bool

Set: Display3DShading(self: GroupBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: GroupBox) -> bool

Set: Enabled(self: GroupBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: GroupBox) -> float

Set: Height(self: GroupBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: GroupBox) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: GroupBox) -> float

Set: Left(self: GroupBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: GroupBox) -> bool

Set: Locked(self: GroupBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: GroupBox) -> bool

Set: LockedText(self: GroupBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: GroupBox) -> str

Set: Name(self: GroupBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: GroupBox) -> str

Set: OnAction(self: GroupBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GroupBox) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: GroupBox) -> object

Set: PhoneticAccelerator(self: GroupBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: GroupBox) -> object

Set: Placement(self: GroupBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: GroupBox) -> bool

Set: PrintObject(self: GroupBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: GroupBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: GroupBox) -> str

Set: Text(self: GroupBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: GroupBox) -> float

Set: Top(self: GroupBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: GroupBox) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: GroupBox) -> bool

Set: Visible(self: GroupBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: GroupBox) -> float

Set: Width(self: GroupBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: GroupBox) -> int

"""



class GroupBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: GroupBoxes, Left: float, Top: float, Width: float, Height: float) -> GroupBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: GroupBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: GroupBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: GroupBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: GroupBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: GroupBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: GroupBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: GroupBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: GroupBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: GroupBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: GroupBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: GroupBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: GroupBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: GroupBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: GroupBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: GroupBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: GroupBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: GroupBoxes) -> object

Set: Accelerator(self: GroupBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GroupBoxes) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: GroupBoxes) -> str

Set: Caption(self: GroupBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: GroupBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GroupBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: GroupBoxes) -> bool

Set: Display3DShading(self: GroupBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: GroupBoxes) -> bool

Set: Enabled(self: GroupBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: GroupBoxes) -> float

Set: Height(self: GroupBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: GroupBoxes) -> float

Set: Left(self: GroupBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: GroupBoxes) -> bool

Set: Locked(self: GroupBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: GroupBoxes) -> bool

Set: LockedText(self: GroupBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: GroupBoxes) -> str

Set: OnAction(self: GroupBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GroupBoxes) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: GroupBoxes) -> object

Set: PhoneticAccelerator(self: GroupBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: GroupBoxes) -> object

Set: Placement(self: GroupBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: GroupBoxes) -> bool

Set: PrintObject(self: GroupBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: GroupBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: GroupBoxes) -> str

Set: Text(self: GroupBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: GroupBoxes) -> float

Set: Top(self: GroupBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: GroupBoxes) -> bool

Set: Visible(self: GroupBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: GroupBoxes) -> float

Set: Width(self: GroupBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: GroupBoxes) -> int

"""



class GroupObject:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: GroupObject) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: GroupObject, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: GroupObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: GroupObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: GroupObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: GroupObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: GroupObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: GroupObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: GroupObject) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: GroupObject) -> object """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: GroupObject) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: GroupObject) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: GroupObject) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: GroupObject) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: GroupObject) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: GroupObject) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: GroupObject) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: GroupObject) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: GroupObject) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: GroupObject) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: GroupObject) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: GroupObject) """
        pass

    def _Dummy48(self):
        """ _Dummy48(self: GroupObject) """
        pass

    def _Dummy50(self):
        """ _Dummy50(self: GroupObject) """
        pass

    def _Dummy52(self):
        """ _Dummy52(self: GroupObject) """
        pass

    def _Dummy53(self):
        """ _Dummy53(self: GroupObject) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: GroupObject) """
        pass

    def _Dummy55(self):
        """ _Dummy55(self: GroupObject) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: GroupObject) """
        pass

    def _Dummy57(self):
        """ _Dummy57(self: GroupObject) """
        pass

    def _Dummy58(self):
        """ _Dummy58(self: GroupObject) """
        pass

    def _Dummy59(self):
        """ _Dummy59(self: GroupObject) """
        pass

    def _Dummy60(self):
        """ _Dummy60(self: GroupObject) """
        pass

    def _Dummy61(self):
        """ _Dummy61(self: GroupObject) """
        pass

    def _Dummy62(self):
        """ _Dummy62(self: GroupObject) """
        pass

    def _Dummy63(self):
        """ _Dummy63(self: GroupObject) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: GroupObject) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: GroupObject) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: GroupObject) """
        pass

    def _Dummy68(self):
        """ _Dummy68(self: GroupObject) """
        pass

    def _Dummy70(self):
        """ _Dummy70(self: GroupObject) """
        pass

    def _Dummy72(self):
        """ _Dummy72(self: GroupObject) """
        pass

    def _Dummy73(self):
        """ _Dummy73(self: GroupObject) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: GroupObject) """
        pass

    def _Dummy77(self):
        """ _Dummy77(self: GroupObject) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: GroupObject) -> bool

Set: AddIndent(self: GroupObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GroupObject) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: GroupObject) -> object

Set: ArrowHeadLength(self: GroupObject) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: GroupObject) -> object

Set: ArrowHeadStyle(self: GroupObject) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: GroupObject) -> object

Set: ArrowHeadWidth(self: GroupObject) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: GroupObject) -> bool

Set: AutoSize(self: GroupObject) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: GroupObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: GroupObject) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GroupObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: GroupObject) -> bool

Set: Enabled(self: GroupObject) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: GroupObject) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: GroupObject) -> float

Set: Height(self: GroupObject) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: GroupObject) -> object

Set: HorizontalAlignment(self: GroupObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: GroupObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: GroupObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: GroupObject) -> float

Set: Left(self: GroupObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: GroupObject) -> bool

Set: Locked(self: GroupObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: GroupObject) -> str

Set: Name(self: GroupObject) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: GroupObject) -> str

Set: OnAction(self: GroupObject) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: GroupObject) -> object

Set: Orientation(self: GroupObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GroupObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: GroupObject) -> object

Set: Placement(self: GroupObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: GroupObject) -> bool

Set: PrintObject(self: GroupObject) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: GroupObject) -> int

Set: ReadingOrder(self: GroupObject) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: GroupObject) -> bool

Set: RoundedCorners(self: GroupObject) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: GroupObject) -> bool

Set: Shadow(self: GroupObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: GroupObject) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: GroupObject) -> float

Set: Top(self: GroupObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: GroupObject) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: GroupObject) -> object

Set: VerticalAlignment(self: GroupObject) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: GroupObject) -> bool

Set: Visible(self: GroupObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: GroupObject) -> float

Set: Width(self: GroupObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: GroupObject) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: GroupObject) -> int

Set: _Default(self: GroupObject) = value
"""



class GroupObjects(IEnumerable):
    # no doc
    def BringToFront(self):
        """ BringToFront(self: GroupObjects) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: GroupObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: GroupObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: GroupObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: GroupObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: GroupObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: GroupObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: GroupObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: GroupObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: GroupObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: GroupObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: GroupObjects) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: GroupObjects) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: GroupObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: GroupObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: GroupObjects) """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: GroupObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: GroupObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: GroupObjects) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: GroupObjects) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: GroupObjects) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: GroupObjects) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: GroupObjects) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: GroupObjects) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: GroupObjects) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: GroupObjects) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: GroupObjects) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: GroupObjects) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: GroupObjects) """
        pass

    def _Dummy48(self):
        """ _Dummy48(self: GroupObjects) """
        pass

    def _Dummy50(self):
        """ _Dummy50(self: GroupObjects) """
        pass

    def _Dummy52(self):
        """ _Dummy52(self: GroupObjects) """
        pass

    def _Dummy53(self):
        """ _Dummy53(self: GroupObjects) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: GroupObjects) """
        pass

    def _Dummy55(self):
        """ _Dummy55(self: GroupObjects) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: GroupObjects) """
        pass

    def _Dummy57(self):
        """ _Dummy57(self: GroupObjects) """
        pass

    def _Dummy58(self):
        """ _Dummy58(self: GroupObjects) """
        pass

    def _Dummy59(self):
        """ _Dummy59(self: GroupObjects) """
        pass

    def _Dummy60(self):
        """ _Dummy60(self: GroupObjects) """
        pass

    def _Dummy61(self):
        """ _Dummy61(self: GroupObjects) """
        pass

    def _Dummy62(self):
        """ _Dummy62(self: GroupObjects) """
        pass

    def _Dummy63(self):
        """ _Dummy63(self: GroupObjects) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: GroupObjects) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: GroupObjects) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: GroupObjects) """
        pass

    def _Dummy68(self):
        """ _Dummy68(self: GroupObjects) """
        pass

    def _Dummy70(self):
        """ _Dummy70(self: GroupObjects) """
        pass

    def _Dummy72(self):
        """ _Dummy72(self: GroupObjects) """
        pass

    def _Dummy73(self):
        """ _Dummy73(self: GroupObjects) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: GroupObjects) """
        pass

    def _Dummy77(self):
        """ _Dummy77(self: GroupObjects) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: GroupObjects) -> bool

Set: AddIndent(self: GroupObjects) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GroupObjects) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: GroupObjects) -> object

Set: ArrowHeadLength(self: GroupObjects) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: GroupObjects) -> object

Set: ArrowHeadStyle(self: GroupObjects) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: GroupObjects) -> object

Set: ArrowHeadWidth(self: GroupObjects) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: GroupObjects) -> bool

Set: AutoSize(self: GroupObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: GroupObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: GroupObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GroupObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: GroupObjects) -> bool

Set: Enabled(self: GroupObjects) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: GroupObjects) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: GroupObjects) -> float

Set: Height(self: GroupObjects) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: GroupObjects) -> object

Set: HorizontalAlignment(self: GroupObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: GroupObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: GroupObjects) -> float

Set: Left(self: GroupObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: GroupObjects) -> bool

Set: Locked(self: GroupObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: GroupObjects) -> str

Set: OnAction(self: GroupObjects) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: GroupObjects) -> object

Set: Orientation(self: GroupObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GroupObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: GroupObjects) -> object

Set: Placement(self: GroupObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: GroupObjects) -> bool

Set: PrintObject(self: GroupObjects) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: GroupObjects) -> int

Set: ReadingOrder(self: GroupObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: GroupObjects) -> bool

Set: RoundedCorners(self: GroupObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: GroupObjects) -> bool

Set: Shadow(self: GroupObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: GroupObjects) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: GroupObjects) -> float

Set: Top(self: GroupObjects) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: GroupObjects) -> object

Set: VerticalAlignment(self: GroupObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: GroupObjects) -> bool

Set: Visible(self: GroupObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: GroupObjects) -> float

Set: Width(self: GroupObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: GroupObjects) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: GroupObjects) -> int

Set: _Default(self: GroupObjects) = value
"""



class GroupShapes(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: GroupShapes) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: GroupShapes, Index: object) -> Shape """
        pass

    def _Default(self, Index):
        """ _Default(self: GroupShapes, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: GroupShapes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: GroupShapes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: GroupShapes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: GroupShapes) -> object

"""



class HeaderFooter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Picture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Picture(self: HeaderFooter) -> Graphic

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: HeaderFooter) -> str

Set: Text(self: HeaderFooter) = value
"""



class HiLoLines:
    # no doc
    def Delete(self):
        """ Delete(self: HiLoLines) -> object """
        pass

    def Select(self):
        """ Select(self: HiLoLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: HiLoLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: HiLoLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: HiLoLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: HiLoLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: HiLoLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: HiLoLines) -> object

"""



class HPageBreak:
    # no doc
    def Delete(self):
        """ Delete(self: HPageBreak) """
        pass

    def DragOff(self, Direction, RegionIndex):
        """ DragOff(self: HPageBreak, Direction: XlDirection, RegionIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: HPageBreak) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: HPageBreak) -> XlCreator

"""

    Extent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extent(self: HPageBreak) -> XlPageBreakExtent

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: HPageBreak) -> Range

Set: Location(self: HPageBreak) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: HPageBreak) -> Worksheet

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: HPageBreak) -> XlPageBreak

Set: Type(self: HPageBreak) = value
"""



class HPageBreaks(IEnumerable):
    # no doc
    def Add(self, Before):
        """ Add(self: HPageBreaks, Before: object) -> HPageBreak """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: HPageBreaks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: HPageBreaks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: HPageBreaks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: HPageBreaks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: HPageBreaks) -> object

"""



class Hyperlink:
    # no doc
    def AddToFavorites(self):
        """ AddToFavorites(self: Hyperlink) """
        pass

    def CreateNewDocument(self, Filename, EditNow, Overwrite):
        """ CreateNewDocument(self: Hyperlink, Filename: str, EditNow: bool, Overwrite: bool) """
        pass

    def Delete(self):
        """ Delete(self: Hyperlink) """
        pass

    def Follow(self, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):
        """ Follow(self: Hyperlink, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Address = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Address(self: Hyperlink) -> str

Set: Address(self: Hyperlink) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Hyperlink) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Hyperlink) -> XlCreator

"""

    EmailSubject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmailSubject(self: Hyperlink) -> str

Set: EmailSubject(self: Hyperlink) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Hyperlink) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Hyperlink) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: Hyperlink) -> Range

"""

    ScreenTip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenTip(self: Hyperlink) -> str

Set: ScreenTip(self: Hyperlink) = value
"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: Hyperlink) -> Shape

"""

    SubAddress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubAddress(self: Hyperlink) -> str

Set: SubAddress(self: Hyperlink) = value
"""

    TextToDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextToDisplay(self: Hyperlink) -> str

Set: TextToDisplay(self: Hyperlink) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Hyperlink) -> int

"""



class Hyperlinks(IEnumerable):
    # no doc
    def Add(self, Anchor, Address, SubAddress, ScreenTip, TextToDisplay):
        """ Add(self: Hyperlinks, Anchor: object, Address: str, SubAddress: object, ScreenTip: object, TextToDisplay: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: Hyperlinks) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Hyperlinks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Hyperlinks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Hyperlinks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Hyperlinks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Hyperlinks) -> object

"""



class IAboveAverage:
    # no doc
    def Delete(self):
        """ Delete(self: IAboveAverage) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IAboveAverage, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IAboveAverage) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IAboveAverage) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AboveBelow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AboveBelow(self: IAboveAverage) -> XlAboveBelow

Set: AboveBelow(self: IAboveAverage) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAboveAverage) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IAboveAverage) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IAboveAverage) -> Borders

"""

    CalcFor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalcFor(self: IAboveAverage) -> XlCalcFor

Set: CalcFor(self: IAboveAverage) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAboveAverage) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IAboveAverage) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IAboveAverage) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IAboveAverage) -> object

Set: NumberFormat(self: IAboveAverage) = value
"""

    NumStdDev = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumStdDev(self: IAboveAverage) -> int

Set: NumStdDev(self: IAboveAverage) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAboveAverage) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IAboveAverage) -> int

Set: Priority(self: IAboveAverage) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IAboveAverage) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IAboveAverage) -> XlPivotConditionScope

Set: ScopeType(self: IAboveAverage) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IAboveAverage) -> bool

Set: StopIfTrue(self: IAboveAverage) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAboveAverage) -> int

"""



class IAction:
    # no doc
    def Execute(self):
        """ Execute(self: IAction) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAction) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IAction) -> str

"""

    Content = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Content(self: IAction) -> str

"""

    Coordinate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinate(self: IAction) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAction) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAction) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAction) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAction) -> XlActionType

"""



class IActions(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IActions) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IActions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IActions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IActions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IActions) -> object

"""



class IAddIn:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAddIn) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: IAddIn) -> str

"""

    CLSID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CLSID(self: IAddIn) -> str

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IAddIn) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAddIn) -> XlCreator

"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: IAddIn) -> str

"""

    Installed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Installed(self: IAddIn) -> bool

Set: Installed(self: IAddIn) = value
"""

    IsOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsOpen(self: IAddIn) -> bool

"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: IAddIn) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAddIn) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAddIn) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAddIn) -> str

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: IAddIn) -> str

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: IAddIn) -> str

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: IAddIn) -> str

"""



class IAddIns(IEnumerable):
    # no doc
    def Add(self, Filename, CopyFile):
        """ Add(self: IAddIns, Filename: str, CopyFile: object) -> AddIn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAddIns) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAddIns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAddIns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAddIns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAddIns) -> object

"""



class IAddIns2(IEnumerable):
    # no doc
    def Add(self, Filename, CopyFile):
        """ Add(self: IAddIns2, Filename: str, CopyFile: object) -> AddIn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAddIns2) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAddIns2) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAddIns2) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAddIns2) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAddIns2) -> object

"""



class IAllowEditRange:
    # no doc
    def ChangePassword(self, Password):
        """ ChangePassword(self: IAllowEditRange, Password: str) """
        pass

    def Delete(self):
        """ Delete(self: IAllowEditRange) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: IAllowEditRange, Password: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IAllowEditRange) -> Range

Set: Range(self: IAllowEditRange) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: IAllowEditRange) -> str

Set: Title(self: IAllowEditRange) = value
"""

    Users = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Users(self: IAllowEditRange) -> UserAccessList

"""



class IAllowEditRanges(IEnumerable):
    # no doc
    def Add(self, Title, Range, Password):
        """ Add(self: IAllowEditRanges, Title: str, Range: Range, Password: object) -> AllowEditRange """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAllowEditRanges) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAllowEditRanges) -> int

"""



class IAppEvents:
    # no doc
    def AfterCalculate(self):
        """ AfterCalculate(self: IAppEvents) """
        pass

    def NewWorkbook(self, Wb):
        """ NewWorkbook(self: IAppEvents, Wb: Workbook) """
        pass

    def ProtectedViewWindowActivate(self, Pvw):
        """ ProtectedViewWindowActivate(self: IAppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowBeforeClose(self, Pvw, Reason, Cancel):
        """ ProtectedViewWindowBeforeClose(self: IAppEvents, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        pass

    def ProtectedViewWindowBeforeEdit(self, Pvw, Cancel):
        """ ProtectedViewWindowBeforeEdit(self: IAppEvents, Pvw: ProtectedViewWindow) -> bool """
        pass

    def ProtectedViewWindowDeactivate(self, Pvw):
        """ ProtectedViewWindowDeactivate(self: IAppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowOpen(self, Pvw):
        """ ProtectedViewWindowOpen(self: IAppEvents, Pvw: ProtectedViewWindow) """
        pass

    def ProtectedViewWindowResize(self, Pvw):
        """ ProtectedViewWindowResize(self: IAppEvents, Pvw: ProtectedViewWindow) """
        pass

    def SheetActivate(self, Sh):
        """ SheetActivate(self: IAppEvents, Sh: object) """
        pass

    def SheetBeforeDelete(self, Sh):
        """ SheetBeforeDelete(self: IAppEvents, Sh: object) """
        pass

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel):
        """ SheetBeforeDoubleClick(self: IAppEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetBeforeRightClick(self, Sh, Target, Cancel):
        """ SheetBeforeRightClick(self: IAppEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetCalculate(self, Sh):
        """ SheetCalculate(self: IAppEvents, Sh: object) """
        pass

    def SheetChange(self, Sh, Target):
        """ SheetChange(self: IAppEvents, Sh: object, Target: Range) """
        pass

    def SheetDeactivate(self, Sh):
        """ SheetDeactivate(self: IAppEvents, Sh: object) """
        pass

    def SheetFollowHyperlink(self, Sh, Target):
        """ SheetFollowHyperlink(self: IAppEvents, Sh: object, Target: Hyperlink) """
        pass

    def SheetLensGalleryRenderComplete(self, Sh):
        """ SheetLensGalleryRenderComplete(self: IAppEvents, Sh: object) """
        pass

    def SheetPivotTableAfterValueChange(self, Sh, TargetPivotTable, TargetRange):
        """ SheetPivotTableAfterValueChange(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeAllocateChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeCommitChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeDiscardChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ SheetPivotTableBeforeDiscardChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def SheetPivotTableUpdate(self, Sh, Target):
        """ SheetPivotTableUpdate(self: IAppEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetSelectionChange(self, Sh, Target):
        """ SheetSelectionChange(self: IAppEvents, Sh: object, Target: Range) """
        pass

    def SheetTableUpdate(self, Sh, Target):
        """ SheetTableUpdate(self: IAppEvents, Sh: object, Target: TableObject) """
        pass

    def WindowActivate(self, Wb, Wn):
        """ WindowActivate(self: IAppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WindowDeactivate(self, Wb, Wn):
        """ WindowDeactivate(self: IAppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WindowResize(self, Wb, Wn):
        """ WindowResize(self: IAppEvents, Wb: Workbook, Wn: Window) """
        pass

    def WorkbookActivate(self, Wb):
        """ WorkbookActivate(self: IAppEvents, Wb: Workbook) """
        pass

    def WorkbookAddinInstall(self, Wb):
        """ WorkbookAddinInstall(self: IAppEvents, Wb: Workbook) """
        pass

    def WorkbookAddinUninstall(self, Wb):
        """ WorkbookAddinUninstall(self: IAppEvents, Wb: Workbook) """
        pass

    def WorkbookAfterSave(self, Wb, Success):
        """ WorkbookAfterSave(self: IAppEvents, Wb: Workbook, Success: bool) """
        pass

    def WorkbookAfterXmlExport(self, Wb, Map, Url, Result):
        """ WorkbookAfterXmlExport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def WorkbookAfterXmlImport(self, Wb, Map, IsRefresh, Result):
        """ WorkbookAfterXmlImport(self: IAppEvents, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def WorkbookBeforeClose(self, Wb, Cancel):
        """ WorkbookBeforeClose(self: IAppEvents, Wb: Workbook) -> bool """
        pass

    def WorkbookBeforePrint(self, Wb, Cancel):
        """ WorkbookBeforePrint(self: IAppEvents, Wb: Workbook) -> bool """
        pass

    def WorkbookBeforeSave(self, Wb, SaveAsUI, Cancel):
        """ WorkbookBeforeSave(self: IAppEvents, Wb: Workbook, SaveAsUI: bool) -> bool """
        pass

    def WorkbookBeforeXmlExport(self, Wb, Map, Url, Cancel):
        """ WorkbookBeforeXmlExport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        pass

    def WorkbookBeforeXmlImport(self, Wb, Map, Url, IsRefresh, Cancel):
        """ WorkbookBeforeXmlImport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def WorkbookDeactivate(self, Wb):
        """ WorkbookDeactivate(self: IAppEvents, Wb: Workbook) """
        pass

    def WorkbookModelChange(self, Wb, Changes):
        """ WorkbookModelChange(self: IAppEvents, Wb: Workbook, Changes: ModelChanges) """
        pass

    def WorkbookNewChart(self, Wb, Ch):
        """ WorkbookNewChart(self: IAppEvents, Wb: Workbook, Ch: Chart) """
        pass

    def WorkbookNewSheet(self, Wb, Sh):
        """ WorkbookNewSheet(self: IAppEvents, Wb: Workbook, Sh: object) """
        pass

    def WorkbookOpen(self, Wb):
        """ WorkbookOpen(self: IAppEvents, Wb: Workbook) """
        pass

    def WorkbookPivotTableCloseConnection(self, Wb, Target):
        """ WorkbookPivotTableCloseConnection(self: IAppEvents, Wb: Workbook, Target: PivotTable) """
        pass

    def WorkbookPivotTableOpenConnection(self, Wb, Target):
        """ WorkbookPivotTableOpenConnection(self: IAppEvents, Wb: Workbook, Target: PivotTable) """
        pass

    def WorkbookRowsetComplete(self, Wb, Description, Sheet, Success):
        """ WorkbookRowsetComplete(self: IAppEvents, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        pass

    def WorkbookSync(self, Wb, SyncEventType):
        """ WorkbookSync(self: IAppEvents, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IArc:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IArc) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IArc, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IArc) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IArc, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IArc) -> object """
        pass

    def Delete(self):
        """ Delete(self: IArc) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IArc) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IArc, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IArc) -> object """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: IArc) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IArc) -> bool

Set: AddIndent(self: IArc) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IArc) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IArc) -> object

Set: AutoScaleFont(self: IArc) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IArc) -> bool

Set: AutoSize(self: IArc) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IArc) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IArc) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IArc) -> str

Set: Caption(self: IArc) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IArc) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IArc) -> bool

Set: Enabled(self: IArc) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IArc) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IArc) -> str

Set: Formula(self: IArc) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IArc) -> float

Set: Height(self: IArc) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IArc) -> object

Set: HorizontalAlignment(self: IArc) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IArc) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IArc) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IArc) -> float

Set: Left(self: IArc) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IArc) -> bool

Set: Locked(self: IArc) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IArc) -> bool

Set: LockedText(self: IArc) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IArc) -> str

Set: Name(self: IArc) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IArc) -> str

Set: OnAction(self: IArc) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IArc) -> object

Set: Orientation(self: IArc) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IArc) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IArc) -> object

Set: Placement(self: IArc) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IArc) -> bool

Set: PrintObject(self: IArc) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IArc) -> int

Set: ReadingOrder(self: IArc) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IArc) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IArc) -> str

Set: Text(self: IArc) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IArc) -> float

Set: Top(self: IArc) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IArc) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IArc) -> object

Set: VerticalAlignment(self: IArc) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IArc) -> bool

Set: Visible(self: IArc) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IArc) -> float

Set: Width(self: IArc) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IArc) -> int

"""



class IArcs(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2):
        """ Add(self: IArcs, X1: float, Y1: float, X2: float, Y2: float) -> Arc """
        pass

    def BringToFront(self):
        """ BringToFront(self: IArcs) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IArcs, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IArcs) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IArcs, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IArcs) -> object """
        pass

    def Delete(self):
        """ Delete(self: IArcs) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IArcs) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IArcs) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IArcs) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IArcs, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IArcs, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IArcs) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IArcs) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IArcs) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IArcs) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IArcs) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: IArcs) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IArcs) -> bool

Set: AddIndent(self: IArcs) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IArcs) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IArcs) -> object

Set: AutoScaleFont(self: IArcs) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IArcs) -> bool

Set: AutoSize(self: IArcs) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IArcs) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IArcs) -> str

Set: Caption(self: IArcs) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IArcs) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IArcs) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IArcs) -> bool

Set: Enabled(self: IArcs) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IArcs) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IArcs) -> str

Set: Formula(self: IArcs) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IArcs) -> float

Set: Height(self: IArcs) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IArcs) -> object

Set: HorizontalAlignment(self: IArcs) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IArcs) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IArcs) -> float

Set: Left(self: IArcs) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IArcs) -> bool

Set: Locked(self: IArcs) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IArcs) -> bool

Set: LockedText(self: IArcs) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IArcs) -> str

Set: OnAction(self: IArcs) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IArcs) -> object

Set: Orientation(self: IArcs) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IArcs) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IArcs) -> object

Set: Placement(self: IArcs) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IArcs) -> bool

Set: PrintObject(self: IArcs) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IArcs) -> int

Set: ReadingOrder(self: IArcs) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IArcs) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IArcs) -> str

Set: Text(self: IArcs) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IArcs) -> float

Set: Top(self: IArcs) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IArcs) -> object

Set: VerticalAlignment(self: IArcs) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IArcs) -> bool

Set: Visible(self: IArcs) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IArcs) -> float

Set: Width(self: IArcs) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IArcs) -> int

"""



class IAreas(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IAreas) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAreas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAreas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAreas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAreas) -> object

"""



class IAutoCorrect:
    # no doc
    def AddReplacement(self, What, Replacement):
        """ AddReplacement(self: IAutoCorrect, What: str, Replacement: str) -> object """
        pass

    def DeleteReplacement(self, What):
        """ DeleteReplacement(self: IAutoCorrect, What: str) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAutoCorrect) -> Application

"""

    AutoExpandListRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoExpandListRange(self: IAutoCorrect) -> bool

Set: AutoExpandListRange(self: IAutoCorrect) = value
"""

    AutoFillFormulasInLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFillFormulasInLists(self: IAutoCorrect) -> bool

Set: AutoFillFormulasInLists(self: IAutoCorrect) = value
"""

    CapitalizeNamesOfDays = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CapitalizeNamesOfDays(self: IAutoCorrect) -> bool

Set: CapitalizeNamesOfDays(self: IAutoCorrect) = value
"""

    CorrectCapsLock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CorrectCapsLock(self: IAutoCorrect) -> bool

Set: CorrectCapsLock(self: IAutoCorrect) = value
"""

    CorrectSentenceCap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CorrectSentenceCap(self: IAutoCorrect) -> bool

Set: CorrectSentenceCap(self: IAutoCorrect) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAutoCorrect) -> XlCreator

"""

    DisplayAutoCorrectOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutoCorrectOptions(self: IAutoCorrect) -> bool

Set: DisplayAutoCorrectOptions(self: IAutoCorrect) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAutoCorrect) -> object

"""

    ReplaceText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReplaceText(self: IAutoCorrect) -> bool

Set: ReplaceText(self: IAutoCorrect) = value
"""

    TwoInitialCapitals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TwoInitialCapitals(self: IAutoCorrect) -> bool

Set: TwoInitialCapitals(self: IAutoCorrect) = value
"""



class IAutoFilter:
    # no doc
    def ApplyFilter(self):
        """ ApplyFilter(self: IAutoFilter) """
        pass

    def ShowAllData(self):
        """ ShowAllData(self: IAutoFilter) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAutoFilter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAutoFilter) -> XlCreator

"""

    FilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterMode(self: IAutoFilter) -> bool

"""

    Filters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Filters(self: IAutoFilter) -> Filters

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAutoFilter) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IAutoFilter) -> Range

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: IAutoFilter) -> Sort

"""



class IAutoRecover:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAutoRecover) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAutoRecover) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IAutoRecover) -> bool

Set: Enabled(self: IAutoRecover) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAutoRecover) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAutoRecover) -> str

Set: Path(self: IAutoRecover) = value
"""

    Time = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Time(self: IAutoRecover) -> int

Set: Time(self: IAutoRecover) = value
"""



class IAxes(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IAxes) -> IEnumerator """
        pass

    def Item(self, Type, AxisGroup):
        """ Item(self: IAxes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        pass

    def _Default(self, Type, AxisGroup):
        """ _Default(self: IAxes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAxes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAxes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAxes) -> object

"""



class IAxis:
    # no doc
    def Delete(self):
        """ Delete(self: IAxis) -> object """
        pass

    def Select(self):
        """ Select(self: IAxis) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAxis) -> Application

"""

    AxisBetweenCategories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisBetweenCategories(self: IAxis) -> bool

Set: AxisBetweenCategories(self: IAxis) = value
"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: IAxis) -> XlAxisGroup

"""

    AxisTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisTitle(self: IAxis) -> AxisTitle

"""

    BaseUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseUnit(self: IAxis) -> XlTimeUnit

Set: BaseUnit(self: IAxis) = value
"""

    BaseUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseUnitIsAuto(self: IAxis) -> bool

Set: BaseUnitIsAuto(self: IAxis) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IAxis) -> Border

"""

    CategoryNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryNames(self: IAxis) -> object

Set: CategoryNames(self: IAxis) = value
"""

    CategoryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryType(self: IAxis) -> XlCategoryType

Set: CategoryType(self: IAxis) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAxis) -> XlCreator

"""

    Crosses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Crosses(self: IAxis) -> XlAxisCrosses

Set: Crosses(self: IAxis) = value
"""

    CrossesAt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossesAt(self: IAxis) -> float

Set: CrossesAt(self: IAxis) = value
"""

    DisplayUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnit(self: IAxis) -> XlDisplayUnit

Set: DisplayUnit(self: IAxis) = value
"""

    DisplayUnitCustom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnitCustom(self: IAxis) -> float

Set: DisplayUnitCustom(self: IAxis) = value
"""

    DisplayUnitLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayUnitLabel(self: IAxis) -> DisplayUnitLabel

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IAxis) -> ChartFormat

"""

    HasDisplayUnitLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDisplayUnitLabel(self: IAxis) -> bool

Set: HasDisplayUnitLabel(self: IAxis) = value
"""

    HasMajorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMajorGridlines(self: IAxis) -> bool

Set: HasMajorGridlines(self: IAxis) = value
"""

    HasMinorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMinorGridlines(self: IAxis) -> bool

Set: HasMinorGridlines(self: IAxis) = value
"""

    HasTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasTitle(self: IAxis) -> bool

Set: HasTitle(self: IAxis) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAxis) -> float

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IAxis) -> float

"""

    LogBase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LogBase(self: IAxis) -> float

Set: LogBase(self: IAxis) = value
"""

    MajorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorGridlines(self: IAxis) -> Gridlines

"""

    MajorTickMark = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorTickMark(self: IAxis) -> XlTickMark

Set: MajorTickMark(self: IAxis) = value
"""

    MajorUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnit(self: IAxis) -> float

Set: MajorUnit(self: IAxis) = value
"""

    MajorUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnitIsAuto(self: IAxis) -> bool

Set: MajorUnitIsAuto(self: IAxis) = value
"""

    MajorUnitScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorUnitScale(self: IAxis) -> XlTimeUnit

Set: MajorUnitScale(self: IAxis) = value
"""

    MaximumScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaximumScale(self: IAxis) -> float

Set: MaximumScale(self: IAxis) = value
"""

    MaximumScaleIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaximumScaleIsAuto(self: IAxis) -> bool

Set: MaximumScaleIsAuto(self: IAxis) = value
"""

    MinimumScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumScale(self: IAxis) -> float

Set: MinimumScale(self: IAxis) = value
"""

    MinimumScaleIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumScaleIsAuto(self: IAxis) -> bool

Set: MinimumScaleIsAuto(self: IAxis) = value
"""

    MinorGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorGridlines(self: IAxis) -> Gridlines

"""

    MinorTickMark = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorTickMark(self: IAxis) -> XlTickMark

Set: MinorTickMark(self: IAxis) = value
"""

    MinorUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnit(self: IAxis) -> float

Set: MinorUnit(self: IAxis) = value
"""

    MinorUnitIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnitIsAuto(self: IAxis) -> bool

Set: MinorUnitIsAuto(self: IAxis) = value
"""

    MinorUnitScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorUnitScale(self: IAxis) -> XlTimeUnit

Set: MinorUnitScale(self: IAxis) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAxis) -> object

"""

    ReversePlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReversePlotOrder(self: IAxis) -> bool

Set: ReversePlotOrder(self: IAxis) = value
"""

    ScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleType(self: IAxis) -> XlScaleType

Set: ScaleType(self: IAxis) = value
"""

    TickLabelPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelPosition(self: IAxis) -> XlTickLabelPosition

Set: TickLabelPosition(self: IAxis) = value
"""

    TickLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabels(self: IAxis) -> TickLabels

"""

    TickLabelSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelSpacing(self: IAxis) -> int

Set: TickLabelSpacing(self: IAxis) = value
"""

    TickLabelSpacingIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickLabelSpacingIsAuto(self: IAxis) -> bool

Set: TickLabelSpacingIsAuto(self: IAxis) = value
"""

    TickMarkSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TickMarkSpacing(self: IAxis) -> int

Set: TickMarkSpacing(self: IAxis) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IAxis) -> float

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAxis) -> XlAxisType

Set: Type(self: IAxis) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAxis) -> float

"""



class IAxisTitle:
    # no doc
    def Delete(self):
        """ Delete(self: IAxisTitle) -> object """
        pass

    def Select(self):
        """ Select(self: IAxisTitle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAxisTitle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IAxisTitle) -> object

Set: AutoScaleFont(self: IAxisTitle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IAxisTitle) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IAxisTitle) -> str

Set: Caption(self: IAxisTitle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IAxisTitle) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IAxisTitle) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IAxisTitle) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IAxisTitle) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IAxisTitle) -> str

Set: Formula(self: IAxisTitle) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: IAxisTitle) -> str

Set: FormulaLocal(self: IAxisTitle) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: IAxisTitle) -> str

Set: FormulaR1C1(self: IAxisTitle) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: IAxisTitle) -> str

Set: FormulaR1C1Local(self: IAxisTitle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAxisTitle) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IAxisTitle) -> object

Set: HorizontalAlignment(self: IAxisTitle) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: IAxisTitle) -> bool

Set: IncludeInLayout(self: IAxisTitle) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IAxisTitle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IAxisTitle) -> float

Set: Left(self: IAxisTitle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAxisTitle) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IAxisTitle) -> object

Set: Orientation(self: IAxisTitle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IAxisTitle) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAxisTitle) -> XlChartElementPosition

Set: Position(self: IAxisTitle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IAxisTitle) -> int

Set: ReadingOrder(self: IAxisTitle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IAxisTitle) -> bool

Set: Shadow(self: IAxisTitle) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IAxisTitle) -> str

Set: Text(self: IAxisTitle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IAxisTitle) -> float

Set: Top(self: IAxisTitle) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IAxisTitle) -> object

Set: VerticalAlignment(self: IAxisTitle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAxisTitle) -> float

"""



class IBorder:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IBorder) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IBorder) -> object

Set: Color(self: IBorder) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IBorder) -> object

Set: ColorIndex(self: IBorder) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IBorder) -> XlCreator

"""

    LineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineStyle(self: IBorder) -> object

Set: LineStyle(self: IBorder) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IBorder) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IBorder) -> object

Set: ThemeColor(self: IBorder) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IBorder) -> object

Set: TintAndShade(self: IBorder) = value
"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weight(self: IBorder) -> object

Set: Weight(self: IBorder) = value
"""



class IBorders(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IBorders) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IBorders) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IBorders) -> object

Set: Color(self: IBorders) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IBorders) -> object

Set: ColorIndex(self: IBorders) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IBorders) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IBorders) -> XlCreator

"""

    LineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineStyle(self: IBorders) -> object

Set: LineStyle(self: IBorders) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IBorders) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IBorders) -> object

Set: ThemeColor(self: IBorders) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IBorders) -> object

Set: TintAndShade(self: IBorders) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IBorders) -> object

Set: Value(self: IBorders) = value
"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weight(self: IBorders) -> object

Set: Weight(self: IBorders) = value
"""



class IButton:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IButton) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IButton) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IButton) -> object """
        pass

    def Delete(self):
        """ Delete(self: IButton) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IButton) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IButton, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IButton) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IButton) -> object

Set: Accelerator(self: IButton) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IButton) -> bool

Set: AddIndent(self: IButton) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IButton) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IButton) -> object

Set: AutoScaleFont(self: IButton) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IButton) -> bool

Set: AutoSize(self: IButton) = value
"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IButton) -> Range

"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: IButton) -> bool

Set: CancelButton(self: IButton) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IButton) -> str

Set: Caption(self: IButton) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IButton) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: IButton) -> bool

Set: DefaultButton(self: IButton) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: IButton) -> bool

Set: DismissButton(self: IButton) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IButton) -> bool

Set: Enabled(self: IButton) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IButton) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IButton) -> str

Set: Formula(self: IButton) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IButton) -> float

Set: Height(self: IButton) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: IButton) -> bool

Set: HelpButton(self: IButton) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IButton) -> object

Set: HorizontalAlignment(self: IButton) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IButton) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IButton) -> float

Set: Left(self: IButton) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IButton) -> bool

Set: Locked(self: IButton) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IButton) -> bool

Set: LockedText(self: IButton) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IButton) -> str

Set: Name(self: IButton) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IButton) -> str

Set: OnAction(self: IButton) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IButton) -> object

Set: Orientation(self: IButton) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IButton) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IButton) -> object

Set: PhoneticAccelerator(self: IButton) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IButton) -> object

Set: Placement(self: IButton) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IButton) -> bool

Set: PrintObject(self: IButton) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IButton) -> int

Set: ReadingOrder(self: IButton) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IButton) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IButton) -> str

Set: Text(self: IButton) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IButton) -> float

Set: Top(self: IButton) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IButton) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IButton) -> object

Set: VerticalAlignment(self: IButton) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IButton) -> bool

Set: Visible(self: IButton) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IButton) -> float

Set: Width(self: IButton) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IButton) -> int

"""



class IButtons(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IButtons, Left: float, Top: float, Width: float, Height: float) -> Button """
        pass

    def BringToFront(self):
        """ BringToFront(self: IButtons) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IButtons) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IButtons) -> object """
        pass

    def Delete(self):
        """ Delete(self: IButtons) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IButtons) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IButtons) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IButtons) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IButtons, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IButtons, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IButtons) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IButtons) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IButtons) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IButtons) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IButtons) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IButtons) -> object

Set: Accelerator(self: IButtons) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IButtons) -> bool

Set: AddIndent(self: IButtons) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IButtons) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IButtons) -> object

Set: AutoScaleFont(self: IButtons) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IButtons) -> bool

Set: AutoSize(self: IButtons) = value
"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: IButtons) -> bool

Set: CancelButton(self: IButtons) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IButtons) -> str

Set: Caption(self: IButtons) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IButtons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IButtons) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: IButtons) -> bool

Set: DefaultButton(self: IButtons) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: IButtons) -> bool

Set: DismissButton(self: IButtons) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IButtons) -> bool

Set: Enabled(self: IButtons) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IButtons) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IButtons) -> str

Set: Formula(self: IButtons) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IButtons) -> float

Set: Height(self: IButtons) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: IButtons) -> bool

Set: HelpButton(self: IButtons) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IButtons) -> object

Set: HorizontalAlignment(self: IButtons) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IButtons) -> float

Set: Left(self: IButtons) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IButtons) -> bool

Set: Locked(self: IButtons) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IButtons) -> bool

Set: LockedText(self: IButtons) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IButtons) -> str

Set: OnAction(self: IButtons) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IButtons) -> object

Set: Orientation(self: IButtons) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IButtons) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IButtons) -> object

Set: PhoneticAccelerator(self: IButtons) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IButtons) -> object

Set: Placement(self: IButtons) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IButtons) -> bool

Set: PrintObject(self: IButtons) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IButtons) -> int

Set: ReadingOrder(self: IButtons) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IButtons) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IButtons) -> str

Set: Text(self: IButtons) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IButtons) -> float

Set: Top(self: IButtons) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IButtons) -> object

Set: VerticalAlignment(self: IButtons) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IButtons) -> bool

Set: Visible(self: IButtons) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IButtons) -> float

Set: Width(self: IButtons) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IButtons) -> int

"""



class ICalculatedFields(IEnumerable):
    # no doc
    def Add(self, Name, Formula, UseStandardFormula):
        """ Add(self: ICalculatedFields, Name: str, Formula: str, UseStandardFormula: object) -> PivotField """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICalculatedFields) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ICalculatedFields, Index: object) -> PivotField """
        pass

    def _Add(self, Name, Formula):
        """ _Add(self: ICalculatedFields, Name: str, Formula: str) -> PivotField """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICalculatedFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICalculatedFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICalculatedFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICalculatedFields) -> object

"""



class ICalculatedItems(IEnumerable):
    # no doc
    def Add(self, Name, Formula, UseStandardFormula):
        """ Add(self: ICalculatedItems, Name: str, Formula: str, UseStandardFormula: object) -> PivotItem """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICalculatedItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ICalculatedItems, Index: object) -> PivotItem """
        pass

    def _Add(self, Name, Formula):
        """ _Add(self: ICalculatedItems, Name: str, Formula: str) -> PivotItem """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICalculatedItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICalculatedItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICalculatedItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICalculatedItems) -> object

"""



class ICalculatedMember:
    # no doc
    def Delete(self):
        """ Delete(self: ICalculatedMember) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICalculatedMember) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICalculatedMember) -> XlCreator

"""

    DisplayFolder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFolder(self: ICalculatedMember) -> str

"""

    Dynamic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dynamic(self: ICalculatedMember) -> bool

"""

    FlattenHierarchies = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlattenHierarchies(self: ICalculatedMember) -> bool

Set: FlattenHierarchies(self: ICalculatedMember) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ICalculatedMember) -> str

"""

    HierarchizeDistinct = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HierarchizeDistinct(self: ICalculatedMember) -> bool

Set: HierarchizeDistinct(self: ICalculatedMember) = value
"""

    IsValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsValid(self: ICalculatedMember) -> bool

"""

    MeasureGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasureGroup(self: ICalculatedMember) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ICalculatedMember) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: ICalculatedMember) -> XlCalcMemNumberFormatType

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICalculatedMember) -> object

"""

    ParentHierarchy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentHierarchy(self: ICalculatedMember) -> str

"""

    ParentMember = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentMember(self: ICalculatedMember) -> str

"""

    SolveOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolveOrder(self: ICalculatedMember) -> int

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: ICalculatedMember) -> str

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ICalculatedMember) -> XlCalculatedMemberType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ICalculatedMember) -> str

"""



class ICalculatedMembers(IEnumerable):
    # no doc
    def Add(self, Name, Formula, SolveOrder, Type):
        """ Add(self: ICalculatedMembers, Name: str, Formula: str, SolveOrder: object, Type: object) -> CalculatedMember """
        pass

    def Add2(self, Name, Formula, SolveOrder, Type, Dynamic, DisplayFolder, HierarchizeDistinct):
        """ Add2(self: ICalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, Dynamic: object, DisplayFolder: object, HierarchizeDistinct: object) -> CalculatedMember """
        pass

    def AddCalculatedMember(self, Name, Formula, SolveOrder, Type, DisplayFolder, MeasureGroup, ParentHierarchy, ParentMember, NumberFormat):
        """ AddCalculatedMember(self: ICalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, DisplayFolder: object, MeasureGroup: object, ParentHierarchy: object, ParentMember: object, NumberFormat: object) -> CalculatedMember """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICalculatedMembers) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICalculatedMembers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICalculatedMembers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICalculatedMembers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICalculatedMembers) -> object

"""



class ICanvasShapes:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ICategoryCollection:
    # no doc
    def Item(self, Index):
        """ Item(self: ICategoryCollection, Index: object) -> ChartCategory """
        pass

    def _Default(self, Index):
        """ _Default(self: ICategoryCollection, Index: object) -> ChartCategory """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICategoryCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICategoryCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICategoryCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICategoryCollection) -> object

"""



class ICellFormat:
    # no doc
    def Clear(self):
        """ Clear(self: ICellFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: ICellFormat) -> object

Set: AddIndent(self: ICellFormat) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICellFormat) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: ICellFormat) -> Borders

Set: Borders(self: ICellFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICellFormat) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ICellFormat) -> Font

Set: Font(self: ICellFormat) = value
"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: ICellFormat) -> object

Set: FormulaHidden(self: ICellFormat) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: ICellFormat) -> object

Set: HorizontalAlignment(self: ICellFormat) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: ICellFormat) -> object

Set: IndentLevel(self: ICellFormat) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ICellFormat) -> Interior

Set: Interior(self: ICellFormat) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ICellFormat) -> object

Set: Locked(self: ICellFormat) = value
"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: ICellFormat) -> object

Set: MergeCells(self: ICellFormat) = value
"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: ICellFormat) -> object

Set: NumberFormat(self: ICellFormat) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: ICellFormat) -> object

Set: NumberFormatLocal(self: ICellFormat) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ICellFormat) -> object

Set: Orientation(self: ICellFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICellFormat) -> object

"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: ICellFormat) -> object

Set: ShrinkToFit(self: ICellFormat) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: ICellFormat) -> object

Set: VerticalAlignment(self: ICellFormat) = value
"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: ICellFormat) -> object

Set: WrapText(self: ICellFormat) = value
"""



class ICharacters:
    # no doc
    def Delete(self):
        """ Delete(self: ICharacters) -> object """
        pass

    def Insert(self, String):
        """ Insert(self: ICharacters, String: str) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICharacters) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ICharacters) -> str

Set: Caption(self: ICharacters) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICharacters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICharacters) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ICharacters) -> Font

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICharacters) -> object

"""

    PhoneticCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticCharacters(self: ICharacters) -> str

Set: PhoneticCharacters(self: ICharacters) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ICharacters) -> str

Set: Text(self: ICharacters) = value
"""



class IChartArea:
    # no doc
    def Clear(self):
        """ Clear(self: IChartArea) -> object """
        pass

    def ClearContents(self):
        """ ClearContents(self: IChartArea) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: IChartArea) -> object """
        pass

    def Copy(self):
        """ Copy(self: IChartArea) -> object """
        pass

    def Select(self):
        """ Select(self: IChartArea) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartArea) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IChartArea) -> object

Set: AutoScaleFont(self: IChartArea) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IChartArea) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartArea) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IChartArea) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IChartArea) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IChartArea) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IChartArea) -> float

Set: Height(self: IChartArea) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IChartArea) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IChartArea) -> float

Set: Left(self: IChartArea) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IChartArea) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartArea) -> object

"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IChartArea) -> bool

Set: RoundedCorners(self: IChartArea) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IChartArea) -> bool

Set: Shadow(self: IChartArea) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IChartArea) -> float

Set: Top(self: IChartArea) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IChartArea) -> float

Set: Width(self: IChartArea) = value
"""



class IChartCategory:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartCategory) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartCategory) -> XlCreator

"""

    IsFiltered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsFiltered(self: IChartCategory) -> bool

Set: IsFiltered(self: IChartCategory) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IChartCategory) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartCategory) -> object

"""



class IChartColorFormat:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartColorFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartColorFormat) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartColorFormat) -> object

"""

    RGB = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RGB(self: IChartColorFormat) -> int

"""

    SchemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SchemeColor(self: IChartColorFormat) -> int

Set: SchemeColor(self: IChartColorFormat) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IChartColorFormat) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IChartColorFormat) -> int

"""



class IChartEvents:
    # no doc
    def Activate(self):
        """ Activate(self: IChartEvents) """
        pass

    def BeforeDoubleClick(self, ElementID, Arg1, Arg2, Cancel):
        """ BeforeDoubleClick(self: IChartEvents, ElementID: int, Arg1: int, Arg2: int) -> bool """
        pass

    def BeforeRightClick(self, Cancel):
        """ BeforeRightClick(self: IChartEvents) -> bool """
        pass

    def Calculate(self):
        """ Calculate(self: IChartEvents) """
        pass

    def Deactivate(self):
        """ Deactivate(self: IChartEvents) """
        pass

    def DragOver(self):
        """ DragOver(self: IChartEvents) """
        pass

    def DragPlot(self):
        """ DragPlot(self: IChartEvents) """
        pass

    def MouseDown(self, Button, Shift, x, y):
        """ MouseDown(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def MouseMove(self, Button, Shift, x, y):
        """ MouseMove(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def MouseUp(self, Button, Shift, x, y):
        """ MouseUp(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        pass

    def Resize(self):
        """ Resize(self: IChartEvents) """
        pass

    def Select(self, ElementID, Arg1, Arg2):
        """ Select(self: IChartEvents, ElementID: int, Arg1: int, Arg2: int) """
        pass

    def SeriesChange(self, SeriesIndex, PointIndex):
        """ SeriesChange(self: IChartEvents, SeriesIndex: int, PointIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IChartFillFormat:
    # no doc
    def OneColorGradient(self, Style, Variant, Degree):
        """ OneColorGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        pass

    def Patterned(self, Pattern):
        """ Patterned(self: IChartFillFormat, Pattern: MsoPatternType) """
        pass

    def PresetGradient(self, Style, Variant, PresetGradientType):
        """ PresetGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        pass

    def PresetTextured(self, PresetTexture):
        """ PresetTextured(self: IChartFillFormat, PresetTexture: MsoPresetTexture) """
        pass

    def Solid(self):
        """ Solid(self: IChartFillFormat) """
        pass

    def TwoColorGradient(self, Style, Variant):
        """ TwoColorGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int) """
        pass

    def UserPicture(self, PictureFile, PictureFormat, PictureStackUnit, PicturePlacement):
        """ UserPicture(self: IChartFillFormat, PictureFile: object, PictureFormat: object, PictureStackUnit: object, PicturePlacement: object) """
        pass

    def UserTextured(self, TextureFile):
        """ UserTextured(self: IChartFillFormat, TextureFile: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartFillFormat) -> Application

"""

    BackColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackColor(self: IChartFillFormat) -> ChartColorFormat

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartFillFormat) -> XlCreator

"""

    ForeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeColor(self: IChartFillFormat) -> ChartColorFormat

"""

    GradientColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColorType(self: IChartFillFormat) -> MsoGradientColorType

"""

    GradientDegree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientDegree(self: IChartFillFormat) -> Single

"""

    GradientStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientStyle(self: IChartFillFormat) -> MsoGradientStyle

"""

    GradientVariant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientVariant(self: IChartFillFormat) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartFillFormat) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: IChartFillFormat) -> MsoPatternType

"""

    PresetGradientType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetGradientType(self: IChartFillFormat) -> MsoPresetGradientType

"""

    PresetTexture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetTexture(self: IChartFillFormat) -> MsoPresetTexture

"""

    TextureName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureName(self: IChartFillFormat) -> str

"""

    TextureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextureType(self: IChartFillFormat) -> MsoTextureType

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IChartFillFormat) -> MsoFillType

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IChartFillFormat) -> MsoTriState

Set: Visible(self: IChartFillFormat) = value
"""



class IChartFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: IChartFormat) -> Adjustments

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartFormat) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: IChartFormat) -> MsoAutoShapeType

Set: AutoShapeType(self: IChartFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartFormat) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IChartFormat) -> FillFormat

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: IChartFormat) -> GlowFormat

"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: IChartFormat) -> LineFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartFormat) -> object

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: IChartFormat) -> PictureFormat

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IChartFormat) -> ShadowFormat

"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: IChartFormat) -> SoftEdgeFormat

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: IChartFormat) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: IChartFormat) -> ThreeDFormat

"""



class IChartGroup:
    # no doc
    def CategoryCollection(self, Index):
        """ CategoryCollection(self: IChartGroup, Index: object) -> object """
        pass

    def FullCategoryCollection(self, Index):
        """ FullCategoryCollection(self: IChartGroup, Index: object) -> object """
        pass

    def SeriesCollection(self, Index):
        """ SeriesCollection(self: IChartGroup, Index: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartGroup) -> Application

"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: IChartGroup) -> XlAxisGroup

Set: AxisGroup(self: IChartGroup) = value
"""

    BubbleScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BubbleScale(self: IChartGroup) -> int

Set: BubbleScale(self: IChartGroup) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartGroup) -> XlCreator

"""

    DoughnutHoleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoughnutHoleSize(self: IChartGroup) -> int

Set: DoughnutHoleSize(self: IChartGroup) = value
"""

    DownBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownBars(self: IChartGroup) -> DownBars

"""

    DropLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropLines(self: IChartGroup) -> DropLines

"""

    FirstSliceAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstSliceAngle(self: IChartGroup) -> int

Set: FirstSliceAngle(self: IChartGroup) = value
"""

    GapWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GapWidth(self: IChartGroup) -> int

Set: GapWidth(self: IChartGroup) = value
"""

    Has3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DShading(self: IChartGroup) -> bool

Set: Has3DShading(self: IChartGroup) = value
"""

    HasDropLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDropLines(self: IChartGroup) -> bool

Set: HasDropLines(self: IChartGroup) = value
"""

    HasHiLoLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasHiLoLines(self: IChartGroup) -> bool

Set: HasHiLoLines(self: IChartGroup) = value
"""

    HasRadarAxisLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasRadarAxisLabels(self: IChartGroup) -> bool

Set: HasRadarAxisLabels(self: IChartGroup) = value
"""

    HasSeriesLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSeriesLines(self: IChartGroup) -> bool

Set: HasSeriesLines(self: IChartGroup) = value
"""

    HasUpDownBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasUpDownBars(self: IChartGroup) -> bool

Set: HasUpDownBars(self: IChartGroup) = value
"""

    HiLoLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HiLoLines(self: IChartGroup) -> HiLoLines

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IChartGroup) -> int

"""

    Overlap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Overlap(self: IChartGroup) -> int

Set: Overlap(self: IChartGroup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartGroup) -> object

"""

    RadarAxisLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadarAxisLabels(self: IChartGroup) -> TickLabels

"""

    SecondPlotSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPlotSize(self: IChartGroup) -> int

Set: SecondPlotSize(self: IChartGroup) = value
"""

    SeriesLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesLines(self: IChartGroup) -> SeriesLines

"""

    ShowNegativeBubbles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowNegativeBubbles(self: IChartGroup) -> bool

Set: ShowNegativeBubbles(self: IChartGroup) = value
"""

    SizeRepresents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SizeRepresents(self: IChartGroup) -> XlSizeRepresents

Set: SizeRepresents(self: IChartGroup) = value
"""

    SplitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitType(self: IChartGroup) -> XlChartSplitType

Set: SplitType(self: IChartGroup) = value
"""

    SplitValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitValue(self: IChartGroup) -> object

Set: SplitValue(self: IChartGroup) = value
"""

    SubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubType(self: IChartGroup) -> int

Set: SubType(self: IChartGroup) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IChartGroup) -> int

Set: Type(self: IChartGroup) = value
"""

    UpBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpBars(self: IChartGroup) -> UpBars

"""

    VaryByCategories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VaryByCategories(self: IChartGroup) -> bool

Set: VaryByCategories(self: IChartGroup) = value
"""



class IChartGroups(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IChartGroups) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IChartGroups, Index: object) -> ChartGroup """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartGroups) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IChartGroups) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartGroups) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartGroups) -> object

"""



class IChartObject:
    # no doc
    def Activate(self):
        """ Activate(self: IChartObject) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IChartObject) -> object """
        pass

    def Copy(self):
        """ Copy(self: IChartObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IChartObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IChartObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: IChartObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IChartObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IChartObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IChartObject) -> object """
        pass

    def _Copy(self):
        """ _Copy(self: IChartObject) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartObject) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IChartObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IChartObject) -> Range

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: IChartObject) -> Chart

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IChartObject) -> bool

Set: Enabled(self: IChartObject) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IChartObject) -> float

Set: Height(self: IChartObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IChartObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IChartObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IChartObject) -> float

Set: Left(self: IChartObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IChartObject) -> bool

Set: Locked(self: IChartObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IChartObject) -> str

Set: Name(self: IChartObject) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IChartObject) -> str

Set: OnAction(self: IChartObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IChartObject) -> object

Set: Placement(self: IChartObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IChartObject) -> bool

Set: PrintObject(self: IChartObject) = value
"""

    ProtectChartObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectChartObject(self: IChartObject) -> bool

Set: ProtectChartObject(self: IChartObject) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IChartObject) -> bool

Set: RoundedCorners(self: IChartObject) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IChartObject) -> bool

Set: Shadow(self: IChartObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IChartObject) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IChartObject) -> float

Set: Top(self: IChartObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IChartObject) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IChartObject) -> bool

Set: Visible(self: IChartObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IChartObject) -> float

Set: Width(self: IChartObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IChartObject) -> int

"""



class IChartObjects(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IChartObjects, Left: float, Top: float, Width: float, Height: float) -> ChartObject """
        pass

    def BringToFront(self):
        """ BringToFront(self: IChartObjects) -> object """
        pass

    def Copy(self):
        """ Copy(self: IChartObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IChartObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IChartObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: IChartObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IChartObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IChartObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IChartObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IChartObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IChartObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IChartObjects) -> object """
        pass

    def _Copy(self):
        """ _Copy(self: IChartObjects) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: IChartObjects, Index: object) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IChartObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IChartObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IChartObjects) """
        pass

    def _Dummy25(self):
        """ _Dummy25(self: IChartObjects) """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: IChartObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: IChartObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IChartObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartObjects) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IChartObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IChartObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IChartObjects) -> bool

Set: Enabled(self: IChartObjects) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IChartObjects) -> float

Set: Height(self: IChartObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IChartObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IChartObjects) -> float

Set: Left(self: IChartObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IChartObjects) -> bool

Set: Locked(self: IChartObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IChartObjects) -> str

Set: OnAction(self: IChartObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IChartObjects) -> object

Set: Placement(self: IChartObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IChartObjects) -> bool

Set: PrintObject(self: IChartObjects) = value
"""

    ProtectChartObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectChartObject(self: IChartObjects) -> bool

Set: ProtectChartObject(self: IChartObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IChartObjects) -> bool

Set: RoundedCorners(self: IChartObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IChartObjects) -> bool

Set: Shadow(self: IChartObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IChartObjects) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IChartObjects) -> float

Set: Top(self: IChartObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IChartObjects) -> bool

Set: Visible(self: IChartObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IChartObjects) -> float

Set: Width(self: IChartObjects) = value
"""



class ICharts(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: ICharts, Before: object, After: object, Count: object) -> Chart """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: ICharts, Before: object, After: object, Count: object, NewLayout: object) -> Chart """
        pass

    def Copy(self, Before, After):
        """ Copy(self: ICharts, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: ICharts) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICharts) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: ICharts, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOut_2(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut_2(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: ICharts, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: ICharts, Replace: object) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: ICharts) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICharts) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICharts) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICharts) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: ICharts) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICharts) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ICharts) -> object

Set: Visible(self: ICharts) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: ICharts) -> VPageBreaks

"""



class IChartTitle:
    # no doc
    def Delete(self):
        """ Delete(self: IChartTitle) -> object """
        pass

    def Select(self):
        """ Select(self: IChartTitle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartTitle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IChartTitle) -> object

Set: AutoScaleFont(self: IChartTitle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IChartTitle) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IChartTitle) -> str

Set: Caption(self: IChartTitle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartTitle) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IChartTitle) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IChartTitle) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IChartTitle) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IChartTitle) -> str

Set: Formula(self: IChartTitle) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: IChartTitle) -> str

Set: FormulaLocal(self: IChartTitle) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: IChartTitle) -> str

Set: FormulaR1C1(self: IChartTitle) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: IChartTitle) -> str

Set: FormulaR1C1Local(self: IChartTitle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IChartTitle) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IChartTitle) -> object

Set: HorizontalAlignment(self: IChartTitle) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: IChartTitle) -> bool

Set: IncludeInLayout(self: IChartTitle) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IChartTitle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IChartTitle) -> float

Set: Left(self: IChartTitle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IChartTitle) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IChartTitle) -> object

Set: Orientation(self: IChartTitle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartTitle) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IChartTitle) -> XlChartElementPosition

Set: Position(self: IChartTitle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IChartTitle) -> int

Set: ReadingOrder(self: IChartTitle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IChartTitle) -> bool

Set: Shadow(self: IChartTitle) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IChartTitle) -> str

Set: Text(self: IChartTitle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IChartTitle) -> float

Set: Top(self: IChartTitle) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IChartTitle) -> object

Set: VerticalAlignment(self: IChartTitle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IChartTitle) -> float

"""



class IChartView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IChartView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IChartView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IChartView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: IChartView) -> object

"""



class ICheckBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ICheckBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ICheckBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ICheckBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ICheckBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ICheckBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: ICheckBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ICheckBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ICheckBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ICheckBox) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: ICheckBox) -> object

Set: Accelerator(self: ICheckBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICheckBox) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ICheckBox) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ICheckBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ICheckBox) -> str

Set: Caption(self: ICheckBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICheckBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ICheckBox) -> bool

Set: Display3DShading(self: ICheckBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ICheckBox) -> bool

Set: Enabled(self: ICheckBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ICheckBox) -> float

Set: Height(self: ICheckBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ICheckBox) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ICheckBox) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ICheckBox) -> float

Set: Left(self: ICheckBox) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ICheckBox) -> str

Set: LinkedCell(self: ICheckBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ICheckBox) -> bool

Set: Locked(self: ICheckBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ICheckBox) -> bool

Set: LockedText(self: ICheckBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ICheckBox) -> str

Set: Name(self: ICheckBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ICheckBox) -> str

Set: OnAction(self: ICheckBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICheckBox) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: ICheckBox) -> object

Set: PhoneticAccelerator(self: ICheckBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ICheckBox) -> object

Set: Placement(self: ICheckBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ICheckBox) -> bool

Set: PrintObject(self: ICheckBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ICheckBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ICheckBox) -> str

Set: Text(self: ICheckBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ICheckBox) -> float

Set: Top(self: ICheckBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ICheckBox) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ICheckBox) -> object

Set: Value(self: ICheckBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ICheckBox) -> bool

Set: Visible(self: ICheckBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ICheckBox) -> float

Set: Width(self: ICheckBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ICheckBox) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ICheckBox) -> int

Set: _Default(self: ICheckBox) = value
"""



class ICheckBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ICheckBoxes, Left: float, Top: float, Width: float, Height: float) -> CheckBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: ICheckBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ICheckBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ICheckBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ICheckBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ICheckBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: ICheckBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ICheckBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICheckBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ICheckBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ICheckBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ICheckBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ICheckBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ICheckBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ICheckBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ICheckBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ICheckBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: ICheckBoxes) -> object

Set: Accelerator(self: ICheckBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICheckBoxes) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ICheckBoxes) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ICheckBoxes) -> str

Set: Caption(self: ICheckBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICheckBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICheckBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ICheckBoxes) -> bool

Set: Display3DShading(self: ICheckBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ICheckBoxes) -> bool

Set: Enabled(self: ICheckBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ICheckBoxes) -> float

Set: Height(self: ICheckBoxes) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ICheckBoxes) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ICheckBoxes) -> float

Set: Left(self: ICheckBoxes) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ICheckBoxes) -> str

Set: LinkedCell(self: ICheckBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ICheckBoxes) -> bool

Set: Locked(self: ICheckBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ICheckBoxes) -> bool

Set: LockedText(self: ICheckBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ICheckBoxes) -> str

Set: OnAction(self: ICheckBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICheckBoxes) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: ICheckBoxes) -> object

Set: PhoneticAccelerator(self: ICheckBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ICheckBoxes) -> object

Set: Placement(self: ICheckBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ICheckBoxes) -> bool

Set: PrintObject(self: ICheckBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ICheckBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ICheckBoxes) -> str

Set: Text(self: ICheckBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ICheckBoxes) -> float

Set: Top(self: ICheckBoxes) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ICheckBoxes) -> object

Set: Value(self: ICheckBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ICheckBoxes) -> bool

Set: Visible(self: ICheckBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ICheckBoxes) -> float

Set: Width(self: ICheckBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ICheckBoxes) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ICheckBoxes) -> int

Set: _Default(self: ICheckBoxes) = value
"""



class IColorScale:
    # no doc
    def Delete(self):
        """ Delete(self: IColorScale) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IColorScale, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IColorScale) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IColorScale) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IColorScale) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IColorScale) -> Range

"""

    ColorScaleCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorScaleCriteria(self: IColorScale) -> ColorScaleCriteria

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IColorScale) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IColorScale) -> str

Set: Formula(self: IColorScale) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IColorScale) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IColorScale) -> int

Set: Priority(self: IColorScale) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IColorScale) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IColorScale) -> XlPivotConditionScope

Set: ScopeType(self: IColorScale) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IColorScale) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IColorScale) -> int

"""



class IColorScaleCriteria(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IColorScaleCriteria) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IColorScaleCriteria) -> int

"""



class IColorScaleCriterion:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FormatColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormatColor(self: IColorScaleCriterion) -> FormatColor

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IColorScaleCriterion) -> int

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IColorScaleCriterion) -> XlConditionValueTypes

Set: Type(self: IColorScaleCriterion) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IColorScaleCriterion) -> object

Set: Value(self: IColorScaleCriterion) = value
"""



class IColorStop:
    # no doc
    def Delete(self):
        """ Delete(self: IColorStop) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IColorStop) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IColorStop) -> object

Set: Color(self: IColorStop) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IColorStop) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IColorStop) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IColorStop) -> float

Set: Position(self: IColorStop) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IColorStop) -> int

Set: ThemeColor(self: IColorStop) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IColorStop) -> object

Set: TintAndShade(self: IColorStop) = value
"""



class IColorStops(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: IColorStops, Position: float) -> ColorStop """
        pass

    def Clear(self):
        """ Clear(self: IColorStops) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IColorStops) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IColorStops, Index: object) -> ColorStop """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IColorStops) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IColorStops) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IColorStops) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IColorStops) -> object

"""



class IComment:
    # no doc
    def Delete(self):
        """ Delete(self: IComment) """
        pass

    def Next(self):
        """ Next(self: IComment) -> Comment """
        pass

    def Previous(self):
        """ Previous(self: IComment) -> Comment """
        pass

    def Text(self, Text, Start, Overwrite):
        """ Text(self: IComment, Text: object, Start: object, Overwrite: object) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IComment) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: IComment) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IComment) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IComment) -> object

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: IComment) -> Shape

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IComment) -> bool

Set: Visible(self: IComment) = value
"""



class IComments(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IComments) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IComments, Index: int) -> Comment """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IComments) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IComments) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IComments) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IComments) -> object

"""



class Icon:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Icon) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Icon) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Icon) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Icon) -> IconSet

"""



class IconCriteria(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IconCriteria) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IconCriteria) -> int

"""



class IconCriterion:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Icon = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Icon(self: IconCriterion) -> XlIcon

Set: Icon(self: IconCriterion) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IconCriterion) -> int

"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: IconCriterion) -> int

Set: Operator(self: IconCriterion) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IconCriterion) -> XlConditionValueTypes

Set: Type(self: IconCriterion) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IconCriterion) -> object

Set: Value(self: IconCriterion) = value
"""



class IConditionValue:
    # no doc
    def Modify(self, newtype, newvalue):
        """ Modify(self: IConditionValue, newtype: XlConditionValueTypes, newvalue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IConditionValue) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IConditionValue) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IConditionValue) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IConditionValue) -> XlConditionValueTypes

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IConditionValue) -> object

"""



class IConnections(IEnumerable):
    # no doc
    def Add(self, Name, Description, ConnectionString, CommandText, lCmdtype):
        """ Add(self: IConnections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object) -> WorkbookConnection """
        pass

    def Add2(self, Name, Description, ConnectionString, CommandText, lCmdtype, CreateModelConnection, ImportRelationships):
        """ Add2(self: IConnections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        pass

    def AddFromFile(self, Filename):
        """ AddFromFile(self: IConnections, Filename: str) -> WorkbookConnection """
        pass

    def AddFromFile2(self, Filename, CreateModelConnection, ImportRelationships):
        """ AddFromFile2(self: IConnections, Filename: str, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IConnections) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IConnections, Index: object) -> WorkbookConnection """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IConnections) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IConnections) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IConnections) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IConnections) -> object

"""



class IConnectorFormat:
    # no doc
    def BeginConnect(self, ConnectedShape, ConnectionSite):
        """ BeginConnect(self: IConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        pass

    def BeginDisconnect(self):
        """ BeginDisconnect(self: IConnectorFormat) """
        pass

    def EndConnect(self, ConnectedShape, ConnectionSite):
        """ EndConnect(self: IConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        pass

    def EndDisconnect(self):
        """ EndDisconnect(self: IConnectorFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IConnectorFormat) -> Application

"""

    BeginConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnected(self: IConnectorFormat) -> MsoTriState

"""

    BeginConnectedShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnectedShape(self: IConnectorFormat) -> Shape

"""

    BeginConnectionSite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginConnectionSite(self: IConnectorFormat) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IConnectorFormat) -> XlCreator

"""

    EndConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnected(self: IConnectorFormat) -> MsoTriState

"""

    EndConnectedShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnectedShape(self: IConnectorFormat) -> Shape

"""

    EndConnectionSite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndConnectionSite(self: IConnectorFormat) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IConnectorFormat) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IConnectorFormat) -> MsoConnectorType

Set: Type(self: IConnectorFormat) = value
"""



class IconSet(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IconSet) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IconSet) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IconSet) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IconSet) -> XlCreator

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IconSet) -> XlIconSet

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IconSet) -> object

"""



class IconSetCondition:
    # no doc
    def Delete(self):
        """ Delete(self: IconSetCondition) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IconSetCondition, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IconSetCondition) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IconSetCondition) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IconSetCondition) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IconSetCondition) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IconSetCondition) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IconSetCondition) -> str

Set: Formula(self: IconSetCondition) = value
"""

    IconCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconCriteria(self: IconSetCondition) -> IconCriteria

"""

    IconSet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconSet(self: IconSetCondition) -> object

Set: IconSet(self: IconSetCondition) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IconSetCondition) -> object

"""

    PercentileValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentileValues(self: IconSetCondition) -> bool

Set: PercentileValues(self: IconSetCondition) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IconSetCondition) -> int

Set: Priority(self: IconSetCondition) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IconSetCondition) -> bool

"""

    ReverseOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReverseOrder(self: IconSetCondition) -> bool

Set: ReverseOrder(self: IconSetCondition) = value
"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IconSetCondition) -> XlPivotConditionScope

Set: ScopeType(self: IconSetCondition) = value
"""

    ShowIconOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowIconOnly(self: IconSetCondition) -> bool

Set: ShowIconOnly(self: IconSetCondition) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IconSetCondition) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IconSetCondition) -> int

"""



class IconSets(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IconSets) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IconSets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IconSets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IconSets) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IconSets) -> object

"""



class IControlFormat:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: IControlFormat, Text: str, Index: object) """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IControlFormat) """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IControlFormat, Index: int, Count: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IControlFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IControlFormat) -> XlCreator

"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: IControlFormat) -> int

Set: DropDownLines(self: IControlFormat) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IControlFormat) -> bool

Set: Enabled(self: IControlFormat) = value
"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: IControlFormat) -> int

Set: LargeChange(self: IControlFormat) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IControlFormat) -> str

Set: LinkedCell(self: IControlFormat) = value
"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: IControlFormat) -> int

Set: ListCount(self: IControlFormat) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IControlFormat) -> str

Set: ListFillRange(self: IControlFormat) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IControlFormat) -> int

Set: ListIndex(self: IControlFormat) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IControlFormat) -> bool

Set: LockedText(self: IControlFormat) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: IControlFormat) -> int

Set: Max(self: IControlFormat) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: IControlFormat) -> int

Set: Min(self: IControlFormat) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: IControlFormat) -> int

Set: MultiSelect(self: IControlFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IControlFormat) -> object

"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IControlFormat) -> bool

Set: PrintObject(self: IControlFormat) = value
"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: IControlFormat) -> int

Set: SmallChange(self: IControlFormat) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IControlFormat) -> int

Set: Value(self: IControlFormat) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IControlFormat) -> int

Set: _Default(self: IControlFormat) = value
"""



class ICorners:
    # no doc
    def Select(self):
        """ Select(self: ICorners) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICorners) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICorners) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ICorners) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICorners) -> object

"""



class ICustomProperties(IEnumerable):
    # no doc
    def Add(self, Name, Value):
        """ Add(self: ICustomProperties, Name: str, Value: object) -> CustomProperty """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICustomProperties) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICustomProperties) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICustomProperties) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICustomProperties) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICustomProperties) -> object

"""



class ICustomProperty:
    # no doc
    def Delete(self):
        """ Delete(self: ICustomProperty) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICustomProperty) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICustomProperty) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ICustomProperty) -> str

Set: Name(self: ICustomProperty) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICustomProperty) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ICustomProperty) -> object

Set: Value(self: ICustomProperty) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ICustomProperty) -> object

"""



class ICustomView:
    # no doc
    def Delete(self):
        """ Delete(self: ICustomView) """
        pass

    def Show(self):
        """ Show(self: ICustomView) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICustomView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICustomView) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ICustomView) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICustomView) -> object

"""

    PrintSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintSettings(self: ICustomView) -> bool

"""

    RowColSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowColSettings(self: ICustomView) -> bool

"""



class ICustomViews(IEnumerable):
    # no doc
    def Add(self, ViewName, PrintSettings, RowColSettings):
        """ Add(self: ICustomViews, ViewName: str, PrintSettings: object, RowColSettings: object) -> CustomView """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ICustomViews) -> IEnumerator """
        pass

    def Item(self, ViewName):
        """ Item(self: ICustomViews, ViewName: object) -> CustomView """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ICustomViews) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ICustomViews) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ICustomViews) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ICustomViews) -> object

"""



class IDatabar:
    # no doc
    def Delete(self):
        """ Delete(self: IDatabar) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IDatabar, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IDatabar) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IDatabar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDatabar) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IDatabar) -> Range

"""

    AxisColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisColor(self: IDatabar) -> object

"""

    AxisPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisPosition(self: IDatabar) -> XlDataBarAxisPosition

Set: AxisPosition(self: IDatabar) = value
"""

    BarBorder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarBorder(self: IDatabar) -> DataBarBorder

"""

    BarColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarColor(self: IDatabar) -> object

"""

    BarFillType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarFillType(self: IDatabar) -> XlDataBarFillType

Set: BarFillType(self: IDatabar) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDatabar) -> XlCreator

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IDatabar) -> int

Set: Direction(self: IDatabar) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IDatabar) -> str

Set: Formula(self: IDatabar) = value
"""

    MaxPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxPoint(self: IDatabar) -> ConditionValue

"""

    MinPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinPoint(self: IDatabar) -> ConditionValue

"""

    NegativeBarFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NegativeBarFormat(self: IDatabar) -> NegativeBarFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDatabar) -> object

"""

    PercentMax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentMax(self: IDatabar) -> int

Set: PercentMax(self: IDatabar) = value
"""

    PercentMin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentMin(self: IDatabar) -> int

Set: PercentMin(self: IDatabar) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IDatabar) -> int

Set: Priority(self: IDatabar) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IDatabar) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IDatabar) -> XlPivotConditionScope

Set: ScopeType(self: IDatabar) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: IDatabar) -> bool

Set: ShowValue(self: IDatabar) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IDatabar) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IDatabar) -> int

"""



class IDataBarBorder:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDataBarBorder) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IDataBarBorder) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDataBarBorder) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDataBarBorder) -> object

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IDataBarBorder) -> XlDataBarBorderType

Set: Type(self: IDataBarBorder) = value
"""



class IDataFeedConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: IDataFeedConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: IDataFeedConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: IDataFeedConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: IDataFeedConnection) -> bool

Set: AlwaysUseConnectionFile(self: IDataFeedConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDataFeedConnection) -> Application

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IDataFeedConnection) -> object

Set: CommandText(self: IDataFeedConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IDataFeedConnection) -> XlCmdType

Set: CommandType(self: IDataFeedConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: IDataFeedConnection) -> object

Set: Connection(self: IDataFeedConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDataFeedConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: IDataFeedConnection) -> bool

Set: EnableRefresh(self: IDataFeedConnection) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDataFeedConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: IDataFeedConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: IDataFeedConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: IDataFeedConnection) -> bool

Set: RefreshOnFileOpen(self: IDataFeedConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: IDataFeedConnection) -> int

Set: RefreshPeriod(self: IDataFeedConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: IDataFeedConnection) -> bool

Set: SavePassword(self: IDataFeedConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: IDataFeedConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: IDataFeedConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: IDataFeedConnection) -> str

Set: SourceConnectionFile(self: IDataFeedConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: IDataFeedConnection) -> str

Set: SourceDataFile(self: IDataFeedConnection) = value
"""



class IDataLabel:
    # no doc
    def Delete(self):
        """ Delete(self: IDataLabel) -> object """
        pass

    def Select(self):
        """ Select(self: IDataLabel) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDataLabel) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDataLabel) -> object

Set: AutoScaleFont(self: IDataLabel) = value
"""

    AutoText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoText(self: IDataLabel) -> bool

Set: AutoText(self: IDataLabel) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDataLabel) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDataLabel) -> str

Set: Caption(self: IDataLabel) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDataLabel) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IDataLabel) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDataLabel) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDataLabel) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IDataLabel) -> str

Set: Formula(self: IDataLabel) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: IDataLabel) -> str

Set: FormulaLocal(self: IDataLabel) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: IDataLabel) -> str

Set: FormulaR1C1(self: IDataLabel) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: IDataLabel) -> str

Set: FormulaR1C1Local(self: IDataLabel) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDataLabel) -> float

Set: Height(self: IDataLabel) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDataLabel) -> object

Set: HorizontalAlignment(self: IDataLabel) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDataLabel) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDataLabel) -> float

Set: Left(self: IDataLabel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDataLabel) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IDataLabel) -> str

Set: NumberFormat(self: IDataLabel) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: IDataLabel) -> bool

Set: NumberFormatLinked(self: IDataLabel) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: IDataLabel) -> object

Set: NumberFormatLocal(self: IDataLabel) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDataLabel) -> object

Set: Orientation(self: IDataLabel) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDataLabel) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IDataLabel) -> XlDataLabelPosition

Set: Position(self: IDataLabel) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDataLabel) -> int

Set: ReadingOrder(self: IDataLabel) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Separator(self: IDataLabel) -> object

Set: Separator(self: IDataLabel) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDataLabel) -> bool

Set: Shadow(self: IDataLabel) = value
"""

    ShowBubbleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowBubbleSize(self: IDataLabel) -> bool

Set: ShowBubbleSize(self: IDataLabel) = value
"""

    ShowCategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCategoryName(self: IDataLabel) -> bool

Set: ShowCategoryName(self: IDataLabel) = value
"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: IDataLabel) -> bool

Set: ShowLegendKey(self: IDataLabel) = value
"""

    ShowPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPercentage(self: IDataLabel) -> bool

Set: ShowPercentage(self: IDataLabel) = value
"""

    ShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRange(self: IDataLabel) -> bool

Set: ShowRange(self: IDataLabel) = value
"""

    ShowSeriesName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSeriesName(self: IDataLabel) -> bool

Set: ShowSeriesName(self: IDataLabel) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: IDataLabel) -> bool

Set: ShowValue(self: IDataLabel) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDataLabel) -> str

Set: Text(self: IDataLabel) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDataLabel) -> float

Set: Top(self: IDataLabel) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IDataLabel) -> object

Set: Type(self: IDataLabel) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDataLabel) -> object

Set: VerticalAlignment(self: IDataLabel) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDataLabel) -> float

Set: Width(self: IDataLabel) = value
"""

    _Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Height(self: IDataLabel) -> float

"""

    _Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Width(self: IDataLabel) -> float

"""



class IDataLabels(IEnumerable):
    # no doc
    def Delete(self):
        """ Delete(self: IDataLabels) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IDataLabels) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IDataLabels, Index: object) -> DataLabel """
        pass

    def Propagate(self, Index):
        """ Propagate(self: IDataLabels, Index: object) """
        pass

    def Select(self):
        """ Select(self: IDataLabels) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: IDataLabels, Index: object) -> DataLabel """
        pass

    def _Dummy10(self):
        """ _Dummy10(self: IDataLabels) """
        pass

    def _Dummy13(self):
        """ _Dummy13(self: IDataLabels) """
        pass

    def _Dummy16(self):
        """ _Dummy16(self: IDataLabels) """
        pass

    def _Dummy17(self):
        """ _Dummy17(self: IDataLabels) """
        pass

    def _Dummy9(self):
        """ _Dummy9(self: IDataLabels) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDataLabels) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDataLabels) -> object

Set: AutoScaleFont(self: IDataLabels) = value
"""

    AutoText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoText(self: IDataLabels) -> bool

Set: AutoText(self: IDataLabels) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDataLabels) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDataLabels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDataLabels) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IDataLabels) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDataLabels) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDataLabels) -> ChartFormat

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDataLabels) -> object

Set: HorizontalAlignment(self: IDataLabels) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDataLabels) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDataLabels) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IDataLabels) -> str

Set: NumberFormat(self: IDataLabels) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: IDataLabels) -> bool

Set: NumberFormatLinked(self: IDataLabels) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: IDataLabels) -> object

Set: NumberFormatLocal(self: IDataLabels) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDataLabels) -> object

Set: Orientation(self: IDataLabels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDataLabels) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IDataLabels) -> XlDataLabelPosition

Set: Position(self: IDataLabels) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDataLabels) -> int

Set: ReadingOrder(self: IDataLabels) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Separator(self: IDataLabels) -> object

Set: Separator(self: IDataLabels) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDataLabels) -> bool

Set: Shadow(self: IDataLabels) = value
"""

    ShowBubbleSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowBubbleSize(self: IDataLabels) -> bool

Set: ShowBubbleSize(self: IDataLabels) = value
"""

    ShowCategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCategoryName(self: IDataLabels) -> bool

Set: ShowCategoryName(self: IDataLabels) = value
"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: IDataLabels) -> bool

Set: ShowLegendKey(self: IDataLabels) = value
"""

    ShowPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPercentage(self: IDataLabels) -> bool

Set: ShowPercentage(self: IDataLabels) = value
"""

    ShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRange(self: IDataLabels) -> bool

Set: ShowRange(self: IDataLabels) = value
"""

    ShowSeriesName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSeriesName(self: IDataLabels) -> bool

Set: ShowSeriesName(self: IDataLabels) = value
"""

    ShowValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValue(self: IDataLabels) -> bool

Set: ShowValue(self: IDataLabels) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IDataLabels) -> object

Set: Type(self: IDataLabels) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDataLabels) -> object

Set: VerticalAlignment(self: IDataLabels) = value
"""



class IDataTable:
    # no doc
    def Delete(self):
        """ Delete(self: IDataTable) """
        pass

    def Select(self):
        """ Select(self: IDataTable) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDataTable) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDataTable) -> object

Set: AutoScaleFont(self: IDataTable) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDataTable) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDataTable) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDataTable) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDataTable) -> ChartFormat

"""

    HasBorderHorizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderHorizontal(self: IDataTable) -> bool

Set: HasBorderHorizontal(self: IDataTable) = value
"""

    HasBorderOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderOutline(self: IDataTable) -> bool

Set: HasBorderOutline(self: IDataTable) = value
"""

    HasBorderVertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasBorderVertical(self: IDataTable) -> bool

Set: HasBorderVertical(self: IDataTable) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDataTable) -> object

"""

    ShowLegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowLegendKey(self: IDataTable) -> bool

Set: ShowLegendKey(self: IDataTable) = value
"""



class IDiagram:
    # no doc
    def Convert(self, Type):
        """ Convert(self: IDiagram, Type: MsoDiagramType) """
        pass

    def FitText(self):
        """ FitText(self: IDiagram) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDiagram) -> Application

"""

    AutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFormat(self: IDiagram) -> MsoTriState

Set: AutoFormat(self: IDiagram) = value
"""

    AutoLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLayout(self: IDiagram) -> MsoTriState

Set: AutoLayout(self: IDiagram) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDiagram) -> XlCreator

"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: IDiagram) -> DiagramNodes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDiagram) -> object

"""

    Reverse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reverse(self: IDiagram) -> MsoTriState

Set: Reverse(self: IDiagram) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IDiagram) -> MsoDiagramType

"""



class IDialog:
    # no doc
    def Show(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Show(self: IDialog, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialog) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialog) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialog) -> object

"""



class IDialogFrame:
    # no doc
    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IDialogFrame, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDialogFrame, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDialogFrame, Replace: object) -> object """
        pass

    def _Dummy10(self):
        """ _Dummy10(self: IDialogFrame) """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IDialogFrame) """
        pass

    def _Dummy17(self):
        """ _Dummy17(self: IDialogFrame) """
        pass

    def _Dummy18(self):
        """ _Dummy18(self: IDialogFrame) """
        pass

    def _Dummy20(self):
        """ _Dummy20(self: IDialogFrame) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IDialogFrame) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: IDialogFrame) """
        pass

    def _Dummy25(self):
        """ _Dummy25(self: IDialogFrame) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IDialogFrame) """
        pass

    def _Dummy4(self):
        """ _Dummy4(self: IDialogFrame) """
        pass

    def _Dummy5(self):
        """ _Dummy5(self: IDialogFrame) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: IDialogFrame) """
        pass

    def _Dummy8(self):
        """ _Dummy8(self: IDialogFrame) """
        pass

    def _Dummy9(self):
        """ _Dummy9(self: IDialogFrame) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialogFrame) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDialogFrame) -> str

Set: Caption(self: IDialogFrame) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialogFrame) -> XlCreator

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDialogFrame) -> float

Set: Height(self: IDialogFrame) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDialogFrame) -> float

Set: Left(self: IDialogFrame) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDialogFrame) -> bool

Set: Locked(self: IDialogFrame) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IDialogFrame) -> bool

Set: LockedText(self: IDialogFrame) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDialogFrame) -> str

Set: Name(self: IDialogFrame) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDialogFrame) -> str

Set: OnAction(self: IDialogFrame) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialogFrame) -> object

"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDialogFrame) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDialogFrame) -> str

Set: Text(self: IDialogFrame) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDialogFrame) -> float

Set: Top(self: IDialogFrame) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDialogFrame) -> float

Set: Width(self: IDialogFrame) = value
"""



class IDialogs(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IDialogs) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialogs) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDialogs) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialogs) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialogs) -> object

"""



class IDialogSheet:
    # no doc
    def Activate(self):
        """ Activate(self: IDialogSheet) """
        pass

    def Arcs(self, Index):
        """ Arcs(self: IDialogSheet, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: IDialogSheet, Index: object) -> object """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: IDialogSheet, Index: object) -> object """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: IDialogSheet, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IDialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def CircleInvalid(self):
        """ CircleInvalid(self: IDialogSheet) """
        pass

    def ClearCircles(self):
        """ ClearCircles(self: IDialogSheet) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: IDialogSheet, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: IDialogSheet) """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: IDialogSheet, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: IDialogSheet, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: IDialogSheet, Index: object) -> object """
        pass

    def EditBoxes(self, Index):
        """ EditBoxes(self: IDialogSheet, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: IDialogSheet, Name: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: IDialogSheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: IDialogSheet, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: IDialogSheet, Index: object) -> object """
        pass

    def Hide(self, Cancel):
        """ Hide(self: IDialogSheet, Cancel: object) -> bool """
        pass

    def Labels(self, Index):
        """ Labels(self: IDialogSheet, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: IDialogSheet, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: IDialogSheet, Index: object) -> object """
        pass

    def Move(self, Before, After):
        """ Move(self: IDialogSheet, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: IDialogSheet, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: IDialogSheet, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: IDialogSheet, Index: object) -> object """
        pass

    def Paste(self, Destination, Link):
        """ Paste(self: IDialogSheet, Destination: object, Link: object) """
        pass

    def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting):
        """ PasteSpecial(self: IDialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: IDialogSheet, Index: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: IDialogSheet, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables):
        """ Protect(self: IDialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: IDialogSheet, Index: object) -> object """
        pass

    def ResetAllPageBreaks(self):
        """ ResetAllPageBreaks(self: IDialogSheet) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: IDialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: IDialogSheet, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDialogSheet, Replace: object) """
        pass

    def Show(self):
        """ Show(self: IDialogSheet) -> bool """
        pass

    def Spinners(self, Index):
        """ Spinners(self: IDialogSheet, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: IDialogSheet, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: IDialogSheet, Password: object) """
        pass

    def _CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript):
        """ _CheckSpelling(self: IDialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        pass

    def _Dummy113(self):
        """ _Dummy113(self: IDialogSheet) """
        pass

    def _Dummy114(self):
        """ _Dummy114(self: IDialogSheet) """
        pass

    def _Dummy115(self):
        """ _Dummy115(self: IDialogSheet) """
        pass

    def _Dummy29(self):
        """ _Dummy29(self: IDialogSheet) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: IDialogSheet) """
        pass

    def _Dummy32(self):
        """ _Dummy32(self: IDialogSheet) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: IDialogSheet) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IDialogSheet) """
        pass

    def _Dummy40(self):
        """ _Dummy40(self: IDialogSheet) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: IDialogSheet) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: IDialogSheet) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: IDialogSheet) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: IDialogSheet) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: IDialogSheet) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: IDialogSheet) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: IDialogSheet) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: IDialogSheet) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: IDialogSheet) """
        pass

    def _Dummy69(self):
        """ _Dummy69(self: IDialogSheet) """
        pass

    def _Dummy74(self):
        """ _Dummy74(self: IDialogSheet) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: IDialogSheet) """
        pass

    def _Dummy76(self):
        """ _Dummy76(self: IDialogSheet) """
        pass

    def _Dummy78(self):
        """ _Dummy78(self: IDialogSheet) """
        pass

    def _Dummy79(self):
        """ _Dummy79(self: IDialogSheet) """
        pass

    def _Dummy82(self):
        """ _Dummy82(self: IDialogSheet) """
        pass

    def _Dummy83(self):
        """ _Dummy83(self: IDialogSheet) """
        pass

    def _Dummy85(self):
        """ _Dummy85(self: IDialogSheet) """
        pass

    def _Dummy86(self):
        """ _Dummy86(self: IDialogSheet) """
        pass

    def _Dummy88(self):
        """ _Dummy88(self: IDialogSheet) """
        pass

    def _Dummy89(self):
        """ _Dummy89(self: IDialogSheet) """
        pass

    def _Dummy90(self):
        """ _Dummy90(self: IDialogSheet) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: IDialogSheet, Name: object) -> object """
        pass

    def _PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel):
        """ _PasteSpecial(self: IDialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: IDialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: IDialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialogSheet) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: IDialogSheet) -> AutoFilter

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: IDialogSheet) -> str

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IDialogSheet) -> Comments

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialogSheet) -> XlCreator

"""

    CustomProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomProperties(self: IDialogSheet) -> CustomProperties

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: IDialogSheet) -> object

Set: DefaultButton(self: IDialogSheet) = value
"""

    DialogFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogFrame(self: IDialogSheet) -> DialogFrame

"""

    DisplayAutomaticPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutomaticPageBreaks(self: IDialogSheet) -> bool

Set: DisplayAutomaticPageBreaks(self: IDialogSheet) = value
"""

    DisplayPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPageBreaks(self: IDialogSheet) -> bool

Set: DisplayPageBreaks(self: IDialogSheet) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: IDialogSheet) -> bool

Set: DisplayRightToLeft(self: IDialogSheet) = value
"""

    EnableAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoFilter(self: IDialogSheet) -> bool

Set: EnableAutoFilter(self: IDialogSheet) = value
"""

    EnableCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCalculation(self: IDialogSheet) -> bool

Set: EnableCalculation(self: IDialogSheet) = value
"""

    EnableFormatConditionsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFormatConditionsCalculation(self: IDialogSheet) -> bool

Set: EnableFormatConditionsCalculation(self: IDialogSheet) = value
"""

    EnableOutlining = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableOutlining(self: IDialogSheet) -> bool

Set: EnableOutlining(self: IDialogSheet) = value
"""

    EnablePivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnablePivotTable(self: IDialogSheet) -> bool

Set: EnablePivotTable(self: IDialogSheet) = value
"""

    EnableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSelection(self: IDialogSheet) -> XlEnableSelection

Set: EnableSelection(self: IDialogSheet) = value
"""

    Focus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Focus(self: IDialogSheet) -> object

Set: Focus(self: IDialogSheet) = value
"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: IDialogSheet) -> HPageBreaks

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IDialogSheet) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IDialogSheet) -> int

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: IDialogSheet) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDialogSheet) -> str

Set: Name(self: IDialogSheet) = value
"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: IDialogSheet) -> Names

"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: IDialogSheet) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: IDialogSheet) -> str

Set: OnDoubleClick(self: IDialogSheet) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: IDialogSheet) -> str

Set: OnSheetActivate(self: IDialogSheet) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: IDialogSheet) -> str

Set: OnSheetDeactivate(self: IDialogSheet) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: IDialogSheet) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialogSheet) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: IDialogSheet) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: IDialogSheet) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: IDialogSheet) -> bool

"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: IDialogSheet) -> bool

"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: IDialogSheet) -> Protection

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: IDialogSheet) -> bool

"""

    ProtectScenarios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectScenarios(self: IDialogSheet) -> bool

"""

    QueryTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTables(self: IDialogSheet) -> QueryTables

"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: IDialogSheet) -> Scripts

"""

    ScrollArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollArea(self: IDialogSheet) -> str

Set: ScrollArea(self: IDialogSheet) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: IDialogSheet) -> Shapes

"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: IDialogSheet) -> SmartTags

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: IDialogSheet) -> Sort

"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: IDialogSheet) -> Tab

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDialogSheet) -> XlSheetVisibility

Set: Visible(self: IDialogSheet) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: IDialogSheet) -> VPageBreaks

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: IDialogSheet) -> str

Set: _CodeName(self: IDialogSheet) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: IDialogSheet) -> int

Set: _DisplayRightToLeft(self: IDialogSheet) = value
"""



class IDialogSheets(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: IDialogSheets, Before: object, After: object, Count: object) -> DialogSheet """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: IDialogSheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: IDialogSheets, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: IDialogSheets) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IDialogSheets) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: IDialogSheets, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: IDialogSheets, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IDialogSheets, Replace: object) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: IDialogSheets) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialogSheets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDialogSheets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialogSheets) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: IDialogSheets) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialogSheets) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDialogSheets) -> object

Set: Visible(self: IDialogSheets) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: IDialogSheets) -> VPageBreaks

"""



class IDialogSheetView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDialogSheetView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDialogSheetView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDialogSheetView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: IDialogSheetView) -> object

"""



class IDisplayFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IDisplayFormat) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDisplayFormat) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IDisplayFormat) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDisplayFormat) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDisplayFormat) -> Font

"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: IDisplayFormat) -> object

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDisplayFormat) -> object

"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: IDisplayFormat) -> object

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDisplayFormat) -> Interior

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDisplayFormat) -> object

"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: IDisplayFormat) -> object

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IDisplayFormat) -> object

"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: IDisplayFormat) -> object

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDisplayFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDisplayFormat) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDisplayFormat) -> int

"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: IDisplayFormat) -> object

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: IDisplayFormat) -> object

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDisplayFormat) -> object

"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: IDisplayFormat) -> object

"""



class IDisplayUnitLabel:
    # no doc
    def Delete(self):
        """ Delete(self: IDisplayUnitLabel) -> object """
        pass

    def Select(self):
        """ Select(self: IDisplayUnitLabel) -> object """
        pass

    def _Dummy21(self):
        """ _Dummy21(self: IDisplayUnitLabel) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDisplayUnitLabel) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDisplayUnitLabel) -> object

Set: AutoScaleFont(self: IDisplayUnitLabel) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDisplayUnitLabel) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDisplayUnitLabel) -> str

Set: Caption(self: IDisplayUnitLabel) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDisplayUnitLabel) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IDisplayUnitLabel) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDisplayUnitLabel) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDisplayUnitLabel) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IDisplayUnitLabel) -> str

Set: Formula(self: IDisplayUnitLabel) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: IDisplayUnitLabel) -> str

Set: FormulaLocal(self: IDisplayUnitLabel) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: IDisplayUnitLabel) -> str

Set: FormulaR1C1(self: IDisplayUnitLabel) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: IDisplayUnitLabel) -> str

Set: FormulaR1C1Local(self: IDisplayUnitLabel) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDisplayUnitLabel) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDisplayUnitLabel) -> object

Set: HorizontalAlignment(self: IDisplayUnitLabel) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDisplayUnitLabel) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDisplayUnitLabel) -> float

Set: Left(self: IDisplayUnitLabel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDisplayUnitLabel) -> str

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDisplayUnitLabel) -> object

Set: Orientation(self: IDisplayUnitLabel) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDisplayUnitLabel) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IDisplayUnitLabel) -> XlChartElementPosition

Set: Position(self: IDisplayUnitLabel) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDisplayUnitLabel) -> int

Set: ReadingOrder(self: IDisplayUnitLabel) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDisplayUnitLabel) -> bool

Set: Shadow(self: IDisplayUnitLabel) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDisplayUnitLabel) -> str

Set: Text(self: IDisplayUnitLabel) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDisplayUnitLabel) -> float

Set: Top(self: IDisplayUnitLabel) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDisplayUnitLabel) -> object

Set: VerticalAlignment(self: IDisplayUnitLabel) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDisplayUnitLabel) -> float

"""



class IDocEvents:
    # no doc
    def Activate(self):
        """ Activate(self: IDocEvents) """
        pass

    def BeforeDelete(self):
        """ BeforeDelete(self: IDocEvents) """
        pass

    def BeforeDoubleClick(self, Target, Cancel):
        """ BeforeDoubleClick(self: IDocEvents, Target: Range) -> bool """
        pass

    def BeforeRightClick(self, Target, Cancel):
        """ BeforeRightClick(self: IDocEvents, Target: Range) -> bool """
        pass

    def Calculate(self):
        """ Calculate(self: IDocEvents) """
        pass

    def Change(self, Target):
        """ Change(self: IDocEvents, Target: Range) """
        pass

    def Deactivate(self):
        """ Deactivate(self: IDocEvents) """
        pass

    def FollowHyperlink(self, Target):
        """ FollowHyperlink(self: IDocEvents, Target: Hyperlink) """
        pass

    def LensGalleryRenderComplete(self):
        """ LensGalleryRenderComplete(self: IDocEvents) """
        pass

    def PivotTableAfterValueChange(self, TargetPivotTable, TargetRange):
        """ PivotTableAfterValueChange(self: IDocEvents, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def PivotTableBeforeAllocateChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ PivotTableBeforeAllocateChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def PivotTableBeforeCommitChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ PivotTableBeforeCommitChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def PivotTableBeforeDiscardChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ PivotTableBeforeDiscardChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def PivotTableChangeSync(self, Target):
        """ PivotTableChangeSync(self: IDocEvents, Target: PivotTable) """
        pass

    def PivotTableUpdate(self, Target):
        """ PivotTableUpdate(self: IDocEvents, Target: PivotTable) """
        pass

    def SelectionChange(self, Target):
        """ SelectionChange(self: IDocEvents, Target: Range) """
        pass

    def TableUpdate(self, Target):
        """ TableUpdate(self: IDocEvents, Target: TableObject) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IDownBars:
    # no doc
    def Delete(self):
        """ Delete(self: IDownBars) -> object """
        pass

    def Select(self):
        """ Select(self: IDownBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDownBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDownBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDownBars) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IDownBars) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDownBars) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDownBars) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDownBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDownBars) -> object

"""



class IDrawing:
    # no doc
    def AddVertex(self, Left, Top):
        """ AddVertex(self: IDrawing, Left: float, Top: float) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IDrawing) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IDrawing, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IDrawing) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDrawing, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IDrawing) -> object """
        pass

    def Delete(self):
        """ Delete(self: IDrawing) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IDrawing) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: IDrawing, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDrawing, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IDrawing) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IDrawing) -> bool

Set: AddIndent(self: IDrawing) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDrawing) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDrawing) -> object

Set: AutoScaleFont(self: IDrawing) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IDrawing) -> bool

Set: AutoSize(self: IDrawing) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDrawing) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IDrawing) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDrawing) -> str

Set: Caption(self: IDrawing) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDrawing) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IDrawing) -> bool

Set: Enabled(self: IDrawing) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDrawing) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IDrawing) -> str

Set: Formula(self: IDrawing) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDrawing) -> float

Set: Height(self: IDrawing) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDrawing) -> object

Set: HorizontalAlignment(self: IDrawing) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IDrawing) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDrawing) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDrawing) -> float

Set: Left(self: IDrawing) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDrawing) -> bool

Set: Locked(self: IDrawing) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IDrawing) -> bool

Set: LockedText(self: IDrawing) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDrawing) -> str

Set: Name(self: IDrawing) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDrawing) -> str

Set: OnAction(self: IDrawing) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDrawing) -> object

Set: Orientation(self: IDrawing) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDrawing) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IDrawing) -> object

Set: Placement(self: IDrawing) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IDrawing) -> bool

Set: PrintObject(self: IDrawing) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDrawing) -> int

Set: ReadingOrder(self: IDrawing) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDrawing) -> bool

Set: Shadow(self: IDrawing) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDrawing) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDrawing) -> str

Set: Text(self: IDrawing) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDrawing) -> float

Set: Top(self: IDrawing) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IDrawing) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDrawing) -> object

Set: VerticalAlignment(self: IDrawing) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDrawing) -> bool

Set: Visible(self: IDrawing) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDrawing) -> float

Set: Width(self: IDrawing) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IDrawing) -> int

"""



class IDrawingObjects(IEnumerable):
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: IDrawingObjects, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IDrawingObjects) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IDrawingObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IDrawingObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDrawingObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IDrawingObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: IDrawingObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IDrawingObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IDrawingObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IDrawingObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IDrawingObjects, Index: object) -> object """
        pass

    def LinkCombo(self, Link):
        """ LinkCombo(self: IDrawingObjects, Link: object) -> object """
        pass

    def List(self, Index):
        """ List(self: IDrawingObjects, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IDrawingObjects) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IDrawingObjects, Index: int, Count: object) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: IDrawingObjects, Vertex: int, Insert: object, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDrawingObjects, Replace: object) -> object """
        pass

    def Selected(self, Index):
        """ Selected(self: IDrawingObjects, Index: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IDrawingObjects) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: IDrawingObjects) -> object """
        pass

    def Vertices(self, Index1, Index2):
        """ Vertices(self: IDrawingObjects, Index1: object, Index2: object) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IDrawingObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IDrawingObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IDrawingObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: IDrawingObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IDrawingObjects) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: IDrawingObjects) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: IDrawingObjects) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: IDrawingObjects) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IDrawingObjects) -> object

Set: Accelerator(self: IDrawingObjects) = value
"""

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IDrawingObjects) -> bool

Set: AddIndent(self: IDrawingObjects) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDrawingObjects) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: IDrawingObjects) -> object

Set: ArrowHeadLength(self: IDrawingObjects) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: IDrawingObjects) -> object

Set: ArrowHeadStyle(self: IDrawingObjects) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: IDrawingObjects) -> object

Set: ArrowHeadWidth(self: IDrawingObjects) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IDrawingObjects) -> bool

Set: AutoSize(self: IDrawingObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDrawingObjects) -> Border

"""

    CancelButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CancelButton(self: IDrawingObjects) -> bool

Set: CancelButton(self: IDrawingObjects) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDrawingObjects) -> str

Set: Caption(self: IDrawingObjects) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDrawingObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDrawingObjects) -> XlCreator

"""

    DefaultButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultButton(self: IDrawingObjects) -> bool

Set: DefaultButton(self: IDrawingObjects) = value
"""

    DismissButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DismissButton(self: IDrawingObjects) -> bool

Set: DismissButton(self: IDrawingObjects) = value
"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IDrawingObjects) -> bool

Set: Display3DShading(self: IDrawingObjects) = value
"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: IDrawingObjects) -> bool

Set: DisplayVerticalScrollBar(self: IDrawingObjects) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: IDrawingObjects) -> int

Set: DropDownLines(self: IDrawingObjects) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IDrawingObjects) -> bool

Set: Enabled(self: IDrawingObjects) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDrawingObjects) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDrawingObjects) -> float

Set: Height(self: IDrawingObjects) = value
"""

    HelpButton = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpButton(self: IDrawingObjects) -> bool

Set: HelpButton(self: IDrawingObjects) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDrawingObjects) -> object

Set: HorizontalAlignment(self: IDrawingObjects) = value
"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: IDrawingObjects) -> int

Set: InputType(self: IDrawingObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDrawingObjects) -> Interior

"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: IDrawingObjects) -> int

Set: LargeChange(self: IDrawingObjects) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDrawingObjects) -> float

Set: Left(self: IDrawingObjects) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IDrawingObjects) -> str

Set: LinkedCell(self: IDrawingObjects) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IDrawingObjects) -> str

Set: ListFillRange(self: IDrawingObjects) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IDrawingObjects) -> int

Set: ListIndex(self: IDrawingObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDrawingObjects) -> bool

Set: Locked(self: IDrawingObjects) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IDrawingObjects) -> bool

Set: LockedText(self: IDrawingObjects) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: IDrawingObjects) -> int

Set: Max(self: IDrawingObjects) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: IDrawingObjects) -> int

Set: Min(self: IDrawingObjects) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: IDrawingObjects) -> bool

Set: MultiLine(self: IDrawingObjects) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: IDrawingObjects) -> bool

Set: MultiSelect(self: IDrawingObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDrawingObjects) -> str

Set: OnAction(self: IDrawingObjects) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDrawingObjects) -> object

Set: Orientation(self: IDrawingObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDrawingObjects) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IDrawingObjects) -> object

Set: PhoneticAccelerator(self: IDrawingObjects) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IDrawingObjects) -> object

Set: Placement(self: IDrawingObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IDrawingObjects) -> bool

Set: PrintObject(self: IDrawingObjects) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDrawingObjects) -> int

Set: ReadingOrder(self: IDrawingObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IDrawingObjects) -> bool

Set: RoundedCorners(self: IDrawingObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDrawingObjects) -> bool

Set: Shadow(self: IDrawingObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDrawingObjects) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: IDrawingObjects) -> int

Set: SmallChange(self: IDrawingObjects) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDrawingObjects) -> str

Set: Text(self: IDrawingObjects) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDrawingObjects) -> float

Set: Top(self: IDrawingObjects) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IDrawingObjects) -> int

Set: Value(self: IDrawingObjects) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDrawingObjects) -> object

Set: VerticalAlignment(self: IDrawingObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDrawingObjects) -> bool

Set: Visible(self: IDrawingObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDrawingObjects) -> float

Set: Width(self: IDrawingObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IDrawingObjects) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IDrawingObjects) -> int

Set: _Default(self: IDrawingObjects) = value
"""



class IDrawings(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2, Closed):
        """ Add(self: IDrawings, X1: float, Y1: float, X2: float, Y2: float, Closed: bool) -> Drawing """
        pass

    def BringToFront(self):
        """ BringToFront(self: IDrawings) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IDrawings, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IDrawings) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDrawings, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IDrawings) -> object """
        pass

    def Delete(self):
        """ Delete(self: IDrawings) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IDrawings) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IDrawings) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IDrawings) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IDrawings, Index: object) -> object """
        pass

    def Reshape(self, Vertex, Insert, Left, Top):
        """ Reshape(self: IDrawings, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDrawings, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IDrawings) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IDrawings) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IDrawings) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IDrawings) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IDrawings) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: IDrawings) """
        pass

    def _Dummy46(self):
        """ _Dummy46(self: IDrawings) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IDrawings) -> bool

Set: AddIndent(self: IDrawings) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDrawings) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IDrawings) -> object

Set: AutoScaleFont(self: IDrawings) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IDrawings) -> bool

Set: AutoSize(self: IDrawings) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDrawings) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDrawings) -> str

Set: Caption(self: IDrawings) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDrawings) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDrawings) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IDrawings) -> bool

Set: Enabled(self: IDrawings) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IDrawings) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IDrawings) -> str

Set: Formula(self: IDrawings) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDrawings) -> float

Set: Height(self: IDrawings) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IDrawings) -> object

Set: HorizontalAlignment(self: IDrawings) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IDrawings) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDrawings) -> float

Set: Left(self: IDrawings) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDrawings) -> bool

Set: Locked(self: IDrawings) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IDrawings) -> bool

Set: LockedText(self: IDrawings) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDrawings) -> str

Set: OnAction(self: IDrawings) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IDrawings) -> object

Set: Orientation(self: IDrawings) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDrawings) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IDrawings) -> object

Set: Placement(self: IDrawings) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IDrawings) -> bool

Set: PrintObject(self: IDrawings) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IDrawings) -> int

Set: ReadingOrder(self: IDrawings) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IDrawings) -> bool

Set: Shadow(self: IDrawings) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDrawings) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDrawings) -> str

Set: Text(self: IDrawings) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDrawings) -> float

Set: Top(self: IDrawings) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IDrawings) -> object

Set: VerticalAlignment(self: IDrawings) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDrawings) -> bool

Set: Visible(self: IDrawings) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDrawings) -> float

Set: Width(self: IDrawings) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IDrawings) -> int

"""



class IDropDown:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: IDropDown, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IDropDown) -> object """
        pass

    def Copy(self):
        """ Copy(self: IDropDown) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDropDown, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IDropDown) -> object """
        pass

    def Delete(self):
        """ Delete(self: IDropDown) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IDropDown) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IDropDown) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IDropDown, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDropDown, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IDropDown) -> object """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IDropDown) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDropDown) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IDropDown) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDropDown) -> str

Set: Caption(self: IDropDown) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDropDown) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IDropDown) -> bool

Set: Display3DShading(self: IDropDown) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: IDropDown) -> int

Set: DropDownLines(self: IDropDown) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IDropDown) -> bool

Set: Enabled(self: IDropDown) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDropDown) -> float

Set: Height(self: IDropDown) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IDropDown) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDropDown) -> float

Set: Left(self: IDropDown) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IDropDown) -> str

Set: LinkedCell(self: IDropDown) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: IDropDown) -> object

"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: IDropDown) -> int

"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IDropDown) -> str

Set: ListFillRange(self: IDropDown) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IDropDown) -> int

Set: ListIndex(self: IDropDown) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDropDown) -> bool

Set: Locked(self: IDropDown) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDropDown) -> str

Set: Name(self: IDropDown) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDropDown) -> str

Set: OnAction(self: IDropDown) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDropDown) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IDropDown) -> object

Set: Placement(self: IDropDown) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IDropDown) -> bool

Set: PrintObject(self: IDropDown) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDropDown) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDropDown) -> str

Set: Text(self: IDropDown) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDropDown) -> float

Set: Top(self: IDropDown) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IDropDown) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IDropDown) -> int

Set: Value(self: IDropDown) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDropDown) -> bool

Set: Visible(self: IDropDown) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDropDown) -> float

Set: Width(self: IDropDown) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IDropDown) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IDropDown) -> int

Set: _Default(self: IDropDown) = value
"""



class IDropDowns(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height, Editable):
        """ Add(self: IDropDowns, Left: float, Top: float, Width: float, Height: float, Editable: object) -> DropDown """
        pass

    def AddItem(self, Text, Index):
        """ AddItem(self: IDropDowns, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IDropDowns) -> object """
        pass

    def Copy(self):
        """ Copy(self: IDropDowns) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IDropDowns, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IDropDowns) -> object """
        pass

    def Delete(self):
        """ Delete(self: IDropDowns) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IDropDowns) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IDropDowns) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IDropDowns) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IDropDowns, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IDropDowns) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IDropDowns, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IDropDowns, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IDropDowns) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IDropDowns) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IDropDowns) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IDropDowns) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IDropDowns) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: IDropDowns) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: IDropDowns) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IDropDowns) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDropDowns) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IDropDowns) -> str

Set: Caption(self: IDropDowns) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IDropDowns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDropDowns) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IDropDowns) -> bool

Set: Display3DShading(self: IDropDowns) = value
"""

    DropDownLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DropDownLines(self: IDropDowns) -> int

Set: DropDownLines(self: IDropDowns) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IDropDowns) -> bool

Set: Enabled(self: IDropDowns) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IDropDowns) -> float

Set: Height(self: IDropDowns) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IDropDowns) -> float

Set: Left(self: IDropDowns) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IDropDowns) -> str

Set: LinkedCell(self: IDropDowns) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IDropDowns) -> str

Set: ListFillRange(self: IDropDowns) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IDropDowns) -> int

Set: ListIndex(self: IDropDowns) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IDropDowns) -> bool

Set: Locked(self: IDropDowns) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IDropDowns) -> str

Set: OnAction(self: IDropDowns) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDropDowns) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IDropDowns) -> object

Set: Placement(self: IDropDowns) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IDropDowns) -> bool

Set: PrintObject(self: IDropDowns) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IDropDowns) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IDropDowns) -> str

Set: Text(self: IDropDowns) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IDropDowns) -> float

Set: Top(self: IDropDowns) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IDropDowns) -> int

Set: Value(self: IDropDowns) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IDropDowns) -> bool

Set: Visible(self: IDropDowns) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IDropDowns) -> float

Set: Width(self: IDropDowns) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IDropDowns) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IDropDowns) -> int

Set: _Default(self: IDropDowns) = value
"""



class IDropLines:
    # no doc
    def Delete(self):
        """ Delete(self: IDropLines) -> object """
        pass

    def Select(self):
        """ Select(self: IDropLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IDropLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IDropLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IDropLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IDropLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IDropLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IDropLines) -> object

"""



class IDummy:
    # no doc
    def AddNonVisibleSignature(self, SigProv):
        """ AddNonVisibleSignature(self: IDummy, SigProv: object) -> Signature """
        pass

    def AddSignatureLine(self, SigProv):
        """ AddSignatureLine(self: IDummy, SigProv: object) -> Signature """
        pass

    def ChDir(self):
        """ ChDir(self: IDummy) """
        pass

    def DirectObject(self):
        """ DirectObject(self: IDummy) """
        pass

    def DoScript(self):
        """ DoScript(self: IDummy) """
        pass

    def Load(self):
        """ Load(self: IDummy) """
        pass

    def RefreshDocument(self):
        """ RefreshDocument(self: IDummy) """
        pass

    def RGB(self):
        """ RGB(self: IDummy) """
        pass

    def ThemeColorScheme(self):
        """ ThemeColorScheme(self: IDummy) """
        pass

    def ThemeEffectScheme(self):
        """ ThemeEffectScheme(self: IDummy) """
        pass

    def ThemeFontScheme(self):
        """ ThemeFontScheme(self: IDummy) """
        pass

    def _ActiveSheetOrChart(self):
        """ _ActiveSheetOrChart(self: IDummy) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ShowSignaturesPane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSignaturesPane(self: IDummy) -> bool

Set: ShowSignaturesPane(self: IDummy) = value
"""



class IEditBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IEditBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IEditBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IEditBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IEditBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IEditBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: IEditBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IEditBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IEditBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IEditBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IEditBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IEditBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IEditBox) -> str

Set: Caption(self: IEditBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IEditBox) -> XlCreator

"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: IEditBox) -> bool

Set: DisplayVerticalScrollBar(self: IEditBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IEditBox) -> bool

Set: Enabled(self: IEditBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IEditBox) -> float

Set: Height(self: IEditBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IEditBox) -> int

"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: IEditBox) -> int

Set: InputType(self: IEditBox) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IEditBox) -> float

Set: Left(self: IEditBox) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: IEditBox) -> str

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IEditBox) -> bool

Set: Locked(self: IEditBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IEditBox) -> bool

Set: LockedText(self: IEditBox) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: IEditBox) -> bool

Set: MultiLine(self: IEditBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IEditBox) -> str

Set: Name(self: IEditBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IEditBox) -> str

Set: OnAction(self: IEditBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IEditBox) -> object

"""

    PasswordEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEdit(self: IEditBox) -> bool

Set: PasswordEdit(self: IEditBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IEditBox) -> object

Set: Placement(self: IEditBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IEditBox) -> bool

Set: PrintObject(self: IEditBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IEditBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IEditBox) -> str

Set: Text(self: IEditBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IEditBox) -> float

Set: Top(self: IEditBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IEditBox) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IEditBox) -> bool

Set: Visible(self: IEditBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IEditBox) -> float

Set: Width(self: IEditBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IEditBox) -> int

"""



class IEditBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IEditBoxes, Left: float, Top: float, Width: float, Height: float) -> EditBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: IEditBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IEditBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IEditBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IEditBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IEditBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: IEditBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IEditBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IEditBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IEditBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IEditBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IEditBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IEditBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IEditBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IEditBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IEditBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IEditBoxes) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: IEditBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IEditBoxes) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IEditBoxes) -> str

Set: Caption(self: IEditBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IEditBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IEditBoxes) -> XlCreator

"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: IEditBoxes) -> bool

Set: DisplayVerticalScrollBar(self: IEditBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IEditBoxes) -> bool

Set: Enabled(self: IEditBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IEditBoxes) -> float

Set: Height(self: IEditBoxes) = value
"""

    InputType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputType(self: IEditBoxes) -> int

Set: InputType(self: IEditBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IEditBoxes) -> float

Set: Left(self: IEditBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IEditBoxes) -> bool

Set: Locked(self: IEditBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IEditBoxes) -> bool

Set: LockedText(self: IEditBoxes) = value
"""

    MultiLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLine(self: IEditBoxes) -> bool

Set: MultiLine(self: IEditBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IEditBoxes) -> str

Set: OnAction(self: IEditBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IEditBoxes) -> object

"""

    PasswordEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEdit(self: IEditBoxes) -> bool

Set: PasswordEdit(self: IEditBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IEditBoxes) -> object

Set: Placement(self: IEditBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IEditBoxes) -> bool

Set: PrintObject(self: IEditBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IEditBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IEditBoxes) -> str

Set: Text(self: IEditBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IEditBoxes) -> float

Set: Top(self: IEditBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IEditBoxes) -> bool

Set: Visible(self: IEditBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IEditBoxes) -> float

Set: Width(self: IEditBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IEditBoxes) -> int

"""



class IError:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IError) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IError) -> XlCreator

"""

    Ignore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ignore(self: IError) -> bool

Set: Ignore(self: IError) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IError) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IError) -> bool

"""



class IErrorBars:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: IErrorBars) -> object """
        pass

    def Delete(self):
        """ Delete(self: IErrorBars) -> object """
        pass

    def Select(self):
        """ Select(self: IErrorBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IErrorBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IErrorBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IErrorBars) -> XlCreator

"""

    EndStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndStyle(self: IErrorBars) -> XlEndStyleCap

Set: EndStyle(self: IErrorBars) = value
"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IErrorBars) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IErrorBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IErrorBars) -> object

"""



class IErrorCheckingOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IErrorCheckingOptions) -> Application

"""

    BackgroundChecking = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundChecking(self: IErrorCheckingOptions) -> bool

Set: BackgroundChecking(self: IErrorCheckingOptions) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IErrorCheckingOptions) -> XlCreator

"""

    EmptyCellReferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmptyCellReferences(self: IErrorCheckingOptions) -> bool

Set: EmptyCellReferences(self: IErrorCheckingOptions) = value
"""

    EvaluateToError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EvaluateToError(self: IErrorCheckingOptions) -> bool

Set: EvaluateToError(self: IErrorCheckingOptions) = value
"""

    InconsistentFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InconsistentFormula(self: IErrorCheckingOptions) -> bool

Set: InconsistentFormula(self: IErrorCheckingOptions) = value
"""

    InconsistentTableFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InconsistentTableFormula(self: IErrorCheckingOptions) -> bool

Set: InconsistentTableFormula(self: IErrorCheckingOptions) = value
"""

    IndicatorColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorColorIndex(self: IErrorCheckingOptions) -> XlColorIndex

Set: IndicatorColorIndex(self: IErrorCheckingOptions) = value
"""

    ListDataValidation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListDataValidation(self: IErrorCheckingOptions) -> bool

Set: ListDataValidation(self: IErrorCheckingOptions) = value
"""

    NumberAsText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberAsText(self: IErrorCheckingOptions) -> bool

Set: NumberAsText(self: IErrorCheckingOptions) = value
"""

    OmittedCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OmittedCells(self: IErrorCheckingOptions) -> bool

Set: OmittedCells(self: IErrorCheckingOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IErrorCheckingOptions) -> object

"""

    TextDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextDate(self: IErrorCheckingOptions) -> bool

Set: TextDate(self: IErrorCheckingOptions) = value
"""

    UnlockedFormulaCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnlockedFormulaCells(self: IErrorCheckingOptions) -> bool

Set: UnlockedFormulaCells(self: IErrorCheckingOptions) = value
"""



class IErrors:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IErrors) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IErrors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IErrors) -> object

"""



class IFileExportConverter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFileExportConverter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFileExportConverter) -> XlCreator

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IFileExportConverter) -> str

"""

    Extensions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extensions(self: IFileExportConverter) -> str

"""

    FileFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFormat(self: IFileExportConverter) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFileExportConverter) -> object

"""



class IFileExportConverters(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IFileExportConverters) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFileExportConverters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IFileExportConverters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFileExportConverters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFileExportConverters) -> object

"""



class IFilter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFilter) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IFilter) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFilter) -> XlCreator

"""

    Criteria1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Criteria1(self: IFilter) -> object

"""

    Criteria2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Criteria2(self: IFilter) -> object

"""

    On = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: On(self: IFilter) -> bool

"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: IFilter) -> XlAutoFilterOperator

Set: Operator(self: IFilter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFilter) -> object

"""

    _Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Operator(self: IFilter) -> XlAutoFilterOperator

"""



class IFilters(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IFilters) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFilters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IFilters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFilters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFilters) -> object

"""



class IFloor:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: IFloor) -> object """
        pass

    def Paste(self):
        """ Paste(self: IFloor) """
        pass

    def Select(self):
        """ Select(self: IFloor) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFloor) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IFloor) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFloor) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IFloor) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IFloor) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IFloor) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IFloor) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFloor) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: IFloor) -> object

Set: PictureType(self: IFloor) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IFloor) -> int

Set: Thickness(self: IFloor) = value
"""



class IFont:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFont) -> Application

"""

    Background = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Background(self: IFont) -> object

Set: Background(self: IFont) = value
"""

    Bold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bold(self: IFont) -> object

Set: Bold(self: IFont) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IFont) -> object

Set: Color(self: IFont) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IFont) -> object

Set: ColorIndex(self: IFont) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFont) -> XlCreator

"""

    FontStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontStyle(self: IFont) -> object

Set: FontStyle(self: IFont) = value
"""

    Italic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Italic(self: IFont) -> object

Set: Italic(self: IFont) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IFont) -> object

Set: Name(self: IFont) = value
"""

    OutlineFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OutlineFont(self: IFont) -> object

Set: OutlineFont(self: IFont) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFont) -> object

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IFont) -> object

Set: Shadow(self: IFont) = value
"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Size(self: IFont) -> object

Set: Size(self: IFont) = value
"""

    Strikethrough = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Strikethrough(self: IFont) -> object

Set: Strikethrough(self: IFont) = value
"""

    Subscript = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subscript(self: IFont) -> object

Set: Subscript(self: IFont) = value
"""

    Superscript = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Superscript(self: IFont) -> object

Set: Superscript(self: IFont) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IFont) -> object

Set: ThemeColor(self: IFont) = value
"""

    ThemeFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeFont(self: IFont) -> XlThemeFont

Set: ThemeFont(self: IFont) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IFont) -> object

Set: TintAndShade(self: IFont) = value
"""

    Underline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Underline(self: IFont) -> object

Set: Underline(self: IFont) = value
"""



class IFormatColor:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFormatColor) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IFormatColor) -> object

Set: Color(self: IFormatColor) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IFormatColor) -> XlColorIndex

Set: ColorIndex(self: IFormatColor) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFormatColor) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFormatColor) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IFormatColor) -> object

Set: ThemeColor(self: IFormatColor) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IFormatColor) -> object

Set: TintAndShade(self: IFormatColor) = value
"""



class IFormatCondition:
    # no doc
    def Delete(self):
        """ Delete(self: IFormatCondition) """
        pass

    def Modify(self, Type, Operator, Formula1, Formula2):
        """ Modify(self: IFormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IFormatCondition, Range: Range) """
        pass

    def ModifyEx(self, Type, Operator, Formula1, Formula2, String, Operator2):
        """ ModifyEx(self: IFormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, Operator2: object) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IFormatCondition) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IFormatCondition) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFormatCondition) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IFormatCondition) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IFormatCondition) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFormatCondition) -> XlCreator

"""

    DateOperator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DateOperator(self: IFormatCondition) -> XlTimePeriods

Set: DateOperator(self: IFormatCondition) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IFormatCondition) -> Font

"""

    Formula1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula1(self: IFormatCondition) -> str

"""

    Formula2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula2(self: IFormatCondition) -> str

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IFormatCondition) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IFormatCondition) -> object

Set: NumberFormat(self: IFormatCondition) = value
"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: IFormatCondition) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFormatCondition) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IFormatCondition) -> int

Set: Priority(self: IFormatCondition) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IFormatCondition) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IFormatCondition) -> XlPivotConditionScope

Set: ScopeType(self: IFormatCondition) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IFormatCondition) -> bool

Set: StopIfTrue(self: IFormatCondition) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IFormatCondition) -> str

Set: Text(self: IFormatCondition) = value
"""

    TextOperator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOperator(self: IFormatCondition) -> XlContainsOperator

Set: TextOperator(self: IFormatCondition) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IFormatCondition) -> int

"""



class IFormatConditions(IEnumerable):
    # no doc
    def Add(self, Type, Operator, Formula1, Formula2, String, TextOperator, DateOperator, ScopeType):
        """ Add(self: IFormatConditions, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, TextOperator: object, DateOperator: object, ScopeType: object) -> object """
        pass

    def AddAboveAverage(self):
        """ AddAboveAverage(self: IFormatConditions) -> object """
        pass

    def AddColorScale(self, ColorScaleType):
        """ AddColorScale(self: IFormatConditions, ColorScaleType: int) -> object """
        pass

    def AddDatabar(self):
        """ AddDatabar(self: IFormatConditions) -> object """
        pass

    def AddIconSetCondition(self):
        """ AddIconSetCondition(self: IFormatConditions) -> object """
        pass

    def AddTop10(self):
        """ AddTop10(self: IFormatConditions) -> object """
        pass

    def AddUniqueValues(self):
        """ AddUniqueValues(self: IFormatConditions) -> object """
        pass

    def Delete(self):
        """ Delete(self: IFormatConditions) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IFormatConditions) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IFormatConditions, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFormatConditions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IFormatConditions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFormatConditions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFormatConditions) -> object

"""



class IFreeformBuilder:
    # no doc
    def AddNodes(self, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
        """ AddNodes(self: IFreeformBuilder, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: object, Y2: object, X3: object, Y3: object) """
        pass

    def ConvertToShape(self):
        """ ConvertToShape(self: IFreeformBuilder) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFreeformBuilder) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFreeformBuilder) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFreeformBuilder) -> object

"""



class IFullSeriesCollection(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IFullSeriesCollection) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IFullSeriesCollection, Index: object) -> Series """
        pass

    def _Default(self, Index):
        """ _Default(self: IFullSeriesCollection, Index: object) -> Series """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IFullSeriesCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IFullSeriesCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IFullSeriesCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IFullSeriesCollection) -> object

"""



class IGraphic:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGraphic) -> Application

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: IGraphic) -> Single

Set: Brightness(self: IGraphic) = value
"""

    ColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorType(self: IGraphic) -> MsoPictureColorType

Set: ColorType(self: IGraphic) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IGraphic) -> Single

Set: Contrast(self: IGraphic) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGraphic) -> XlCreator

"""

    CropBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropBottom(self: IGraphic) -> Single

Set: CropBottom(self: IGraphic) = value
"""

    CropLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropLeft(self: IGraphic) -> Single

Set: CropLeft(self: IGraphic) = value
"""

    CropRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropRight(self: IGraphic) -> Single

Set: CropRight(self: IGraphic) = value
"""

    CropTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropTop(self: IGraphic) -> Single

Set: CropTop(self: IGraphic) = value
"""

    Filename = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Filename(self: IGraphic) -> str

Set: Filename(self: IGraphic) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IGraphic) -> Single

Set: Height(self: IGraphic) = value
"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: IGraphic) -> MsoTriState

Set: LockAspectRatio(self: IGraphic) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGraphic) -> object

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IGraphic) -> Single

Set: Width(self: IGraphic) = value
"""



class IGridlines:
    # no doc
    def Delete(self):
        """ Delete(self: IGridlines) -> object """
        pass

    def Select(self):
        """ Select(self: IGridlines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGridlines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IGridlines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGridlines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IGridlines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IGridlines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGridlines) -> object

"""



class IGroupBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IGroupBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IGroupBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IGroupBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IGroupBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IGroupBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: IGroupBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IGroupBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IGroupBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IGroupBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IGroupBox) -> object

Set: Accelerator(self: IGroupBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGroupBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IGroupBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IGroupBox) -> str

Set: Caption(self: IGroupBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGroupBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IGroupBox) -> bool

Set: Display3DShading(self: IGroupBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IGroupBox) -> bool

Set: Enabled(self: IGroupBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IGroupBox) -> float

Set: Height(self: IGroupBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IGroupBox) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IGroupBox) -> float

Set: Left(self: IGroupBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IGroupBox) -> bool

Set: Locked(self: IGroupBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IGroupBox) -> bool

Set: LockedText(self: IGroupBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IGroupBox) -> str

Set: Name(self: IGroupBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IGroupBox) -> str

Set: OnAction(self: IGroupBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGroupBox) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IGroupBox) -> object

Set: PhoneticAccelerator(self: IGroupBox) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IGroupBox) -> object

Set: Placement(self: IGroupBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IGroupBox) -> bool

Set: PrintObject(self: IGroupBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IGroupBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IGroupBox) -> str

Set: Text(self: IGroupBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IGroupBox) -> float

Set: Top(self: IGroupBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IGroupBox) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IGroupBox) -> bool

Set: Visible(self: IGroupBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IGroupBox) -> float

Set: Width(self: IGroupBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IGroupBox) -> int

"""



class IGroupBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IGroupBoxes, Left: float, Top: float, Width: float, Height: float) -> GroupBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: IGroupBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IGroupBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IGroupBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IGroupBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IGroupBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: IGroupBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IGroupBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IGroupBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IGroupBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IGroupBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IGroupBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IGroupBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IGroupBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IGroupBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IGroupBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IGroupBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IGroupBoxes) -> object

Set: Accelerator(self: IGroupBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGroupBoxes) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IGroupBoxes) -> str

Set: Caption(self: IGroupBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IGroupBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGroupBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IGroupBoxes) -> bool

Set: Display3DShading(self: IGroupBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IGroupBoxes) -> bool

Set: Enabled(self: IGroupBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IGroupBoxes) -> float

Set: Height(self: IGroupBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IGroupBoxes) -> float

Set: Left(self: IGroupBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IGroupBoxes) -> bool

Set: Locked(self: IGroupBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IGroupBoxes) -> bool

Set: LockedText(self: IGroupBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IGroupBoxes) -> str

Set: OnAction(self: IGroupBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGroupBoxes) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IGroupBoxes) -> object

Set: PhoneticAccelerator(self: IGroupBoxes) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IGroupBoxes) -> object

Set: Placement(self: IGroupBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IGroupBoxes) -> bool

Set: PrintObject(self: IGroupBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IGroupBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IGroupBoxes) -> str

Set: Text(self: IGroupBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IGroupBoxes) -> float

Set: Top(self: IGroupBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IGroupBoxes) -> bool

Set: Visible(self: IGroupBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IGroupBoxes) -> float

Set: Width(self: IGroupBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IGroupBoxes) -> int

"""



class IGroupObject:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IGroupObject) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IGroupObject, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IGroupObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IGroupObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IGroupObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: IGroupObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IGroupObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IGroupObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IGroupObject) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: IGroupObject) -> object """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: IGroupObject) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: IGroupObject) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: IGroupObject) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IGroupObject) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: IGroupObject) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: IGroupObject) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: IGroupObject) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: IGroupObject) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: IGroupObject) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: IGroupObject) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: IGroupObject) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: IGroupObject) """
        pass

    def _Dummy48(self):
        """ _Dummy48(self: IGroupObject) """
        pass

    def _Dummy50(self):
        """ _Dummy50(self: IGroupObject) """
        pass

    def _Dummy52(self):
        """ _Dummy52(self: IGroupObject) """
        pass

    def _Dummy53(self):
        """ _Dummy53(self: IGroupObject) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: IGroupObject) """
        pass

    def _Dummy55(self):
        """ _Dummy55(self: IGroupObject) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: IGroupObject) """
        pass

    def _Dummy57(self):
        """ _Dummy57(self: IGroupObject) """
        pass

    def _Dummy58(self):
        """ _Dummy58(self: IGroupObject) """
        pass

    def _Dummy59(self):
        """ _Dummy59(self: IGroupObject) """
        pass

    def _Dummy60(self):
        """ _Dummy60(self: IGroupObject) """
        pass

    def _Dummy61(self):
        """ _Dummy61(self: IGroupObject) """
        pass

    def _Dummy62(self):
        """ _Dummy62(self: IGroupObject) """
        pass

    def _Dummy63(self):
        """ _Dummy63(self: IGroupObject) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: IGroupObject) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: IGroupObject) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: IGroupObject) """
        pass

    def _Dummy68(self):
        """ _Dummy68(self: IGroupObject) """
        pass

    def _Dummy70(self):
        """ _Dummy70(self: IGroupObject) """
        pass

    def _Dummy72(self):
        """ _Dummy72(self: IGroupObject) """
        pass

    def _Dummy73(self):
        """ _Dummy73(self: IGroupObject) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: IGroupObject) """
        pass

    def _Dummy77(self):
        """ _Dummy77(self: IGroupObject) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IGroupObject) -> bool

Set: AddIndent(self: IGroupObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGroupObject) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: IGroupObject) -> object

Set: ArrowHeadLength(self: IGroupObject) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: IGroupObject) -> object

Set: ArrowHeadStyle(self: IGroupObject) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: IGroupObject) -> object

Set: ArrowHeadWidth(self: IGroupObject) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IGroupObject) -> bool

Set: AutoSize(self: IGroupObject) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IGroupObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IGroupObject) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGroupObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IGroupObject) -> bool

Set: Enabled(self: IGroupObject) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IGroupObject) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IGroupObject) -> float

Set: Height(self: IGroupObject) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IGroupObject) -> object

Set: HorizontalAlignment(self: IGroupObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IGroupObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IGroupObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IGroupObject) -> float

Set: Left(self: IGroupObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IGroupObject) -> bool

Set: Locked(self: IGroupObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IGroupObject) -> str

Set: Name(self: IGroupObject) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IGroupObject) -> str

Set: OnAction(self: IGroupObject) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IGroupObject) -> object

Set: Orientation(self: IGroupObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGroupObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IGroupObject) -> object

Set: Placement(self: IGroupObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IGroupObject) -> bool

Set: PrintObject(self: IGroupObject) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IGroupObject) -> int

Set: ReadingOrder(self: IGroupObject) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IGroupObject) -> bool

Set: RoundedCorners(self: IGroupObject) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IGroupObject) -> bool

Set: Shadow(self: IGroupObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IGroupObject) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IGroupObject) -> float

Set: Top(self: IGroupObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IGroupObject) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IGroupObject) -> object

Set: VerticalAlignment(self: IGroupObject) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IGroupObject) -> bool

Set: Visible(self: IGroupObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IGroupObject) -> float

Set: Width(self: IGroupObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IGroupObject) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IGroupObject) -> int

Set: _Default(self: IGroupObject) = value
"""



class IGroupObjects(IEnumerable):
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IGroupObjects) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IGroupObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IGroupObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IGroupObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IGroupObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: IGroupObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IGroupObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IGroupObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IGroupObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IGroupObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IGroupObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IGroupObjects) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: IGroupObjects) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IGroupObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IGroupObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IGroupObjects) """
        pass

    def _Dummy27(self):
        """ _Dummy27(self: IGroupObjects) """
        pass

    def _Dummy28(self):
        """ _Dummy28(self: IGroupObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IGroupObjects) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: IGroupObjects) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IGroupObjects) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: IGroupObjects) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: IGroupObjects) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: IGroupObjects) """
        pass

    def _Dummy42(self):
        """ _Dummy42(self: IGroupObjects) """
        pass

    def _Dummy43(self):
        """ _Dummy43(self: IGroupObjects) """
        pass

    def _Dummy44(self):
        """ _Dummy44(self: IGroupObjects) """
        pass

    def _Dummy45(self):
        """ _Dummy45(self: IGroupObjects) """
        pass

    def _Dummy47(self):
        """ _Dummy47(self: IGroupObjects) """
        pass

    def _Dummy48(self):
        """ _Dummy48(self: IGroupObjects) """
        pass

    def _Dummy50(self):
        """ _Dummy50(self: IGroupObjects) """
        pass

    def _Dummy52(self):
        """ _Dummy52(self: IGroupObjects) """
        pass

    def _Dummy53(self):
        """ _Dummy53(self: IGroupObjects) """
        pass

    def _Dummy54(self):
        """ _Dummy54(self: IGroupObjects) """
        pass

    def _Dummy55(self):
        """ _Dummy55(self: IGroupObjects) """
        pass

    def _Dummy56(self):
        """ _Dummy56(self: IGroupObjects) """
        pass

    def _Dummy57(self):
        """ _Dummy57(self: IGroupObjects) """
        pass

    def _Dummy58(self):
        """ _Dummy58(self: IGroupObjects) """
        pass

    def _Dummy59(self):
        """ _Dummy59(self: IGroupObjects) """
        pass

    def _Dummy60(self):
        """ _Dummy60(self: IGroupObjects) """
        pass

    def _Dummy61(self):
        """ _Dummy61(self: IGroupObjects) """
        pass

    def _Dummy62(self):
        """ _Dummy62(self: IGroupObjects) """
        pass

    def _Dummy63(self):
        """ _Dummy63(self: IGroupObjects) """
        pass

    def _Dummy65(self):
        """ _Dummy65(self: IGroupObjects) """
        pass

    def _Dummy66(self):
        """ _Dummy66(self: IGroupObjects) """
        pass

    def _Dummy67(self):
        """ _Dummy67(self: IGroupObjects) """
        pass

    def _Dummy68(self):
        """ _Dummy68(self: IGroupObjects) """
        pass

    def _Dummy70(self):
        """ _Dummy70(self: IGroupObjects) """
        pass

    def _Dummy72(self):
        """ _Dummy72(self: IGroupObjects) """
        pass

    def _Dummy73(self):
        """ _Dummy73(self: IGroupObjects) """
        pass

    def _Dummy75(self):
        """ _Dummy75(self: IGroupObjects) """
        pass

    def _Dummy77(self):
        """ _Dummy77(self: IGroupObjects) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IGroupObjects) -> bool

Set: AddIndent(self: IGroupObjects) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGroupObjects) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: IGroupObjects) -> object

Set: ArrowHeadLength(self: IGroupObjects) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: IGroupObjects) -> object

Set: ArrowHeadStyle(self: IGroupObjects) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: IGroupObjects) -> object

Set: ArrowHeadWidth(self: IGroupObjects) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IGroupObjects) -> bool

Set: AutoSize(self: IGroupObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IGroupObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IGroupObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGroupObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IGroupObjects) -> bool

Set: Enabled(self: IGroupObjects) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IGroupObjects) -> Font

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IGroupObjects) -> float

Set: Height(self: IGroupObjects) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IGroupObjects) -> object

Set: HorizontalAlignment(self: IGroupObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IGroupObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IGroupObjects) -> float

Set: Left(self: IGroupObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IGroupObjects) -> bool

Set: Locked(self: IGroupObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IGroupObjects) -> str

Set: OnAction(self: IGroupObjects) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IGroupObjects) -> object

Set: Orientation(self: IGroupObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGroupObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IGroupObjects) -> object

Set: Placement(self: IGroupObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IGroupObjects) -> bool

Set: PrintObject(self: IGroupObjects) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IGroupObjects) -> int

Set: ReadingOrder(self: IGroupObjects) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IGroupObjects) -> bool

Set: RoundedCorners(self: IGroupObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IGroupObjects) -> bool

Set: Shadow(self: IGroupObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IGroupObjects) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IGroupObjects) -> float

Set: Top(self: IGroupObjects) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IGroupObjects) -> object

Set: VerticalAlignment(self: IGroupObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IGroupObjects) -> bool

Set: Visible(self: IGroupObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IGroupObjects) -> float

Set: Width(self: IGroupObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IGroupObjects) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IGroupObjects) -> int

Set: _Default(self: IGroupObjects) = value
"""



class IGroupShapes(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IGroupShapes) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IGroupShapes, Index: object) -> Shape """
        pass

    def _Default(self, Index):
        """ _Default(self: IGroupShapes, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IGroupShapes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IGroupShapes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IGroupShapes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IGroupShapes) -> object

"""



class IHeaderFooter:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Picture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Picture(self: IHeaderFooter) -> Graphic

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IHeaderFooter) -> str

Set: Text(self: IHeaderFooter) = value
"""



class IHiLoLines:
    # no doc
    def Delete(self):
        """ Delete(self: IHiLoLines) -> object """
        pass

    def Select(self):
        """ Select(self: IHiLoLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IHiLoLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IHiLoLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IHiLoLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IHiLoLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IHiLoLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IHiLoLines) -> object

"""



class IHPageBreak:
    # no doc
    def Delete(self):
        """ Delete(self: IHPageBreak) """
        pass

    def DragOff(self, Direction, RegionIndex):
        """ DragOff(self: IHPageBreak, Direction: XlDirection, RegionIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IHPageBreak) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IHPageBreak) -> XlCreator

"""

    Extent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extent(self: IHPageBreak) -> XlPageBreakExtent

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: IHPageBreak) -> Range

Set: Location(self: IHPageBreak) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IHPageBreak) -> Worksheet

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IHPageBreak) -> XlPageBreak

Set: Type(self: IHPageBreak) = value
"""



class IHPageBreaks(IEnumerable):
    # no doc
    def Add(self, Before):
        """ Add(self: IHPageBreaks, Before: object) -> HPageBreak """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IHPageBreaks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IHPageBreaks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IHPageBreaks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IHPageBreaks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IHPageBreaks) -> object

"""



class IHyperlink:
    # no doc
    def AddToFavorites(self):
        """ AddToFavorites(self: IHyperlink) """
        pass

    def CreateNewDocument(self, Filename, EditNow, Overwrite):
        """ CreateNewDocument(self: IHyperlink, Filename: str, EditNow: bool, Overwrite: bool) """
        pass

    def Delete(self):
        """ Delete(self: IHyperlink) """
        pass

    def Follow(self, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):
        """ Follow(self: IHyperlink, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Address = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Address(self: IHyperlink) -> str

Set: Address(self: IHyperlink) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IHyperlink) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IHyperlink) -> XlCreator

"""

    EmailSubject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmailSubject(self: IHyperlink) -> str

Set: EmailSubject(self: IHyperlink) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IHyperlink) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IHyperlink) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IHyperlink) -> Range

"""

    ScreenTip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenTip(self: IHyperlink) -> str

Set: ScreenTip(self: IHyperlink) = value
"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: IHyperlink) -> Shape

"""

    SubAddress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubAddress(self: IHyperlink) -> str

Set: SubAddress(self: IHyperlink) = value
"""

    TextToDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextToDisplay(self: IHyperlink) -> str

Set: TextToDisplay(self: IHyperlink) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IHyperlink) -> int

"""



class IHyperlinks(IEnumerable):
    # no doc
    def Add(self, Anchor, Address, SubAddress, ScreenTip, TextToDisplay):
        """ Add(self: IHyperlinks, Anchor: object, Address: str, SubAddress: object, ScreenTip: object, TextToDisplay: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: IHyperlinks) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IHyperlinks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IHyperlinks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IHyperlinks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IHyperlinks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IHyperlinks) -> object

"""



class IIcon:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IIcon) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IIcon) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IIcon) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IIcon) -> IconSet

"""



class IIconCriteria(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IIconCriteria) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IIconCriteria) -> int

"""



class IIconCriterion:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Icon = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Icon(self: IIconCriterion) -> XlIcon

Set: Icon(self: IIconCriterion) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IIconCriterion) -> int

"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: IIconCriterion) -> int

Set: Operator(self: IIconCriterion) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IIconCriterion) -> XlConditionValueTypes

Set: Type(self: IIconCriterion) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IIconCriterion) -> object

Set: Value(self: IIconCriterion) = value
"""



class IIconSet(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IIconSet) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IIconSet) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IIconSet) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IIconSet) -> XlCreator

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IIconSet) -> XlIconSet

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IIconSet) -> object

"""



class IIconSetCondition:
    # no doc
    def Delete(self):
        """ Delete(self: IIconSetCondition) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IIconSetCondition, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IIconSetCondition) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IIconSetCondition) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IIconSetCondition) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IIconSetCondition) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IIconSetCondition) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IIconSetCondition) -> str

Set: Formula(self: IIconSetCondition) = value
"""

    IconCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconCriteria(self: IIconSetCondition) -> IconCriteria

"""

    IconSet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconSet(self: IIconSetCondition) -> object

Set: IconSet(self: IIconSetCondition) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IIconSetCondition) -> object

"""

    PercentileValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PercentileValues(self: IIconSetCondition) -> bool

Set: PercentileValues(self: IIconSetCondition) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IIconSetCondition) -> int

Set: Priority(self: IIconSetCondition) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IIconSetCondition) -> bool

"""

    ReverseOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReverseOrder(self: IIconSetCondition) -> bool

Set: ReverseOrder(self: IIconSetCondition) = value
"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IIconSetCondition) -> XlPivotConditionScope

Set: ScopeType(self: IIconSetCondition) = value
"""

    ShowIconOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowIconOnly(self: IIconSetCondition) -> bool

Set: ShowIconOnly(self: IIconSetCondition) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IIconSetCondition) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IIconSetCondition) -> int

"""



class IIconSets(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IIconSets) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IIconSets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IIconSets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IIconSets) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IIconSets) -> object

"""



class IInterior:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IInterior) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: IInterior) -> object

Set: Color(self: IInterior) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IInterior) -> object

Set: ColorIndex(self: IInterior) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IInterior) -> XlCreator

"""

    Gradient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Gradient(self: IInterior) -> object

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: IInterior) -> object

Set: InvertIfNegative(self: IInterior) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IInterior) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: IInterior) -> object

Set: Pattern(self: IInterior) = value
"""

    PatternColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternColor(self: IInterior) -> object

Set: PatternColor(self: IInterior) = value
"""

    PatternColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternColorIndex(self: IInterior) -> object

Set: PatternColorIndex(self: IInterior) = value
"""

    PatternThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternThemeColor(self: IInterior) -> object

Set: PatternThemeColor(self: IInterior) = value
"""

    PatternTintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternTintAndShade(self: IInterior) -> object

Set: PatternTintAndShade(self: IInterior) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: IInterior) -> object

Set: ThemeColor(self: IInterior) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: IInterior) -> object

Set: TintAndShade(self: IInterior) = value
"""



class ILabel:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ILabel) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ILabel, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ILabel) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ILabel, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ILabel) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILabel) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ILabel) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ILabel, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ILabel) -> object """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: ILabel) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: ILabel) -> object

Set: Accelerator(self: ILabel) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILabel) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ILabel) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ILabel) -> str

Set: Caption(self: ILabel) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILabel) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ILabel) -> bool

Set: Enabled(self: ILabel) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILabel) -> float

Set: Height(self: ILabel) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ILabel) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILabel) -> float

Set: Left(self: ILabel) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ILabel) -> bool

Set: Locked(self: ILabel) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ILabel) -> bool

Set: LockedText(self: ILabel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ILabel) -> str

Set: Name(self: ILabel) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ILabel) -> str

Set: OnAction(self: ILabel) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILabel) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: ILabel) -> object

Set: PhoneticAccelerator(self: ILabel) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ILabel) -> object

Set: Placement(self: ILabel) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ILabel) -> bool

Set: PrintObject(self: ILabel) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ILabel) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ILabel) -> str

Set: Text(self: ILabel) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILabel) -> float

Set: Top(self: ILabel) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ILabel) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ILabel) -> bool

Set: Visible(self: ILabel) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILabel) -> float

Set: Width(self: ILabel) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ILabel) -> int

"""



class ILabels(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ILabels, Left: float, Top: float, Width: float, Height: float) -> Label """
        pass

    def BringToFront(self):
        """ BringToFront(self: ILabels) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ILabels, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ILabels) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ILabels, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ILabels) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILabels) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ILabels) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ILabels) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ILabels) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ILabels, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ILabels, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ILabels) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ILabels) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ILabels) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ILabels) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ILabels) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: ILabels) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: ILabels) -> object

Set: Accelerator(self: ILabels) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILabels) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ILabels) -> str

Set: Caption(self: ILabels) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ILabels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILabels) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ILabels) -> bool

Set: Enabled(self: ILabels) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILabels) -> float

Set: Height(self: ILabels) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILabels) -> float

Set: Left(self: ILabels) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ILabels) -> bool

Set: Locked(self: ILabels) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ILabels) -> bool

Set: LockedText(self: ILabels) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ILabels) -> str

Set: OnAction(self: ILabels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILabels) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: ILabels) -> object

Set: PhoneticAccelerator(self: ILabels) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ILabels) -> object

Set: Placement(self: ILabels) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ILabels) -> bool

Set: PrintObject(self: ILabels) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ILabels) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ILabels) -> str

Set: Text(self: ILabels) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILabels) -> float

Set: Top(self: ILabels) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ILabels) -> bool

Set: Visible(self: ILabels) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILabels) -> float

Set: Width(self: ILabels) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ILabels) -> int

"""



class ILeaderLines:
    # no doc
    def Delete(self):
        """ Delete(self: ILeaderLines) """
        pass

    def Select(self):
        """ Select(self: ILeaderLines) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILeaderLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ILeaderLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILeaderLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ILeaderLines) -> ChartFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILeaderLines) -> object

"""



class ILegend:
    # no doc
    def Clear(self):
        """ Clear(self: ILegend) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILegend) -> object """
        pass

    def LegendEntries(self, Index):
        """ LegendEntries(self: ILegend, Index: object) -> object """
        pass

    def Select(self):
        """ Select(self: ILegend) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILegend) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ILegend) -> object

Set: AutoScaleFont(self: ILegend) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ILegend) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILegend) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ILegend) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ILegend) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ILegend) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILegend) -> float

Set: Height(self: ILegend) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: ILegend) -> bool

Set: IncludeInLayout(self: ILegend) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ILegend) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILegend) -> float

Set: Left(self: ILegend) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ILegend) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILegend) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: ILegend) -> XlLegendPosition

Set: Position(self: ILegend) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ILegend) -> bool

Set: Shadow(self: ILegend) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILegend) -> float

Set: Top(self: ILegend) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILegend) -> float

Set: Width(self: ILegend) = value
"""



class ILegendEntries(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ILegendEntries) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ILegendEntries, Index: object) -> LegendEntry """
        pass

    def _Default(self, Index):
        """ _Default(self: ILegendEntries, Index: object) -> LegendEntry """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILegendEntries) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ILegendEntries) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILegendEntries) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILegendEntries) -> object

"""



class ILegendEntry:
    # no doc
    def Delete(self):
        """ Delete(self: ILegendEntry) -> object """
        pass

    def Select(self):
        """ Select(self: ILegendEntry) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILegendEntry) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ILegendEntry) -> object

Set: AutoScaleFont(self: ILegendEntry) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILegendEntry) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ILegendEntry) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ILegendEntry) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILegendEntry) -> float

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ILegendEntry) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILegendEntry) -> float

"""

    LegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LegendKey(self: ILegendEntry) -> LegendKey

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILegendEntry) -> object

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILegendEntry) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILegendEntry) -> float

"""



class ILegendKey:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: ILegendKey) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILegendKey) -> object """
        pass

    def Select(self):
        """ Select(self: ILegendKey) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILegendKey) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ILegendKey) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILegendKey) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ILegendKey) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ILegendKey) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILegendKey) -> float

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ILegendKey) -> Interior

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: ILegendKey) -> bool

Set: InvertIfNegative(self: ILegendKey) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILegendKey) -> float

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: ILegendKey) -> int

Set: MarkerBackgroundColor(self: ILegendKey) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: ILegendKey) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: ILegendKey) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: ILegendKey) -> int

Set: MarkerForegroundColor(self: ILegendKey) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: ILegendKey) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: ILegendKey) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: ILegendKey) -> int

Set: MarkerSize(self: ILegendKey) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: ILegendKey) -> XlMarkerStyle

Set: MarkerStyle(self: ILegendKey) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILegendKey) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: ILegendKey) -> int

Set: PictureType(self: ILegendKey) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: ILegendKey) -> int

Set: PictureUnit(self: ILegendKey) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: ILegendKey) -> float

Set: PictureUnit2(self: ILegendKey) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ILegendKey) -> bool

Set: Shadow(self: ILegendKey) = value
"""

    Smooth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smooth(self: ILegendKey) -> bool

Set: Smooth(self: ILegendKey) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILegendKey) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILegendKey) -> float

"""



class ILine:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ILine) -> object """
        pass

    def Copy(self):
        """ Copy(self: ILine) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ILine, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ILine) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILine) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ILine) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ILine, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ILine) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILine) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: ILine) -> object

Set: ArrowHeadLength(self: ILine) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: ILine) -> object

Set: ArrowHeadStyle(self: ILine) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: ILine) -> object

Set: ArrowHeadWidth(self: ILine) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ILine) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ILine) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILine) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ILine) -> bool

Set: Enabled(self: ILine) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILine) -> float

Set: Height(self: ILine) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ILine) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILine) -> float

Set: Left(self: ILine) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ILine) -> bool

Set: Locked(self: ILine) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ILine) -> str

Set: Name(self: ILine) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ILine) -> str

Set: OnAction(self: ILine) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILine) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ILine) -> object

Set: Placement(self: ILine) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ILine) -> bool

Set: PrintObject(self: ILine) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ILine) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILine) -> float

Set: Top(self: ILine) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ILine) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ILine) -> bool

Set: Visible(self: ILine) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILine) -> float

Set: Width(self: ILine) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ILine) -> int

"""



class ILinearGradient:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILinearGradient) -> Application

"""

    ColorStops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorStops(self: ILinearGradient) -> ColorStops

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILinearGradient) -> XlCreator

"""

    Degree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree(self: ILinearGradient) -> float

Set: Degree(self: ILinearGradient) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILinearGradient) -> object

"""



class ILines(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2):
        """ Add(self: ILines, X1: float, Y1: float, X2: float, Y2: float) -> Line """
        pass

    def BringToFront(self):
        """ BringToFront(self: ILines) -> object """
        pass

    def Copy(self):
        """ Copy(self: ILines) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ILines, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ILines) -> object """
        pass

    def Delete(self):
        """ Delete(self: ILines) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ILines) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ILines) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ILines) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ILines, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ILines, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ILines) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ILines) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ILines) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ILines) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ILines) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILines) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: ILines) -> object

Set: ArrowHeadLength(self: ILines) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: ILines) -> object

Set: ArrowHeadStyle(self: ILines) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: ILines) -> object

Set: ArrowHeadWidth(self: ILines) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ILines) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ILines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILines) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ILines) -> bool

Set: Enabled(self: ILines) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ILines) -> float

Set: Height(self: ILines) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ILines) -> float

Set: Left(self: ILines) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ILines) -> bool

Set: Locked(self: ILines) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ILines) -> str

Set: OnAction(self: ILines) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILines) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ILines) -> object

Set: Placement(self: ILines) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ILines) -> bool

Set: PrintObject(self: ILines) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ILines) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ILines) -> float

Set: Top(self: ILines) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ILines) -> bool

Set: Visible(self: ILines) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ILines) -> float

Set: Width(self: ILines) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ILines) -> int

"""



class ILinkFormat:
    # no doc
    def Update(self):
        """ Update(self: ILinkFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ILinkFormat) -> Application

"""

    AutoUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdate(self: ILinkFormat) -> bool

Set: AutoUpdate(self: ILinkFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ILinkFormat) -> XlCreator

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ILinkFormat) -> bool

Set: Locked(self: ILinkFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ILinkFormat) -> object

"""



class IListBox:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: IListBox, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IListBox) -> object """
        pass

    def Copy(self):
        """ Copy(self: IListBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IListBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IListBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: IListBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IListBox) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IListBox) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IListBox, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IListBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IListBox) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IListBox) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IListBox) -> bool

Set: Display3DShading(self: IListBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IListBox) -> bool

Set: Enabled(self: IListBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IListBox) -> float

Set: Height(self: IListBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IListBox) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IListBox) -> float

Set: Left(self: IListBox) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IListBox) -> str

Set: LinkedCell(self: IListBox) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: IListBox) -> object

"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: IListBox) -> int

"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IListBox) -> str

Set: ListFillRange(self: IListBox) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IListBox) -> int

Set: ListIndex(self: IListBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IListBox) -> bool

Set: Locked(self: IListBox) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: IListBox) -> int

Set: MultiSelect(self: IListBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IListBox) -> str

Set: Name(self: IListBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IListBox) -> str

Set: OnAction(self: IListBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListBox) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IListBox) -> object

Set: Placement(self: IListBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IListBox) -> bool

Set: PrintObject(self: IListBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IListBox) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IListBox) -> float

Set: Top(self: IListBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IListBox) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IListBox) -> int

Set: Value(self: IListBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IListBox) -> bool

Set: Visible(self: IListBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IListBox) -> float

Set: Width(self: IListBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IListBox) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IListBox) -> int

Set: _Default(self: IListBox) = value
"""



class IListBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IListBoxes, Left: float, Top: float, Width: float, Height: float) -> ListBox """
        pass

    def AddItem(self, Text, Index):
        """ AddItem(self: IListBoxes, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: IListBoxes) -> object """
        pass

    def Copy(self):
        """ Copy(self: IListBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IListBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IListBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: IListBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IListBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IListBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IListBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IListBoxes, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: IListBoxes) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: IListBoxes, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IListBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IListBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IListBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IListBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IListBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IListBoxes) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: IListBoxes) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: IListBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListBoxes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IListBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IListBoxes) -> bool

Set: Display3DShading(self: IListBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IListBoxes) -> bool

Set: Enabled(self: IListBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IListBoxes) -> float

Set: Height(self: IListBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IListBoxes) -> float

Set: Left(self: IListBoxes) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IListBoxes) -> str

Set: LinkedCell(self: IListBoxes) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: IListBoxes) -> str

Set: ListFillRange(self: IListBoxes) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: IListBoxes) -> int

Set: ListIndex(self: IListBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IListBoxes) -> bool

Set: Locked(self: IListBoxes) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: IListBoxes) -> int

Set: MultiSelect(self: IListBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IListBoxes) -> str

Set: OnAction(self: IListBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListBoxes) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IListBoxes) -> object

Set: Placement(self: IListBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IListBoxes) -> bool

Set: PrintObject(self: IListBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IListBoxes) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IListBoxes) -> float

Set: Top(self: IListBoxes) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IListBoxes) -> int

Set: Value(self: IListBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IListBoxes) -> bool

Set: Visible(self: IListBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IListBoxes) -> float

Set: Width(self: IListBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IListBoxes) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IListBoxes) -> int

Set: _Default(self: IListBoxes) = value
"""



class IListColumn:
    # no doc
    def Delete(self):
        """ Delete(self: IListColumn) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListColumn) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListColumn) -> XlCreator

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: IListColumn) -> Range

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IListColumn) -> int

"""

    ListDataFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListDataFormat(self: IListColumn) -> ListDataFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IListColumn) -> str

Set: Name(self: IListColumn) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListColumn) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IListColumn) -> Range

"""

    SharePointFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharePointFormula(self: IListColumn) -> str

"""

    Total = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Total(self: IListColumn) -> Range

"""

    TotalsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsCalculation(self: IListColumn) -> XlTotalsCalculation

Set: TotalsCalculation(self: IListColumn) = value
"""

    XPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XPath(self: IListColumn) -> XPath

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IListColumn) -> str

"""



class IListColumns(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: IListColumns, Position: object) -> ListColumn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IListColumns) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListColumns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IListColumns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListColumns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListColumns) -> object

"""



class IListDataFormat:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowFillIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFillIn(self: IListDataFormat) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListDataFormat) -> Application

"""

    Choices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Choices(self: IListDataFormat) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListDataFormat) -> XlCreator

"""

    DecimalPlaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalPlaces(self: IListDataFormat) -> int

"""

    DefaultValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultValue(self: IListDataFormat) -> object

"""

    IsPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPercent(self: IListDataFormat) -> bool

"""

    lcid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: lcid(self: IListDataFormat) -> int

"""

    MaxCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxCharacters(self: IListDataFormat) -> int

"""

    MaxNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxNumber(self: IListDataFormat) -> object

"""

    MinNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinNumber(self: IListDataFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListDataFormat) -> object

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: IListDataFormat) -> bool

"""

    Required = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Required(self: IListDataFormat) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IListDataFormat) -> XlListDataType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IListDataFormat) -> XlListDataType

"""



class IListObject:
    # no doc
    def Delete(self):
        """ Delete(self: IListObject) """
        pass

    def ExportToVisio(self):
        """ ExportToVisio(self: IListObject) """
        pass

    def Publish(self, Target, LinkSource):
        """ Publish(self: IListObject, Target: object, LinkSource: bool) -> str """
        pass

    def Refresh(self):
        """ Refresh(self: IListObject) """
        pass

    def Resize(self, Range):
        """ Resize(self: IListObject, Range: Range) """
        pass

    def Unlink(self):
        """ Unlink(self: IListObject) """
        pass

    def Unlist(self):
        """ Unlist(self: IListObject) """
        pass

    def UpdateChanges(self, iConflictType):
        """ UpdateChanges(self: IListObject, iConflictType: XlListConflict) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: IListObject) -> bool

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: IListObject) -> str

Set: AlternativeText(self: IListObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListObject) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: IListObject) -> AutoFilter

"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: IListObject) -> str

Set: Comment(self: IListObject) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListObject) -> XlCreator

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: IListObject) -> Range

"""

    DisplayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayName(self: IListObject) -> str

Set: DisplayName(self: IListObject) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: IListObject) -> bool

"""

    HeaderRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderRowRange(self: IListObject) -> Range

"""

    InsertRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertRowRange(self: IListObject) -> Range

"""

    ListColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListColumns(self: IListObject) -> ListColumns

"""

    ListRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListRows(self: IListObject) -> ListRows

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IListObject) -> str

Set: Name(self: IListObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListObject) -> object

"""

    QueryTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTable(self: IListObject) -> QueryTable

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IListObject) -> Range

"""

    SharePointURL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharePointURL(self: IListObject) -> str

"""

    ShowAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAutoFilter(self: IListObject) -> bool

Set: ShowAutoFilter(self: IListObject) = value
"""

    ShowAutoFilterDropDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAutoFilterDropDown(self: IListObject) -> bool

Set: ShowAutoFilterDropDown(self: IListObject) = value
"""

    ShowHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHeaders(self: IListObject) -> bool

Set: ShowHeaders(self: IListObject) = value
"""

    ShowTableStyleColumnStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnStripes(self: IListObject) -> bool

Set: ShowTableStyleColumnStripes(self: IListObject) = value
"""

    ShowTableStyleFirstColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleFirstColumn(self: IListObject) -> bool

Set: ShowTableStyleFirstColumn(self: IListObject) = value
"""

    ShowTableStyleLastColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleLastColumn(self: IListObject) -> bool

Set: ShowTableStyleLastColumn(self: IListObject) = value
"""

    ShowTableStyleRowStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowStripes(self: IListObject) -> bool

Set: ShowTableStyleRowStripes(self: IListObject) = value
"""

    ShowTotals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTotals(self: IListObject) -> bool

Set: ShowTotals(self: IListObject) = value
"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: IListObject) -> Slicers

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: IListObject) -> Sort

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: IListObject) -> XlListObjectSourceType

"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: IListObject) -> str

Set: Summary(self: IListObject) = value
"""

    TableObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableObject(self: IListObject) -> TableObject

"""

    TableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle(self: IListObject) -> object

Set: TableStyle(self: IListObject) = value
"""

    TotalsRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsRowRange(self: IListObject) -> Range

"""

    XmlMap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlMap(self: IListObject) -> XmlMap

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IListObject) -> str

"""



class IListObjects(IEnumerable):
    # no doc
    def Add(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination):
        """ Add(self: IListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object) -> ListObject """
        pass

    def AddEx(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination, TableStyleName):
        """ AddEx(self: IListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object, TableStyleName: object) -> ListObject """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IListObjects) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IListObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListObjects) -> object

"""



class IListRow:
    # no doc
    def Delete(self):
        """ Delete(self: IListRow) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListRow) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListRow) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IListRow) -> int

"""

    InvalidData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvalidData(self: IListRow) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListRow) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IListRow) -> Range

"""



class IListRows(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: IListRows, Position: object) -> ListRow """
        pass

    def AddEx(self, Position, AlwaysInsert):
        """ AddEx(self: IListRows, Position: object, AlwaysInsert: object) -> ListRow """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IListRows) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IListRows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IListRows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IListRows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IListRows) -> object

"""



class IMailer:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMailer) -> Application

"""

    BCCRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BCCRecipients(self: IMailer) -> object

Set: BCCRecipients(self: IMailer) = value
"""

    CCRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CCRecipients(self: IMailer) -> object

Set: CCRecipients(self: IMailer) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMailer) -> XlCreator

"""

    Enclosures = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enclosures(self: IMailer) -> object

Set: Enclosures(self: IMailer) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMailer) -> object

"""

    Received = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Received(self: IMailer) -> bool

"""

    SendDateTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SendDateTime(self: IMailer) -> DateTime

"""

    Sender = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sender(self: IMailer) -> str

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: IMailer) -> str

Set: Subject(self: IMailer) = value
"""

    ToRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToRecipients(self: IMailer) -> object

Set: ToRecipients(self: IMailer) = value
"""

    WhichAddress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WhichAddress(self: IMailer) -> object

Set: WhichAddress(self: IMailer) = value
"""



class IMenu:
    # no doc
    def Delete(self):
        """ Delete(self: IMenu) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenu) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IMenu) -> str

Set: Caption(self: IMenu) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenu) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IMenu) -> bool

Set: Enabled(self: IMenu) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IMenu) -> int

"""

    MenuItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuItems(self: IMenu) -> MenuItems

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenu) -> object

"""



class IMenuBar:
    # no doc
    def Activate(self):
        """ Activate(self: IMenuBar) """
        pass

    def Delete(self):
        """ Delete(self: IMenuBar) """
        pass

    def Reset(self):
        """ Reset(self: IMenuBar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenuBar) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: IMenuBar) -> bool

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IMenuBar) -> str

Set: Caption(self: IMenuBar) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenuBar) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IMenuBar) -> int

"""

    Menus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Menus(self: IMenuBar) -> Menus

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenuBar) -> object

"""



class IMenuBars(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IMenuBars, Name: object) -> MenuBar """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IMenuBars) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenuBars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IMenuBars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenuBars) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenuBars) -> object

"""



class IMenuItem:
    # no doc
    def Delete(self):
        """ Delete(self: IMenuItem) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenuItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IMenuItem) -> str

Set: Caption(self: IMenuItem) = value
"""

    Checked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Checked(self: IMenuItem) -> bool

Set: Checked(self: IMenuItem) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenuItem) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IMenuItem) -> bool

Set: Enabled(self: IMenuItem) = value
"""

    HelpContextID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpContextID(self: IMenuItem) -> int

Set: HelpContextID(self: IMenuItem) = value
"""

    HelpFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpFile(self: IMenuItem) -> str

Set: HelpFile(self: IMenuItem) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IMenuItem) -> int

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IMenuItem) -> str

Set: OnAction(self: IMenuItem) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenuItem) -> object

"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: IMenuItem) -> str

Set: StatusBar(self: IMenuItem) = value
"""



class IMenuItems(IEnumerable):
    # no doc
    def Add(self, Caption, OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID):
        """ Add(self: IMenuItems, Caption: str, OnAction: object, ShortcutKey: object, Before: object, Restore: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> MenuItem """
        pass

    def AddMenu(self, Caption, Before, Restore):
        """ AddMenu(self: IMenuItems, Caption: str, Before: object, Restore: object) -> Menu """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IMenuItems) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenuItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IMenuItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenuItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenuItems) -> object

"""



class IMenus(IEnumerable):
    # no doc
    def Add(self, Caption, Before, Restore):
        """ Add(self: IMenus, Caption: str, Before: object, Restore: object) -> Menu """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IMenus) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMenus) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IMenus) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMenus) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMenus) -> object

"""



class IModel:
    # no doc
    def AddConnection(self, ConnectionToDataSource):
        """ AddConnection(self: IModel, ConnectionToDataSource: WorkbookConnection) -> WorkbookConnection """
        pass

    def CreateModelWorkbookConnection(self, ModelTable):
        """ CreateModelWorkbookConnection(self: IModel, ModelTable: object) -> WorkbookConnection """
        pass

    def Initialize(self):
        """ Initialize(self: IModel) """
        pass

    def Refresh(self):
        """ Refresh(self: IModel) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModel) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModel) -> XlCreator

"""

    DataModelConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataModelConnection(self: IModel) -> WorkbookConnection

"""

    ModelRelationships = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelRelationships(self: IModel) -> ModelRelationships

"""

    ModelTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTables(self: IModel) -> ModelTables

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IModel) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModel) -> object

"""



class IModelChanges:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelChanges) -> Application

"""

    ColumnsAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsAdded(self: IModelChanges) -> ModelColumnNames

"""

    ColumnsChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsChanged(self: IModelChanges) -> ModelColumnChanges

"""

    ColumnsDeleted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsDeleted(self: IModelChanges) -> ModelColumnNames

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelChanges) -> XlCreator

"""

    MeasuresAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasuresAdded(self: IModelChanges) -> ModelMeasureNames

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelChanges) -> object

"""

    RelationshipChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelationshipChange(self: IModelChanges) -> bool

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Source(self: IModelChanges) -> XlModelChangeSource

"""

    TableNamesChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNamesChanged(self: IModelChanges) -> ModelTableNameChanges

"""

    TablesAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesAdded(self: IModelChanges) -> ModelTableNames

"""

    TablesDeleted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesDeleted(self: IModelChanges) -> ModelTableNames

"""

    TablesModified = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesModified(self: IModelChanges) -> ModelTableNames

"""

    UnknownChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnknownChange(self: IModelChanges) -> bool

"""



class IModelColumnChange:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelColumnChange) -> Application

"""

    ColumnName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnName(self: IModelColumnChange) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelColumnChange) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelColumnChange) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: IModelColumnChange) -> str

"""



class IModelColumnChanges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelColumnChanges) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelColumnChanges, Index: object) -> ModelColumnChange """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelColumnChanges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelColumnChanges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelColumnChanges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelColumnChanges) -> object

"""



class IModelColumnName:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelColumnName) -> Application

"""

    ColumnName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnName(self: IModelColumnName) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelColumnName) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelColumnName) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: IModelColumnName) -> str

"""



class IModelColumnNames(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelColumnNames) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelColumnNames, Index: object) -> ModelColumnName """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelColumnNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelColumnNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelColumnNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelColumnNames) -> object

"""



class IModelConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: IModelConnection) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelConnection) -> Application

"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: IModelConnection) -> CalculatedMembers

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IModelConnection) -> object

Set: CommandText(self: IModelConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IModelConnection) -> XlCmdType

Set: CommandType(self: IModelConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelConnection) -> object

"""



class IModelMeasureName:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelMeasureName) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelMeasureName) -> XlCreator

"""

    MeasureName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasureName(self: IModelMeasureName) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelMeasureName) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: IModelMeasureName) -> str

"""



class IModelMeasureNames(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelMeasureNames) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelMeasureNames, Index: object) -> ModelMeasureName """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelMeasureNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelMeasureNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelMeasureNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelMeasureNames) -> object

"""



class IModelRelationship:
    # no doc
    def Delete(self):
        """ Delete(self: IModelRelationship) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: IModelRelationship) -> bool

Set: Active(self: IModelRelationship) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelRelationship) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelRelationship) -> XlCreator

"""

    ForeignKeyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeignKeyColumn(self: IModelRelationship) -> ModelTableColumn

"""

    ForeignKeyTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeignKeyTable(self: IModelRelationship) -> ModelTable

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelRelationship) -> object

"""

    PrimaryKeyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryKeyColumn(self: IModelRelationship) -> ModelTableColumn

"""

    PrimaryKeyTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryKeyTable(self: IModelRelationship) -> ModelTable

"""



class IModelRelationships(IEnumerable):
    # no doc
    def Add(self, ForeignKeyColumn, PrimaryKeyColumn):
        """ Add(self: IModelRelationships, ForeignKeyColumn: ModelTableColumn, PrimaryKeyColumn: ModelTableColumn) -> ModelRelationship """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IModelRelationships) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelRelationships, Index: object) -> ModelRelationship """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelRelationships) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelRelationships) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelRelationships) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelRelationships) -> object

"""



class IModelTable:
    # no doc
    def Refresh(self):
        """ Refresh(self: IModelTable) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: IModelTable) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTable) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTable) -> XlCreator

"""

    ModelTableColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTableColumns(self: IModelTable) -> ModelTableColumns

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IModelTable) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTable) -> object

"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: IModelTable) -> int

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: IModelTable) -> str

"""

    SourceWorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceWorkbookConnection(self: IModelTable) -> WorkbookConnection

"""



class IModelTableColumn:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTableColumn) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTableColumn) -> XlCreator

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: IModelTableColumn) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IModelTableColumn) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTableColumn) -> object

"""



class IModelTableColumns(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelTableColumns) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelTableColumns, Index: object) -> ModelTableColumn """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTableColumns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelTableColumns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTableColumns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTableColumns) -> object

"""



class IModelTableNameChange:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTableNameChange) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTableNameChange) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTableNameChange) -> object

"""

    TableNameNew = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNameNew(self: IModelTableNameChange) -> str

"""

    TableNameOld = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNameOld(self: IModelTableNameChange) -> str

"""



class IModelTableNameChanges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelTableNameChanges) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelTableNameChanges, Index: object) -> ModelTableNameChange """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTableNameChanges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelTableNameChanges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTableNameChanges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTableNameChanges) -> object

"""



class IModelTableNames:
    # no doc
    def Item(self, Index):
        """ Item(self: IModelTableNames, Index: object) -> str """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTableNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelTableNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTableNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTableNames) -> object

"""



class IModelTables(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IModelTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IModelTables, Index: object) -> ModelTable """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModelTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModelTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModelTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModelTables) -> object

"""



class IModule:
    # no doc
    def Activate(self):
        """ Activate(self: IModule) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: IModule, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: IModule) """
        pass

    def InsertFile(self, Filename, Merge):
        """ InsertFile(self: IModule, Filename: object, Merge: object) -> object """
        pass

    def Move(self, Before, After):
        """ Move(self: IModule, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ PrintOut(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ Protect(self: IModule, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ SaveAs(self: IModule, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IModule, Replace: object) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: IModule, Password: object) """
        pass

    def _Dummy18(self):
        """ _Dummy18(self: IModule) """
        pass

    def _Dummy21(self):
        """ _Dummy21(self: IModule) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: IModule) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _PrintOut_2(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut_2(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: IModule, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: IModule, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModule) -> Application

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: IModule) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModule) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IModule) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IModule) -> str

Set: Name(self: IModule) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: IModule) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: IModule) -> str

Set: OnDoubleClick(self: IModule) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: IModule) -> str

Set: OnSheetActivate(self: IModule) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: IModule) -> str

Set: OnSheetDeactivate(self: IModule) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: IModule) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModule) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: IModule) -> object

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: IModule) -> bool

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: IModule) -> bool

"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: IModule) -> Shapes

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IModule) -> XlSheetVisibility

Set: Visible(self: IModule) = value
"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: IModule) -> str

Set: _CodeName(self: IModule) = value
"""



class IModules(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: IModules, Before: object, After: object, Count: object) -> Module """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: IModules, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: IModules, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: IModules) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IModules) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: IModules, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IModules, Replace: object) """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IModules) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: IModules) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModules) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IModules) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModules) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: IModules) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModules) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IModules) -> object

Set: Visible(self: IModules) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: IModules) -> VPageBreaks

"""



class IModuleView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IModuleView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IModuleView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IModuleView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: IModuleView) -> object

"""



class IMultiThreadedCalculation:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IMultiThreadedCalculation) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IMultiThreadedCalculation) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IMultiThreadedCalculation) -> bool

Set: Enabled(self: IMultiThreadedCalculation) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IMultiThreadedCalculation) -> object

"""

    ThreadCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreadCount(self: IMultiThreadedCalculation) -> int

Set: ThreadCount(self: IMultiThreadedCalculation) = value
"""

    ThreadMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreadMode(self: IMultiThreadedCalculation) -> XlThreadMode

Set: ThreadMode(self: IMultiThreadedCalculation) = value
"""



class IName:
    # no doc
    def Delete(self):
        """ Delete(self: IName) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IName) -> Application

"""

    Category = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Category(self: IName) -> str

Set: Category(self: IName) = value
"""

    CategoryLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryLocal(self: IName) -> str

Set: CategoryLocal(self: IName) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: IName) -> str

Set: Comment(self: IName) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IName) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IName) -> int

"""

    MacroType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MacroType(self: IName) -> XlXLMMacroType

Set: MacroType(self: IName) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IName) -> str

Set: Name(self: IName) = value
"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: IName) -> str

Set: NameLocal(self: IName) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IName) -> object

"""

    RefersTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersTo(self: IName) -> object

Set: RefersTo(self: IName) = value
"""

    RefersToLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToLocal(self: IName) -> object

Set: RefersToLocal(self: IName) = value
"""

    RefersToR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToR1C1(self: IName) -> object

Set: RefersToR1C1(self: IName) = value
"""

    RefersToR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToR1C1Local(self: IName) -> object

Set: RefersToR1C1Local(self: IName) = value
"""

    RefersToRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToRange(self: IName) -> Range

"""

    ShortcutKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShortcutKey(self: IName) -> str

Set: ShortcutKey(self: IName) = value
"""

    ValidWorkbookParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ValidWorkbookParameter(self: IName) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IName) -> str

Set: Value(self: IName) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IName) -> bool

Set: Visible(self: IName) = value
"""

    WorkbookParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookParameter(self: IName) -> bool

Set: WorkbookParameter(self: IName) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IName) -> str

"""



class INames(IEnumerable):
    # no doc
    def Add(self, Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local):
        """ Add(self: INames, Name: object, RefersTo: object, Visible: object, MacroType: object, ShortcutKey: object, Category: object, NameLocal: object, RefersToLocal: object, CategoryLocal: object, RefersToR1C1: object, RefersToR1C1Local: object) -> Name """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: INames) -> IEnumerator """
        pass

    def Item(self, Index, IndexLocal, RefersTo):
        """ Item(self: INames, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        pass

    def _Default(self, Index, IndexLocal, RefersTo):
        """ _Default(self: INames, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: INames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: INames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: INames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: INames) -> object

"""



class INegativeBarFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: INegativeBarFormat) -> Application

"""

    BorderColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BorderColor(self: INegativeBarFormat) -> object

"""

    BorderColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BorderColorType(self: INegativeBarFormat) -> XlDataBarNegativeColorType

Set: BorderColorType(self: INegativeBarFormat) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: INegativeBarFormat) -> object

"""

    ColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorType(self: INegativeBarFormat) -> XlDataBarNegativeColorType

Set: ColorType(self: INegativeBarFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: INegativeBarFormat) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: INegativeBarFormat) -> object

"""



class Interior:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Interior) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: Interior) -> object

Set: Color(self: Interior) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: Interior) -> object

Set: ColorIndex(self: Interior) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Interior) -> XlCreator

"""

    Gradient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Gradient(self: Interior) -> object

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: Interior) -> object

Set: InvertIfNegative(self: Interior) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Interior) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: Interior) -> object

Set: Pattern(self: Interior) = value
"""

    PatternColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternColor(self: Interior) -> object

Set: PatternColor(self: Interior) = value
"""

    PatternColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternColorIndex(self: Interior) -> object

Set: PatternColorIndex(self: Interior) = value
"""

    PatternThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternThemeColor(self: Interior) -> object

Set: PatternThemeColor(self: Interior) = value
"""

    PatternTintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternTintAndShade(self: Interior) -> object

Set: PatternTintAndShade(self: Interior) = value
"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: Interior) -> object

Set: ThemeColor(self: Interior) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: Interior) -> object

Set: TintAndShade(self: Interior) = value
"""



class IODBCConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: IODBCConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: IODBCConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: IODBCConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: IODBCConnection) -> bool

Set: AlwaysUseConnectionFile(self: IODBCConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IODBCConnection) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: IODBCConnection) -> bool

Set: BackgroundQuery(self: IODBCConnection) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IODBCConnection) -> object

Set: CommandText(self: IODBCConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IODBCConnection) -> XlCmdType

Set: CommandType(self: IODBCConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: IODBCConnection) -> object

Set: Connection(self: IODBCConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IODBCConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: IODBCConnection) -> bool

Set: EnableRefresh(self: IODBCConnection) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IODBCConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: IODBCConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: IODBCConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: IODBCConnection) -> bool

Set: RefreshOnFileOpen(self: IODBCConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: IODBCConnection) -> int

Set: RefreshPeriod(self: IODBCConnection) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: IODBCConnection) -> XlRobustConnect

Set: RobustConnect(self: IODBCConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: IODBCConnection) -> bool

Set: SavePassword(self: IODBCConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: IODBCConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: IODBCConnection) = value
"""

    ServerSSOApplicationID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerSSOApplicationID(self: IODBCConnection) -> str

Set: ServerSSOApplicationID(self: IODBCConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: IODBCConnection) -> str

Set: SourceConnectionFile(self: IODBCConnection) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: IODBCConnection) -> object

Set: SourceData(self: IODBCConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: IODBCConnection) -> str

Set: SourceDataFile(self: IODBCConnection) = value
"""



class IODBCError:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IODBCError) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IODBCError) -> XlCreator

"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: IODBCError) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IODBCError) -> object

"""

    SqlState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SqlState(self: IODBCError) -> str

"""



class IODBCErrors(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IODBCErrors) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IODBCErrors, Index: int) -> ODBCError """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IODBCErrors) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IODBCErrors) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IODBCErrors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IODBCErrors) -> object

"""



class IOLEDBConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: IOLEDBConnection) """
        pass

    def MakeConnection(self):
        """ MakeConnection(self: IOLEDBConnection) """
        pass

    def Reconnect(self):
        """ Reconnect(self: IOLEDBConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: IOLEDBConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: IOLEDBConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: IOLEDBConnection) -> object

"""

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: IOLEDBConnection) -> bool

Set: AlwaysUseConnectionFile(self: IOLEDBConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOLEDBConnection) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: IOLEDBConnection) -> bool

Set: BackgroundQuery(self: IOLEDBConnection) = value
"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: IOLEDBConnection) -> CalculatedMembers

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IOLEDBConnection) -> object

Set: CommandText(self: IOLEDBConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IOLEDBConnection) -> XlCmdType

Set: CommandType(self: IOLEDBConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: IOLEDBConnection) -> object

Set: Connection(self: IOLEDBConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOLEDBConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: IOLEDBConnection) -> bool

Set: EnableRefresh(self: IOLEDBConnection) = value
"""

    IsConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsConnected(self: IOLEDBConnection) -> bool

"""

    LocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocalConnection(self: IOLEDBConnection) -> object

Set: LocalConnection(self: IOLEDBConnection) = value
"""

    LocaleID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocaleID(self: IOLEDBConnection) -> int

Set: LocaleID(self: IOLEDBConnection) = value
"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: IOLEDBConnection) -> bool

Set: MaintainConnection(self: IOLEDBConnection) = value
"""

    MaxDrillthroughRecords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxDrillthroughRecords(self: IOLEDBConnection) -> int

Set: MaxDrillthroughRecords(self: IOLEDBConnection) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: IOLEDBConnection) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOLEDBConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: IOLEDBConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: IOLEDBConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: IOLEDBConnection) -> bool

Set: RefreshOnFileOpen(self: IOLEDBConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: IOLEDBConnection) -> int

Set: RefreshPeriod(self: IOLEDBConnection) = value
"""

    RetrieveInOfficeUILang = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RetrieveInOfficeUILang(self: IOLEDBConnection) -> bool

Set: RetrieveInOfficeUILang(self: IOLEDBConnection) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: IOLEDBConnection) -> XlRobustConnect

Set: RobustConnect(self: IOLEDBConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: IOLEDBConnection) -> bool

Set: SavePassword(self: IOLEDBConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: IOLEDBConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: IOLEDBConnection) = value
"""

    ServerFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerFillColor(self: IOLEDBConnection) -> bool

Set: ServerFillColor(self: IOLEDBConnection) = value
"""

    ServerFontStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerFontStyle(self: IOLEDBConnection) -> bool

Set: ServerFontStyle(self: IOLEDBConnection) = value
"""

    ServerNumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerNumberFormat(self: IOLEDBConnection) -> bool

Set: ServerNumberFormat(self: IOLEDBConnection) = value
"""

    ServerSSOApplicationID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerSSOApplicationID(self: IOLEDBConnection) -> str

Set: ServerSSOApplicationID(self: IOLEDBConnection) = value
"""

    ServerTextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerTextColor(self: IOLEDBConnection) -> bool

Set: ServerTextColor(self: IOLEDBConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: IOLEDBConnection) -> str

Set: SourceConnectionFile(self: IOLEDBConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: IOLEDBConnection) -> str

Set: SourceDataFile(self: IOLEDBConnection) = value
"""

    UseLocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLocalConnection(self: IOLEDBConnection) -> bool

Set: UseLocalConnection(self: IOLEDBConnection) = value
"""



class IOLEDBError:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOLEDBError) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOLEDBError) -> XlCreator

"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: IOLEDBError) -> str

"""

    Native = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Native(self: IOLEDBError) -> int

"""

    Number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Number(self: IOLEDBError) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOLEDBError) -> object

"""

    SqlState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SqlState(self: IOLEDBError) -> str

"""

    Stage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stage(self: IOLEDBError) -> int

"""



class IOLEDBErrors(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IOLEDBErrors) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IOLEDBErrors, Index: int) -> OLEDBError """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOLEDBErrors) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IOLEDBErrors) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOLEDBErrors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOLEDBErrors) -> object

"""



class IOLEFormat:
    # no doc
    def Activate(self):
        """ Activate(self: IOLEFormat) """
        pass

    def Verb(self, Verb):
        """ Verb(self: IOLEFormat, Verb: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOLEFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOLEFormat) -> XlCreator

"""

    Object = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Object(self: IOLEFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOLEFormat) -> object

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: IOLEFormat) -> str

"""



class IOLEObjectEvents:
    # no doc
    def GotFocus(self):
        """ GotFocus(self: IOLEObjectEvents) """
        pass

    def LostFocus(self):
        """ LostFocus(self: IOLEObjectEvents) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IOLEObjects(IEnumerable):
    # no doc
    def Add(self, ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height):
        """ Add(self: IOLEObjects, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> OLEObject """
        pass

    def BringToFront(self):
        """ BringToFront(self: IOLEObjects) -> object """
        pass

    def Copy(self):
        """ Copy(self: IOLEObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IOLEObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IOLEObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: IOLEObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IOLEObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IOLEObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IOLEObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IOLEObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IOLEObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IOLEObjects) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IOLEObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IOLEObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IOLEObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IOLEObjects) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: IOLEObjects) """
        pass

    def _Dummy32(self):
        """ _Dummy32(self: IOLEObjects) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: IOLEObjects) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: IOLEObjects) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: IOLEObjects) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: IOLEObjects) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: IOLEObjects) """
        pass

    def _Dummy39(self):
        """ _Dummy39(self: IOLEObjects) """
        pass

    def _Dummy40(self):
        """ _Dummy40(self: IOLEObjects) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: IOLEObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOLEObjects) -> Application

"""

    AutoLoad = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLoad(self: IOLEObjects) -> bool

Set: AutoLoad(self: IOLEObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IOLEObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IOLEObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOLEObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IOLEObjects) -> bool

Set: Enabled(self: IOLEObjects) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IOLEObjects) -> float

Set: Height(self: IOLEObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IOLEObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IOLEObjects) -> float

Set: Left(self: IOLEObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IOLEObjects) -> bool

Set: Locked(self: IOLEObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IOLEObjects) -> str

Set: OnAction(self: IOLEObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOLEObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IOLEObjects) -> object

Set: Placement(self: IOLEObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IOLEObjects) -> bool

Set: PrintObject(self: IOLEObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IOLEObjects) -> bool

Set: Shadow(self: IOLEObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IOLEObjects) -> ShapeRange

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: IOLEObjects) -> str

Set: SourceName(self: IOLEObjects) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IOLEObjects) -> float

Set: Top(self: IOLEObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IOLEObjects) -> bool

Set: Visible(self: IOLEObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IOLEObjects) -> float

Set: Width(self: IOLEObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IOLEObjects) -> int

"""



class IOptionButton:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IOptionButton) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IOptionButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IOptionButton) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IOptionButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IOptionButton) -> object """
        pass

    def Delete(self):
        """ Delete(self: IOptionButton) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IOptionButton) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IOptionButton, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IOptionButton) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IOptionButton) -> object

Set: Accelerator(self: IOptionButton) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOptionButton) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IOptionButton) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IOptionButton) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IOptionButton) -> str

Set: Caption(self: IOptionButton) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOptionButton) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IOptionButton) -> bool

Set: Display3DShading(self: IOptionButton) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IOptionButton) -> bool

Set: Enabled(self: IOptionButton) = value
"""

    GroupBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupBox(self: IOptionButton) -> GroupBox

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IOptionButton) -> float

Set: Height(self: IOptionButton) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IOptionButton) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IOptionButton) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IOptionButton) -> float

Set: Left(self: IOptionButton) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IOptionButton) -> str

Set: LinkedCell(self: IOptionButton) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IOptionButton) -> bool

Set: Locked(self: IOptionButton) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IOptionButton) -> bool

Set: LockedText(self: IOptionButton) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IOptionButton) -> str

Set: Name(self: IOptionButton) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IOptionButton) -> str

Set: OnAction(self: IOptionButton) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOptionButton) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IOptionButton) -> object

Set: PhoneticAccelerator(self: IOptionButton) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IOptionButton) -> object

Set: Placement(self: IOptionButton) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IOptionButton) -> bool

Set: PrintObject(self: IOptionButton) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IOptionButton) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IOptionButton) -> str

Set: Text(self: IOptionButton) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IOptionButton) -> float

Set: Top(self: IOptionButton) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IOptionButton) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IOptionButton) -> object

Set: Value(self: IOptionButton) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IOptionButton) -> bool

Set: Visible(self: IOptionButton) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IOptionButton) -> float

Set: Width(self: IOptionButton) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IOptionButton) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IOptionButton) -> int

Set: _Default(self: IOptionButton) = value
"""



class IOptionButtons(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IOptionButtons, Left: float, Top: float, Width: float, Height: float) -> OptionButton """
        pass

    def BringToFront(self):
        """ BringToFront(self: IOptionButtons) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IOptionButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IOptionButtons) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IOptionButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IOptionButtons) -> object """
        pass

    def Delete(self):
        """ Delete(self: IOptionButtons) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IOptionButtons) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IOptionButtons) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IOptionButtons) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IOptionButtons, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IOptionButtons, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IOptionButtons) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IOptionButtons) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IOptionButtons) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IOptionButtons) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IOptionButtons) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: IOptionButtons) -> object

Set: Accelerator(self: IOptionButtons) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOptionButtons) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IOptionButtons) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IOptionButtons) -> str

Set: Caption(self: IOptionButtons) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IOptionButtons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOptionButtons) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IOptionButtons) -> bool

Set: Display3DShading(self: IOptionButtons) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IOptionButtons) -> bool

Set: Enabled(self: IOptionButtons) = value
"""

    GroupBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupBox(self: IOptionButtons) -> GroupBox

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IOptionButtons) -> float

Set: Height(self: IOptionButtons) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IOptionButtons) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IOptionButtons) -> float

Set: Left(self: IOptionButtons) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IOptionButtons) -> str

Set: LinkedCell(self: IOptionButtons) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IOptionButtons) -> bool

Set: Locked(self: IOptionButtons) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IOptionButtons) -> bool

Set: LockedText(self: IOptionButtons) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IOptionButtons) -> str

Set: OnAction(self: IOptionButtons) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOptionButtons) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: IOptionButtons) -> object

Set: PhoneticAccelerator(self: IOptionButtons) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IOptionButtons) -> object

Set: Placement(self: IOptionButtons) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IOptionButtons) -> bool

Set: PrintObject(self: IOptionButtons) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IOptionButtons) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IOptionButtons) -> str

Set: Text(self: IOptionButtons) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IOptionButtons) -> float

Set: Top(self: IOptionButtons) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IOptionButtons) -> object

Set: Value(self: IOptionButtons) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IOptionButtons) -> bool

Set: Visible(self: IOptionButtons) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IOptionButtons) -> float

Set: Width(self: IOptionButtons) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IOptionButtons) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IOptionButtons) -> int

Set: _Default(self: IOptionButtons) = value
"""



class IOutline:
    # no doc
    def ShowLevels(self, RowLevels, ColumnLevels):
        """ ShowLevels(self: IOutline, RowLevels: object, ColumnLevels: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOutline) -> Application

"""

    AutomaticStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutomaticStyles(self: IOutline) -> bool

Set: AutomaticStyles(self: IOutline) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOutline) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOutline) -> object

"""

    SummaryColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryColumn(self: IOutline) -> XlSummaryColumn

Set: SummaryColumn(self: IOutline) = value
"""

    SummaryRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryRow(self: IOutline) -> XlSummaryRow

Set: SummaryRow(self: IOutline) = value
"""



class IOval:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IOval) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IOval, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IOval) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IOval, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IOval) -> object """
        pass

    def Delete(self):
        """ Delete(self: IOval) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IOval) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IOval, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IOval) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IOval) -> bool

Set: AddIndent(self: IOval) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOval) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IOval) -> object

Set: AutoScaleFont(self: IOval) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IOval) -> bool

Set: AutoSize(self: IOval) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IOval) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IOval) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IOval) -> str

Set: Caption(self: IOval) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOval) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IOval) -> bool

Set: Enabled(self: IOval) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IOval) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IOval) -> str

Set: Formula(self: IOval) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IOval) -> float

Set: Height(self: IOval) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IOval) -> object

Set: HorizontalAlignment(self: IOval) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IOval) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IOval) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IOval) -> float

Set: Left(self: IOval) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IOval) -> bool

Set: Locked(self: IOval) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IOval) -> bool

Set: LockedText(self: IOval) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IOval) -> str

Set: Name(self: IOval) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IOval) -> str

Set: OnAction(self: IOval) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IOval) -> object

Set: Orientation(self: IOval) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOval) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IOval) -> object

Set: Placement(self: IOval) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IOval) -> bool

Set: PrintObject(self: IOval) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IOval) -> int

Set: ReadingOrder(self: IOval) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IOval) -> bool

Set: Shadow(self: IOval) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IOval) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IOval) -> str

Set: Text(self: IOval) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IOval) -> float

Set: Top(self: IOval) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IOval) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IOval) -> object

Set: VerticalAlignment(self: IOval) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IOval) -> bool

Set: Visible(self: IOval) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IOval) -> float

Set: Width(self: IOval) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IOval) -> int

"""



class IOvals(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IOvals, Left: float, Top: float, Width: float, Height: float) -> Oval """
        pass

    def BringToFront(self):
        """ BringToFront(self: IOvals) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IOvals, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IOvals) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IOvals, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IOvals) -> object """
        pass

    def Delete(self):
        """ Delete(self: IOvals) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IOvals) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IOvals) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IOvals) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IOvals, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IOvals, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IOvals) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IOvals) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IOvals) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IOvals) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IOvals) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IOvals) -> bool

Set: AddIndent(self: IOvals) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IOvals) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IOvals) -> object

Set: AutoScaleFont(self: IOvals) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IOvals) -> bool

Set: AutoSize(self: IOvals) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IOvals) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IOvals) -> str

Set: Caption(self: IOvals) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IOvals) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IOvals) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IOvals) -> bool

Set: Enabled(self: IOvals) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IOvals) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IOvals) -> str

Set: Formula(self: IOvals) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IOvals) -> float

Set: Height(self: IOvals) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IOvals) -> object

Set: HorizontalAlignment(self: IOvals) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IOvals) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IOvals) -> float

Set: Left(self: IOvals) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IOvals) -> bool

Set: Locked(self: IOvals) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IOvals) -> bool

Set: LockedText(self: IOvals) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IOvals) -> str

Set: OnAction(self: IOvals) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IOvals) -> object

Set: Orientation(self: IOvals) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IOvals) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IOvals) -> object

Set: Placement(self: IOvals) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IOvals) -> bool

Set: PrintObject(self: IOvals) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IOvals) -> int

Set: ReadingOrder(self: IOvals) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IOvals) -> bool

Set: Shadow(self: IOvals) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IOvals) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IOvals) -> str

Set: Text(self: IOvals) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IOvals) -> float

Set: Top(self: IOvals) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IOvals) -> object

Set: VerticalAlignment(self: IOvals) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IOvals) -> bool

Set: Visible(self: IOvals) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IOvals) -> float

Set: Width(self: IOvals) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IOvals) -> int

"""



class IPage:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CenterFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooter(self: IPage) -> HeaderFooter

"""

    CenterHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeader(self: IPage) -> HeaderFooter

"""

    LeftFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooter(self: IPage) -> HeaderFooter

"""

    LeftHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeader(self: IPage) -> HeaderFooter

"""

    RightFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooter(self: IPage) -> HeaderFooter

"""

    RightHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeader(self: IPage) -> HeaderFooter

"""



class IPages(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPages) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPages) -> int

"""



class IPageSetup:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlignMarginsHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlignMarginsHeaderFooter(self: IPageSetup) -> bool

Set: AlignMarginsHeaderFooter(self: IPageSetup) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPageSetup) -> Application

"""

    BlackAndWhite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackAndWhite(self: IPageSetup) -> bool

Set: BlackAndWhite(self: IPageSetup) = value
"""

    BottomMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomMargin(self: IPageSetup) -> float

Set: BottomMargin(self: IPageSetup) = value
"""

    CenterFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooter(self: IPageSetup) -> str

Set: CenterFooter(self: IPageSetup) = value
"""

    CenterFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooterPicture(self: IPageSetup) -> Graphic

"""

    CenterHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeader(self: IPageSetup) -> str

Set: CenterHeader(self: IPageSetup) = value
"""

    CenterHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeaderPicture(self: IPageSetup) -> Graphic

"""

    CenterHorizontally = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHorizontally(self: IPageSetup) -> bool

Set: CenterHorizontally(self: IPageSetup) = value
"""

    CenterVertically = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterVertically(self: IPageSetup) -> bool

Set: CenterVertically(self: IPageSetup) = value
"""

    ChartSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartSize(self: IPageSetup) -> XlObjectSize

Set: ChartSize(self: IPageSetup) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPageSetup) -> XlCreator

"""

    DifferentFirstPageHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DifferentFirstPageHeaderFooter(self: IPageSetup) -> bool

Set: DifferentFirstPageHeaderFooter(self: IPageSetup) = value
"""

    Draft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Draft(self: IPageSetup) -> bool

Set: Draft(self: IPageSetup) = value
"""

    EvenPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EvenPage(self: IPageSetup) -> Page

"""

    FirstPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstPage(self: IPageSetup) -> Page

"""

    FirstPageNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstPageNumber(self: IPageSetup) -> int

Set: FirstPageNumber(self: IPageSetup) = value
"""

    FitToPagesTall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitToPagesTall(self: IPageSetup) -> object

Set: FitToPagesTall(self: IPageSetup) = value
"""

    FitToPagesWide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitToPagesWide(self: IPageSetup) -> object

Set: FitToPagesWide(self: IPageSetup) = value
"""

    FooterMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FooterMargin(self: IPageSetup) -> float

Set: FooterMargin(self: IPageSetup) = value
"""

    HeaderMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderMargin(self: IPageSetup) -> float

Set: HeaderMargin(self: IPageSetup) = value
"""

    LeftFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooter(self: IPageSetup) -> str

Set: LeftFooter(self: IPageSetup) = value
"""

    LeftFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooterPicture(self: IPageSetup) -> Graphic

"""

    LeftHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeader(self: IPageSetup) -> str

Set: LeftHeader(self: IPageSetup) = value
"""

    LeftHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeaderPicture(self: IPageSetup) -> Graphic

"""

    LeftMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftMargin(self: IPageSetup) -> float

Set: LeftMargin(self: IPageSetup) = value
"""

    OddAndEvenPagesHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OddAndEvenPagesHeaderFooter(self: IPageSetup) -> bool

Set: OddAndEvenPagesHeaderFooter(self: IPageSetup) = value
"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: IPageSetup) -> XlOrder

Set: Order(self: IPageSetup) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IPageSetup) -> XlPageOrientation

Set: Orientation(self: IPageSetup) = value
"""

    Pages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pages(self: IPageSetup) -> Pages

"""

    PaperSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSize(self: IPageSetup) -> XlPaperSize

Set: PaperSize(self: IPageSetup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPageSetup) -> object

"""

    PrintArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintArea(self: IPageSetup) -> str

Set: PrintArea(self: IPageSetup) = value
"""

    PrintComments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintComments(self: IPageSetup) -> XlPrintLocation

Set: PrintComments(self: IPageSetup) = value
"""

    PrintErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintErrors(self: IPageSetup) -> XlPrintErrors

Set: PrintErrors(self: IPageSetup) = value
"""

    PrintGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintGridlines(self: IPageSetup) -> bool

Set: PrintGridlines(self: IPageSetup) = value
"""

    PrintHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintHeadings(self: IPageSetup) -> bool

Set: PrintHeadings(self: IPageSetup) = value
"""

    PrintNotes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintNotes(self: IPageSetup) -> bool

Set: PrintNotes(self: IPageSetup) = value
"""

    PrintTitleColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitleColumns(self: IPageSetup) -> str

Set: PrintTitleColumns(self: IPageSetup) = value
"""

    PrintTitleRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitleRows(self: IPageSetup) -> str

Set: PrintTitleRows(self: IPageSetup) = value
"""

    RightFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooter(self: IPageSetup) -> str

Set: RightFooter(self: IPageSetup) = value
"""

    RightFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooterPicture(self: IPageSetup) -> Graphic

"""

    RightHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeader(self: IPageSetup) -> str

Set: RightHeader(self: IPageSetup) = value
"""

    RightHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeaderPicture(self: IPageSetup) -> Graphic

"""

    RightMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightMargin(self: IPageSetup) -> float

Set: RightMargin(self: IPageSetup) = value
"""

    ScaleWithDocHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleWithDocHeaderFooter(self: IPageSetup) -> bool

Set: ScaleWithDocHeaderFooter(self: IPageSetup) = value
"""

    TopMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopMargin(self: IPageSetup) -> float

Set: TopMargin(self: IPageSetup) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Zoom(self: IPageSetup) -> object

Set: Zoom(self: IPageSetup) = value
"""



class IPane:
    # no doc
    def Activate(self):
        """ Activate(self: IPane) -> bool """
        pass

    def LargeScroll(self, Down, Up, ToRight, ToLeft):
        """ LargeScroll(self: IPane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def PointsToScreenPixelsX(self, Points):
        """ PointsToScreenPixelsX(self: IPane, Points: int) -> int """
        pass

    def PointsToScreenPixelsY(self, Points):
        """ PointsToScreenPixelsY(self: IPane, Points: int) -> int """
        pass

    def ScrollIntoView(self, Left, Top, Width, Height, Start):
        """ ScrollIntoView(self: IPane, Left: int, Top: int, Width: int, Height: int, Start: object) """
        pass

    def SmallScroll(self, Down, Up, ToRight, ToLeft):
        """ SmallScroll(self: IPane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPane) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPane) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IPane) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPane) -> object

"""

    ScrollColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollColumn(self: IPane) -> int

Set: ScrollColumn(self: IPane) = value
"""

    ScrollRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollRow(self: IPane) -> int

Set: ScrollRow(self: IPane) = value
"""

    VisibleRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleRange(self: IPane) -> Range

"""



class IPanes:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPanes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPanes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPanes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPanes) -> object

"""



class IParameter:
    # no doc
    def SetParam(self, Type, Value):
        """ SetParam(self: IParameter, Type: XlParameterType, Value: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IParameter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IParameter) -> XlCreator

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: IParameter) -> XlParameterDataType

Set: DataType(self: IParameter) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IParameter) -> str

Set: Name(self: IParameter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IParameter) -> object

"""

    PromptString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptString(self: IParameter) -> str

"""

    RefreshOnChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnChange(self: IParameter) -> bool

Set: RefreshOnChange(self: IParameter) = value
"""

    SourceRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceRange(self: IParameter) -> Range

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IParameter) -> XlParameterType

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IParameter) -> object

"""



class IParameters(IEnumerable):
    # no doc
    def Add(self, Name, iDataType):
        """ Add(self: IParameters, Name: str, iDataType: object) -> Parameter """
        pass

    def Delete(self):
        """ Delete(self: IParameters) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IParameters) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IParameters, Index: object) -> Parameter """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IParameters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IParameters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IParameters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IParameters) -> object

"""



class IPhonetic:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: IPhonetic) -> int

Set: Alignment(self: IPhonetic) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPhonetic) -> Application

"""

    CharacterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CharacterType(self: IPhonetic) -> int

Set: CharacterType(self: IPhonetic) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPhonetic) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IPhonetic) -> Font

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPhonetic) -> object

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IPhonetic) -> str

Set: Text(self: IPhonetic) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IPhonetic) -> bool

Set: Visible(self: IPhonetic) = value
"""



class IPhonetics(IEnumerable):
    # no doc
    def Add(self, Start, Length, Text):
        """ Add(self: IPhonetics, Start: int, Length: int, Text: str) """
        pass

    def Delete(self):
        """ Delete(self: IPhonetics) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPhonetics) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: IPhonetics) -> int

Set: Alignment(self: IPhonetics) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPhonetics) -> Application

"""

    CharacterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CharacterType(self: IPhonetics) -> int

Set: CharacterType(self: IPhonetics) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPhonetics) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPhonetics) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IPhonetics) -> Font

"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IPhonetics) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPhonetics) -> object

"""

    Start = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Start(self: IPhonetics) -> int

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IPhonetics) -> str

Set: Text(self: IPhonetics) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IPhonetics) -> bool

Set: Visible(self: IPhonetics) = value
"""



class IPicture:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IPicture) -> object """
        pass

    def Copy(self):
        """ Copy(self: IPicture) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IPicture, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IPicture) -> object """
        pass

    def Delete(self):
        """ Delete(self: IPicture) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IPicture) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IPicture, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IPicture) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPicture) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IPicture) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IPicture) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPicture) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IPicture) -> bool

Set: Enabled(self: IPicture) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IPicture) -> str

Set: Formula(self: IPicture) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IPicture) -> float

Set: Height(self: IPicture) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IPicture) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IPicture) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IPicture) -> float

Set: Left(self: IPicture) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IPicture) -> bool

Set: Locked(self: IPicture) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPicture) -> str

Set: Name(self: IPicture) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IPicture) -> str

Set: OnAction(self: IPicture) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPicture) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IPicture) -> object

Set: Placement(self: IPicture) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IPicture) -> bool

Set: PrintObject(self: IPicture) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IPicture) -> bool

Set: Shadow(self: IPicture) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IPicture) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IPicture) -> float

Set: Top(self: IPicture) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IPicture) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IPicture) -> bool

Set: Visible(self: IPicture) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IPicture) -> float

Set: Width(self: IPicture) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IPicture) -> int

"""



class IPictures(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IPictures, Left: float, Top: float, Width: float, Height: float) -> Picture """
        pass

    def BringToFront(self):
        """ BringToFront(self: IPictures) -> object """
        pass

    def Copy(self):
        """ Copy(self: IPictures) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IPictures, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IPictures) -> object """
        pass

    def Delete(self):
        """ Delete(self: IPictures) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IPictures) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPictures) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IPictures) -> GroupObject """
        pass

    def Insert(self, Filename, Converter):
        """ Insert(self: IPictures, Filename: str, Converter: object) -> Picture """
        pass

    def Item(self, Index):
        """ Item(self: IPictures, Index: object) -> object """
        pass

    def Paste(self, Link):
        """ Paste(self: IPictures, Link: object) -> Picture """
        pass

    def Select(self, Replace):
        """ Select(self: IPictures, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IPictures) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IPictures) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IPictures) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IPictures) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IPictures) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPictures) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IPictures) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPictures) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPictures) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IPictures) -> bool

Set: Enabled(self: IPictures) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IPictures) -> str

Set: Formula(self: IPictures) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IPictures) -> float

Set: Height(self: IPictures) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IPictures) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IPictures) -> float

Set: Left(self: IPictures) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IPictures) -> bool

Set: Locked(self: IPictures) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IPictures) -> str

Set: OnAction(self: IPictures) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPictures) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IPictures) -> object

Set: Placement(self: IPictures) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IPictures) -> bool

Set: PrintObject(self: IPictures) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IPictures) -> bool

Set: Shadow(self: IPictures) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IPictures) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IPictures) -> float

Set: Top(self: IPictures) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IPictures) -> bool

Set: Visible(self: IPictures) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IPictures) -> float

Set: Width(self: IPictures) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IPictures) -> int

"""



class IPivotAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotAxis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotAxis) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotAxis) -> object

"""

    PivotLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLines(self: IPivotAxis) -> PivotLines

"""



class IPivotCache:
    # no doc
    def CreatePivotChart(self, ChartDestination, XlChartType, Left, Top, Width, Height):
        """ CreatePivotChart(self: IPivotCache, ChartDestination: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def CreatePivotTable(self, TableDestination, TableName, ReadData, DefaultVersion):
        """ CreatePivotTable(self: IPivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        pass

    def MakeConnection(self):
        """ MakeConnection(self: IPivotCache) """
        pass

    def Refresh(self):
        """ Refresh(self: IPivotCache) """
        pass

    def ResetTimer(self):
        """ ResetTimer(self: IPivotCache) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: IPivotCache, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: IPivotCache) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotCache) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: IPivotCache) -> bool

Set: BackgroundQuery(self: IPivotCache) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IPivotCache) -> object

Set: CommandText(self: IPivotCache) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IPivotCache) -> XlCmdType

Set: CommandType(self: IPivotCache) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: IPivotCache) -> object

Set: Connection(self: IPivotCache) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotCache) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: IPivotCache) -> bool

Set: EnableRefresh(self: IPivotCache) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IPivotCache) -> int

"""

    IsConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsConnected(self: IPivotCache) -> bool

"""

    LocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocalConnection(self: IPivotCache) -> object

Set: LocalConnection(self: IPivotCache) = value
"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: IPivotCache) -> bool

Set: MaintainConnection(self: IPivotCache) = value
"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: IPivotCache) -> int

"""

    MissingItemsLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MissingItemsLimit(self: IPivotCache) -> XlPivotTableMissingItems

Set: MissingItemsLimit(self: IPivotCache) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: IPivotCache) -> bool

"""

    OptimizeCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OptimizeCache(self: IPivotCache) -> bool

Set: OptimizeCache(self: IPivotCache) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotCache) -> object

"""

    QueryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryType(self: IPivotCache) -> XlQueryType

"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: IPivotCache) -> int

"""

    Recordset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recordset(self: IPivotCache) -> object

Set: Recordset(self: IPivotCache) = value
"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: IPivotCache) -> DateTime

"""

    RefreshName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshName(self: IPivotCache) -> str

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: IPivotCache) -> bool

Set: RefreshOnFileOpen(self: IPivotCache) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: IPivotCache) -> int

Set: RefreshPeriod(self: IPivotCache) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: IPivotCache) -> XlRobustConnect

Set: RobustConnect(self: IPivotCache) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: IPivotCache) -> bool

Set: SavePassword(self: IPivotCache) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: IPivotCache) -> str

Set: SourceConnectionFile(self: IPivotCache) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: IPivotCache) -> object

Set: SourceData(self: IPivotCache) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: IPivotCache) -> str

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: IPivotCache) -> XlPivotTableSourceType

"""

    Sql = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sql(self: IPivotCache) -> object

Set: Sql(self: IPivotCache) = value
"""

    UpgradeOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpgradeOnRefresh(self: IPivotCache) -> bool

Set: UpgradeOnRefresh(self: IPivotCache) = value
"""

    UseLocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLocalConnection(self: IPivotCache) -> bool

Set: UseLocalConnection(self: IPivotCache) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: IPivotCache) -> XlPivotTableVersionList

"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: IPivotCache) -> WorkbookConnection

"""



class IPivotCaches(IEnumerable):
    # no doc
    def Add(self, SourceType, SourceData):
        """ Add(self: IPivotCaches, SourceType: XlPivotTableSourceType, SourceData: object) -> PivotCache """
        pass

    def Create(self, SourceType, SourceData, Version):
        """ Create(self: IPivotCaches, SourceType: XlPivotTableSourceType, SourceData: object, Version: object) -> PivotCache """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotCaches) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotCaches, Index: object) -> PivotCache """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotCaches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotCaches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotCaches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotCaches) -> object

"""



class IPivotCell:
    # no doc
    def AllocateChange(self):
        """ AllocateChange(self: IPivotCell) """
        pass

    def DiscardChange(self):
        """ DiscardChange(self: IPivotCell) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotCell) -> Application

"""

    CellChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CellChanged(self: IPivotCell) -> XlCellChangedState

"""

    ColumnItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnItems(self: IPivotCell) -> PivotItemList

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotCell) -> XlCreator

"""

    CustomSubtotalFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomSubtotalFunction(self: IPivotCell) -> XlConsolidationFunction

"""

    DataField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataField(self: IPivotCell) -> PivotField

"""

    DataSourceValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataSourceValue(self: IPivotCell) -> object

"""

    Dummy18 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy18(self: IPivotCell) -> str

"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: IPivotCell) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotCell) -> object

"""

    PivotCellType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCellType(self: IPivotCell) -> XlPivotCellType

"""

    PivotColumnLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotColumnLine(self: IPivotCell) -> PivotLine

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: IPivotCell) -> PivotField

"""

    PivotItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotItem(self: IPivotCell) -> PivotItem

"""

    PivotRowLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotRowLine(self: IPivotCell) -> PivotLine

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: IPivotCell) -> PivotTable

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: IPivotCell) -> Range

"""

    RowItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowItems(self: IPivotCell) -> PivotItemList

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: IPivotCell) -> Actions

"""



class IPivotField:
    # no doc
    def AddPageItem(self, Item, ClearList):
        """ AddPageItem(self: IPivotField, Item: str, ClearList: object) """
        pass

    def AutoShow(self, Type, Range, Count, Field):
        """ AutoShow(self: IPivotField, Type: int, Range: int, Count: int, Field: str) """
        pass

    def AutoSort(self, Order, Field):
        """ AutoSort(self: IPivotField, Order: int, Field: str) """
        pass

    def AutoSortEx(self, Order, Field, PivotLine, CustomSubtotal):
        """ AutoSortEx(self: IPivotField, Order: int, Field: str, PivotLine: object, CustomSubtotal: object) """
        pass

    def CalculatedItems(self):
        """ CalculatedItems(self: IPivotField) -> CalculatedItems """
        pass

    def ClearAllFilters(self):
        """ ClearAllFilters(self: IPivotField) """
        pass

    def ClearLabelFilters(self):
        """ ClearLabelFilters(self: IPivotField) """
        pass

    def ClearManualFilter(self):
        """ ClearManualFilter(self: IPivotField) """
        pass

    def ClearValueFilters(self):
        """ ClearValueFilters(self: IPivotField) """
        pass

    def Delete(self):
        """ Delete(self: IPivotField) """
        pass

    def DrillTo(self, Field):
        """ DrillTo(self: IPivotField, Field: str) """
        pass

    def PivotItems(self, Index):
        """ PivotItems(self: IPivotField, Index: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AllItemsVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllItemsVisible(self: IPivotField) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotField) -> Application

"""

    AutoShowCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowCount(self: IPivotField) -> int

"""

    AutoShowField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowField(self: IPivotField) -> str

"""

    AutoShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowRange(self: IPivotField) -> int

"""

    AutoShowType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowType(self: IPivotField) -> int

"""

    AutoSortCustomSubtotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortCustomSubtotal(self: IPivotField) -> int

"""

    AutoSortField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortField(self: IPivotField) -> str

"""

    AutoSortOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortOrder(self: IPivotField) -> int

"""

    AutoSortPivotLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortPivotLine(self: IPivotField) -> PivotLine

"""

    BaseField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseField(self: IPivotField) -> object

Set: BaseField(self: IPivotField) = value
"""

    BaseItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseItem(self: IPivotField) -> object

Set: BaseItem(self: IPivotField) = value
"""

    Calculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Calculation(self: IPivotField) -> XlPivotFieldCalculation

Set: Calculation(self: IPivotField) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IPivotField) -> str

Set: Caption(self: IPivotField) = value
"""

    ChildField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChildField(self: IPivotField) -> PivotField

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotField) -> XlCreator

"""

    CubeField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeField(self: IPivotField) -> CubeField

"""

    CurrentPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPage(self: IPivotField) -> object

Set: CurrentPage(self: IPivotField) = value
"""

    CurrentPageList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPageList(self: IPivotField) -> object

Set: CurrentPageList(self: IPivotField) = value
"""

    CurrentPageName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPageName(self: IPivotField) -> str

Set: CurrentPageName(self: IPivotField) = value
"""

    DatabaseSort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DatabaseSort(self: IPivotField) -> bool

Set: DatabaseSort(self: IPivotField) = value
"""

    DataRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataRange(self: IPivotField) -> Range

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: IPivotField) -> XlPivotFieldDataType

"""

    DisplayAsCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAsCaption(self: IPivotField) -> bool

"""

    DisplayAsTooltip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAsTooltip(self: IPivotField) -> bool

Set: DisplayAsTooltip(self: IPivotField) = value
"""

    DisplayInReport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInReport(self: IPivotField) -> bool

Set: DisplayInReport(self: IPivotField) = value
"""

    DragToColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToColumn(self: IPivotField) -> bool

Set: DragToColumn(self: IPivotField) = value
"""

    DragToData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToData(self: IPivotField) -> bool

Set: DragToData(self: IPivotField) = value
"""

    DragToHide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToHide(self: IPivotField) -> bool

Set: DragToHide(self: IPivotField) = value
"""

    DragToPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToPage(self: IPivotField) -> bool

Set: DragToPage(self: IPivotField) = value
"""

    DragToRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToRow(self: IPivotField) -> bool

Set: DragToRow(self: IPivotField) = value
"""

    DrilledDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrilledDown(self: IPivotField) -> bool

Set: DrilledDown(self: IPivotField) = value
"""

    EnableItemSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableItemSelection(self: IPivotField) -> bool

Set: EnableItemSelection(self: IPivotField) = value
"""

    EnableMultiplePageItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableMultiplePageItems(self: IPivotField) -> bool

Set: EnableMultiplePageItems(self: IPivotField) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IPivotField) -> str

Set: Formula(self: IPivotField) = value
"""

    Function = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Function(self: IPivotField) -> XlConsolidationFunction

Set: Function(self: IPivotField) = value
"""

    GroupLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupLevel(self: IPivotField) -> object

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: IPivotField) -> bool

Set: Hidden(self: IPivotField) = value
"""

    HiddenItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HiddenItemsList(self: IPivotField) -> object

Set: HiddenItemsList(self: IPivotField) = value
"""

    IncludeNewItemsInFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeNewItemsInFilter(self: IPivotField) -> bool

Set: IncludeNewItemsInFilter(self: IPivotField) = value
"""

    IsCalculated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCalculated(self: IPivotField) -> bool

"""

    IsMemberProperty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsMemberProperty(self: IPivotField) -> bool

"""

    LabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelRange(self: IPivotField) -> Range

"""

    LayoutBlankLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutBlankLine(self: IPivotField) -> bool

Set: LayoutBlankLine(self: IPivotField) = value
"""

    LayoutCompactRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutCompactRow(self: IPivotField) -> bool

Set: LayoutCompactRow(self: IPivotField) = value
"""

    LayoutForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutForm(self: IPivotField) -> XlLayoutFormType

Set: LayoutForm(self: IPivotField) = value
"""

    LayoutPageBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutPageBreak(self: IPivotField) -> bool

Set: LayoutPageBreak(self: IPivotField) = value
"""

    LayoutSubtotalLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutSubtotalLocation(self: IPivotField) -> XlSubtototalLocationType

Set: LayoutSubtotalLocation(self: IPivotField) = value
"""

    MemberPropertyCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemberPropertyCaption(self: IPivotField) -> str

Set: MemberPropertyCaption(self: IPivotField) = value
"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: IPivotField) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPivotField) -> str

Set: Name(self: IPivotField) = value
"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IPivotField) -> str

Set: NumberFormat(self: IPivotField) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IPivotField) -> XlPivotFieldOrientation

Set: Orientation(self: IPivotField) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotField) -> object

"""

    ParentField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentField(self: IPivotField) -> PivotField

"""

    PivotFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotFilters(self: IPivotField) -> PivotFilters

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IPivotField) -> object

Set: Position(self: IPivotField) = value
"""

    PropertyOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyOrder(self: IPivotField) -> int

Set: PropertyOrder(self: IPivotField) = value
"""

    PropertyParentField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyParentField(self: IPivotField) -> PivotField

"""

    RepeatLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatLabels(self: IPivotField) -> bool

Set: RepeatLabels(self: IPivotField) = value
"""

    ServerBased = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerBased(self: IPivotField) -> bool

Set: ServerBased(self: IPivotField) = value
"""

    ShowAllItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllItems(self: IPivotField) -> bool

Set: ShowAllItems(self: IPivotField) = value
"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: IPivotField) -> bool

Set: ShowDetail(self: IPivotField) = value
"""

    ShowingInAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowingInAxis(self: IPivotField) -> bool

"""

    SourceCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceCaption(self: IPivotField) -> str

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: IPivotField) -> str

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: IPivotField) -> str

Set: StandardFormula(self: IPivotField) = value
"""

    SubtotalName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubtotalName(self: IPivotField) -> str

Set: SubtotalName(self: IPivotField) = value
"""

    TotalLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalLevels(self: IPivotField) -> object

"""

    UseMemberPropertyAsCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseMemberPropertyAsCaption(self: IPivotField) -> bool

Set: UseMemberPropertyAsCaption(self: IPivotField) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IPivotField) -> str

Set: Value(self: IPivotField) = value
"""

    VisibleItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleItemsList(self: IPivotField) -> object

Set: VisibleItemsList(self: IPivotField) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IPivotField) -> str

Set: _Default(self: IPivotField) = value
"""



class IPivotFields(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotFields) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotFields, Index: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotFields) -> PivotTable

"""



class IPivotFilter:
    # no doc
    def Delete(self):
        """ Delete(self: IPivotFilter) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: IPivotFilter) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotFilter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotFilter) -> XlCreator

"""

    DataCubeField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataCubeField(self: IPivotFilter) -> CubeField

"""

    DataField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataField(self: IPivotFilter) -> PivotField

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IPivotFilter) -> str

"""

    FilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterType(self: IPivotFilter) -> XlPivotFilterType

"""

    IsMemberPropertyFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsMemberPropertyFilter(self: IPivotFilter) -> bool

"""

    MemberPropertyField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemberPropertyField(self: IPivotFilter) -> PivotField

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPivotFilter) -> str

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: IPivotFilter) -> int

Set: Order(self: IPivotFilter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotFilter) -> object

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: IPivotFilter) -> PivotField

"""

    Value1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value1(self: IPivotFilter) -> object

"""

    Value2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value2(self: IPivotFilter) -> object

"""

    WholeDayFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WholeDayFilter(self: IPivotFilter) -> bool

Set: WholeDayFilter(self: IPivotFilter) = value
"""



class IPivotFilters(IEnumerable):
    # no doc
    def Add(self, Type, DataField, Value1, Value2, Order, Name, Description, MemberPropertyField):
        """ Add(self: IPivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object) -> PivotFilter """
        pass

    def Add2(self, Type, DataField, Value1, Value2, Order, Name, Description, MemberPropertyField, WholeDayFilter):
        """ Add2(self: IPivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object, WholeDayFilter: object) -> PivotFilter """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotFilters) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotFilters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotFilters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotFilters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotFilters) -> object

"""



class IPivotFormula:
    # no doc
    def Delete(self):
        """ Delete(self: IPivotFormula) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotFormula) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotFormula) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IPivotFormula) -> str

Set: Formula(self: IPivotFormula) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IPivotFormula) -> int

Set: Index(self: IPivotFormula) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotFormula) -> object

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: IPivotFormula) -> str

Set: StandardFormula(self: IPivotFormula) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IPivotFormula) -> str

Set: Value(self: IPivotFormula) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IPivotFormula) -> str

Set: _Default(self: IPivotFormula) = value
"""



class IPivotFormulas(IEnumerable):
    # no doc
    def Add(self, Formula, UseStandardFormula):
        """ Add(self: IPivotFormulas, Formula: str, UseStandardFormula: object) -> PivotFormula """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotFormulas) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotFormulas, Index: object) -> PivotFormula """
        pass

    def _Add(self, Formula):
        """ _Add(self: IPivotFormulas, Formula: str) -> PivotFormula """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotFormulas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotFormulas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotFormulas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotFormulas) -> object

"""



class IPivotItem:
    # no doc
    def Delete(self):
        """ Delete(self: IPivotItem) """
        pass

    def DrillTo(self, Field):
        """ DrillTo(self: IPivotItem, Field: str) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IPivotItem) -> str

Set: Caption(self: IPivotItem) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotItem) -> XlCreator

"""

    DataRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataRange(self: IPivotItem) -> Range

"""

    DrilledDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrilledDown(self: IPivotItem) -> bool

Set: DrilledDown(self: IPivotItem) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IPivotItem) -> str

Set: Formula(self: IPivotItem) = value
"""

    IsCalculated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCalculated(self: IPivotItem) -> bool

"""

    LabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelRange(self: IPivotItem) -> Range

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPivotItem) -> str

Set: Name(self: IPivotItem) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotItem) -> PivotField

"""

    ParentItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentItem(self: IPivotItem) -> PivotItem

"""

    ParentShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentShowDetail(self: IPivotItem) -> bool

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IPivotItem) -> int

Set: Position(self: IPivotItem) = value
"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: IPivotItem) -> int

"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: IPivotItem) -> bool

Set: ShowDetail(self: IPivotItem) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: IPivotItem) -> object

"""

    SourceNameStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceNameStandard(self: IPivotItem) -> str

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: IPivotItem) -> str

Set: StandardFormula(self: IPivotItem) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IPivotItem) -> str

Set: Value(self: IPivotItem) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IPivotItem) -> bool

Set: Visible(self: IPivotItem) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IPivotItem) -> str

Set: _Default(self: IPivotItem) = value
"""



class IPivotItemList(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotItemList) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotItemList, Index: object) -> PivotItem """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotItemList) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotItemList) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotItemList) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotItemList) -> object

"""



class IPivotItems(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IPivotItems, Name: str) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotItems, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotItems) -> PivotField

"""



class IPivotLayout:
    # no doc
    def AddFields(self, RowFields, ColumnFields, PageFields, AppendField):
        """ AddFields(self: IPivotLayout, RowFields: object, ColumnFields: object, PageFields: object, AppendField: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotLayout) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotLayout) -> XlCreator

"""

    CubeFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFields(self: IPivotLayout) -> CubeFields

"""

    InnerDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InnerDetail(self: IPivotLayout) -> str

Set: InnerDetail(self: IPivotLayout) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotLayout) -> object

"""

    PivotCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCache(self: IPivotLayout) -> PivotCache

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: IPivotLayout) -> PivotTable

"""



class IPivotLine:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotLine) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotLine) -> XlCreator

"""

    LineType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineType(self: IPivotLine) -> XlPivotLineType

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotLine) -> object

"""

    PivotLineCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLineCells(self: IPivotLine) -> PivotLineCells

"""

    PivotLineCellsFull = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLineCellsFull(self: IPivotLine) -> PivotLineCells

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IPivotLine) -> int

"""



class IPivotLineCells(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotLineCells) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotLineCells) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotLineCells) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotLineCells) -> XlCreator

"""

    Full = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Full(self: IPivotLineCells) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotLineCells) -> object

"""



class IPivotLines(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotLines) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotLines) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotLines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotLines) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotLines) -> object

"""



class IPivotTable:
    # no doc
    def AddDataField(self, Field, Caption, Function):
        """ AddDataField(self: IPivotTable, Field: object, Caption: object, Function: object) -> PivotField """
        pass

    def AddFields(self, RowFields, ColumnFields, PageFields, AddToTable):
        """ AddFields(self: IPivotTable, RowFields: object, ColumnFields: object, PageFields: object, AddToTable: object) -> object """
        pass

    def AllocateChanges(self):
        """ AllocateChanges(self: IPivotTable) """
        pass

    def CalculatedFields(self):
        """ CalculatedFields(self: IPivotTable) -> CalculatedFields """
        pass

    def ChangeConnection(self, conn):
        """ ChangeConnection(self: IPivotTable, conn: WorkbookConnection) """
        pass

    def ChangePivotCache(self, PivotCache):
        """ ChangePivotCache(self: IPivotTable, PivotCache: object) """
        pass

    def ClearAllFilters(self):
        """ ClearAllFilters(self: IPivotTable) """
        pass

    def ClearTable(self):
        """ ClearTable(self: IPivotTable) """
        pass

    def CommitChanges(self):
        """ CommitChanges(self: IPivotTable) """
        pass

    def ConvertToFormulas(self, ConvertFilters):
        """ ConvertToFormulas(self: IPivotTable, ConvertFilters: bool) """
        pass

    def CreateCubeFile(self, File, Measures, Levels, Members, Properties):
        """ CreateCubeFile(self: IPivotTable, File: str, Measures: object, Levels: object, Members: object, Properties: object) -> str """
        pass

    def DiscardChanges(self):
        """ DiscardChanges(self: IPivotTable) """
        pass

    def DrillDown(self, PivotItem, PivotLine):
        """ DrillDown(self: IPivotTable, PivotItem: PivotItem, PivotLine: object) """
        pass

    def DrillTo(self, PivotItem, CubeField, PivotLine):
        """ DrillTo(self: IPivotTable, PivotItem: PivotItem, CubeField: CubeField, PivotLine: object) """
        pass

    def DrillUp(self, PivotItem, PivotLine, LevelUniqueName):
        """ DrillUp(self: IPivotTable, PivotItem: PivotItem, PivotLine: object, LevelUniqueName: object) """
        pass

    def Dummy15(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy15(self: IPivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy2(self, Arg1, Arg2, Arg3, Arg4):
        """ Dummy2(self: IPivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Format(self, Format):
        """ Format(self: IPivotTable, Format: XlPivotFormatType) """
        pass

    def GetData(self, Name):
        """ GetData(self: IPivotTable, Name: str) -> float """
        pass

    def GetPivotData(self, DataField, Field1, Item1, Field2, Item2, Field3, Item3, Field4, Item4, Field5, Item5, Field6, Item6, Field7, Item7, Field8, Item8, Field9, Item9, Field10, Item10, Field11, Item11, Field12, Item12, Field13, Item13, Field14, Item14):
        """ GetPivotData(self: IPivotTable, DataField: object, Field1: object, Item1: object, Field2: object, Item2: object, Field3: object, Item3: object, Field4: object, Item4: object, Field5: object, Item5: object, Field6: object, Item6: object, Field7: object, Item7: object, Field8: object, Item8: object, Field9: object, Item9: object, Field10: object, Item10: object, Field11: object, Item11: object, Field12: object, Item12: object, Field13: object, Item13: object, Field14: object, Item14: object) -> Range """
        pass

    def ListFormulas(self):
        """ ListFormulas(self: IPivotTable) """
        pass

    def PivotCache(self):
        """ PivotCache(self: IPivotTable) -> PivotCache """
        pass

    def PivotFields(self, Index):
        """ PivotFields(self: IPivotTable, Index: object) -> object """
        pass

    def PivotSelect(self, Name, Mode, UseStandardName):
        """ PivotSelect(self: IPivotTable, Name: str, Mode: XlPTSelectionMode, UseStandardName: object) """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: IPivotTable, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        pass

    def PivotValueCell(self, rowline, columnline):
        """ PivotValueCell(self: IPivotTable, rowline: object, columnline: object) -> PivotValueCell """
        pass

    def RefreshDataSourceValues(self):
        """ RefreshDataSourceValues(self: IPivotTable) """
        pass

    def RefreshTable(self):
        """ RefreshTable(self: IPivotTable) -> bool """
        pass

    def RepeatAllLabels(self, Repeat):
        """ RepeatAllLabels(self: IPivotTable, Repeat: XlPivotFieldRepeatLabels) """
        pass

    def RowAxisLayout(self, RowLayout):
        """ RowAxisLayout(self: IPivotTable, RowLayout: XlLayoutRowType) """
        pass

    def ShowPages(self, PageField):
        """ ShowPages(self: IPivotTable, PageField: object) -> object """
        pass

    def SubtotalLocation(self, Location):
        """ SubtotalLocation(self: IPivotTable, Location: XlSubtototalLocationType) """
        pass

    def Update(self):
        """ Update(self: IPivotTable) """
        pass

    def _PivotSelect(self, Name, Mode):
        """ _PivotSelect(self: IPivotTable, Name: str, Mode: XlPTSelectionMode) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    ActiveFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveFilters(self: IPivotTable) -> PivotFilters

"""

    Allocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Allocation(self: IPivotTable) -> XlAllocation

Set: Allocation(self: IPivotTable) = value
"""

    AllocationMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationMethod(self: IPivotTable) -> XlAllocationMethod

Set: AllocationMethod(self: IPivotTable) = value
"""

    AllocationValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationValue(self: IPivotTable) -> XlAllocationValue

Set: AllocationValue(self: IPivotTable) = value
"""

    AllocationWeightExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationWeightExpression(self: IPivotTable) -> str

Set: AllocationWeightExpression(self: IPivotTable) = value
"""

    AllowMultipleFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowMultipleFilters(self: IPivotTable) -> bool

Set: AllowMultipleFilters(self: IPivotTable) = value
"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: IPivotTable) -> str

Set: AlternativeText(self: IPivotTable) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotTable) -> Application

"""

    CacheIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CacheIndex(self: IPivotTable) -> int

Set: CacheIndex(self: IPivotTable) = value
"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: IPivotTable) -> CalculatedMembers

"""

    CalculatedMembersInFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembersInFilters(self: IPivotTable) -> bool

Set: CalculatedMembersInFilters(self: IPivotTable) = value
"""

    ChangeList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangeList(self: IPivotTable) -> PivotTableChangeList

"""

    ColumnGrand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnGrand(self: IPivotTable) -> bool

Set: ColumnGrand(self: IPivotTable) = value
"""

    ColumnRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnRange(self: IPivotTable) -> Range

"""

    CompactLayoutColumnHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactLayoutColumnHeader(self: IPivotTable) -> str

Set: CompactLayoutColumnHeader(self: IPivotTable) = value
"""

    CompactLayoutRowHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactLayoutRowHeader(self: IPivotTable) -> str

Set: CompactLayoutRowHeader(self: IPivotTable) = value
"""

    CompactRowIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactRowIndent(self: IPivotTable) -> int

Set: CompactRowIndent(self: IPivotTable) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotTable) -> XlCreator

"""

    CubeFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFields(self: IPivotTable) -> CubeFields

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: IPivotTable) -> Range

"""

    DataLabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabelRange(self: IPivotTable) -> Range

"""

    DataPivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataPivotField(self: IPivotTable) -> PivotField

"""

    DisplayContextTooltips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayContextTooltips(self: IPivotTable) -> bool

Set: DisplayContextTooltips(self: IPivotTable) = value
"""

    DisplayEmptyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEmptyColumn(self: IPivotTable) -> bool

Set: DisplayEmptyColumn(self: IPivotTable) = value
"""

    DisplayEmptyRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEmptyRow(self: IPivotTable) -> bool

Set: DisplayEmptyRow(self: IPivotTable) = value
"""

    DisplayErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayErrorString(self: IPivotTable) -> bool

Set: DisplayErrorString(self: IPivotTable) = value
"""

    DisplayFieldCaptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFieldCaptions(self: IPivotTable) -> bool

Set: DisplayFieldCaptions(self: IPivotTable) = value
"""

    DisplayImmediateItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayImmediateItems(self: IPivotTable) -> bool

Set: DisplayImmediateItems(self: IPivotTable) = value
"""

    DisplayMemberPropertyTooltips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayMemberPropertyTooltips(self: IPivotTable) -> bool

Set: DisplayMemberPropertyTooltips(self: IPivotTable) = value
"""

    DisplayNullString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayNullString(self: IPivotTable) -> bool

Set: DisplayNullString(self: IPivotTable) = value
"""

    EnableDataValueEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDataValueEditing(self: IPivotTable) -> bool

Set: EnableDataValueEditing(self: IPivotTable) = value
"""

    EnableDrilldown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDrilldown(self: IPivotTable) -> bool

Set: EnableDrilldown(self: IPivotTable) = value
"""

    EnableFieldDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFieldDialog(self: IPivotTable) -> bool

Set: EnableFieldDialog(self: IPivotTable) = value
"""

    EnableFieldList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFieldList(self: IPivotTable) -> bool

Set: EnableFieldList(self: IPivotTable) = value
"""

    EnableWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableWizard(self: IPivotTable) -> bool

Set: EnableWizard(self: IPivotTable) = value
"""

    EnableWriteback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableWriteback(self: IPivotTable) -> bool

Set: EnableWriteback(self: IPivotTable) = value
"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: IPivotTable) -> str

Set: ErrorString(self: IPivotTable) = value
"""

    FieldListSortAscending = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldListSortAscending(self: IPivotTable) -> bool

Set: FieldListSortAscending(self: IPivotTable) = value
"""

    GrandTotalName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GrandTotalName(self: IPivotTable) -> str

Set: GrandTotalName(self: IPivotTable) = value
"""

    HasAutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAutoFormat(self: IPivotTable) -> bool

Set: HasAutoFormat(self: IPivotTable) = value
"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: IPivotTable) -> bool

"""

    InGridDropZones = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InGridDropZones(self: IPivotTable) -> bool

Set: InGridDropZones(self: IPivotTable) = value
"""

    InnerDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InnerDetail(self: IPivotTable) -> str

Set: InnerDetail(self: IPivotTable) = value
"""

    LayoutRowDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutRowDefault(self: IPivotTable) -> XlLayoutRowType

Set: LayoutRowDefault(self: IPivotTable) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: IPivotTable) -> str

Set: Location(self: IPivotTable) = value
"""

    ManualUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ManualUpdate(self: IPivotTable) -> bool

Set: ManualUpdate(self: IPivotTable) = value
"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: IPivotTable) -> str

"""

    MergeLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeLabels(self: IPivotTable) -> bool

Set: MergeLabels(self: IPivotTable) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPivotTable) -> str

Set: Name(self: IPivotTable) = value
"""

    NullString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NullString(self: IPivotTable) -> str

Set: NullString(self: IPivotTable) = value
"""

    PageFieldOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldOrder(self: IPivotTable) -> int

Set: PageFieldOrder(self: IPivotTable) = value
"""

    PageFieldStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldStyle(self: IPivotTable) -> str

Set: PageFieldStyle(self: IPivotTable) = value
"""

    PageFieldWrapCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldWrapCount(self: IPivotTable) -> int

Set: PageFieldWrapCount(self: IPivotTable) = value
"""

    PageRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageRange(self: IPivotTable) -> Range

"""

    PageRangeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageRangeCells(self: IPivotTable) -> Range

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotTable) -> object

"""

    PivotChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotChart(self: IPivotTable) -> Shape

"""

    PivotColumnAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotColumnAxis(self: IPivotTable) -> PivotAxis

"""

    PivotFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotFormulas(self: IPivotTable) -> PivotFormulas

"""

    PivotRowAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotRowAxis(self: IPivotTable) -> PivotAxis

"""

    PivotSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotSelection(self: IPivotTable) -> str

Set: PivotSelection(self: IPivotTable) = value
"""

    PivotSelectionStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotSelectionStandard(self: IPivotTable) -> str

Set: PivotSelectionStandard(self: IPivotTable) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: IPivotTable) -> bool

Set: PreserveFormatting(self: IPivotTable) = value
"""

    PrintDrillIndicators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintDrillIndicators(self: IPivotTable) -> bool

Set: PrintDrillIndicators(self: IPivotTable) = value
"""

    PrintTitles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitles(self: IPivotTable) -> bool

Set: PrintTitles(self: IPivotTable) = value
"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: IPivotTable) -> DateTime

"""

    RefreshName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshName(self: IPivotTable) -> str

"""

    RepeatItemsOnEachPrintedPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatItemsOnEachPrintedPage(self: IPivotTable) -> bool

Set: RepeatItemsOnEachPrintedPage(self: IPivotTable) = value
"""

    RowGrand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowGrand(self: IPivotTable) -> bool

Set: RowGrand(self: IPivotTable) = value
"""

    RowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowRange(self: IPivotTable) -> Range

"""

    SaveData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveData(self: IPivotTable) -> bool

Set: SaveData(self: IPivotTable) = value
"""

    SelectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SelectionMode(self: IPivotTable) -> XlPTSelectionMode

Set: SelectionMode(self: IPivotTable) = value
"""

    ShowCellBackgroundFromOLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCellBackgroundFromOLAP(self: IPivotTable) -> bool

Set: ShowCellBackgroundFromOLAP(self: IPivotTable) = value
"""

    ShowDrillIndicators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDrillIndicators(self: IPivotTable) -> bool

Set: ShowDrillIndicators(self: IPivotTable) = value
"""

    ShowPageMultipleItemLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPageMultipleItemLabel(self: IPivotTable) -> bool

Set: ShowPageMultipleItemLabel(self: IPivotTable) = value
"""

    ShowTableStyleColumnHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnHeaders(self: IPivotTable) -> bool

Set: ShowTableStyleColumnHeaders(self: IPivotTable) = value
"""

    ShowTableStyleColumnStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnStripes(self: IPivotTable) -> bool

Set: ShowTableStyleColumnStripes(self: IPivotTable) = value
"""

    ShowTableStyleLastColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleLastColumn(self: IPivotTable) -> bool

Set: ShowTableStyleLastColumn(self: IPivotTable) = value
"""

    ShowTableStyleRowHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowHeaders(self: IPivotTable) -> bool

Set: ShowTableStyleRowHeaders(self: IPivotTable) = value
"""

    ShowTableStyleRowStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowStripes(self: IPivotTable) -> bool

Set: ShowTableStyleRowStripes(self: IPivotTable) = value
"""

    ShowValuesRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValuesRow(self: IPivotTable) -> bool

Set: ShowValuesRow(self: IPivotTable) = value
"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: IPivotTable) -> Slicers

"""

    SmallGrid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallGrid(self: IPivotTable) -> bool

Set: SmallGrid(self: IPivotTable) = value
"""

    SortUsingCustomLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortUsingCustomLists(self: IPivotTable) -> bool

Set: SortUsingCustomLists(self: IPivotTable) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: IPivotTable) -> object

Set: SourceData(self: IPivotTable) = value
"""

    SubtotalHiddenPageItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubtotalHiddenPageItems(self: IPivotTable) -> bool

Set: SubtotalHiddenPageItems(self: IPivotTable) = value
"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: IPivotTable) -> str

Set: Summary(self: IPivotTable) = value
"""

    TableRange1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableRange1(self: IPivotTable) -> Range

"""

    TableRange2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableRange2(self: IPivotTable) -> Range

"""

    TableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle(self: IPivotTable) -> str

Set: TableStyle(self: IPivotTable) = value
"""

    TableStyle2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle2(self: IPivotTable) -> object

Set: TableStyle2(self: IPivotTable) = value
"""

    Tag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tag(self: IPivotTable) -> str

Set: Tag(self: IPivotTable) = value
"""

    TotalsAnnotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsAnnotation(self: IPivotTable) -> bool

Set: TotalsAnnotation(self: IPivotTable) = value
"""

    VacatedStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VacatedStyle(self: IPivotTable) -> str

Set: VacatedStyle(self: IPivotTable) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IPivotTable) -> str

Set: Value(self: IPivotTable) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: IPivotTable) -> XlPivotTableVersionList

"""

    ViewCalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewCalculatedMembers(self: IPivotTable) -> bool

Set: ViewCalculatedMembers(self: IPivotTable) = value
"""

    VisualTotals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualTotals(self: IPivotTable) -> bool

Set: VisualTotals(self: IPivotTable) = value
"""

    VisualTotalsForSets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualTotalsForSets(self: IPivotTable) -> bool

Set: VisualTotalsForSets(self: IPivotTable) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IPivotTable) -> str

Set: _Default(self: IPivotTable) = value
"""



class IPivotTableChangeList(IEnumerable):
    # no doc
    def Add(self, Tuple, Value, AllocationValue, AllocationMethod, AllocationWeightExpression):
        """ Add(self: IPivotTableChangeList, Tuple: str, Value: float, AllocationValue: object, AllocationMethod: object, AllocationWeightExpression: object) -> ValueChange """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotTableChangeList) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotTableChangeList) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotTableChangeList) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotTableChangeList) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotTableChangeList) -> object

"""



class IPivotTables(IEnumerable):
    # no doc
    def Add(self, PivotCache, TableDestination, TableName, ReadData, DefaultVersion):
        """ Add(self: IPivotTables, PivotCache: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPivotTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPivotTables, Index: object) -> PivotTable """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPivotTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotTables) -> object

"""



class IPivotValueCell:
    # no doc
    def ShowDetail(self):
        """ ShowDetail(self: IPivotValueCell) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPivotValueCell) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPivotValueCell) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPivotValueCell) -> object

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: IPivotValueCell) -> PivotCell

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: IPivotValueCell) -> Actions

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IPivotValueCell) -> object

"""



class IPlotArea:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: IPlotArea) -> object """
        pass

    def Select(self):
        """ Select(self: IPlotArea) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPlotArea) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IPlotArea) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPlotArea) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IPlotArea) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IPlotArea) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IPlotArea) -> float

Set: Height(self: IPlotArea) = value
"""

    InsideHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideHeight(self: IPlotArea) -> float

Set: InsideHeight(self: IPlotArea) = value
"""

    InsideLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideLeft(self: IPlotArea) -> float

Set: InsideLeft(self: IPlotArea) = value
"""

    InsideTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideTop(self: IPlotArea) -> float

Set: InsideTop(self: IPlotArea) = value
"""

    InsideWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideWidth(self: IPlotArea) -> float

Set: InsideWidth(self: IPlotArea) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IPlotArea) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IPlotArea) -> float

Set: Left(self: IPlotArea) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPlotArea) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPlotArea) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IPlotArea) -> XlChartElementPosition

Set: Position(self: IPlotArea) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IPlotArea) -> float

Set: Top(self: IPlotArea) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IPlotArea) -> float

Set: Width(self: IPlotArea) = value
"""

    _InsideHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideHeight(self: IPlotArea) -> float

"""

    _InsideLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideLeft(self: IPlotArea) -> float

"""

    _InsideTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideTop(self: IPlotArea) -> float

"""

    _InsideWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideWidth(self: IPlotArea) -> float

"""



class IPoint:
    # no doc
    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: IPoint, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: IPoint) -> object """
        pass

    def Copy(self):
        """ Copy(self: IPoint) -> object """
        pass

    def Delete(self):
        """ Delete(self: IPoint) -> object """
        pass

    def Paste(self):
        """ Paste(self: IPoint) -> object """
        pass

    def PieSliceLocation(self, loc, Index):
        """ PieSliceLocation(self: IPoint, loc: XlPieSliceLocation, Index: XlPieSliceIndex) -> float """
        pass

    def Select(self):
        """ Select(self: IPoint) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: IPoint, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPoint) -> Application

"""

    ApplyPictToEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToEnd(self: IPoint) -> bool

Set: ApplyPictToEnd(self: IPoint) = value
"""

    ApplyPictToFront = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToFront(self: IPoint) -> bool

Set: ApplyPictToFront(self: IPoint) = value
"""

    ApplyPictToSides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToSides(self: IPoint) -> bool

Set: ApplyPictToSides(self: IPoint) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IPoint) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPoint) -> XlCreator

"""

    DataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabel(self: IPoint) -> DataLabel

"""

    Explosion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explosion(self: IPoint) -> int

Set: Explosion(self: IPoint) = value
"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IPoint) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IPoint) -> ChartFormat

"""

    Has3DEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DEffect(self: IPoint) -> bool

Set: Has3DEffect(self: IPoint) = value
"""

    HasDataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataLabel(self: IPoint) -> bool

Set: HasDataLabel(self: IPoint) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IPoint) -> float

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IPoint) -> Interior

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: IPoint) -> bool

Set: InvertIfNegative(self: IPoint) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IPoint) -> float

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: IPoint) -> int

Set: MarkerBackgroundColor(self: IPoint) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: IPoint) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: IPoint) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: IPoint) -> int

Set: MarkerForegroundColor(self: IPoint) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: IPoint) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: IPoint) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: IPoint) -> int

Set: MarkerSize(self: IPoint) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: IPoint) -> XlMarkerStyle

Set: MarkerStyle(self: IPoint) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IPoint) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPoint) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: IPoint) -> XlChartPictureType

Set: PictureType(self: IPoint) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: IPoint) -> int

Set: PictureUnit(self: IPoint) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: IPoint) -> float

Set: PictureUnit2(self: IPoint) = value
"""

    SecondaryPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondaryPlot(self: IPoint) -> bool

Set: SecondaryPlot(self: IPoint) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IPoint) -> bool

Set: Shadow(self: IPoint) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IPoint) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IPoint) -> float

"""



class IPoints(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IPoints) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IPoints, Index: int) -> Point """
        pass

    def _Default(self, Index):
        """ _Default(self: IPoints, Index: int) -> Point """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPoints) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPoints) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPoints) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPoints) -> object

"""



class IProtectedViewWindow:
    # no doc
    def Activate(self):
        """ Activate(self: IProtectedViewWindow) """
        pass

    def Close(self):
        """ Close(self: IProtectedViewWindow) -> bool """
        pass

    def Edit(self, WriteResPassword, UpdateLinks):
        """ Edit(self: IProtectedViewWindow, WriteResPassword: object, UpdateLinks: object) -> Workbook """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IProtectedViewWindow) -> str

Set: Caption(self: IProtectedViewWindow) = value
"""

    EnableResize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableResize(self: IProtectedViewWindow) -> bool

Set: EnableResize(self: IProtectedViewWindow) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IProtectedViewWindow) -> float

Set: Height(self: IProtectedViewWindow) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IProtectedViewWindow) -> float

Set: Left(self: IProtectedViewWindow) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: IProtectedViewWindow) -> str

"""

    SourcePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourcePath(self: IProtectedViewWindow) -> str

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IProtectedViewWindow) -> float

Set: Top(self: IProtectedViewWindow) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IProtectedViewWindow) -> bool

Set: Visible(self: IProtectedViewWindow) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IProtectedViewWindow) -> float

Set: Width(self: IProtectedViewWindow) = value
"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: IProtectedViewWindow) -> XlProtectedViewWindowState

Set: WindowState(self: IProtectedViewWindow) = value
"""

    Workbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbook(self: IProtectedViewWindow) -> Workbook

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IProtectedViewWindow) -> str

"""



class IProtectedViewWindows(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IProtectedViewWindows) -> IEnumerator """
        pass

    def Open(self, Filename, Password, AddToMru, RepairMode):
        """ Open(self: IProtectedViewWindows, Filename: str, Password: object, AddToMru: object, RepairMode: object) -> ProtectedViewWindow """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IProtectedViewWindows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IProtectedViewWindows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IProtectedViewWindows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IProtectedViewWindows) -> object

"""



class IProtection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowDeletingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowDeletingColumns(self: IProtection) -> bool

"""

    AllowDeletingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowDeletingRows(self: IProtection) -> bool

"""

    AllowEditRanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEditRanges(self: IProtection) -> AllowEditRanges

"""

    AllowFiltering = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFiltering(self: IProtection) -> bool

"""

    AllowFormattingCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingCells(self: IProtection) -> bool

"""

    AllowFormattingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingColumns(self: IProtection) -> bool

"""

    AllowFormattingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingRows(self: IProtection) -> bool

"""

    AllowInsertingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingColumns(self: IProtection) -> bool

"""

    AllowInsertingHyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingHyperlinks(self: IProtection) -> bool

"""

    AllowInsertingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingRows(self: IProtection) -> bool

"""

    AllowSorting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowSorting(self: IProtection) -> bool

"""

    AllowUsingPivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowUsingPivotTables(self: IProtection) -> bool

"""



class IPublishObjects(IEnumerable):
    # no doc
    def Add(self, SourceType, Filename, Sheet, Source, HtmlType, DivID, Title):
        """ Add(self: IPublishObjects, SourceType: XlSourceType, Filename: str, Sheet: object, Source: object, HtmlType: object, DivID: object, Title: object) -> PublishObject """
        pass

    def Delete(self):
        """ Delete(self: IPublishObjects) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IPublishObjects) -> IEnumerator """
        pass

    def Publish(self):
        """ Publish(self: IPublishObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IPublishObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IPublishObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IPublishObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IPublishObjects) -> object

"""



class IQueryTables(IEnumerable):
    # no doc
    def Add(self, Connection, Destination, Sql):
        """ Add(self: IQueryTables, Connection: object, Destination: Range, Sql: object) -> QueryTable """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IQueryTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IQueryTables, Index: object) -> QueryTable """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IQueryTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IQueryTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IQueryTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IQueryTables) -> object

"""



class IQuickAnalysis:
    # no doc
    def Hide(self, XlQuickAnalysisMode):
        """ Hide(self: IQuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        pass

    def Show(self, XlQuickAnalysisMode):
        """ Show(self: IQuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IQuickAnalysis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IQuickAnalysis) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IQuickAnalysis) -> object

"""



class IRange(IEnumerable):
    # no doc
    def Activate(self):
        """ Activate(self: IRange) -> object """
        pass

    def AddComment(self, Text):
        """ AddComment(self: IRange, Text: object) -> Comment """
        pass

    def AdvancedFilter(self, Action, CriteriaRange, CopyToRange, Unique):
        """ AdvancedFilter(self: IRange, Action: XlFilterAction, CriteriaRange: object, CopyToRange: object, Unique: object) -> object """
        pass

    def AllocateChanges(self):
        """ AllocateChanges(self: IRange) """
        pass

    def ApplyNames(self, Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast):
        """ ApplyNames(self: IRange, Names: object, IgnoreRelativeAbsolute: object, UseRowColumnNames: object, OmitColumn: object, OmitRow: object, Order: XlApplyNamesOrder, AppendLast: object) -> object """
        pass

    def ApplyOutlineStyles(self):
        """ ApplyOutlineStyles(self: IRange) -> object """
        pass

    def AutoComplete(self, String):
        """ AutoComplete(self: IRange, String: str) -> str """
        pass

    def AutoFill(self, Destination, Type):
        """ AutoFill(self: IRange, Destination: Range, Type: XlAutoFillType) -> object """
        pass

    def AutoFilter(self, Field, Criteria1, Operator, Criteria2, VisibleDropDown):
        """ AutoFilter(self: IRange, Field: object, Criteria1: object, Operator: XlAutoFilterOperator, Criteria2: object, VisibleDropDown: object) -> object """
        pass

    def AutoFit(self):
        """ AutoFit(self: IRange) -> object """
        pass

    def AutoFormat(self, Format, Number, Font, Alignment, Border, Pattern, Width):
        """ AutoFormat(self: IRange, Format: XlRangeAutoFormat, Number: object, Font: object, Alignment: object, Border: object, Pattern: object, Width: object) -> object """
        pass

    def AutoOutline(self):
        """ AutoOutline(self: IRange) -> object """
        pass

    def BorderAround(self, LineStyle, Weight, ColorIndex, Color):
        """ BorderAround(self: IRange, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object) -> object """
        pass

    def BorderAround2(self, LineStyle, Weight, ColorIndex, Color, ThemeColor):
        """ BorderAround2(self: IRange, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object, ThemeColor: object) -> object """
        pass

    def Calculate(self):
        """ Calculate(self: IRange) -> object """
        pass

    def CalculateRowMajorOrder(self):
        """ CalculateRowMajorOrder(self: IRange) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IRange, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Clear(self):
        """ Clear(self: IRange) -> object """
        pass

    def ClearComments(self):
        """ ClearComments(self: IRange) """
        pass

    def ClearContents(self):
        """ ClearContents(self: IRange) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: IRange) -> object """
        pass

    def ClearHyperlinks(self):
        """ ClearHyperlinks(self: IRange) """
        pass

    def ClearNotes(self):
        """ ClearNotes(self: IRange) -> object """
        pass

    def ClearOutline(self):
        """ ClearOutline(self: IRange) -> object """
        pass

    def ColumnDifferences(self, Comparison):
        """ ColumnDifferences(self: IRange, Comparison: object) -> Range """
        pass

    def Consolidate(self, Sources, Function, TopRow, LeftColumn, CreateLinks):
        """ Consolidate(self: IRange, Sources: object, Function: object, TopRow: object, LeftColumn: object, CreateLinks: object) -> object """
        pass

    def Copy(self, Destination):
        """ Copy(self: IRange, Destination: object) -> object """
        pass

    def CopyFromRecordset(self, Data, MaxRows, MaxColumns):
        """ CopyFromRecordset(self: IRange, Data: object, MaxRows: object, MaxColumns: object) -> int """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IRange, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def CreateNames(self, Top, Left, Bottom, Right):
        """ CreateNames(self: IRange, Top: object, Left: object, Bottom: object, Right: object) -> object """
        pass

    def CreatePublisher(self, Edition, Appearance, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU):
        """ CreatePublisher(self: IRange, Edition: object, Appearance: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) -> object """
        pass

    def Cut(self, Destination):
        """ Cut(self: IRange, Destination: object) -> object """
        pass

    def DataSeries(self, Rowcol, Type, Date, Step, Stop, Trend):
        """ DataSeries(self: IRange, Rowcol: object, Type: XlDataSeriesType, Date: XlDataSeriesDate, Step: object, Stop: object, Trend: object) -> object """
        pass

    def Delete(self, Shift):
        """ Delete(self: IRange, Shift: object) -> object """
        pass

    def DialogBox(self):
        """ DialogBox(self: IRange) -> object """
        pass

    def Dirty(self):
        """ Dirty(self: IRange) """
        pass

    def DiscardChanges(self):
        """ DiscardChanges(self: IRange) """
        pass

    def EditionOptions(self, Type, Option, Name, Reference, Appearance, ChartSize, Format):
        """ EditionOptions(self: IRange, Type: XlEditionType, Option: XlEditionOptionsOption, Name: object, Reference: object, Appearance: XlPictureAppearance, ChartSize: XlPictureAppearance, Format: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: IRange, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FillDown(self):
        """ FillDown(self: IRange) -> object """
        pass

    def FillLeft(self):
        """ FillLeft(self: IRange) -> object """
        pass

    def FillRight(self):
        """ FillRight(self: IRange) -> object """
        pass

    def FillUp(self):
        """ FillUp(self: IRange) -> object """
        pass

    def Find(self, What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat):
        """ Find(self: IRange, What: object, After: object, LookIn: object, LookAt: object, SearchOrder: object, SearchDirection: XlSearchDirection, MatchCase: object, MatchByte: object, SearchFormat: object) -> Range """
        pass

    def FindNext(self, After):
        """ FindNext(self: IRange, After: object) -> Range """
        pass

    def FindPrevious(self, After):
        """ FindPrevious(self: IRange, After: object) -> Range """
        pass

    def FlashFill(self):
        """ FlashFill(self: IRange) """
        pass

    def FunctionWizard(self):
        """ FunctionWizard(self: IRange) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IRange) -> IEnumerator """
        pass

    def GoalSeek(self, Goal, ChangingCell):
        """ GoalSeek(self: IRange, Goal: object, ChangingCell: Range) -> bool """
        pass

    def Group(self, Start, End, By, Periods):
        """ Group(self: IRange, Start: object, End: object, By: object, Periods: object) -> object """
        pass

    def Insert(self, Shift, CopyOrigin):
        """ Insert(self: IRange, Shift: object, CopyOrigin: object) -> object """
        pass

    def InsertIndent(self, InsertAmount):
        """ InsertIndent(self: IRange, InsertAmount: int) """
        pass

    def Justify(self):
        """ Justify(self: IRange) -> object """
        pass

    def ListNames(self):
        """ ListNames(self: IRange) -> object """
        pass

    def Merge(self, Across):
        """ Merge(self: IRange, Across: object) """
        pass

    def NavigateArrow(self, TowardPrecedent, ArrowNumber, LinkNumber):
        """ NavigateArrow(self: IRange, TowardPrecedent: object, ArrowNumber: object, LinkNumber: object) -> object """
        pass

    def NoteText(self, Text, Start, Length):
        """ NoteText(self: IRange, Text: object, Start: object, Length: object) -> str """
        pass

    def Parse(self, ParseLine, Destination):
        """ Parse(self: IRange, ParseLine: object, Destination: object) -> object """
        pass

    def PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose):
        """ PasteSpecial(self: IRange, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: IRange, EnableChanges: object) -> object """
        pass

    def RemoveDuplicates(self, Columns, Header):
        """ RemoveDuplicates(self: IRange, Columns: object, Header: XlYesNoGuess) """
        pass

    def RemoveSubtotal(self):
        """ RemoveSubtotal(self: IRange) -> object """
        pass

    def Replace(self, What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat):
        """ Replace(self: IRange, What: object, Replacement: object, LookAt: object, SearchOrder: object, MatchCase: object, MatchByte: object, SearchFormat: object, ReplaceFormat: object) -> bool """
        pass

    def RowDifferences(self, Comparison):
        """ RowDifferences(self: IRange, Comparison: object) -> Range """
        pass

    def Run(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: IRange, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Select(self):
        """ Select(self: IRange) -> object """
        pass

    def SetPhonetic(self):
        """ SetPhonetic(self: IRange) """
        pass

    def Show(self):
        """ Show(self: IRange) -> object """
        pass

    def ShowDependents(self, Remove):
        """ ShowDependents(self: IRange, Remove: object) -> object """
        pass

    def ShowErrors(self):
        """ ShowErrors(self: IRange) -> object """
        pass

    def ShowPrecedents(self, Remove):
        """ ShowPrecedents(self: IRange, Remove: object) -> object """
        pass

    def Sort(self, Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3):
        """ Sort(self: IRange, Key1: object, Order1: XlSortOrder, Key2: object, Type: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, SortMethod: XlSortMethod, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        pass

    def SortSpecial(self, SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, DataOption1, DataOption2, DataOption3):
        """ SortSpecial(self: IRange, SortMethod: XlSortMethod, Key1: object, Order1: XlSortOrder, Type: object, Key2: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        pass

    def Speak(self, SpeakDirection, SpeakFormulas):
        """ Speak(self: IRange, SpeakDirection: object, SpeakFormulas: object) """
        pass

    def SpecialCells(self, Type, Value):
        """ SpecialCells(self: IRange, Type: XlCellType, Value: object) -> Range """
        pass

    def SubscribeTo(self, Edition, Format):
        """ SubscribeTo(self: IRange, Edition: str, Format: XlSubscribeToFormat) -> object """
        pass

    def Subtotal(self, GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData):
        """ Subtotal(self: IRange, GroupBy: int, Function: XlConsolidationFunction, TotalList: object, Replace: object, PageBreaks: object, SummaryBelowData: XlSummaryRow) -> object """
        pass

    def Table(self, RowInput, ColumnInput):
        """ Table(self: IRange, RowInput: object, ColumnInput: object) -> object """
        pass

    def TextToColumns(self, Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers):
        """ TextToColumns(self: IRange, Destination: object, DataType: XlTextParsingType, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: IRange) -> object """
        pass

    def UnMerge(self):
        """ UnMerge(self: IRange) """
        pass

    def _PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose):
        """ _PasteSpecial(self: IRange, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IRange) -> object

Set: AddIndent(self: IRange) = value
"""

    AllowEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEdit(self: IRange) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRange) -> Application

"""

    Areas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Areas(self: IRange) -> Areas

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IRange) -> Borders

"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: IRange) -> Range

"""

    Column = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Column(self: IRange) -> int

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: IRange) -> Range

"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnWidth(self: IRange) -> object

Set: ColumnWidth(self: IRange) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: IRange) -> Comment

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IRange) -> int

"""

    CountLarge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CountLarge(self: IRange) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRange) -> XlCreator

"""

    CurrentArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentArray(self: IRange) -> Range

"""

    CurrentRegion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentRegion(self: IRange) -> Range

"""

    Dependents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dependents(self: IRange) -> Range

"""

    DirectDependents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectDependents(self: IRange) -> Range

"""

    DirectPrecedents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectPrecedents(self: IRange) -> Range

"""

    DisplayFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormat(self: IRange) -> DisplayFormat

"""

    EntireColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntireColumn(self: IRange) -> Range

"""

    EntireRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntireRow(self: IRange) -> Range

"""

    Errors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Errors(self: IRange) -> Errors

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IRange) -> Font

"""

    FormatConditions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormatConditions(self: IRange) -> FormatConditions

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IRange) -> object

Set: Formula(self: IRange) = value
"""

    FormulaArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaArray(self: IRange) -> object

Set: FormulaArray(self: IRange) = value
"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: IRange) -> object

Set: FormulaHidden(self: IRange) = value
"""

    FormulaLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLabel(self: IRange) -> XlFormulaLabel

Set: FormulaLabel(self: IRange) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: IRange) -> object

Set: FormulaLocal(self: IRange) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: IRange) -> object

Set: FormulaR1C1(self: IRange) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: IRange) -> object

Set: FormulaR1C1Local(self: IRange) = value
"""

    HasArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasArray(self: IRange) -> object

"""

    HasFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasFormula(self: IRange) -> object

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IRange) -> object

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: IRange) -> object

Set: Hidden(self: IRange) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IRange) -> object

Set: HorizontalAlignment(self: IRange) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IRange) -> Hyperlinks

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IRange) -> str

Set: ID(self: IRange) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: IRange) -> object

Set: IndentLevel(self: IRange) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IRange) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IRange) -> object

"""

    ListHeaderRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListHeaderRows(self: IRange) -> int

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: IRange) -> ListObject

"""

    LocationInTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocationInTable(self: IRange) -> XlLocationInTable

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IRange) -> object

Set: Locked(self: IRange) = value
"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: IRange) -> str

"""

    MergeArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeArea(self: IRange) -> Range

"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: IRange) -> object

Set: MergeCells(self: IRange) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IRange) -> object

Set: Name(self: IRange) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: IRange) -> Range

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IRange) -> object

Set: NumberFormat(self: IRange) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: IRange) -> object

Set: NumberFormatLocal(self: IRange) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IRange) -> object

Set: Orientation(self: IRange) = value
"""

    OutlineLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OutlineLevel(self: IRange) -> object

Set: OutlineLevel(self: IRange) = value
"""

    PageBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageBreak(self: IRange) -> int

Set: PageBreak(self: IRange) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRange) -> object

"""

    Phonetic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Phonetic(self: IRange) -> Phonetic

"""

    Phonetics = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Phonetics(self: IRange) -> Phonetics

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: IRange) -> PivotCell

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: IRange) -> PivotField

"""

    PivotItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotItem(self: IRange) -> PivotItem

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: IRange) -> PivotTable

"""

    Precedents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Precedents(self: IRange) -> Range

"""

    PrefixCharacter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrefixCharacter(self: IRange) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: IRange) -> Range

"""

    QueryTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTable(self: IRange) -> QueryTable

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IRange) -> int

Set: ReadingOrder(self: IRange) = value
"""

    Row = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Row(self: IRange) -> int

"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowHeight(self: IRange) -> object

Set: RowHeight(self: IRange) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: IRange) -> Range

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: IRange) -> Actions

"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: IRange) -> object

Set: ShowDetail(self: IRange) = value
"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: IRange) -> object

Set: ShrinkToFit(self: IRange) = value
"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: IRange) -> SmartTags

"""

    SoundNote = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoundNote(self: IRange) -> SoundNote

"""

    SparklineGroups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SparklineGroups(self: IRange) -> SparklineGroups

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: IRange) -> object

Set: Style(self: IRange) = value
"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: IRange) -> object

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IRange) -> object

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IRange) -> object

"""

    UseStandardHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardHeight(self: IRange) -> object

Set: UseStandardHeight(self: IRange) = value
"""

    UseStandardWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardWidth(self: IRange) -> object

Set: UseStandardWidth(self: IRange) = value
"""

    Validation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Validation(self: IRange) -> Validation

"""

    Value2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value2(self: IRange) -> object

Set: Value2(self: IRange) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IRange) -> object

Set: VerticalAlignment(self: IRange) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IRange) -> object

"""

    Worksheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheet(self: IRange) -> Worksheet

"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: IRange) -> object

Set: WrapText(self: IRange) = value
"""

    XPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XPath(self: IRange) -> XPath

"""



class IRanges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IRanges) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRanges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IRanges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRanges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRanges) -> object

"""



class IRecentFile:
    # no doc
    def Delete(self):
        """ Delete(self: IRecentFile) """
        pass

    def Open(self):
        """ Open(self: IRecentFile) -> Workbook """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRecentFile) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRecentFile) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IRecentFile) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IRecentFile) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRecentFile) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IRecentFile) -> str

"""



class IRecentFiles(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IRecentFiles, Name: str) -> RecentFile """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IRecentFiles) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRecentFiles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IRecentFiles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRecentFiles) -> XlCreator

"""

    Maximum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Maximum(self: IRecentFiles) -> int

Set: Maximum(self: IRecentFiles) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRecentFiles) -> object

"""



class IRectangle:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IRectangle) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IRectangle, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IRectangle) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IRectangle, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IRectangle) -> object """
        pass

    def Delete(self):
        """ Delete(self: IRectangle) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IRectangle) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IRectangle, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IRectangle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IRectangle) -> bool

Set: AddIndent(self: IRectangle) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRectangle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IRectangle) -> object

Set: AutoScaleFont(self: IRectangle) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IRectangle) -> bool

Set: AutoSize(self: IRectangle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IRectangle) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IRectangle) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IRectangle) -> str

Set: Caption(self: IRectangle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRectangle) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IRectangle) -> bool

Set: Enabled(self: IRectangle) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IRectangle) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IRectangle) -> str

Set: Formula(self: IRectangle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IRectangle) -> float

Set: Height(self: IRectangle) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IRectangle) -> object

Set: HorizontalAlignment(self: IRectangle) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IRectangle) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IRectangle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IRectangle) -> float

Set: Left(self: IRectangle) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IRectangle) -> bool

Set: Locked(self: IRectangle) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IRectangle) -> bool

Set: LockedText(self: IRectangle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IRectangle) -> str

Set: Name(self: IRectangle) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IRectangle) -> str

Set: OnAction(self: IRectangle) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IRectangle) -> object

Set: Orientation(self: IRectangle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRectangle) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IRectangle) -> object

Set: Placement(self: IRectangle) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IRectangle) -> bool

Set: PrintObject(self: IRectangle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IRectangle) -> int

Set: ReadingOrder(self: IRectangle) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IRectangle) -> bool

Set: RoundedCorners(self: IRectangle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IRectangle) -> bool

Set: Shadow(self: IRectangle) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IRectangle) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IRectangle) -> str

Set: Text(self: IRectangle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IRectangle) -> float

Set: Top(self: IRectangle) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IRectangle) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IRectangle) -> object

Set: VerticalAlignment(self: IRectangle) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IRectangle) -> bool

Set: Visible(self: IRectangle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IRectangle) -> float

Set: Width(self: IRectangle) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IRectangle) -> int

"""



class IRectangles(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IRectangles, Left: float, Top: float, Width: float, Height: float) -> Rectangle """
        pass

    def BringToFront(self):
        """ BringToFront(self: IRectangles) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: IRectangles, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: IRectangles) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IRectangles, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IRectangles) -> object """
        pass

    def Delete(self):
        """ Delete(self: IRectangles) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IRectangles) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IRectangles) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IRectangles) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IRectangles, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IRectangles, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IRectangles) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IRectangles) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IRectangles) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IRectangles) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IRectangles) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IRectangles) -> bool

Set: AddIndent(self: IRectangles) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRectangles) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: IRectangles) -> object

Set: AutoScaleFont(self: IRectangles) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: IRectangles) -> bool

Set: AutoSize(self: IRectangles) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IRectangles) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IRectangles) -> str

Set: Caption(self: IRectangles) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IRectangles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRectangles) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IRectangles) -> bool

Set: Enabled(self: IRectangles) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IRectangles) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: IRectangles) -> str

Set: Formula(self: IRectangles) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IRectangles) -> float

Set: Height(self: IRectangles) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IRectangles) -> object

Set: HorizontalAlignment(self: IRectangles) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IRectangles) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IRectangles) -> float

Set: Left(self: IRectangles) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IRectangles) -> bool

Set: Locked(self: IRectangles) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: IRectangles) -> bool

Set: LockedText(self: IRectangles) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IRectangles) -> str

Set: OnAction(self: IRectangles) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IRectangles) -> object

Set: Orientation(self: IRectangles) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRectangles) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IRectangles) -> object

Set: Placement(self: IRectangles) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IRectangles) -> bool

Set: PrintObject(self: IRectangles) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IRectangles) -> int

Set: ReadingOrder(self: IRectangles) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: IRectangles) -> bool

Set: RoundedCorners(self: IRectangles) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IRectangles) -> bool

Set: Shadow(self: IRectangles) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IRectangles) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: IRectangles) -> str

Set: Text(self: IRectangles) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IRectangles) -> float

Set: Top(self: IRectangles) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IRectangles) -> object

Set: VerticalAlignment(self: IRectangles) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IRectangles) -> bool

Set: Visible(self: IRectangles) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IRectangles) -> float

Set: Width(self: IRectangles) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IRectangles) -> int

"""



class IRectangularGradient:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRectangularGradient) -> Application

"""

    ColorStops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorStops(self: IRectangularGradient) -> ColorStops

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRectangularGradient) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRectangularGradient) -> object

"""

    RectangleBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleBottom(self: IRectangularGradient) -> float

Set: RectangleBottom(self: IRectangularGradient) = value
"""

    RectangleLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleLeft(self: IRectangularGradient) -> float

Set: RectangleLeft(self: IRectangularGradient) = value
"""

    RectangleRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleRight(self: IRectangularGradient) -> float

Set: RectangleRight(self: IRectangularGradient) = value
"""

    RectangleTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleTop(self: IRectangularGradient) -> float

Set: RectangleTop(self: IRectangularGradient) = value
"""



class IRefreshEvents:
    # no doc
    def AfterRefresh(self, Success):
        """ AfterRefresh(self: IRefreshEvents, Success: bool) """
        pass

    def BeforeRefresh(self, Cancel):
        """ BeforeRefresh(self: IRefreshEvents) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IResearch:
    # no doc
    def IsResearchService(self, ServiceID):
        """ IsResearchService(self: IResearch, ServiceID: str) -> bool """
        pass

    def Query(self, ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery):
        """ Query(self: IResearch, ServiceID: str, QueryString: object, QueryLanguage: object, UseSelection: object, LaunchQuery: object) -> object """
        pass

    def SetLanguagePair(self, LanguageFrom, LanguageTo):
        """ SetLanguagePair(self: IResearch, LanguageFrom: int, LanguageTo: int) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IResearch) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IResearch) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IResearch) -> object

"""



class IRoutingSlip:
    # no doc
    def Reset(self):
        """ Reset(self: IRoutingSlip) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IRoutingSlip) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IRoutingSlip) -> XlCreator

"""

    Delivery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Delivery(self: IRoutingSlip) -> XlRoutingSlipDelivery

Set: Delivery(self: IRoutingSlip) = value
"""

    Message = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Message(self: IRoutingSlip) -> object

Set: Message(self: IRoutingSlip) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IRoutingSlip) -> object

"""

    ReturnWhenDone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReturnWhenDone(self: IRoutingSlip) -> bool

Set: ReturnWhenDone(self: IRoutingSlip) = value
"""

    Status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Status(self: IRoutingSlip) -> XlRoutingSlipStatus

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: IRoutingSlip) -> object

Set: Subject(self: IRoutingSlip) = value
"""

    TrackStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrackStatus(self: IRoutingSlip) -> bool

Set: TrackStatus(self: IRoutingSlip) = value
"""



class IRTD:
    # no doc
    def RefreshData(self):
        """ RefreshData(self: IRTD) """
        pass

    def RestartServers(self):
        """ RestartServers(self: IRTD) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ThrottleInterval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThrottleInterval(self: IRTD) -> int

Set: ThrottleInterval(self: IRTD) = value
"""



class IRtdServer:
    # no doc
    def ConnectData(self, TopicID, Strings, GetNewValues):
        """ ConnectData(self: IRtdServer, TopicID: int, Strings: Array) -> (object, Array, bool) """
        pass

    def DisconnectData(self, TopicID):
        """ DisconnectData(self: IRtdServer, TopicID: int) """
        pass

    def Heartbeat(self):
        """ Heartbeat(self: IRtdServer) -> int """
        pass

    def RefreshData(self, TopicCount):
        """ RefreshData(self: IRtdServer) -> (Array, int) """
        pass

    def ServerStart(self, CallbackObject):
        """ ServerStart(self: IRtdServer, CallbackObject: IRTDUpdateEvent) -> int """
        pass

    def ServerTerminate(self):
        """ ServerTerminate(self: IRtdServer) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IRTDUpdateEvent:
    # no doc
    def Disconnect(self):
        """ Disconnect(self: IRTDUpdateEvent) """
        pass

    def UpdateNotify(self):
        """ UpdateNotify(self: IRTDUpdateEvent) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HeartbeatInterval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeartbeatInterval(self: IRTDUpdateEvent) -> int

Set: HeartbeatInterval(self: IRTDUpdateEvent) = value
"""



class IScenario:
    # no doc
    def ChangeScenario(self, ChangingCells, Values):
        """ ChangeScenario(self: IScenario, ChangingCells: object, Values: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: IScenario) -> object """
        pass

    def Show(self):
        """ Show(self: IScenario) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IScenario) -> Application

"""

    ChangingCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangingCells(self: IScenario) -> Range

"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: IScenario) -> str

Set: Comment(self: IScenario) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IScenario) -> XlCreator

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: IScenario) -> bool

Set: Hidden(self: IScenario) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IScenario) -> int

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IScenario) -> bool

Set: Locked(self: IScenario) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IScenario) -> str

Set: Name(self: IScenario) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IScenario) -> object

"""



class IScenarios(IEnumerable):
    # no doc
    def Add(self, Name, ChangingCells, Values, Comment, Locked, Hidden):
        """ Add(self: IScenarios, Name: str, ChangingCells: object, Values: object, Comment: object, Locked: object, Hidden: object) -> Scenario """
        pass

    def CreateSummary(self, ReportType, ResultCells):
        """ CreateSummary(self: IScenarios, ReportType: XlSummaryReportType, ResultCells: object) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IScenarios) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IScenarios, Index: object) -> Scenario """
        pass

    def Merge(self, Source):
        """ Merge(self: IScenarios, Source: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IScenarios) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IScenarios) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IScenarios) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IScenarios) -> object

"""



class IScrollBar:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: IScrollBar) -> object """
        pass

    def Copy(self):
        """ Copy(self: IScrollBar) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IScrollBar, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IScrollBar) -> object """
        pass

    def Delete(self):
        """ Delete(self: IScrollBar) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IScrollBar) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IScrollBar, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IScrollBar) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IScrollBar) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IScrollBar) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IScrollBar) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IScrollBar) -> bool

Set: Display3DShading(self: IScrollBar) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IScrollBar) -> bool

Set: Enabled(self: IScrollBar) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IScrollBar) -> float

Set: Height(self: IScrollBar) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IScrollBar) -> int

"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: IScrollBar) -> int

Set: LargeChange(self: IScrollBar) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IScrollBar) -> float

Set: Left(self: IScrollBar) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IScrollBar) -> str

Set: LinkedCell(self: IScrollBar) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IScrollBar) -> bool

Set: Locked(self: IScrollBar) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: IScrollBar) -> int

Set: Max(self: IScrollBar) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: IScrollBar) -> int

Set: Min(self: IScrollBar) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IScrollBar) -> str

Set: Name(self: IScrollBar) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IScrollBar) -> str

Set: OnAction(self: IScrollBar) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IScrollBar) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IScrollBar) -> object

Set: Placement(self: IScrollBar) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IScrollBar) -> bool

Set: PrintObject(self: IScrollBar) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IScrollBar) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: IScrollBar) -> int

Set: SmallChange(self: IScrollBar) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IScrollBar) -> float

Set: Top(self: IScrollBar) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IScrollBar) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IScrollBar) -> int

Set: Value(self: IScrollBar) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IScrollBar) -> bool

Set: Visible(self: IScrollBar) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IScrollBar) -> float

Set: Width(self: IScrollBar) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IScrollBar) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IScrollBar) -> int

Set: _Default(self: IScrollBar) = value
"""



class IScrollBars(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: IScrollBars, Left: float, Top: float, Width: float, Height: float) -> ScrollBar """
        pass

    def BringToFront(self):
        """ BringToFront(self: IScrollBars) -> object """
        pass

    def Copy(self):
        """ Copy(self: IScrollBars) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IScrollBars, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: IScrollBars) -> object """
        pass

    def Delete(self):
        """ Delete(self: IScrollBars) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: IScrollBars) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IScrollBars) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IScrollBars) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: IScrollBars, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: IScrollBars, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: IScrollBars) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: IScrollBars) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: IScrollBars) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: IScrollBars) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: IScrollBars) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IScrollBars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IScrollBars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IScrollBars) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: IScrollBars) -> bool

Set: Display3DShading(self: IScrollBars) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IScrollBars) -> bool

Set: Enabled(self: IScrollBars) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IScrollBars) -> float

Set: Height(self: IScrollBars) = value
"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: IScrollBars) -> int

Set: LargeChange(self: IScrollBars) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IScrollBars) -> float

Set: Left(self: IScrollBars) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: IScrollBars) -> str

Set: LinkedCell(self: IScrollBars) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IScrollBars) -> bool

Set: Locked(self: IScrollBars) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: IScrollBars) -> int

Set: Max(self: IScrollBars) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: IScrollBars) -> int

Set: Min(self: IScrollBars) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IScrollBars) -> str

Set: OnAction(self: IScrollBars) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IScrollBars) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IScrollBars) -> object

Set: Placement(self: IScrollBars) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: IScrollBars) -> bool

Set: PrintObject(self: IScrollBars) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: IScrollBars) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: IScrollBars) -> int

Set: SmallChange(self: IScrollBars) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IScrollBars) -> float

Set: Top(self: IScrollBars) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IScrollBars) -> int

Set: Value(self: IScrollBars) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IScrollBars) -> bool

Set: Visible(self: IScrollBars) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IScrollBars) -> float

Set: Width(self: IScrollBars) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: IScrollBars) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IScrollBars) -> int

Set: _Default(self: IScrollBars) = value
"""



class ISeries:
    # no doc
    def ApplyCustomType(self, ChartType):
        """ ApplyCustomType(self: ISeries, ChartType: XlChartType) """
        pass

    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: ISeries, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: ISeries) -> object """
        pass

    def Copy(self):
        """ Copy(self: ISeries) -> object """
        pass

    def DataLabels(self, Index):
        """ DataLabels(self: ISeries, Index: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: ISeries) -> object """
        pass

    def ErrorBar(self, Direction, Include, Type, Amount, MinusValues):
        """ ErrorBar(self: ISeries, Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount: object, MinusValues: object) -> object """
        pass

    def Paste(self):
        """ Paste(self: ISeries) -> object """
        pass

    def Points(self, Index):
        """ Points(self: ISeries, Index: object) -> object """
        pass

    def Select(self):
        """ Select(self: ISeries) -> object """
        pass

    def Trendlines(self, Index):
        """ Trendlines(self: ISeries, Index: object) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: ISeries, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISeries) -> Application

"""

    ApplyPictToEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToEnd(self: ISeries) -> bool

Set: ApplyPictToEnd(self: ISeries) = value
"""

    ApplyPictToFront = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToFront(self: ISeries) -> bool

Set: ApplyPictToFront(self: ISeries) = value
"""

    ApplyPictToSides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToSides(self: ISeries) -> bool

Set: ApplyPictToSides(self: ISeries) = value
"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: ISeries) -> XlAxisGroup

Set: AxisGroup(self: ISeries) = value
"""

    BarShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarShape(self: ISeries) -> XlBarShape

Set: BarShape(self: ISeries) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ISeries) -> Border

"""

    BubbleSizes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BubbleSizes(self: ISeries) -> object

Set: BubbleSizes(self: ISeries) = value
"""

    ChartType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartType(self: ISeries) -> XlChartType

Set: ChartType(self: ISeries) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISeries) -> XlCreator

"""

    ErrorBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorBars(self: ISeries) -> ErrorBars

"""

    Explosion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explosion(self: ISeries) -> int

Set: Explosion(self: ISeries) = value
"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ISeries) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ISeries) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ISeries) -> str

Set: Formula(self: ISeries) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: ISeries) -> str

Set: FormulaLocal(self: ISeries) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: ISeries) -> str

Set: FormulaR1C1(self: ISeries) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: ISeries) -> str

Set: FormulaR1C1Local(self: ISeries) = value
"""

    Has3DEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DEffect(self: ISeries) -> bool

Set: Has3DEffect(self: ISeries) = value
"""

    HasDataLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataLabels(self: ISeries) -> bool

Set: HasDataLabels(self: ISeries) = value
"""

    HasErrorBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasErrorBars(self: ISeries) -> bool

Set: HasErrorBars(self: ISeries) = value
"""

    HasLeaderLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLeaderLines(self: ISeries) -> bool

Set: HasLeaderLines(self: ISeries) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ISeries) -> Interior

"""

    InvertColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertColor(self: ISeries) -> int

Set: InvertColor(self: ISeries) = value
"""

    InvertColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertColorIndex(self: ISeries) -> int

Set: InvertColorIndex(self: ISeries) = value
"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: ISeries) -> bool

Set: InvertIfNegative(self: ISeries) = value
"""

    IsFiltered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsFiltered(self: ISeries) -> bool

Set: IsFiltered(self: ISeries) = value
"""

    LeaderLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLines(self: ISeries) -> LeaderLines

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: ISeries) -> int

Set: MarkerBackgroundColor(self: ISeries) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: ISeries) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: ISeries) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: ISeries) -> int

Set: MarkerForegroundColor(self: ISeries) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: ISeries) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: ISeries) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: ISeries) -> int

Set: MarkerSize(self: ISeries) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: ISeries) -> XlMarkerStyle

Set: MarkerStyle(self: ISeries) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISeries) -> str

Set: Name(self: ISeries) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISeries) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: ISeries) -> XlChartPictureType

Set: PictureType(self: ISeries) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: ISeries) -> int

Set: PictureUnit(self: ISeries) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: ISeries) -> float

Set: PictureUnit2(self: ISeries) = value
"""

    PlotColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotColorIndex(self: ISeries) -> int

"""

    PlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrder(self: ISeries) -> int

Set: PlotOrder(self: ISeries) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ISeries) -> bool

Set: Shadow(self: ISeries) = value
"""

    Smooth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smooth(self: ISeries) -> bool

Set: Smooth(self: ISeries) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ISeries) -> int

Set: Type(self: ISeries) = value
"""

    Values = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Values(self: ISeries) -> object

Set: Values(self: ISeries) = value
"""

    XValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XValues(self: ISeries) -> object

Set: XValues(self: ISeries) = value
"""



class ISeriesCollection(IEnumerable):
    # no doc
    def Add(self, Source, Rowcol, SeriesLabels, CategoryLabels, Replace):
        """ Add(self: ISeriesCollection, Source: object, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object) -> Series """
        pass

    def Extend(self, Source, Rowcol, CategoryLabels):
        """ Extend(self: ISeriesCollection, Source: object, Rowcol: object, CategoryLabels: object) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISeriesCollection) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ISeriesCollection, Index: object) -> Series """
        pass

    def NewSeries(self):
        """ NewSeries(self: ISeriesCollection) -> Series """
        pass

    def Paste(self, Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries):
        """ Paste(self: ISeriesCollection, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object, NewSeries: object) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: ISeriesCollection, Index: object) -> Series """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISeriesCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISeriesCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISeriesCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISeriesCollection) -> object

"""



class ISeriesLines:
    # no doc
    def Delete(self):
        """ Delete(self: ISeriesLines) -> object """
        pass

    def Select(self):
        """ Select(self: ISeriesLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISeriesLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ISeriesLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISeriesLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ISeriesLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISeriesLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISeriesLines) -> object

"""



class IServerViewableItems(IEnumerable):
    # no doc
    def Add(self, Obj):
        """ Add(self: IServerViewableItems, Obj: object) -> object """
        pass

    def Delete(self, Index):
        """ Delete(self: IServerViewableItems, Index: object) """
        pass

    def DeleteAll(self):
        """ DeleteAll(self: IServerViewableItems) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IServerViewableItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IServerViewableItems, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IServerViewableItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IServerViewableItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IServerViewableItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IServerViewableItems) -> object

"""



class IShape:
    # no doc
    def Apply(self):
        """ Apply(self: IShape) """
        pass

    def CanvasCropBottom(self, Increment):
        """ CanvasCropBottom(self: IShape, Increment: Single) """
        pass

    def CanvasCropLeft(self, Increment):
        """ CanvasCropLeft(self: IShape, Increment: Single) """
        pass

    def CanvasCropRight(self, Increment):
        """ CanvasCropRight(self: IShape, Increment: Single) """
        pass

    def CanvasCropTop(self, Increment):
        """ CanvasCropTop(self: IShape, Increment: Single) """
        pass

    def Copy(self):
        """ Copy(self: IShape) """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: IShape, Appearance: object, Format: object) """
        pass

    def Cut(self):
        """ Cut(self: IShape) """
        pass

    def Delete(self):
        """ Delete(self: IShape) """
        pass

    def Duplicate(self):
        """ Duplicate(self: IShape) -> Shape """
        pass

    def Flip(self, FlipCmd):
        """ Flip(self: IShape, FlipCmd: MsoFlipCmd) """
        pass

    def IncrementLeft(self, Increment):
        """ IncrementLeft(self: IShape, Increment: Single) """
        pass

    def IncrementRotation(self, Increment):
        """ IncrementRotation(self: IShape, Increment: Single) """
        pass

    def IncrementTop(self, Increment):
        """ IncrementTop(self: IShape, Increment: Single) """
        pass

    def PickUp(self):
        """ PickUp(self: IShape) """
        pass

    def RerouteConnections(self):
        """ RerouteConnections(self: IShape) """
        pass

    def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleHeight(self: IShape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleWidth(self: IShape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IShape, Replace: object) """
        pass

    def SetShapesDefaultProperties(self):
        """ SetShapesDefaultProperties(self: IShape) """
        pass

    def Ungroup(self):
        """ Ungroup(self: IShape) -> ShapeRange """
        pass

    def ZOrder(self, ZOrderCmd):
        """ ZOrder(self: IShape, ZOrderCmd: MsoZOrderCmd) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: IShape) -> Adjustments

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: IShape) -> str

Set: AlternativeText(self: IShape) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IShape) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: IShape) -> MsoAutoShapeType

Set: AutoShapeType(self: IShape) = value
"""

    BackgroundStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundStyle(self: IShape) -> MsoBackgroundStyleIndex

Set: BackgroundStyle(self: IShape) = value
"""

    BlackWhiteMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackWhiteMode(self: IShape) -> MsoBlackWhiteMode

Set: BlackWhiteMode(self: IShape) = value
"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: IShape) -> Range

"""

    Callout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Callout(self: IShape) -> CalloutFormat

"""

    CanvasItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanvasItems(self: IShape) -> CanvasShapes

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: IShape) -> Chart

"""

    Child = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Child(self: IShape) -> MsoTriState

"""

    ConnectionSiteCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionSiteCount(self: IShape) -> int

"""

    Connector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connector(self: IShape) -> MsoTriState

"""

    ConnectorFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectorFormat(self: IShape) -> ConnectorFormat

"""

    ControlFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlFormat(self: IShape) -> ControlFormat

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IShape) -> XlCreator

"""

    Diagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diagram(self: IShape) -> Diagram

"""

    DiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DiagramNode(self: IShape) -> DiagramNode

"""

    DrawingObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingObject(self: IShape) -> object

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IShape) -> FillFormat

"""

    FormControlType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormControlType(self: IShape) -> XlFormControl

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: IShape) -> GlowFormat

"""

    GroupItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupItems(self: IShape) -> GroupShapes

"""

    HasChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasChart(self: IShape) -> MsoTriState

"""

    HasDiagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagram(self: IShape) -> MsoTriState

"""

    HasDiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagramNode(self: IShape) -> MsoTriState

"""

    HasSmartArt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSmartArt(self: IShape) -> MsoTriState

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IShape) -> Single

Set: Height(self: IShape) = value
"""

    HorizontalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalFlip(self: IShape) -> MsoTriState

"""

    Hyperlink = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlink(self: IShape) -> Hyperlink

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IShape) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IShape) -> Single

Set: Left(self: IShape) = value
"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: IShape) -> LineFormat

"""

    LinkFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkFormat(self: IShape) -> LinkFormat

"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: IShape) -> MsoTriState

Set: LockAspectRatio(self: IShape) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IShape) -> bool

Set: Locked(self: IShape) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IShape) -> str

Set: Name(self: IShape) = value
"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: IShape) -> ShapeNodes

"""

    OLEFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEFormat(self: IShape) -> OLEFormat

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IShape) -> str

Set: OnAction(self: IShape) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IShape) -> object

"""

    ParentGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentGroup(self: IShape) -> Shape

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: IShape) -> PictureFormat

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: IShape) -> XlPlacement

Set: Placement(self: IShape) = value
"""

    Reflection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reflection(self: IShape) -> ReflectionFormat

"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IShape) -> Single

Set: Rotation(self: IShape) = value
"""

    Script = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Script(self: IShape) -> Script

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IShape) -> ShadowFormat

"""

    ShapeStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeStyle(self: IShape) -> MsoShapeStyleIndex

Set: ShapeStyle(self: IShape) = value
"""

    SmartArt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArt(self: IShape) -> SmartArt

"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: IShape) -> SoftEdgeFormat

"""

    TextEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextEffect(self: IShape) -> TextEffectFormat

"""

    TextFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame(self: IShape) -> TextFrame

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: IShape) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: IShape) -> ThreeDFormat

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: IShape) -> str

Set: Title(self: IShape) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IShape) -> Single

Set: Top(self: IShape) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: IShape) -> Range

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IShape) -> MsoShapeType

"""

    VerticalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalFlip(self: IShape) -> MsoTriState

"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: IShape) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IShape) -> MsoTriState

Set: Visible(self: IShape) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IShape) -> Single

Set: Width(self: IShape) = value
"""

    ZOrderPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrderPosition(self: IShape) -> int

"""



class IShapeRange(IEnumerable):
    # no doc
    def Align(self, AlignCmd, RelativeTo):
        """ Align(self: IShapeRange, AlignCmd: MsoAlignCmd, RelativeTo: MsoTriState) """
        pass

    def Apply(self):
        """ Apply(self: IShapeRange) """
        pass

    def CanvasCropBottom(self, Increment):
        """ CanvasCropBottom(self: IShapeRange, Increment: Single) """
        pass

    def CanvasCropLeft(self, Increment):
        """ CanvasCropLeft(self: IShapeRange, Increment: Single) """
        pass

    def CanvasCropRight(self, Increment):
        """ CanvasCropRight(self: IShapeRange, Increment: Single) """
        pass

    def CanvasCropTop(self, Increment):
        """ CanvasCropTop(self: IShapeRange, Increment: Single) """
        pass

    def Delete(self):
        """ Delete(self: IShapeRange) """
        pass

    def Distribute(self, DistributeCmd, RelativeTo):
        """ Distribute(self: IShapeRange, DistributeCmd: MsoDistributeCmd, RelativeTo: MsoTriState) """
        pass

    def Duplicate(self):
        """ Duplicate(self: IShapeRange) -> ShapeRange """
        pass

    def Flip(self, FlipCmd):
        """ Flip(self: IShapeRange, FlipCmd: MsoFlipCmd) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IShapeRange) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: IShapeRange) -> Shape """
        pass

    def IncrementLeft(self, Increment):
        """ IncrementLeft(self: IShapeRange, Increment: Single) """
        pass

    def IncrementRotation(self, Increment):
        """ IncrementRotation(self: IShapeRange, Increment: Single) """
        pass

    def IncrementTop(self, Increment):
        """ IncrementTop(self: IShapeRange, Increment: Single) """
        pass

    def Item(self, Index):
        """ Item(self: IShapeRange, Index: object) -> Shape """
        pass

    def PickUp(self):
        """ PickUp(self: IShapeRange) """
        pass

    def Regroup(self):
        """ Regroup(self: IShapeRange) -> Shape """
        pass

    def RerouteConnections(self):
        """ RerouteConnections(self: IShapeRange) """
        pass

    def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleHeight(self: IShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleWidth(self: IShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IShapeRange, Replace: object) """
        pass

    def SetShapesDefaultProperties(self):
        """ SetShapesDefaultProperties(self: IShapeRange) """
        pass

    def Ungroup(self):
        """ Ungroup(self: IShapeRange) -> ShapeRange """
        pass

    def ZOrder(self, ZOrderCmd):
        """ ZOrder(self: IShapeRange, ZOrderCmd: MsoZOrderCmd) """
        pass

    def _Default(self, Index):
        """ _Default(self: IShapeRange, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: IShapeRange) -> Adjustments

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: IShapeRange) -> str

Set: AlternativeText(self: IShapeRange) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IShapeRange) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: IShapeRange) -> MsoAutoShapeType

Set: AutoShapeType(self: IShapeRange) = value
"""

    BackgroundStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundStyle(self: IShapeRange) -> MsoBackgroundStyleIndex

Set: BackgroundStyle(self: IShapeRange) = value
"""

    BlackWhiteMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackWhiteMode(self: IShapeRange) -> MsoBlackWhiteMode

Set: BlackWhiteMode(self: IShapeRange) = value
"""

    Callout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Callout(self: IShapeRange) -> CalloutFormat

"""

    CanvasItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanvasItems(self: IShapeRange) -> CanvasShapes

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: IShapeRange) -> Chart

"""

    Child = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Child(self: IShapeRange) -> MsoTriState

"""

    ConnectionSiteCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionSiteCount(self: IShapeRange) -> int

"""

    Connector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connector(self: IShapeRange) -> MsoTriState

"""

    ConnectorFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectorFormat(self: IShapeRange) -> ConnectorFormat

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IShapeRange) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IShapeRange) -> XlCreator

"""

    Diagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diagram(self: IShapeRange) -> Diagram

"""

    DiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DiagramNode(self: IShapeRange) -> DiagramNode

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IShapeRange) -> FillFormat

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: IShapeRange) -> GlowFormat

"""

    GroupItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupItems(self: IShapeRange) -> GroupShapes

"""

    HasChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasChart(self: IShapeRange) -> MsoTriState

"""

    HasDiagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagram(self: IShapeRange) -> MsoTriState

"""

    HasDiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagramNode(self: IShapeRange) -> MsoTriState

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IShapeRange) -> Single

Set: Height(self: IShapeRange) = value
"""

    HorizontalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalFlip(self: IShapeRange) -> MsoTriState

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IShapeRange) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IShapeRange) -> Single

Set: Left(self: IShapeRange) = value
"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: IShapeRange) -> LineFormat

"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: IShapeRange) -> MsoTriState

Set: LockAspectRatio(self: IShapeRange) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IShapeRange) -> str

Set: Name(self: IShapeRange) = value
"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: IShapeRange) -> ShapeNodes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IShapeRange) -> object

"""

    ParentGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentGroup(self: IShapeRange) -> Shape

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: IShapeRange) -> PictureFormat

"""

    Reflection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reflection(self: IShapeRange) -> ReflectionFormat

"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IShapeRange) -> Single

Set: Rotation(self: IShapeRange) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: IShapeRange) -> ShadowFormat

"""

    ShapeStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeStyle(self: IShapeRange) -> MsoShapeStyleIndex

Set: ShapeStyle(self: IShapeRange) = value
"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: IShapeRange) -> SoftEdgeFormat

"""

    TextEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextEffect(self: IShapeRange) -> TextEffectFormat

"""

    TextFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame(self: IShapeRange) -> TextFrame

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: IShapeRange) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: IShapeRange) -> ThreeDFormat

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: IShapeRange) -> str

Set: Title(self: IShapeRange) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IShapeRange) -> Single

Set: Top(self: IShapeRange) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IShapeRange) -> MsoShapeType

"""

    VerticalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalFlip(self: IShapeRange) -> MsoTriState

"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: IShapeRange) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IShapeRange) -> MsoTriState

Set: Visible(self: IShapeRange) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IShapeRange) -> Single

Set: Width(self: IShapeRange) = value
"""

    ZOrderPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrderPosition(self: IShapeRange) -> int

"""



class IShapes(IEnumerable):
    # no doc
    def AddCallout(self, Type, Left, Top, Width, Height):
        """ AddCallout(self: IShapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddCanvas(self, Left, Top, Width, Height):
        """ AddCanvas(self: IShapes, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddChart(self, XlChartType, Left, Top, Width, Height):
        """ AddChart(self: IShapes, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddChart2(self, Style, XlChartType, Left, Top, Width, Height, NewLayout):
        """ AddChart2(self: IShapes, Style: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object, NewLayout: object) -> Shape """
        pass

    def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
        """ AddConnector(self: IShapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        pass

    def AddCurve(self, SafeArrayOfPoints):
        """ AddCurve(self: IShapes, SafeArrayOfPoints: object) -> Shape """
        pass

    def AddDiagram(self, Type, Left, Top, Width, Height):
        """ AddDiagram(self: IShapes, Type: MsoDiagramType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddFormControl(self, Type, Left, Top, Width, Height):
        """ AddFormControl(self: IShapes, Type: XlFormControl, Left: int, Top: int, Width: int, Height: int) -> Shape """
        pass

    def AddLabel(self, Orientation, Left, Top, Width, Height):
        """ AddLabel(self: IShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddLine(self, BeginX, BeginY, EndX, EndY):
        """ AddLine(self: IShapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        pass

    def AddOLEObject(self, ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height):
        """ AddOLEObject(self: IShapes, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddPicture(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
        """ AddPicture(self: IShapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddPicture2(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Compress):
        """ AddPicture2(self: IShapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single, Compress: MsoPictureCompress) -> Shape """
        pass

    def AddPolyline(self, SafeArrayOfPoints):
        """ AddPolyline(self: IShapes, SafeArrayOfPoints: object) -> Shape """
        pass

    def AddShape(self, Type, Left, Top, Width, Height):
        """ AddShape(self: IShapes, Type: MsoAutoShapeType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddSmartArt(self, Layout, Left, Top, Width, Height):
        """ AddSmartArt(self: IShapes, Layout: SmartArtLayout, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddTextbox(self, Orientation, Left, Top, Width, Height):
        """ AddTextbox(self: IShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
        """ AddTextEffect(self: IShapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single) -> Shape """
        pass

    def BuildFreeform(self, EditingType, X1, Y1):
        """ BuildFreeform(self: IShapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IShapes) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IShapes, Index: object) -> Shape """
        pass

    def SelectAll(self):
        """ SelectAll(self: IShapes) """
        pass

    def _Default(self, Index):
        """ _Default(self: IShapes, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IShapes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IShapes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IShapes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IShapes) -> object

"""



class ISheetViews(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ISheetViews) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISheetViews) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISheetViews) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISheetViews) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISheetViews) -> object

"""



class ISlicer:
    # no doc
    def Copy(self):
        """ Copy(self: ISlicer) """
        pass

    def Cut(self):
        """ Cut(self: ISlicer) """
        pass

    def Delete(self):
        """ Delete(self: ISlicer) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveItem(self: ISlicer) -> SlicerItem

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicer) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ISlicer) -> str

Set: Caption(self: ISlicer) = value
"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnWidth(self: ISlicer) -> float

Set: ColumnWidth(self: ISlicer) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicer) -> XlCreator

"""

    DisableMoveResizeUI = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisableMoveResizeUI(self: ISlicer) -> bool

Set: DisableMoveResizeUI(self: ISlicer) = value
"""

    DisplayHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeader(self: ISlicer) -> bool

Set: DisplayHeader(self: ISlicer) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ISlicer) -> float

Set: Height(self: ISlicer) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ISlicer) -> float

Set: Left(self: ISlicer) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ISlicer) -> bool

Set: Locked(self: ISlicer) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISlicer) -> str

Set: Name(self: ISlicer) = value
"""

    NumberOfColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfColumns(self: ISlicer) -> int

Set: NumberOfColumns(self: ISlicer) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicer) -> object

"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowHeight(self: ISlicer) -> float

Set: RowHeight(self: ISlicer) = value
"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: ISlicer) -> Shape

"""

    SlicerCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCache(self: ISlicer) -> SlicerCache

"""

    SlicerCacheLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheLevel(self: ISlicer) -> SlicerCacheLevel

"""

    SlicerCacheType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheType(self: ISlicer) -> XlSlicerCacheType

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: ISlicer) -> object

Set: Style(self: ISlicer) = value
"""

    TimelineViewState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimelineViewState(self: ISlicer) -> TimelineViewState

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ISlicer) -> float

Set: Top(self: ISlicer) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ISlicer) -> float

Set: Width(self: ISlicer) = value
"""



class ISlicerCache:
    # no doc
    def ClearAllFilters(self):
        """ ClearAllFilters(self: ISlicerCache) """
        pass

    def ClearDateFilter(self):
        """ ClearDateFilter(self: ISlicerCache) """
        pass

    def ClearManualFilter(self):
        """ ClearManualFilter(self: ISlicerCache) """
        pass

    def Delete(self):
        """ Delete(self: ISlicerCache) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerCache) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerCache) -> XlCreator

"""

    CrossFilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossFilterType(self: ISlicerCache) -> XlSlicerCrossFilterType

Set: CrossFilterType(self: ISlicerCache) = value
"""

    FilterCleared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterCleared(self: ISlicerCache) -> bool

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ISlicerCache) -> int

"""

    List = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: List(self: ISlicerCache) -> bool

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: ISlicerCache) -> ListObject

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISlicerCache) -> str

Set: Name(self: ISlicerCache) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: ISlicerCache) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerCache) -> object

"""

    PivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTables(self: ISlicerCache) -> SlicerPivotTables

"""

    RequireManualUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RequireManualUpdate(self: ISlicerCache) -> bool

Set: RequireManualUpdate(self: ISlicerCache) = value
"""

    ShowAllItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllItems(self: ISlicerCache) -> bool

Set: ShowAllItems(self: ISlicerCache) = value
"""

    SlicerCacheLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheLevels(self: ISlicerCache) -> SlicerCacheLevels

"""

    SlicerCacheType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheType(self: ISlicerCache) -> XlSlicerCacheType

"""

    SlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerItems(self: ISlicerCache) -> SlicerItems

"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: ISlicerCache) -> Slicers

"""

    SortItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortItems(self: ISlicerCache) -> XlSlicerSort

Set: SortItems(self: ISlicerCache) = value
"""

    SortUsingCustomLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortUsingCustomLists(self: ISlicerCache) -> bool

Set: SortUsingCustomLists(self: ISlicerCache) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: ISlicerCache) -> str

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: ISlicerCache) -> XlPivotTableSourceType

"""

    TimelineState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimelineState(self: ISlicerCache) -> TimelineState

"""

    VisibleSlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItems(self: ISlicerCache) -> SlicerItems

"""

    VisibleSlicerItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItemsList(self: ISlicerCache) -> object

Set: VisibleSlicerItemsList(self: ISlicerCache) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: ISlicerCache) -> WorkbookConnection

"""



class ISlicerCacheLevel:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerCacheLevel) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicerCacheLevel) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerCacheLevel) -> XlCreator

"""

    CrossFilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossFilterType(self: ISlicerCacheLevel) -> XlSlicerCrossFilterType

Set: CrossFilterType(self: ISlicerCacheLevel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISlicerCacheLevel) -> str

"""

    Ordinal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ordinal(self: ISlicerCacheLevel) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerCacheLevel) -> object

"""

    SlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerItems(self: ISlicerCacheLevel) -> SlicerItems

"""

    SortItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortItems(self: ISlicerCacheLevel) -> XlSlicerSort

Set: SortItems(self: ISlicerCacheLevel) = value
"""

    VisibleSlicerItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItemsList(self: ISlicerCacheLevel) -> object

"""



class ISlicerCacheLevels(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ISlicerCacheLevels) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerCacheLevels) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicerCacheLevels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerCacheLevels) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerCacheLevels) -> object

"""



class ISlicerCaches(IEnumerable):
    # no doc
    def Add(self, Source, SourceField, Name):
        """ Add(self: ISlicerCaches, Source: object, SourceField: object, Name: object) -> SlicerCache """
        pass

    def Add2(self, Source, SourceField, Name, SlicerCacheType):
        """ Add2(self: ISlicerCaches, Source: object, SourceField: object, Name: object, SlicerCacheType: object) -> SlicerCache """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISlicerCaches) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerCaches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicerCaches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerCaches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerCaches) -> object

"""



class ISlicerItem:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ISlicerItem) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerItem) -> XlCreator

"""

    HasData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasData(self: ISlicerItem) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISlicerItem) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerItem) -> SlicerCache

"""

    Selected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selected(self: ISlicerItem) -> bool

Set: Selected(self: ISlicerItem) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: ISlicerItem) -> object

"""

    SourceNameStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceNameStandard(self: ISlicerItem) -> str

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ISlicerItem) -> str

"""



class ISlicerItems(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ISlicerItems) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicerItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerItems) -> object

"""



class ISlicerPivotTables(IEnumerable):
    # no doc
    def AddPivotTable(self, PivotTable):
        """ AddPivotTable(self: ISlicerPivotTables, PivotTable: PivotTable) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISlicerPivotTables) -> IEnumerator """
        pass

    def RemovePivotTable(self, PivotTable):
        """ RemovePivotTable(self: ISlicerPivotTables, PivotTable: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicerPivotTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicerPivotTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicerPivotTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicerPivotTables) -> object

"""



class ISlicers(IEnumerable):
    # no doc
    def Add(self, SlicerDestination, Level, Name, Caption, Top, Left, Width, Height):
        """ Add(self: ISlicers, SlicerDestination: object, Level: object, Name: object, Caption: object, Top: object, Left: object, Width: object, Height: object) -> Slicer """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISlicers) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISlicers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISlicers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISlicers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISlicers) -> object

"""



class ISmartTag:
    # no doc
    def Delete(self):
        """ Delete(self: ISmartTag) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTag) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTag) -> XlCreator

"""

    DownloadURL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownloadURL(self: ISmartTag) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISmartTag) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTag) -> object

"""

    Properties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Properties(self: ISmartTag) -> CustomProperties

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: ISmartTag) -> Range

"""

    SmartTagActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagActions(self: ISmartTag) -> SmartTagActions

"""

    XML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XML(self: ISmartTag) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ISmartTag) -> str

"""



class ISmartTagAction:
    # no doc
    def Execute(self):
        """ Execute(self: ISmartTagAction) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveXControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveXControl(self: ISmartTagAction) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTagAction) -> Application

"""

    CheckboxState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CheckboxState(self: ISmartTagAction) -> bool

Set: CheckboxState(self: ISmartTagAction) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTagAction) -> XlCreator

"""

    ExpandHelp = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExpandHelp(self: ISmartTagAction) -> bool

Set: ExpandHelp(self: ISmartTagAction) = value
"""

    ListSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListSelection(self: ISmartTagAction) -> int

Set: ListSelection(self: ISmartTagAction) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISmartTagAction) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTagAction) -> object

"""

    PresentInPane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresentInPane(self: ISmartTagAction) -> bool

"""

    RadioGroupSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadioGroupSelection(self: ISmartTagAction) -> int

Set: RadioGroupSelection(self: ISmartTagAction) = value
"""

    TextboxText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextboxText(self: ISmartTagAction) -> str

Set: TextboxText(self: ISmartTagAction) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ISmartTagAction) -> XlSmartTagControlType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ISmartTagAction) -> str

"""



class ISmartTagActions(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ISmartTagActions) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTagActions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISmartTagActions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTagActions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTagActions) -> object

"""



class ISmartTagOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTagOptions) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTagOptions) -> XlCreator

"""

    DisplaySmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplaySmartTags(self: ISmartTagOptions) -> XlSmartTagDisplayMode

Set: DisplaySmartTags(self: ISmartTagOptions) = value
"""

    EmbedSmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmbedSmartTags(self: ISmartTagOptions) -> bool

Set: EmbedSmartTags(self: ISmartTagOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTagOptions) -> object

"""



class ISmartTagRecognizer:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTagRecognizer) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTagRecognizer) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ISmartTagRecognizer) -> bool

Set: Enabled(self: ISmartTagRecognizer) = value
"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: ISmartTagRecognizer) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTagRecognizer) -> object

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: ISmartTagRecognizer) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ISmartTagRecognizer) -> str

"""



class ISmartTagRecognizers(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ISmartTagRecognizers) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTagRecognizers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISmartTagRecognizers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTagRecognizers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTagRecognizers) -> object

"""

    Recognize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recognize(self: ISmartTagRecognizers) -> bool

Set: Recognize(self: ISmartTagRecognizers) = value
"""



class ISmartTags(IEnumerable):
    # no doc
    def Add(self, SmartTagType):
        """ Add(self: ISmartTags, SmartTagType: str) -> SmartTag """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISmartTags) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISmartTags) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISmartTags) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISmartTags) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISmartTags) -> object

"""



class ISort:
    # no doc
    def Apply(self):
        """ Apply(self: ISort) """
        pass

    def SetRange(self, Rng):
        """ SetRange(self: ISort, Rng: Range) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISort) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISort) -> XlCreator

"""

    Header = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Header(self: ISort) -> XlYesNoGuess

Set: Header(self: ISort) = value
"""

    MatchCase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MatchCase(self: ISort) -> bool

Set: MatchCase(self: ISort) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ISort) -> XlSortOrientation

Set: Orientation(self: ISort) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISort) -> object

"""

    Rng = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rng(self: ISort) -> Range

"""

    SortFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortFields(self: ISort) -> SortFields

"""

    SortMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortMethod(self: ISort) -> XlSortMethod

Set: SortMethod(self: ISort) = value
"""



class ISortField:
    # no doc
    def Delete(self):
        """ Delete(self: ISortField) """
        pass

    def ModifyKey(self, Key):
        """ ModifyKey(self: ISortField, Key: Range) """
        pass

    def SetIcon(self, Icon):
        """ SetIcon(self: ISortField, Icon: Icon) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISortField) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISortField) -> XlCreator

"""

    CustomOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomOrder(self: ISortField) -> object

Set: CustomOrder(self: ISortField) = value
"""

    DataOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataOption(self: ISortField) -> XlSortDataOption

Set: DataOption(self: ISortField) = value
"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Key(self: ISortField) -> Range

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: ISortField) -> XlSortOrder

Set: Order(self: ISortField) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISortField) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: ISortField) -> int

Set: Priority(self: ISortField) = value
"""

    SortOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortOn(self: ISortField) -> XlSortOn

Set: SortOn(self: ISortField) = value
"""

    SortOnValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortOnValue(self: ISortField) -> object

"""



class ISortFields(IEnumerable):
    # no doc
    def Add(self, Key, SortOn, Order, CustomOrder, DataOption):
        """ Add(self: ISortFields, Key: Range, SortOn: object, Order: object, CustomOrder: object, DataOption: object) -> SortField """
        pass

    def Clear(self):
        """ Clear(self: ISortFields) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISortFields) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISortFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISortFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISortFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISortFields) -> object

"""



class ISoundNote:
    # no doc
    def Delete(self):
        """ Delete(self: ISoundNote) -> object """
        pass

    def Import(self, Filename):
        """ Import(self: ISoundNote, Filename: str) -> object """
        pass

    def Play(self):
        """ Play(self: ISoundNote) -> object """
        pass

    def Record(self):
        """ Record(self: ISoundNote) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISoundNote) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISoundNote) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISoundNote) -> object

"""



class ISparkAxes:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkAxes) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkAxes) -> XlCreator

"""

    Horizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Horizontal(self: ISparkAxes) -> SparkHorizontalAxis

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkAxes) -> object

"""

    Vertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertical(self: ISparkAxes) -> SparkVerticalAxis

"""



class ISparkColor:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkColor) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: ISparkColor) -> FormatColor

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkColor) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkColor) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ISparkColor) -> bool

Set: Visible(self: ISparkColor) = value
"""



class ISparkHorizontalAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkHorizontalAxis) -> Application

"""

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Axis(self: ISparkHorizontalAxis) -> SparkColor

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkHorizontalAxis) -> XlCreator

"""

    IsDateAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDateAxis(self: ISparkHorizontalAxis) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkHorizontalAxis) -> object

"""

    RightToLeftPlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightToLeftPlotOrder(self: ISparkHorizontalAxis) -> bool

Set: RightToLeftPlotOrder(self: ISparkHorizontalAxis) = value
"""



class ISparkline:
    # no doc
    def ModifyLocation(self, Range):
        """ ModifyLocation(self: ISparkline, Range: Range) """
        pass

    def ModifySourceData(self, Formula):
        """ ModifySourceData(self: ISparkline, Formula: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkline) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkline) -> XlCreator

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: ISparkline) -> Range

Set: Location(self: ISparkline) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkline) -> object

"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: ISparkline) -> str

Set: SourceData(self: ISparkline) = value
"""



class ISparklineGroup(IEnumerable):
    # no doc
    def Delete(self):
        """ Delete(self: ISparklineGroup) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISparklineGroup) -> IEnumerator """
        pass

    def Modify(self, Location, SourceData):
        """ Modify(self: ISparklineGroup, Location: Range, SourceData: str) """
        pass

    def ModifyDateRange(self, DateRange):
        """ ModifyDateRange(self: ISparklineGroup, DateRange: str) """
        pass

    def ModifyLocation(self, Location):
        """ ModifyLocation(self: ISparklineGroup, Location: Range) """
        pass

    def ModifySourceData(self, SourceData):
        """ ModifySourceData(self: ISparklineGroup, SourceData: str) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparklineGroup) -> Application

"""

    Axes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Axes(self: ISparklineGroup) -> SparkAxes

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISparklineGroup) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparklineGroup) -> XlCreator

"""

    DateRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DateRange(self: ISparklineGroup) -> str

Set: DateRange(self: ISparklineGroup) = value
"""

    DisplayBlanksAs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayBlanksAs(self: ISparklineGroup) -> XlDisplayBlanksAs

Set: DisplayBlanksAs(self: ISparklineGroup) = value
"""

    DisplayHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHidden(self: ISparklineGroup) -> bool

Set: DisplayHidden(self: ISparklineGroup) = value
"""

    LineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineWeight(self: ISparklineGroup) -> object

Set: LineWeight(self: ISparklineGroup) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: ISparklineGroup) -> Range

Set: Location(self: ISparklineGroup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparklineGroup) -> object

"""

    PlotBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotBy(self: ISparklineGroup) -> XlSparklineRowCol

Set: PlotBy(self: ISparklineGroup) = value
"""

    Points = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Points(self: ISparklineGroup) -> SparkPoints

"""

    SeriesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesColor(self: ISparklineGroup) -> FormatColor

"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: ISparklineGroup) -> str

Set: SourceData(self: ISparklineGroup) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ISparklineGroup) -> XlSparkType

Set: Type(self: ISparklineGroup) = value
"""



class ISparklineGroups(IEnumerable):
    # no doc
    def Add(self, Type, SourceData):
        """ Add(self: ISparklineGroups, Type: XlSparkType, SourceData: str) -> SparklineGroup """
        pass

    def Clear(self):
        """ Clear(self: ISparklineGroups) """
        pass

    def ClearGroups(self):
        """ ClearGroups(self: ISparklineGroups) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISparklineGroups) -> IEnumerator """
        pass

    def Group(self, Location):
        """ Group(self: ISparklineGroups, Location: Range) """
        pass

    def Ungroup(self):
        """ Ungroup(self: ISparklineGroups) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparklineGroups) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISparklineGroups) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparklineGroups) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparklineGroups) -> object

"""



class ISparkPoints:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkPoints) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkPoints) -> XlCreator

"""

    Firstpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Firstpoint(self: ISparkPoints) -> SparkColor

"""

    Highpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Highpoint(self: ISparkPoints) -> SparkColor

"""

    Lastpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lastpoint(self: ISparkPoints) -> SparkColor

"""

    Lowpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lowpoint(self: ISparkPoints) -> SparkColor

"""

    Markers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Markers(self: ISparkPoints) -> SparkColor

"""

    Negative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Negative(self: ISparkPoints) -> SparkColor

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkPoints) -> object

"""



class ISparkVerticalAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISparkVerticalAxis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISparkVerticalAxis) -> XlCreator

"""

    CustomMaxScaleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomMaxScaleValue(self: ISparkVerticalAxis) -> object

Set: CustomMaxScaleValue(self: ISparkVerticalAxis) = value
"""

    CustomMinScaleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomMinScaleValue(self: ISparkVerticalAxis) -> object

Set: CustomMinScaleValue(self: ISparkVerticalAxis) = value
"""

    MaxScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxScaleType(self: ISparkVerticalAxis) -> XlSparkScale

Set: MaxScaleType(self: ISparkVerticalAxis) = value
"""

    MinScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinScaleType(self: ISparkVerticalAxis) -> XlSparkScale

Set: MinScaleType(self: ISparkVerticalAxis) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISparkVerticalAxis) -> object

"""



class ISpeech:
    # no doc
    def Speak(self, Text, SpeakAsync, SpeakXML, Purge):
        """ Speak(self: ISpeech, Text: str, SpeakAsync: object, SpeakXML: object, Purge: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: ISpeech) -> XlSpeakDirection

Set: Direction(self: ISpeech) = value
"""

    SpeakCellOnEnter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpeakCellOnEnter(self: ISpeech) -> bool

Set: SpeakCellOnEnter(self: ISpeech) = value
"""



class ISpellingOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ArabicModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicModes(self: ISpellingOptions) -> XlArabicModes

Set: ArabicModes(self: ISpellingOptions) = value
"""

    ArabicStrictAlefHamza = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictAlefHamza(self: ISpellingOptions) -> bool

Set: ArabicStrictAlefHamza(self: ISpellingOptions) = value
"""

    ArabicStrictFinalYaa = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictFinalYaa(self: ISpellingOptions) -> bool

Set: ArabicStrictFinalYaa(self: ISpellingOptions) = value
"""

    ArabicStrictTaaMarboota = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictTaaMarboota(self: ISpellingOptions) -> bool

Set: ArabicStrictTaaMarboota(self: ISpellingOptions) = value
"""

    BrazilReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BrazilReform(self: ISpellingOptions) -> XlPortugueseReform

Set: BrazilReform(self: ISpellingOptions) = value
"""

    DictLang = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DictLang(self: ISpellingOptions) -> int

Set: DictLang(self: ISpellingOptions) = value
"""

    GermanPostReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GermanPostReform(self: ISpellingOptions) -> bool

Set: GermanPostReform(self: ISpellingOptions) = value
"""

    HebrewModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HebrewModes(self: ISpellingOptions) -> XlHebrewModes

Set: HebrewModes(self: ISpellingOptions) = value
"""

    IgnoreCaps = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreCaps(self: ISpellingOptions) -> bool

Set: IgnoreCaps(self: ISpellingOptions) = value
"""

    IgnoreFileNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreFileNames(self: ISpellingOptions) -> bool

Set: IgnoreFileNames(self: ISpellingOptions) = value
"""

    IgnoreMixedDigits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreMixedDigits(self: ISpellingOptions) -> bool

Set: IgnoreMixedDigits(self: ISpellingOptions) = value
"""

    KoreanCombineAux = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanCombineAux(self: ISpellingOptions) -> bool

Set: KoreanCombineAux(self: ISpellingOptions) = value
"""

    KoreanProcessCompound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanProcessCompound(self: ISpellingOptions) -> bool

Set: KoreanProcessCompound(self: ISpellingOptions) = value
"""

    KoreanUseAutoChangeList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanUseAutoChangeList(self: ISpellingOptions) -> bool

Set: KoreanUseAutoChangeList(self: ISpellingOptions) = value
"""

    PortugalReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PortugalReform(self: ISpellingOptions) -> XlPortugueseReform

Set: PortugalReform(self: ISpellingOptions) = value
"""

    RussianStrictE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RussianStrictE(self: ISpellingOptions) -> bool

Set: RussianStrictE(self: ISpellingOptions) = value
"""

    SpanishModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpanishModes(self: ISpellingOptions) -> XlSpanishModes

Set: SpanishModes(self: ISpellingOptions) = value
"""

    SuggestMainOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuggestMainOnly(self: ISpellingOptions) -> bool

Set: SuggestMainOnly(self: ISpellingOptions) = value
"""

    UserDict = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserDict(self: ISpellingOptions) -> str

Set: UserDict(self: ISpellingOptions) = value
"""



class ISpinner:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ISpinner) -> object """
        pass

    def Copy(self):
        """ Copy(self: ISpinner) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ISpinner, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ISpinner) -> object """
        pass

    def Delete(self):
        """ Delete(self: ISpinner) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ISpinner) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ISpinner, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ISpinner) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISpinner) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ISpinner) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISpinner) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ISpinner) -> bool

Set: Display3DShading(self: ISpinner) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ISpinner) -> bool

Set: Enabled(self: ISpinner) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ISpinner) -> float

Set: Height(self: ISpinner) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ISpinner) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ISpinner) -> float

Set: Left(self: ISpinner) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ISpinner) -> str

Set: LinkedCell(self: ISpinner) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ISpinner) -> bool

Set: Locked(self: ISpinner) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: ISpinner) -> int

Set: Max(self: ISpinner) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: ISpinner) -> int

Set: Min(self: ISpinner) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ISpinner) -> str

Set: Name(self: ISpinner) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ISpinner) -> str

Set: OnAction(self: ISpinner) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISpinner) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ISpinner) -> object

Set: Placement(self: ISpinner) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ISpinner) -> bool

Set: PrintObject(self: ISpinner) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ISpinner) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: ISpinner) -> int

Set: SmallChange(self: ISpinner) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ISpinner) -> float

Set: Top(self: ISpinner) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ISpinner) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ISpinner) -> int

Set: Value(self: ISpinner) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ISpinner) -> bool

Set: Visible(self: ISpinner) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ISpinner) -> float

Set: Width(self: ISpinner) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ISpinner) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ISpinner) -> int

Set: _Default(self: ISpinner) = value
"""



class ISpinners(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ISpinners, Left: float, Top: float, Width: float, Height: float) -> Spinner """
        pass

    def BringToFront(self):
        """ BringToFront(self: ISpinners) -> object """
        pass

    def Copy(self):
        """ Copy(self: ISpinners) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ISpinners, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ISpinners) -> object """
        pass

    def Delete(self):
        """ Delete(self: ISpinners) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ISpinners) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ISpinners) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ISpinners) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ISpinners, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ISpinners, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ISpinners) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ISpinners) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ISpinners) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ISpinners) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ISpinners) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ISpinners) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ISpinners) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ISpinners) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ISpinners) -> bool

Set: Display3DShading(self: ISpinners) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ISpinners) -> bool

Set: Enabled(self: ISpinners) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ISpinners) -> float

Set: Height(self: ISpinners) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ISpinners) -> float

Set: Left(self: ISpinners) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ISpinners) -> str

Set: LinkedCell(self: ISpinners) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ISpinners) -> bool

Set: Locked(self: ISpinners) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: ISpinners) -> int

Set: Max(self: ISpinners) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: ISpinners) -> int

Set: Min(self: ISpinners) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ISpinners) -> str

Set: OnAction(self: ISpinners) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ISpinners) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ISpinners) -> object

Set: Placement(self: ISpinners) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ISpinners) -> bool

Set: PrintObject(self: ISpinners) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ISpinners) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: ISpinners) -> int

Set: SmallChange(self: ISpinners) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ISpinners) -> float

Set: Top(self: ISpinners) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ISpinners) -> int

Set: Value(self: ISpinners) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ISpinners) -> bool

Set: Visible(self: ISpinners) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ISpinners) -> float

Set: Width(self: ISpinners) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ISpinners) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ISpinners) -> int

Set: _Default(self: ISpinners) = value
"""



class IStyle:
    # no doc
    def Delete(self):
        """ Delete(self: IStyle) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: IStyle) -> bool

Set: AddIndent(self: IStyle) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IStyle) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IStyle) -> Borders

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: IStyle) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IStyle) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IStyle) -> Font

"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: IStyle) -> bool

Set: FormulaHidden(self: IStyle) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IStyle) -> XlHAlign

Set: HorizontalAlignment(self: IStyle) = value
"""

    IncludeAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeAlignment(self: IStyle) -> bool

Set: IncludeAlignment(self: IStyle) = value
"""

    IncludeBorder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeBorder(self: IStyle) -> bool

Set: IncludeBorder(self: IStyle) = value
"""

    IncludeFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeFont(self: IStyle) -> bool

Set: IncludeFont(self: IStyle) = value
"""

    IncludeNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeNumber(self: IStyle) -> bool

Set: IncludeNumber(self: IStyle) = value
"""

    IncludePatterns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludePatterns(self: IStyle) -> bool

Set: IncludePatterns(self: IStyle) = value
"""

    IncludeProtection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeProtection(self: IStyle) -> bool

Set: IncludeProtection(self: IStyle) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: IStyle) -> int

Set: IndentLevel(self: IStyle) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IStyle) -> Interior

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IStyle) -> bool

Set: Locked(self: IStyle) = value
"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: IStyle) -> object

Set: MergeCells(self: IStyle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IStyle) -> str

"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: IStyle) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IStyle) -> str

Set: NumberFormat(self: IStyle) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: IStyle) -> str

Set: NumberFormatLocal(self: IStyle) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: IStyle) -> XlOrientation

Set: Orientation(self: IStyle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IStyle) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: IStyle) -> int

Set: ReadingOrder(self: IStyle) = value
"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: IStyle) -> bool

Set: ShrinkToFit(self: IStyle) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IStyle) -> str

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IStyle) -> XlVAlign

Set: VerticalAlignment(self: IStyle) = value
"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: IStyle) -> bool

Set: WrapText(self: IStyle) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IStyle) -> str

"""



class IStyles(IEnumerable):
    # no doc
    def Add(self, Name, BasedOn):
        """ Add(self: IStyles, Name: str, BasedOn: object) -> Style """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IStyles) -> IEnumerator """
        pass

    def Merge(self, Workbook):
        """ Merge(self: IStyles, Workbook: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IStyles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IStyles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IStyles) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IStyles) -> object

"""



class ITab:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITab) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: ITab) -> object

Set: Color(self: ITab) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: ITab) -> XlColorIndex

Set: ColorIndex(self: ITab) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITab) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITab) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: ITab) -> XlThemeColor

Set: ThemeColor(self: ITab) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: ITab) -> object

Set: TintAndShade(self: ITab) = value
"""



class ITableObject:
    # no doc
    def Delete(self):
        """ Delete(self: ITableObject) """
        pass

    def Refresh(self):
        """ Refresh(self: ITableObject) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: ITableObject) -> bool

Set: AdjustColumnWidth(self: ITableObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITableObject) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITableObject) -> XlCreator

"""

    Destination = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Destination(self: ITableObject) -> Range

"""

    EnableEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEditing(self: ITableObject) -> bool

Set: EnableEditing(self: ITableObject) = value
"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: ITableObject) -> bool

Set: EnableRefresh(self: ITableObject) = value
"""

    FetchedRowOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FetchedRowOverflow(self: ITableObject) -> bool

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: ITableObject) -> ListObject

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITableObject) -> object

"""

    PreserveColumnInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnInfo(self: ITableObject) -> bool

Set: PreserveColumnInfo(self: ITableObject) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: ITableObject) -> bool

Set: PreserveFormatting(self: ITableObject) = value
"""

    RefreshStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshStyle(self: ITableObject) -> XlCellInsertionMode

Set: RefreshStyle(self: ITableObject) = value
"""

    ResultRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ResultRange(self: ITableObject) -> Range

"""

    RowNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowNumbers(self: ITableObject) -> bool

Set: RowNumbers(self: ITableObject) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: ITableObject) -> WorkbookConnection

"""



class ITableStyle:
    # no doc
    def Delete(self):
        """ Delete(self: ITableStyle) """
        pass

    def Duplicate(self, NewTableStyleName):
        """ Duplicate(self: ITableStyle, NewTableStyleName: object) -> TableStyle """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITableStyle) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: ITableStyle) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITableStyle) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ITableStyle) -> str

"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: ITableStyle) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITableStyle) -> object

"""

    ShowAsAvailablePivotTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailablePivotTableStyle(self: ITableStyle) -> bool

Set: ShowAsAvailablePivotTableStyle(self: ITableStyle) = value
"""

    ShowAsAvailableSlicerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableSlicerStyle(self: ITableStyle) -> bool

Set: ShowAsAvailableSlicerStyle(self: ITableStyle) = value
"""

    ShowAsAvailableTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableTableStyle(self: ITableStyle) -> bool

Set: ShowAsAvailableTableStyle(self: ITableStyle) = value
"""

    ShowAsAvailableTimelineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableTimelineStyle(self: ITableStyle) -> bool

Set: ShowAsAvailableTimelineStyle(self: ITableStyle) = value
"""

    TableStyleElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyleElements(self: ITableStyle) -> TableStyleElements

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ITableStyle) -> str

"""



class ITableStyleElement:
    # no doc
    def Clear(self):
        """ Clear(self: ITableStyleElement) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITableStyleElement) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: ITableStyleElement) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITableStyleElement) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ITableStyleElement) -> Font

"""

    HasFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasFormat(self: ITableStyleElement) -> bool

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ITableStyleElement) -> Interior

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITableStyleElement) -> object

"""

    StripeSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StripeSize(self: ITableStyleElement) -> int

Set: StripeSize(self: ITableStyleElement) = value
"""



class ITableStyleElements(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ITableStyleElements) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ITableStyleElements, Index: XlTableStyleElementType) -> TableStyleElement """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITableStyleElements) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ITableStyleElements) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITableStyleElements) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITableStyleElements) -> object

"""



class ITableStyles(IEnumerable):
    # no doc
    def Add(self, TableStyleName):
        """ Add(self: ITableStyles, TableStyleName: str) -> TableStyle """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ITableStyles) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ITableStyles, Index: object) -> TableStyle """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITableStyles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ITableStyles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITableStyles) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITableStyles) -> object

"""



class ITextBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ITextBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ITextBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ITextBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ITextBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ITextBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: ITextBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ITextBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ITextBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ITextBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: ITextBox) -> bool

Set: AddIndent(self: ITextBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITextBox) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ITextBox) -> object

Set: AutoScaleFont(self: ITextBox) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: ITextBox) -> bool

Set: AutoSize(self: ITextBox) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ITextBox) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ITextBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ITextBox) -> str

Set: Caption(self: ITextBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITextBox) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ITextBox) -> bool

Set: Enabled(self: ITextBox) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ITextBox) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ITextBox) -> str

Set: Formula(self: ITextBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ITextBox) -> float

Set: Height(self: ITextBox) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: ITextBox) -> object

Set: HorizontalAlignment(self: ITextBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ITextBox) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ITextBox) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ITextBox) -> float

Set: Left(self: ITextBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ITextBox) -> bool

Set: Locked(self: ITextBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ITextBox) -> bool

Set: LockedText(self: ITextBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ITextBox) -> str

Set: Name(self: ITextBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ITextBox) -> str

Set: OnAction(self: ITextBox) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ITextBox) -> object

Set: Orientation(self: ITextBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITextBox) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ITextBox) -> object

Set: Placement(self: ITextBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ITextBox) -> bool

Set: PrintObject(self: ITextBox) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: ITextBox) -> int

Set: ReadingOrder(self: ITextBox) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: ITextBox) -> bool

Set: RoundedCorners(self: ITextBox) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ITextBox) -> bool

Set: Shadow(self: ITextBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ITextBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ITextBox) -> str

Set: Text(self: ITextBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ITextBox) -> float

Set: Top(self: ITextBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ITextBox) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: ITextBox) -> object

Set: VerticalAlignment(self: ITextBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ITextBox) -> bool

Set: Visible(self: ITextBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ITextBox) -> float

Set: Width(self: ITextBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ITextBox) -> int

"""



class ITextBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ITextBoxes, Left: float, Top: float, Width: float, Height: float) -> TextBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: ITextBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: ITextBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: ITextBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ITextBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ITextBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: ITextBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ITextBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ITextBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ITextBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ITextBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ITextBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ITextBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ITextBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ITextBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ITextBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ITextBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: ITextBoxes) -> bool

Set: AddIndent(self: ITextBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITextBoxes) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ITextBoxes) -> object

Set: AutoScaleFont(self: ITextBoxes) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: ITextBoxes) -> bool

Set: AutoSize(self: ITextBoxes) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ITextBoxes) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ITextBoxes) -> str

Set: Caption(self: ITextBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ITextBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITextBoxes) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ITextBoxes) -> bool

Set: Enabled(self: ITextBoxes) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ITextBoxes) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: ITextBoxes) -> str

Set: Formula(self: ITextBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ITextBoxes) -> float

Set: Height(self: ITextBoxes) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: ITextBoxes) -> object

Set: HorizontalAlignment(self: ITextBoxes) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ITextBoxes) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ITextBoxes) -> float

Set: Left(self: ITextBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ITextBoxes) -> bool

Set: Locked(self: ITextBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: ITextBoxes) -> bool

Set: LockedText(self: ITextBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ITextBoxes) -> str

Set: OnAction(self: ITextBoxes) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ITextBoxes) -> object

Set: Orientation(self: ITextBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITextBoxes) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ITextBoxes) -> object

Set: Placement(self: ITextBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ITextBoxes) -> bool

Set: PrintObject(self: ITextBoxes) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: ITextBoxes) -> int

Set: ReadingOrder(self: ITextBoxes) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: ITextBoxes) -> bool

Set: RoundedCorners(self: ITextBoxes) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ITextBoxes) -> bool

Set: Shadow(self: ITextBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ITextBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: ITextBoxes) -> str

Set: Text(self: ITextBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ITextBoxes) -> float

Set: Top(self: ITextBoxes) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: ITextBoxes) -> object

Set: VerticalAlignment(self: ITextBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ITextBoxes) -> bool

Set: Visible(self: ITextBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ITextBoxes) -> float

Set: Width(self: ITextBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ITextBoxes) -> int

"""



class ITextConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITextConnection) -> Application

"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: ITextConnection) -> object

Set: Connection(self: ITextConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITextConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITextConnection) -> object

"""

    TextFileColumnDataTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileColumnDataTypes(self: ITextConnection) -> object

Set: TextFileColumnDataTypes(self: ITextConnection) = value
"""

    TextFileCommaDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileCommaDelimiter(self: ITextConnection) -> bool

Set: TextFileCommaDelimiter(self: ITextConnection) = value
"""

    TextFileConsecutiveDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileConsecutiveDelimiter(self: ITextConnection) -> bool

Set: TextFileConsecutiveDelimiter(self: ITextConnection) = value
"""

    TextFileDecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileDecimalSeparator(self: ITextConnection) -> str

Set: TextFileDecimalSeparator(self: ITextConnection) = value
"""

    TextFileFixedColumnWidths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileFixedColumnWidths(self: ITextConnection) -> object

Set: TextFileFixedColumnWidths(self: ITextConnection) = value
"""

    TextFileHeaderRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileHeaderRow(self: ITextConnection) -> bool

Set: TextFileHeaderRow(self: ITextConnection) = value
"""

    TextFileOtherDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileOtherDelimiter(self: ITextConnection) -> str

Set: TextFileOtherDelimiter(self: ITextConnection) = value
"""

    TextFileParseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileParseType(self: ITextConnection) -> XlTextParsingType

Set: TextFileParseType(self: ITextConnection) = value
"""

    TextFilePlatform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePlatform(self: ITextConnection) -> XlPlatform

Set: TextFilePlatform(self: ITextConnection) = value
"""

    TextFilePromptOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePromptOnRefresh(self: ITextConnection) -> bool

Set: TextFilePromptOnRefresh(self: ITextConnection) = value
"""

    TextFileSemicolonDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSemicolonDelimiter(self: ITextConnection) -> bool

Set: TextFileSemicolonDelimiter(self: ITextConnection) = value
"""

    TextFileSpaceDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSpaceDelimiter(self: ITextConnection) -> bool

Set: TextFileSpaceDelimiter(self: ITextConnection) = value
"""

    TextFileStartRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileStartRow(self: ITextConnection) -> int

Set: TextFileStartRow(self: ITextConnection) = value
"""

    TextFileTabDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTabDelimiter(self: ITextConnection) -> bool

Set: TextFileTabDelimiter(self: ITextConnection) = value
"""

    TextFileTextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTextQualifier(self: ITextConnection) -> XlTextQualifier

Set: TextFileTextQualifier(self: ITextConnection) = value
"""

    TextFileThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileThousandsSeparator(self: ITextConnection) -> str

Set: TextFileThousandsSeparator(self: ITextConnection) = value
"""

    TextFileTrailingMinusNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTrailingMinusNumbers(self: ITextConnection) -> bool

Set: TextFileTrailingMinusNumbers(self: ITextConnection) = value
"""

    TextFileVisualLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileVisualLayout(self: ITextConnection) -> XlTextVisualLayoutType

Set: TextFileVisualLayout(self: ITextConnection) = value
"""



class ITextFrame:
    # no doc
    def Characters(self, Start, Length):
        """ Characters(self: ITextFrame, Start: object, Length: object) -> Characters """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITextFrame) -> Application

"""

    AutoMargins = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoMargins(self: ITextFrame) -> bool

Set: AutoMargins(self: ITextFrame) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: ITextFrame) -> bool

Set: AutoSize(self: ITextFrame) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITextFrame) -> XlCreator

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: ITextFrame) -> XlHAlign

Set: HorizontalAlignment(self: ITextFrame) = value
"""

    HorizontalOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalOverflow(self: ITextFrame) -> XlOartHorizontalOverflow

Set: HorizontalOverflow(self: ITextFrame) = value
"""

    MarginBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginBottom(self: ITextFrame) -> Single

Set: MarginBottom(self: ITextFrame) = value
"""

    MarginLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginLeft(self: ITextFrame) -> Single

Set: MarginLeft(self: ITextFrame) = value
"""

    MarginRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginRight(self: ITextFrame) -> Single

Set: MarginRight(self: ITextFrame) = value
"""

    MarginTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginTop(self: ITextFrame) -> Single

Set: MarginTop(self: ITextFrame) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ITextFrame) -> MsoTextOrientation

Set: Orientation(self: ITextFrame) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITextFrame) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: ITextFrame) -> int

Set: ReadingOrder(self: ITextFrame) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: ITextFrame) -> XlVAlign

Set: VerticalAlignment(self: ITextFrame) = value
"""

    VerticalOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalOverflow(self: ITextFrame) -> XlOartVerticalOverflow

Set: VerticalOverflow(self: ITextFrame) = value
"""



class ITickLabels:
    # no doc
    def Delete(self):
        """ Delete(self: ITickLabels) -> object """
        pass

    def Select(self):
        """ Select(self: ITickLabels) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: ITickLabels) -> int

Set: Alignment(self: ITickLabels) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITickLabels) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: ITickLabels) -> object

Set: AutoScaleFont(self: ITickLabels) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITickLabels) -> XlCreator

"""

    Depth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Depth(self: ITickLabels) -> int

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ITickLabels) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ITickLabels) -> ChartFormat

"""

    MultiLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLevel(self: ITickLabels) -> bool

Set: MultiLevel(self: ITickLabels) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ITickLabels) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: ITickLabels) -> str

Set: NumberFormat(self: ITickLabels) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: ITickLabels) -> bool

Set: NumberFormatLinked(self: ITickLabels) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: ITickLabels) -> object

Set: NumberFormatLocal(self: ITickLabels) = value
"""

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Offset(self: ITickLabels) -> int

Set: Offset(self: ITickLabels) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: ITickLabels) -> XlTickLabelOrientation

Set: Orientation(self: ITickLabels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITickLabels) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: ITickLabels) -> int

Set: ReadingOrder(self: ITickLabels) = value
"""



class ITimelineState:
    # no doc
    def SetFilterDateRange(self, StartDate, EndDate):
        """ SetFilterDateRange(self: ITimelineState, StartDate: object, EndDate: object) -> XlFilterStatus """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITimelineState) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITimelineState) -> XlCreator

"""

    EndDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDate(self: ITimelineState) -> object

"""

    FilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterType(self: ITimelineState) -> XlPivotFilterType

"""

    FilterValue1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterValue1(self: ITimelineState) -> object

"""

    FilterValue2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterValue2(self: ITimelineState) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITimelineState) -> object

"""

    SingleRangeFilterState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SingleRangeFilterState(self: ITimelineState) -> bool

"""

    StartDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDate(self: ITimelineState) -> object

"""



class ITimelineViewState:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITimelineViewState) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITimelineViewState) -> XlCreator

"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Level(self: ITimelineViewState) -> XlTimelineLevel

Set: Level(self: ITimelineViewState) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITimelineViewState) -> object

"""

    ShowHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHeader(self: ITimelineViewState) -> bool

Set: ShowHeader(self: ITimelineViewState) = value
"""

    ShowHorizontalScrollbar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHorizontalScrollbar(self: ITimelineViewState) -> bool

Set: ShowHorizontalScrollbar(self: ITimelineViewState) = value
"""

    ShowSelectionLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSelectionLabel(self: ITimelineViewState) -> bool

Set: ShowSelectionLabel(self: ITimelineViewState) = value
"""

    ShowTimeLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTimeLevel(self: ITimelineViewState) -> bool

Set: ShowTimeLevel(self: ITimelineViewState) = value
"""



class IToolbar:
    # no doc
    def Delete(self):
        """ Delete(self: IToolbar) """
        pass

    def Reset(self):
        """ Reset(self: IToolbar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IToolbar) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: IToolbar) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IToolbar) -> XlCreator

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IToolbar) -> int

Set: Height(self: IToolbar) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IToolbar) -> int

Set: Left(self: IToolbar) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IToolbar) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IToolbar) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IToolbar) -> int

Set: Position(self: IToolbar) = value
"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: IToolbar) -> XlToolbarProtection

Set: Protection(self: IToolbar) = value
"""

    ToolbarButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToolbarButtons(self: IToolbar) -> ToolbarButtons

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IToolbar) -> int

Set: Top(self: IToolbar) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IToolbar) -> bool

Set: Visible(self: IToolbar) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IToolbar) -> int

Set: Width(self: IToolbar) = value
"""



class IToolbarButton:
    # no doc
    def Copy(self, Toolbar, Before):
        """ Copy(self: IToolbarButton, Toolbar: Toolbar, Before: int) """
        pass

    def CopyFace(self):
        """ CopyFace(self: IToolbarButton) """
        pass

    def Delete(self):
        """ Delete(self: IToolbarButton) """
        pass

    def Edit(self):
        """ Edit(self: IToolbarButton) """
        pass

    def Move(self, Toolbar, Before):
        """ Move(self: IToolbarButton, Toolbar: Toolbar, Before: int) """
        pass

    def PasteFace(self):
        """ PasteFace(self: IToolbarButton) """
        pass

    def Reset(self):
        """ Reset(self: IToolbarButton) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IToolbarButton) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: IToolbarButton) -> bool

"""

    BuiltInFace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltInFace(self: IToolbarButton) -> bool

Set: BuiltInFace(self: IToolbarButton) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IToolbarButton) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: IToolbarButton) -> bool

Set: Enabled(self: IToolbarButton) = value
"""

    HelpContextID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpContextID(self: IToolbarButton) -> int

Set: HelpContextID(self: IToolbarButton) = value
"""

    HelpFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpFile(self: IToolbarButton) -> str

Set: HelpFile(self: IToolbarButton) = value
"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: IToolbarButton) -> int

"""

    IsGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsGap(self: IToolbarButton) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IToolbarButton) -> str

Set: Name(self: IToolbarButton) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: IToolbarButton) -> str

Set: OnAction(self: IToolbarButton) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IToolbarButton) -> object

"""

    Pushed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pushed(self: IToolbarButton) -> bool

Set: Pushed(self: IToolbarButton) = value
"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: IToolbarButton) -> str

Set: StatusBar(self: IToolbarButton) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IToolbarButton) -> int

Set: Width(self: IToolbarButton) = value
"""



class IToolbarButtons(IEnumerable):
    # no doc
    def Add(self, Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID):
        """ Add(self: IToolbarButtons, Button: object, Before: object, OnAction: object, Pushed: object, Enabled: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> ToolbarButton """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IToolbarButtons) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IToolbarButtons) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IToolbarButtons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IToolbarButtons) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IToolbarButtons) -> object

"""



class IToolbars(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IToolbars, Name: object) -> Toolbar """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IToolbars) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IToolbars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IToolbars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IToolbars) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IToolbars) -> object

"""



class ITop10:
    # no doc
    def Delete(self):
        """ Delete(self: ITop10) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: ITop10, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: ITop10) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: ITop10) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITop10) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: ITop10) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: ITop10) -> Borders

"""

    CalcFor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalcFor(self: ITop10) -> XlCalcFor

Set: CalcFor(self: ITop10) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITop10) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: ITop10) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: ITop10) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: ITop10) -> object

Set: NumberFormat(self: ITop10) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITop10) -> object

"""

    Percent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Percent(self: ITop10) -> bool

Set: Percent(self: ITop10) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: ITop10) -> int

Set: Priority(self: ITop10) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: ITop10) -> bool

"""

    Rank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rank(self: ITop10) -> int

Set: Rank(self: ITop10) = value
"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: ITop10) -> XlPivotConditionScope

Set: ScopeType(self: ITop10) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: ITop10) -> bool

Set: StopIfTrue(self: ITop10) = value
"""

    TopBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopBottom(self: ITop10) -> XlTopBottom

Set: TopBottom(self: ITop10) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ITop10) -> int

"""



class ITrendline:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: ITrendline) -> object """
        pass

    def Delete(self):
        """ Delete(self: ITrendline) -> object """
        pass

    def Select(self):
        """ Select(self: ITrendline) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITrendline) -> Application

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: ITrendline) -> int

Set: Backward(self: ITrendline) = value
"""

    Backward2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward2(self: ITrendline) -> float

Set: Backward2(self: ITrendline) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: ITrendline) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITrendline) -> XlCreator

"""

    DataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabel(self: ITrendline) -> DataLabel

"""

    DisplayEquation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEquation(self: ITrendline) -> bool

Set: DisplayEquation(self: ITrendline) = value
"""

    DisplayRSquared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRSquared(self: ITrendline) -> bool

Set: DisplayRSquared(self: ITrendline) = value
"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: ITrendline) -> ChartFormat

"""

    Forward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Forward(self: ITrendline) -> int

Set: Forward(self: ITrendline) = value
"""

    Forward2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Forward2(self: ITrendline) -> float

Set: Forward2(self: ITrendline) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ITrendline) -> int

"""

    Intercept = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Intercept(self: ITrendline) -> float

Set: Intercept(self: ITrendline) = value
"""

    InterceptIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InterceptIsAuto(self: ITrendline) -> bool

Set: InterceptIsAuto(self: ITrendline) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ITrendline) -> str

Set: Name(self: ITrendline) = value
"""

    NameIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameIsAuto(self: ITrendline) -> bool

Set: NameIsAuto(self: ITrendline) = value
"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: ITrendline) -> int

Set: Order(self: ITrendline) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITrendline) -> object

"""

    Period = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Period(self: ITrendline) -> int

Set: Period(self: ITrendline) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ITrendline) -> XlTrendlineType

Set: Type(self: ITrendline) = value
"""



class ITrendlines(IEnumerable):
    # no doc
    def Add(self, Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name):
        """ Add(self: ITrendlines, Type: XlTrendlineType, Order: object, Period: object, Forward: object, Backward: object, Intercept: object, DisplayEquation: object, DisplayRSquared: object, Name: object) -> Trendline """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ITrendlines) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ITrendlines, Index: object) -> Trendline """
        pass

    def _Default(self, Index):
        """ _Default(self: ITrendlines, Index: object) -> Trendline """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ITrendlines) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ITrendlines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ITrendlines) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ITrendlines) -> object

"""



class IUniqueValues:
    # no doc
    def Delete(self):
        """ Delete(self: IUniqueValues) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: IUniqueValues, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: IUniqueValues) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: IUniqueValues) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IUniqueValues) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: IUniqueValues) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: IUniqueValues) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IUniqueValues) -> XlCreator

"""

    DupeUnique = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DupeUnique(self: IUniqueValues) -> XlDupeUnique

Set: DupeUnique(self: IUniqueValues) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: IUniqueValues) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IUniqueValues) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: IUniqueValues) -> object

Set: NumberFormat(self: IUniqueValues) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IUniqueValues) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: IUniqueValues) -> int

Set: Priority(self: IUniqueValues) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: IUniqueValues) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: IUniqueValues) -> XlPivotConditionScope

Set: ScopeType(self: IUniqueValues) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: IUniqueValues) -> bool

Set: StopIfTrue(self: IUniqueValues) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IUniqueValues) -> int

"""



class IUpBars:
    # no doc
    def Delete(self):
        """ Delete(self: IUpBars) -> object """
        pass

    def Select(self):
        """ Select(self: IUpBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IUpBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IUpBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IUpBars) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IUpBars) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IUpBars) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IUpBars) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IUpBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IUpBars) -> object

"""



class IUsedObjects(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IUsedObjects) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IUsedObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IUsedObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IUsedObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IUsedObjects) -> object

"""



class IUserAccess:
    # no doc
    def Delete(self):
        """ Delete(self: IUserAccess) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEdit(self: IUserAccess) -> bool

Set: AllowEdit(self: IUserAccess) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IUserAccess) -> str

"""



class IUserAccessList(IEnumerable):
    # no doc
    def Add(self, Name, AllowEdit):
        """ Add(self: IUserAccessList, Name: str, AllowEdit: bool) -> UserAccess """
        pass

    def DeleteAll(self):
        """ DeleteAll(self: IUserAccessList) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IUserAccessList) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IUserAccessList) -> int

"""



class IValidation:
    # no doc
    def Add(self, Type, AlertStyle, Operator, Formula1, Formula2):
        """ Add(self: IValidation, Type: XlDVType, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        pass

    def Delete(self):
        """ Delete(self: IValidation) """
        pass

    def Modify(self, Type, AlertStyle, Operator, Formula1, Formula2):
        """ Modify(self: IValidation, Type: object, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlertStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlertStyle(self: IValidation) -> int

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IValidation) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IValidation) -> XlCreator

"""

    ErrorMessage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorMessage(self: IValidation) -> str

Set: ErrorMessage(self: IValidation) = value
"""

    ErrorTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorTitle(self: IValidation) -> str

Set: ErrorTitle(self: IValidation) = value
"""

    Formula1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula1(self: IValidation) -> str

"""

    Formula2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula2(self: IValidation) -> str

"""

    IgnoreBlank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreBlank(self: IValidation) -> bool

Set: IgnoreBlank(self: IValidation) = value
"""

    IMEMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IMEMode(self: IValidation) -> int

Set: IMEMode(self: IValidation) = value
"""

    InCellDropdown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InCellDropdown(self: IValidation) -> bool

Set: InCellDropdown(self: IValidation) = value
"""

    InputMessage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputMessage(self: IValidation) -> str

Set: InputMessage(self: IValidation) = value
"""

    InputTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputTitle(self: IValidation) -> str

Set: InputTitle(self: IValidation) = value
"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: IValidation) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IValidation) -> object

"""

    ShowError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowError(self: IValidation) -> bool

Set: ShowError(self: IValidation) = value
"""

    ShowInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowInput(self: IValidation) -> bool

Set: ShowInput(self: IValidation) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IValidation) -> int

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IValidation) -> bool

"""



class IValueChange:
    # no doc
    def Delete(self):
        """ Delete(self: IValueChange) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllocationMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationMethod(self: IValueChange) -> XlAllocationMethod

"""

    AllocationValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationValue(self: IValueChange) -> XlAllocationValue

"""

    AllocationWeightExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationWeightExpression(self: IValueChange) -> str

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IValueChange) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IValueChange) -> XlCreator

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: IValueChange) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IValueChange) -> object

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: IValueChange) -> PivotCell

"""

    Tuple = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tuple(self: IValueChange) -> str

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IValueChange) -> float

"""

    VisibleInPivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleInPivotTable(self: IValueChange) -> bool

"""



class IVPageBreak:
    # no doc
    def Delete(self):
        """ Delete(self: IVPageBreak) """
        pass

    def DragOff(self, Direction, RegionIndex):
        """ DragOff(self: IVPageBreak, Direction: XlDirection, RegionIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IVPageBreak) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IVPageBreak) -> XlCreator

"""

    Extent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extent(self: IVPageBreak) -> XlPageBreakExtent

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: IVPageBreak) -> Range

Set: Location(self: IVPageBreak) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IVPageBreak) -> Worksheet

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IVPageBreak) -> XlPageBreak

Set: Type(self: IVPageBreak) = value
"""



class IVPageBreaks(IEnumerable):
    # no doc
    def Add(self, Before):
        """ Add(self: IVPageBreaks, Before: object) -> VPageBreak """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IVPageBreaks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IVPageBreaks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IVPageBreaks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IVPageBreaks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IVPageBreaks) -> object

"""



class IWalls:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: IWalls) -> object """
        pass

    def Paste(self):
        """ Paste(self: IWalls) """
        pass

    def Select(self):
        """ Select(self: IWalls) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWalls) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: IWalls) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWalls) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: IWalls) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: IWalls) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: IWalls) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IWalls) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWalls) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: IWalls) -> object

Set: PictureType(self: IWalls) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: IWalls) -> object

Set: PictureUnit(self: IWalls) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IWalls) -> int

Set: Thickness(self: IWalls) = value
"""



class IWatch:
    # no doc
    def Delete(self):
        """ Delete(self: IWatch) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWatch) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWatch) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWatch) -> object

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Source(self: IWatch) -> object

"""



class IWatches(IEnumerable):
    # no doc
    def Add(self, Source):
        """ Add(self: IWatches, Source: object) -> Watch """
        pass

    def Delete(self):
        """ Delete(self: IWatches) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IWatches) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWatches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IWatches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWatches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWatches) -> object

"""



class IWindow:
    # no doc
    def Activate(self):
        """ Activate(self: IWindow) -> object """
        pass

    def ActivateNext(self):
        """ ActivateNext(self: IWindow) -> object """
        pass

    def ActivatePrevious(self):
        """ ActivatePrevious(self: IWindow) -> object """
        pass

    def Close(self, SaveChanges, Filename, RouteWorkbook):
        """ Close(self: IWindow, SaveChanges: object, Filename: object, RouteWorkbook: object) -> bool """
        pass

    def LargeScroll(self, Down, Up, ToRight, ToLeft):
        """ LargeScroll(self: IWindow, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def NewWindow(self):
        """ NewWindow(self: IWindow) -> Window """
        pass

    def PointsToScreenPixelsX(self, Points):
        """ PointsToScreenPixelsX(self: IWindow, Points: int) -> int """
        pass

    def PointsToScreenPixelsY(self, Points):
        """ PointsToScreenPixelsY(self: IWindow, Points: int) -> int """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IWindow, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: IWindow, EnableChanges: object) -> object """
        pass

    def RangeFromPoint(self, x, y):
        """ RangeFromPoint(self: IWindow, x: int, y: int) -> object """
        pass

    def ScrollIntoView(self, Left, Top, Width, Height, Start):
        """ ScrollIntoView(self: IWindow, Left: int, Top: int, Width: int, Height: int, Start: object) """
        pass

    def ScrollWorkbookTabs(self, Sheets, Position):
        """ ScrollWorkbookTabs(self: IWindow, Sheets: object, Position: object) -> object """
        pass

    def SmallScroll(self, Down, Up, ToRight, ToLeft):
        """ SmallScroll(self: IWindow, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ _PrintOut(self: IWindow, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: IWindow) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: IWindow) -> Chart

"""

    ActivePane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePane(self: IWindow) -> Pane

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: IWindow) -> object

"""

    ActiveSheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheetView(self: IWindow) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWindow) -> Application

"""

    AutoFilterDateGrouping = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilterDateGrouping(self: IWindow) -> bool

Set: AutoFilterDateGrouping(self: IWindow) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: IWindow) -> object

Set: Caption(self: IWindow) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWindow) -> XlCreator

"""

    DisplayFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulas(self: IWindow) -> bool

Set: DisplayFormulas(self: IWindow) = value
"""

    DisplayGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayGridlines(self: IWindow) -> bool

Set: DisplayGridlines(self: IWindow) = value
"""

    DisplayHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeadings(self: IWindow) -> bool

Set: DisplayHeadings(self: IWindow) = value
"""

    DisplayHorizontalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHorizontalScrollBar(self: IWindow) -> bool

Set: DisplayHorizontalScrollBar(self: IWindow) = value
"""

    DisplayOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayOutline(self: IWindow) -> bool

Set: DisplayOutline(self: IWindow) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: IWindow) -> bool

Set: DisplayRightToLeft(self: IWindow) = value
"""

    DisplayRuler = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRuler(self: IWindow) -> bool

Set: DisplayRuler(self: IWindow) = value
"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: IWindow) -> bool

Set: DisplayVerticalScrollBar(self: IWindow) = value
"""

    DisplayWhitespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayWhitespace(self: IWindow) -> bool

Set: DisplayWhitespace(self: IWindow) = value
"""

    DisplayWorkbookTabs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayWorkbookTabs(self: IWindow) -> bool

Set: DisplayWorkbookTabs(self: IWindow) = value
"""

    DisplayZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayZeros(self: IWindow) -> bool

Set: DisplayZeros(self: IWindow) = value
"""

    EnableResize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableResize(self: IWindow) -> bool

Set: EnableResize(self: IWindow) = value
"""

    FreezePanes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FreezePanes(self: IWindow) -> bool

Set: FreezePanes(self: IWindow) = value
"""

    GridlineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridlineColor(self: IWindow) -> int

Set: GridlineColor(self: IWindow) = value
"""

    GridlineColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridlineColorIndex(self: IWindow) -> XlColorIndex

Set: GridlineColorIndex(self: IWindow) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IWindow) -> float

Set: Height(self: IWindow) = value
"""

    Hwnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hwnd(self: IWindow) -> int

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: IWindow) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: IWindow) -> float

Set: Left(self: IWindow) = value
"""

    OnWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnWindow(self: IWindow) -> str

Set: OnWindow(self: IWindow) = value
"""

    Panes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Panes(self: IWindow) -> Panes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWindow) -> object

"""

    RangeSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RangeSelection(self: IWindow) -> Range

"""

    ScrollColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollColumn(self: IWindow) -> int

Set: ScrollColumn(self: IWindow) = value
"""

    ScrollRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollRow(self: IWindow) -> int

Set: ScrollRow(self: IWindow) = value
"""

    SelectedSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SelectedSheets(self: IWindow) -> Sheets

"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: IWindow) -> object

"""

    SheetViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetViews(self: IWindow) -> SheetViews

"""

    Split = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Split(self: IWindow) -> bool

Set: Split(self: IWindow) = value
"""

    SplitColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitColumn(self: IWindow) -> int

Set: SplitColumn(self: IWindow) = value
"""

    SplitHorizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitHorizontal(self: IWindow) -> float

Set: SplitHorizontal(self: IWindow) = value
"""

    SplitRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitRow(self: IWindow) -> int

Set: SplitRow(self: IWindow) = value
"""

    SplitVertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitVertical(self: IWindow) -> float

Set: SplitVertical(self: IWindow) = value
"""

    TabRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TabRatio(self: IWindow) -> float

Set: TabRatio(self: IWindow) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: IWindow) -> float

Set: Top(self: IWindow) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IWindow) -> XlWindowType

"""

    UsableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableHeight(self: IWindow) -> float

"""

    UsableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableWidth(self: IWindow) -> float

"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: View(self: IWindow) -> XlWindowView

Set: View(self: IWindow) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IWindow) -> bool

Set: Visible(self: IWindow) = value
"""

    VisibleRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleRange(self: IWindow) -> Range

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IWindow) -> float

Set: Width(self: IWindow) = value
"""

    WindowNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowNumber(self: IWindow) -> int

"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: IWindow) -> XlWindowState

Set: WindowState(self: IWindow) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Zoom(self: IWindow) -> object

Set: Zoom(self: IWindow) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: IWindow) -> bool

Set: _DisplayRightToLeft(self: IWindow) = value
"""



class IWindows(IEnumerable):
    # no doc
    def Arrange(self, ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical):
        """ Arrange(self: IWindows, ArrangeStyle: XlArrangeStyle, ActiveWorkbook: object, SyncHorizontal: object, SyncVertical: object) -> object """
        pass

    def BreakSideBySide(self):
        """ BreakSideBySide(self: IWindows) -> bool """
        pass

    def CompareSideBySideWith(self, WindowName):
        """ CompareSideBySideWith(self: IWindows, WindowName: object) -> bool """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IWindows) -> IEnumerator """
        pass

    def ResetPositionsSideBySide(self):
        """ ResetPositionsSideBySide(self: IWindows) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWindows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IWindows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWindows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWindows) -> object

"""

    SyncScrollingSideBySide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SyncScrollingSideBySide(self: IWindows) -> bool

Set: SyncScrollingSideBySide(self: IWindows) = value
"""



class IWorkbookConnection:
    # no doc
    def Delete(self):
        """ Delete(self: IWorkbookConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: IWorkbookConnection) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWorkbookConnection) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWorkbookConnection) -> XlCreator

"""

    DataFeedConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataFeedConnection(self: IWorkbookConnection) -> DataFeedConnection

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IWorkbookConnection) -> str

Set: Description(self: IWorkbookConnection) = value
"""

    InModel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InModel(self: IWorkbookConnection) -> bool

"""

    ModelConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelConnection(self: IWorkbookConnection) -> ModelConnection

"""

    ModelTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTables(self: IWorkbookConnection) -> ModelTables

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IWorkbookConnection) -> str

Set: Name(self: IWorkbookConnection) = value
"""

    ODBCConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCConnection(self: IWorkbookConnection) -> ODBCConnection

"""

    OLEDBConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEDBConnection(self: IWorkbookConnection) -> OLEDBConnection

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWorkbookConnection) -> object

"""

    Ranges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ranges(self: IWorkbookConnection) -> Ranges

"""

    RefreshWithRefreshAll = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshWithRefreshAll(self: IWorkbookConnection) -> bool

Set: RefreshWithRefreshAll(self: IWorkbookConnection) = value
"""

    TextConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextConnection(self: IWorkbookConnection) -> TextConnection

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IWorkbookConnection) -> XlConnectionType

"""

    WorksheetDataConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetDataConnection(self: IWorkbookConnection) -> WorksheetDataConnection

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IWorkbookConnection) -> str

Set: _Default(self: IWorkbookConnection) = value
"""



class IWorkbookEvents:
    # no doc
    def Activate(self):
        """ Activate(self: IWorkbookEvents) """
        pass

    def AddinInstall(self):
        """ AddinInstall(self: IWorkbookEvents) """
        pass

    def AddinUninstall(self):
        """ AddinUninstall(self: IWorkbookEvents) """
        pass

    def AfterSave(self, Success):
        """ AfterSave(self: IWorkbookEvents, Success: bool) """
        pass

    def AfterXmlExport(self, Map, Url, Result):
        """ AfterXmlExport(self: IWorkbookEvents, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def AfterXmlImport(self, Map, IsRefresh, Result):
        """ AfterXmlImport(self: IWorkbookEvents, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def BeforeClose(self, Cancel):
        """ BeforeClose(self: IWorkbookEvents) -> bool """
        pass

    def BeforePrint(self, Cancel):
        """ BeforePrint(self: IWorkbookEvents) -> bool """
        pass

    def BeforeSave(self, SaveAsUI, Cancel):
        """ BeforeSave(self: IWorkbookEvents, SaveAsUI: bool) -> bool """
        pass

    def BeforeXmlExport(self, Map, Url, Cancel):
        """ BeforeXmlExport(self: IWorkbookEvents, Map: XmlMap, Url: str) -> bool """
        pass

    def BeforeXmlImport(self, Map, Url, IsRefresh, Cancel):
        """ BeforeXmlImport(self: IWorkbookEvents, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def Deactivate(self):
        """ Deactivate(self: IWorkbookEvents) """
        pass

    def ModelChange(self, Changes):
        """ ModelChange(self: IWorkbookEvents, Changes: ModelChanges) """
        pass

    def NewChart(self, Ch):
        """ NewChart(self: IWorkbookEvents, Ch: Chart) """
        pass

    def NewSheet(self, Sh):
        """ NewSheet(self: IWorkbookEvents, Sh: object) """
        pass

    def Open(self):
        """ Open(self: IWorkbookEvents) """
        pass

    def PivotTableCloseConnection(self, Target):
        """ PivotTableCloseConnection(self: IWorkbookEvents, Target: PivotTable) """
        pass

    def PivotTableOpenConnection(self, Target):
        """ PivotTableOpenConnection(self: IWorkbookEvents, Target: PivotTable) """
        pass

    def RowsetComplete(self, Description, Sheet, Success):
        """ RowsetComplete(self: IWorkbookEvents, Description: str, Sheet: str, Success: bool) """
        pass

    def SheetActivate(self, Sh):
        """ SheetActivate(self: IWorkbookEvents, Sh: object) """
        pass

    def SheetBeforeDelete(self, Sh):
        """ SheetBeforeDelete(self: IWorkbookEvents, Sh: object) """
        pass

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel):
        """ SheetBeforeDoubleClick(self: IWorkbookEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetBeforeRightClick(self, Sh, Target, Cancel):
        """ SheetBeforeRightClick(self: IWorkbookEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetCalculate(self, Sh):
        """ SheetCalculate(self: IWorkbookEvents, Sh: object) """
        pass

    def SheetChange(self, Sh, Target):
        """ SheetChange(self: IWorkbookEvents, Sh: object, Target: Range) """
        pass

    def SheetDeactivate(self, Sh):
        """ SheetDeactivate(self: IWorkbookEvents, Sh: object) """
        pass

    def SheetFollowHyperlink(self, Sh, Target):
        """ SheetFollowHyperlink(self: IWorkbookEvents, Sh: object, Target: Hyperlink) """
        pass

    def SheetLensGalleryRenderComplete(self, Sh):
        """ SheetLensGalleryRenderComplete(self: IWorkbookEvents, Sh: object) """
        pass

    def SheetPivotTableAfterValueChange(self, Sh, TargetPivotTable, TargetRange):
        """ SheetPivotTableAfterValueChange(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeAllocateChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeCommitChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeDiscardChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ SheetPivotTableBeforeDiscardChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def SheetPivotTableChangeSync(self, Sh, Target):
        """ SheetPivotTableChangeSync(self: IWorkbookEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetPivotTableUpdate(self, Sh, Target):
        """ SheetPivotTableUpdate(self: IWorkbookEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetSelectionChange(self, Sh, Target):
        """ SheetSelectionChange(self: IWorkbookEvents, Sh: object, Target: Range) """
        pass

    def SheetTableUpdate(self, Sh, Target):
        """ SheetTableUpdate(self: IWorkbookEvents, Sh: object, Target: TableObject) """
        pass

    def Sync(self, SyncEventType):
        """ Sync(self: IWorkbookEvents, SyncEventType: MsoSyncEventType) """
        pass

    def WindowActivate(self, Wn):
        """ WindowActivate(self: IWorkbookEvents, Wn: Window) """
        pass

    def WindowDeactivate(self, Wn):
        """ WindowDeactivate(self: IWorkbookEvents, Wn: Window) """
        pass

    def WindowResize(self, Wn):
        """ WindowResize(self: IWorkbookEvents, Wn: Window) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IWorksheetDataConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWorksheetDataConnection) -> Application

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: IWorksheetDataConnection) -> object

Set: CommandText(self: IWorksheetDataConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: IWorksheetDataConnection) -> XlCmdType

Set: CommandType(self: IWorksheetDataConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: IWorksheetDataConnection) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWorksheetDataConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWorksheetDataConnection) -> object

"""



class IWorksheetFunction:
    # no doc
    def AccrInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AccrInt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def AccrIntM(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ AccrIntM(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Acos(self, Arg1):
        """ Acos(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Acosh(self, Arg1):
        """ Acosh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Acot(self, Arg1):
        """ Acot(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Acoth(self, Arg1):
        """ Acoth(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Aggregate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Aggregate(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: Range, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def AmorDegrc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AmorDegrc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def AmorLinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AmorLinc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def And(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ And(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def Arabic(self, Arg1):
        """ Arabic(self: IWorksheetFunction, Arg1: str) -> float """
        pass

    def Asc(self, Arg1):
        """ Asc(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def Asin(self, Arg1):
        """ Asin(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Asinh(self, Arg1):
        """ Asinh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Atan2(self, Arg1, Arg2):
        """ Atan2(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Atanh(self, Arg1):
        """ Atanh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def AveDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ AveDev(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Average(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Average(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def AverageIf(self, Arg1, Arg2, Arg3):
        """ AverageIf(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def AverageIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):
        """ AverageIfs(self: IWorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        pass

    def BahtText(self, Arg1):
        """ BahtText(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def Base(self, Arg1, Arg2, Arg3):
        """ Base(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: object) -> str """
        pass

    def BesselI(self, Arg1, Arg2):
        """ BesselI(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselJ(self, Arg1, Arg2):
        """ BesselJ(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselK(self, Arg1, Arg2):
        """ BesselK(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselY(self, Arg1, Arg2):
        """ BesselY(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BetaDist(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ BetaDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def BetaInv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ BetaInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Beta_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Beta_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool, Arg5: object, Arg6: object) -> float """
        pass

    def Beta_Inv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Beta_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Bin2Dec(self, Arg1):
        """ Bin2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def Bin2Hex(self, Arg1, Arg2):
        """ Bin2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Bin2Oct(self, Arg1, Arg2):
        """ Bin2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def BinomDist(self, Arg1, Arg2, Arg3, Arg4):
        """ BinomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Binom_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Binom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Binom_Dist_Range(self, Arg1, Arg2, Arg3, Arg4):
        """ Binom_Dist_Range(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object) -> float """
        pass

    def Binom_Inv(self, Arg1, Arg2, Arg3):
        """ Binom_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Bitand(self, Arg1, Arg2):
        """ Bitand(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitlshift(self, Arg1, Arg2):
        """ Bitlshift(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitor(self, Arg1, Arg2):
        """ Bitor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitrshift(self, Arg1, Arg2):
        """ Bitrshift(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitxor(self, Arg1, Arg2):
        """ Bitxor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ceiling(self, Arg1, Arg2):
        """ Ceiling(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ceiling_Math(self, Arg1, Arg2, Arg3):
        """ Ceiling_Math(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Ceiling_Precise(self, Arg1, Arg2):
        """ Ceiling_Precise(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def ChiDist(self, Arg1, Arg2):
        """ ChiDist(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiInv(self, Arg1, Arg2):
        """ ChiInv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Dist(self, Arg1, Arg2, Arg3):
        """ ChiSq_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def ChiSq_Dist_RT(self, Arg1, Arg2):
        """ ChiSq_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Inv(self, Arg1, Arg2):
        """ ChiSq_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Inv_RT(self, Arg1, Arg2):
        """ ChiSq_Inv_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Test(self, Arg1, Arg2):
        """ ChiSq_Test(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def ChiTest(self, Arg1, Arg2):
        """ ChiTest(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Choose(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Choose(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Clean(self, Arg1):
        """ Clean(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def Combin(self, Arg1, Arg2):
        """ Combin(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Combina(self, Arg1, Arg2):
        """ Combina(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Complex(self, Arg1, Arg2, Arg3):
        """ Complex(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> str """
        pass

    def Confidence(self, Arg1, Arg2, Arg3):
        """ Confidence(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Confidence_Norm(self, Arg1, Arg2, Arg3):
        """ Confidence_Norm(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Confidence_T(self, Arg1, Arg2, Arg3):
        """ Confidence_T(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Convert(self, Arg1, Arg2, Arg3):
        """ Convert(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Correl(self, Arg1, Arg2):
        """ Correl(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Cosh(self, Arg1):
        """ Cosh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Cot(self, Arg1):
        """ Cot(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Coth(self, Arg1):
        """ Coth(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Count(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Count(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CountA(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ CountA(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CountBlank(self, Arg1):
        """ CountBlank(self: IWorksheetFunction, Arg1: Range) -> float """
        pass

    def CountIf(self, Arg1, Arg2):
        """ CountIf(self: IWorksheetFunction, Arg1: Range, Arg2: object) -> float """
        pass

    def CountIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ CountIfs(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CoupDayBs(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDayBs(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupDays(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDays(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupDaysNc(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDaysNc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupNcd(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupNcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupNum(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupNum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupPcd(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupPcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Covar(self, Arg1, Arg2):
        """ Covar(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Covariance_P(self, Arg1, Arg2):
        """ Covariance_P(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Covariance_S(self, Arg1, Arg2):
        """ Covariance_S(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def CritBinom(self, Arg1, Arg2, Arg3):
        """ CritBinom(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Csc(self, Arg1):
        """ Csc(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Csch(self, Arg1):
        """ Csch(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def CumIPmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ CumIPmt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def CumPrinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ CumPrinc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def DAverage(self, Arg1, Arg2, Arg3):
        """ DAverage(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Days(self, Arg1, Arg2):
        """ Days(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Days360(self, Arg1, Arg2, Arg3):
        """ Days360(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Db(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Db(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        pass

    def Dbcs(self, Arg1):
        """ Dbcs(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def DCount(self, Arg1, Arg2, Arg3):
        """ DCount(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DCountA(self, Arg1, Arg2, Arg3):
        """ DCountA(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Ddb(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Ddb(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        pass

    def Dec2Bin(self, Arg1, Arg2):
        """ Dec2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Dec2Hex(self, Arg1, Arg2):
        """ Dec2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Dec2Oct(self, Arg1, Arg2):
        """ Dec2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Decimal(self, Arg1, Arg2):
        """ Decimal(self: IWorksheetFunction, Arg1: str, Arg2: float) -> float """
        pass

    def Degrees(self, Arg1):
        """ Degrees(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Delta(self, Arg1, Arg2):
        """ Delta(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DevSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ DevSq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def DGet(self, Arg1, Arg2, Arg3):
        """ DGet(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> object """
        pass

    def Disc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Disc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def DMax(self, Arg1, Arg2, Arg3):
        """ DMax(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DMin(self, Arg1, Arg2, Arg3):
        """ DMin(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Dollar(self, Arg1, Arg2):
        """ Dollar(self: IWorksheetFunction, Arg1: float, Arg2: object) -> str """
        pass

    def DollarDe(self, Arg1, Arg2):
        """ DollarDe(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DollarFr(self, Arg1, Arg2):
        """ DollarFr(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DProduct(self, Arg1, Arg2, Arg3):
        """ DProduct(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DStDev(self, Arg1, Arg2, Arg3):
        """ DStDev(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DStDevP(self, Arg1, Arg2, Arg3):
        """ DStDevP(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DSum(self, Arg1, Arg2, Arg3):
        """ DSum(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Dummy19(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy19(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy21(self, Arg1, Arg2):
        """ Dummy21(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Duration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Duration(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def DVar(self, Arg1, Arg2, Arg3):
        """ DVar(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DVarP(self, Arg1, Arg2, Arg3):
        """ DVarP(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def EDate(self, Arg1, Arg2):
        """ EDate(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Effect(self, Arg1, Arg2):
        """ Effect(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def EncodeURL(self, Arg1):
        """ EncodeURL(self: IWorksheetFunction, Arg1: str) -> object """
        pass

    def EoMonth(self, Arg1, Arg2):
        """ EoMonth(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Erf(self, Arg1, Arg2):
        """ Erf(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def ErfC(self, Arg1):
        """ ErfC(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def ErfC_Precise(self, Arg1):
        """ ErfC_Precise(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def Erf_Precise(self, Arg1):
        """ Erf_Precise(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def Even(self, Arg1):
        """ Even(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def ExponDist(self, Arg1, Arg2, Arg3):
        """ ExponDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Expon_Dist(self, Arg1, Arg2, Arg3):
        """ Expon_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Fact(self, Arg1):
        """ Fact(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def FactDouble(self, Arg1):
        """ FactDouble(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def FDist(self, Arg1, Arg2, Arg3):
        """ FDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def FilterXML(self, Arg1, Arg2):
        """ FilterXML(self: IWorksheetFunction, Arg1: str, Arg2: str) -> object """
        pass

    def Find(self, Arg1, Arg2, Arg3):
        """ Find(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def FindB(self, Arg1, Arg2, Arg3):
        """ FindB(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def FInv(self, Arg1, Arg2, Arg3):
        """ FInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Fisher(self, Arg1):
        """ Fisher(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def FisherInv(self, Arg1):
        """ FisherInv(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Fixed(self, Arg1, Arg2, Arg3):
        """ Fixed(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> str """
        pass

    def Floor(self, Arg1, Arg2):
        """ Floor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Floor_Math(self, Arg1, Arg2, Arg3):
        """ Floor_Math(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Floor_Precise(self, Arg1, Arg2):
        """ Floor_Precise(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Forecast(self, Arg1, Arg2, Arg3):
        """ Forecast(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Frequency(self, Arg1, Arg2):
        """ Frequency(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def FTest(self, Arg1, Arg2):
        """ FTest(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Fv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Fv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def FVSchedule(self, Arg1, Arg2):
        """ FVSchedule(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def F_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ F_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def F_Dist_RT(self, Arg1, Arg2, Arg3):
        """ F_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Inv(self, Arg1, Arg2, Arg3):
        """ F_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Inv_RT(self, Arg1, Arg2, Arg3):
        """ F_Inv_RT(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Test(self, Arg1, Arg2):
        """ F_Test(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Gamma(self, Arg1):
        """ Gamma(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def GammaDist(self, Arg1, Arg2, Arg3, Arg4):
        """ GammaDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def GammaInv(self, Arg1, Arg2, Arg3):
        """ GammaInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def GammaLn(self, Arg1):
        """ GammaLn(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def GammaLn_Precise(self, Arg1):
        """ GammaLn_Precise(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Gamma_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Gamma_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Gamma_Inv(self, Arg1, Arg2, Arg3):
        """ Gamma_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Gauss(self, Arg1):
        """ Gauss(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Gcd(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Gcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def GeoMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ GeoMean(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def GeStep(self, Arg1, Arg2):
        """ GeStep(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Growth(self, Arg1, Arg2, Arg3, Arg4):
        """ Growth(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def HarMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ HarMean(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Hex2Bin(self, Arg1, Arg2):
        """ Hex2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Hex2Dec(self, Arg1):
        """ Hex2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def Hex2Oct(self, Arg1, Arg2):
        """ Hex2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def HLookup(self, Arg1, Arg2, Arg3, Arg4):
        """ HLookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def HypGeomDist(self, Arg1, Arg2, Arg3, Arg4):
        """ HypGeomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def HypGeom_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ HypGeom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: bool) -> float """
        pass

    def IfError(self, Arg1, Arg2):
        """ IfError(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def IfNa(self, Arg1, Arg2):
        """ IfNa(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def ImAbs(self, Arg1):
        """ ImAbs(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def Imaginary(self, Arg1):
        """ Imaginary(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def ImArgument(self, Arg1):
        """ ImArgument(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImConjugate(self, Arg1):
        """ ImConjugate(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImCos(self, Arg1):
        """ ImCos(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImCosh(self, Arg1):
        """ ImCosh(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImCot(self, Arg1):
        """ ImCot(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImCsc(self, Arg1):
        """ ImCsc(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImCsch(self, Arg1):
        """ ImCsch(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImDiv(self, Arg1, Arg2):
        """ ImDiv(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImExp(self, Arg1):
        """ ImExp(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImLn(self, Arg1):
        """ ImLn(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImLog10(self, Arg1):
        """ ImLog10(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImLog2(self, Arg1):
        """ ImLog2(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImPower(self, Arg1, Arg2):
        """ ImPower(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ ImProduct(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        pass

    def ImReal(self, Arg1):
        """ ImReal(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def ImSec(self, Arg1):
        """ ImSec(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImSech(self, Arg1):
        """ ImSech(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImSin(self, Arg1):
        """ ImSin(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImSinh(self, Arg1):
        """ ImSinh(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImSqrt(self, Arg1):
        """ ImSqrt(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def ImSub(self, Arg1, Arg2):
        """ ImSub(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImSum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ ImSum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        pass

    def ImTan(self, Arg1):
        """ ImTan(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def Index(self, Arg1, Arg2, Arg3, Arg4):
        """ Index(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object, Arg4: object) -> object """
        pass

    def Intercept(self, Arg1, Arg2):
        """ Intercept(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def IntRate(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ IntRate(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Ipmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Ipmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        pass

    def Irr(self, Arg1, Arg2):
        """ Irr(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def IsErr(self, Arg1):
        """ IsErr(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsError(self, Arg1):
        """ IsError(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsEven(self, Arg1):
        """ IsEven(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsFormula(self, Arg1):
        """ IsFormula(self: IWorksheetFunction, Arg1: Range) -> bool """
        pass

    def IsLogical(self, Arg1):
        """ IsLogical(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNA(self, Arg1):
        """ IsNA(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNonText(self, Arg1):
        """ IsNonText(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNumber(self, Arg1):
        """ IsNumber(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsOdd(self, Arg1):
        """ IsOdd(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsoWeekNum(self, Arg1, Arg2):
        """ IsoWeekNum(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def ISO_Ceiling(self, Arg1, Arg2):
        """ ISO_Ceiling(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Ispmt(self, Arg1, Arg2, Arg3, Arg4):
        """ Ispmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def IsText(self, Arg1):
        """ IsText(self: IWorksheetFunction, Arg1: object) -> bool """
        pass

    def IsThaiDigit(self, Arg1):
        """ IsThaiDigit(self: IWorksheetFunction, Arg1: str) -> bool """
        pass

    def Kurt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Kurt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Large(self, Arg1, Arg2):
        """ Large(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Lcm(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Lcm(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def LinEst(self, Arg1, Arg2, Arg3, Arg4):
        """ LinEst(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Ln(self, Arg1):
        """ Ln(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Log(self, Arg1, Arg2):
        """ Log(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Log10(self, Arg1):
        """ Log10(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def LogEst(self, Arg1, Arg2, Arg3, Arg4):
        """ LogEst(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def LogInv(self, Arg1, Arg2, Arg3):
        """ LogInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def LogNormDist(self, Arg1, Arg2, Arg3):
        """ LogNormDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def LogNorm_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ LogNorm_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def LogNorm_Inv(self, Arg1, Arg2, Arg3):
        """ LogNorm_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Lookup(self, Arg1, Arg2, Arg3):
        """ Lookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> object """
        pass

    def Match(self, Arg1, Arg2, Arg3):
        """ Match(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Max(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Max(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MDeterm(self, Arg1):
        """ MDeterm(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def MDuration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ MDuration(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Median(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Median(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Min(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Min(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MInverse(self, Arg1):
        """ MInverse(self: IWorksheetFunction, Arg1: object) -> object """
        pass

    def MIrr(self, Arg1, Arg2, Arg3):
        """ MIrr(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: float) -> float """
        pass

    def MMult(self, Arg1, Arg2):
        """ MMult(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def Mode(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Mode_Mult(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode_Mult(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Mode_Sngl(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode_Sngl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MRound(self, Arg1, Arg2):
        """ MRound(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def MultiNomial(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ MultiNomial(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Munit(self, Arg1):
        """ Munit(self: IWorksheetFunction, Arg1: float) -> object """
        pass

    def NegBinomDist(self, Arg1, Arg2, Arg3):
        """ NegBinomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def NegBinom_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ NegBinom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def NetworkDays(self, Arg1, Arg2, Arg3):
        """ NetworkDays(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def NetworkDays_Intl(self, Arg1, Arg2, Arg3, Arg4):
        """ NetworkDays_Intl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Nominal(self, Arg1, Arg2):
        """ Nominal(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def NormDist(self, Arg1, Arg2, Arg3, Arg4):
        """ NormDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def NormInv(self, Arg1, Arg2, Arg3):
        """ NormInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def NormSDist(self, Arg1):
        """ NormSDist(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def NormSInv(self, Arg1):
        """ NormSInv(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Norm_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Norm_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Norm_Inv(self, Arg1, Arg2, Arg3):
        """ Norm_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Norm_S_Dist(self, Arg1, Arg2):
        """ Norm_S_Dist(self: IWorksheetFunction, Arg1: float, Arg2: bool) -> float """
        pass

    def Norm_S_Inv(self, Arg1):
        """ Norm_S_Inv(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def NPer(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ NPer(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Npv(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Npv(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def NumberValue(self, Arg1, Arg2, Arg3):
        """ NumberValue(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: str) -> float """
        pass

    def Oct2Bin(self, Arg1, Arg2):
        """ Oct2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Oct2Dec(self, Arg1):
        """ Oct2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        pass

    def Oct2Hex(self, Arg1, Arg2):
        """ Oct2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Odd(self, Arg1):
        """ Odd(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def OddFPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9):
        """ OddFPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        pass

    def OddFYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9):
        """ OddFYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        pass

    def OddLPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ OddLPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        pass

    def OddLYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ OddLYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        pass

    def Or(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Or(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def PDuration(self, Arg1, Arg2, Arg3):
        """ PDuration(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Pearson(self, Arg1, Arg2):
        """ Pearson(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Percentile(self, Arg1, Arg2):
        """ Percentile(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Percentile_Exc(self, Arg1, Arg2):
        """ Percentile_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Percentile_Inc(self, Arg1, Arg2):
        """ Percentile_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def PercentRank(self, Arg1, Arg2, Arg3):
        """ PercentRank(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def PercentRank_Exc(self, Arg1, Arg2, Arg3):
        """ PercentRank_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def PercentRank_Inc(self, Arg1, Arg2, Arg3):
        """ PercentRank_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def Permut(self, Arg1, Arg2):
        """ Permut(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Permutationa(self, Arg1, Arg2):
        """ Permutationa(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Phi(self, Arg1):
        """ Phi(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Phonetic(self, Arg1):
        """ Phonetic(self: IWorksheetFunction, Arg1: Range) -> str """
        pass

    def Pi(self):
        """ Pi(self: IWorksheetFunction) -> float """
        pass

    def Pmt(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Pmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Poisson(self, Arg1, Arg2, Arg3):
        """ Poisson(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Poisson_Dist(self, Arg1, Arg2, Arg3):
        """ Poisson_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Power(self, Arg1, Arg2):
        """ Power(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ppmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Ppmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        pass

    def Price(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ Price(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def PriceDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ PriceDisc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def PriceMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ PriceMat(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Prob(self, Arg1, Arg2, Arg3, Arg4):
        """ Prob(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: object) -> float """
        pass

    def Product(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Product(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Proper(self, Arg1):
        """ Proper(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def Pv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Pv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Quartile(self, Arg1, Arg2):
        """ Quartile(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quartile_Exc(self, Arg1, Arg2):
        """ Quartile_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quartile_Inc(self, Arg1, Arg2):
        """ Quartile_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quotient(self, Arg1, Arg2):
        """ Quotient(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Radians(self, Arg1):
        """ Radians(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def RandBetween(self, Arg1, Arg2):
        """ RandBetween(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Rank(self, Arg1, Arg2, Arg3):
        """ Rank(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rank_Avg(self, Arg1, Arg2, Arg3):
        """ Rank_Avg(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rank_Eq(self, Arg1, Arg2, Arg3):
        """ Rank_Eq(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Rate(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Received(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Received(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Replace(self, Arg1, Arg2, Arg3, Arg4):
        """ Replace(self: IWorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        pass

    def ReplaceB(self, Arg1, Arg2, Arg3, Arg4):
        """ ReplaceB(self: IWorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        pass

    def Rept(self, Arg1, Arg2):
        """ Rept(self: IWorksheetFunction, Arg1: str, Arg2: float) -> str """
        pass

    def Roman(self, Arg1, Arg2):
        """ Roman(self: IWorksheetFunction, Arg1: float, Arg2: object) -> str """
        pass

    def Round(self, Arg1, Arg2):
        """ Round(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def RoundBahtDown(self, Arg1):
        """ RoundBahtDown(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def RoundBahtUp(self, Arg1):
        """ RoundBahtUp(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def RoundDown(self, Arg1, Arg2):
        """ RoundDown(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def RoundUp(self, Arg1, Arg2):
        """ RoundUp(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Rri(self, Arg1, Arg2, Arg3):
        """ Rri(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def RSq(self, Arg1, Arg2):
        """ RSq(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def RTD(self, progID, server, topic1, topic2, topic3, topic4, topic5, topic6, topic7, topic8, topic9, topic10, topic11, topic12, topic13, topic14, topic15, topic16, topic17, topic18, topic19, topic20, topic21, topic22, topic23, topic24, topic25, topic26, topic27, topic28):
        """ RTD(self: IWorksheetFunction, progID: object, server: object, topic1: object, topic2: object, topic3: object, topic4: object, topic5: object, topic6: object, topic7: object, topic8: object, topic9: object, topic10: object, topic11: object, topic12: object, topic13: object, topic14: object, topic15: object, topic16: object, topic17: object, topic18: object, topic19: object, topic20: object, topic21: object, topic22: object, topic23: object, topic24: object, topic25: object, topic26: object, topic27: object, topic28: object) -> object """
        pass

    def Search(self, Arg1, Arg2, Arg3):
        """ Search(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def SearchB(self, Arg1, Arg2, Arg3):
        """ SearchB(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def Sec(self, Arg1):
        """ Sec(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Sech(self, Arg1):
        """ Sech(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def SeriesSum(self, Arg1, Arg2, Arg3, Arg4):
        """ SeriesSum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Sinh(self, Arg1):
        """ Sinh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def Skew(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Skew(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Skew_p(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Skew_p(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Sln(self, Arg1, Arg2, Arg3):
        """ Sln(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Slope(self, Arg1, Arg2):
        """ Slope(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Small(self, Arg1, Arg2):
        """ Small(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def SqrtPi(self, Arg1):
        """ SqrtPi(self: IWorksheetFunction, Arg1: object) -> float """
        pass

    def Standardize(self, Arg1, Arg2, Arg3):
        """ Standardize(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def StDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDevP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDevP(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDev_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev_P(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDev_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev_S(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StEyx(self, Arg1, Arg2):
        """ StEyx(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Substitute(self, Arg1, Arg2, Arg3, Arg4):
        """ Substitute(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: str, Arg4: object) -> str """
        pass

    def Subtotal(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Subtotal(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Sum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Sum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumIf(self, Arg1, Arg2, Arg3):
        """ SumIf(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def SumIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):
        """ SumIfs(self: IWorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        pass

    def SumProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ SumProduct(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ SumSq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumX2MY2(self, Arg1, Arg2):
        """ SumX2MY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def SumX2PY2(self, Arg1, Arg2):
        """ SumX2PY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def SumXMY2(self, Arg1, Arg2):
        """ SumXMY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Syd(self, Arg1, Arg2, Arg3, Arg4):
        """ Syd(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def Tanh(self, Arg1):
        """ Tanh(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def TBillEq(self, Arg1, Arg2, Arg3):
        """ TBillEq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TBillPrice(self, Arg1, Arg2, Arg3):
        """ TBillPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TBillYield(self, Arg1, Arg2, Arg3):
        """ TBillYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TDist(self, Arg1, Arg2, Arg3):
        """ TDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Text(self, Arg1, Arg2):
        """ Text(self: IWorksheetFunction, Arg1: object, Arg2: str) -> str """
        pass

    def ThaiDayOfWeek(self, Arg1):
        """ ThaiDayOfWeek(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiDigit(self, Arg1):
        """ ThaiDigit(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def ThaiMonthOfYear(self, Arg1):
        """ ThaiMonthOfYear(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiNumSound(self, Arg1):
        """ ThaiNumSound(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiNumString(self, Arg1):
        """ ThaiNumString(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiStringLength(self, Arg1):
        """ ThaiStringLength(self: IWorksheetFunction, Arg1: str) -> float """
        pass

    def ThaiYear(self, Arg1):
        """ ThaiYear(self: IWorksheetFunction, Arg1: float) -> float """
        pass

    def TInv(self, Arg1, Arg2):
        """ TInv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Transpose(self, Arg1):
        """ Transpose(self: IWorksheetFunction, Arg1: object) -> object """
        pass

    def Trend(self, Arg1, Arg2, Arg3, Arg4):
        """ Trend(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Trim(self, Arg1):
        """ Trim(self: IWorksheetFunction, Arg1: str) -> str """
        pass

    def TrimMean(self, Arg1, Arg2):
        """ TrimMean(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def TTest(self, Arg1, Arg2, Arg3, Arg4):
        """ TTest(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        pass

    def T_Dist(self, Arg1, Arg2, Arg3):
        """ T_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def T_Dist_2T(self, Arg1, Arg2):
        """ T_Dist_2T(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Dist_RT(self, Arg1, Arg2):
        """ T_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Inv(self, Arg1, Arg2):
        """ T_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Inv_2T(self, Arg1, Arg2):
        """ T_Inv_2T(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Test(self, Arg1, Arg2, Arg3, Arg4):
        """ T_Test(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        pass

    def Unichar(self, Arg1):
        """ Unichar(self: IWorksheetFunction, Arg1: float) -> str """
        pass

    def Unicode(self, Arg1):
        """ Unicode(self: IWorksheetFunction, Arg1: str) -> float """
        pass

    def USDollar(self, Arg1, Arg2):
        """ USDollar(self: IWorksheetFunction, Arg1: float, Arg2: float) -> str """
        pass

    def Var(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def VarP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ VarP(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Var_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var_P(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Var_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var_S(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Vdb(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ Vdb(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: float, Arg6: object, Arg7: object) -> float """
        pass

    def VLookup(self, Arg1, Arg2, Arg3, Arg4):
        """ VLookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def WebService(self, Arg1):
        """ WebService(self: IWorksheetFunction, Arg1: str) -> object """
        pass

    def Weekday(self, Arg1, Arg2):
        """ Weekday(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def WeekNum(self, Arg1, Arg2):
        """ WeekNum(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Weibull(self, Arg1, Arg2, Arg3, Arg4):
        """ Weibull(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Weibull_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Weibull_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def WorkDay(self, Arg1, Arg2, Arg3):
        """ WorkDay(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def WorkDay_Intl(self, Arg1, Arg2, Arg3, Arg4):
        """ WorkDay_Intl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Xirr(self, Arg1, Arg2, Arg3):
        """ Xirr(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Xnpv(self, Arg1, Arg2):
        """ Xnpv(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Xor(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Xor(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def YearFrac(self, Arg1, Arg2, Arg3):
        """ YearFrac(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def YieldDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ YieldDisc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def YieldMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ YieldMat(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def ZTest(self, Arg1, Arg2, Arg3):
        """ ZTest(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def Z_Test(self, Arg1, Arg2, Arg3):
        """ Z_Test(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _WSFunction(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __pow__(self, *args): #cannot find CLR method
        """ x.__pow__(y[, z]) <==> pow(x, y[, z]) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWorksheetFunction) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWorksheetFunction) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWorksheetFunction) -> object

"""



class IWorksheets(IEnumerable):
    # no doc
    def Add(self, Before, After, Count, Type):
        """ Add(self: IWorksheets, Before: object, After: object, Count: object, Type: object) -> object """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: IWorksheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: IWorksheets, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: IWorksheets) """
        pass

    def FillAcrossSheets(self, Range, Type):
        """ FillAcrossSheets(self: IWorksheets, Range: Range, Type: XlFillWith) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IWorksheets) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: IWorksheets, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: IWorksheets, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: IWorksheets, Replace: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWorksheets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IWorksheets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWorksheets) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: IWorksheets) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWorksheets) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IWorksheets) -> object

Set: Visible(self: IWorksheets) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: IWorksheets) -> VPageBreaks

"""



class IWorksheetView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IWorksheetView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IWorksheetView) -> XlCreator

"""

    DisplayFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulas(self: IWorksheetView) -> bool

Set: DisplayFormulas(self: IWorksheetView) = value
"""

    DisplayGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayGridlines(self: IWorksheetView) -> bool

Set: DisplayGridlines(self: IWorksheetView) = value
"""

    DisplayHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeadings(self: IWorksheetView) -> bool

Set: DisplayHeadings(self: IWorksheetView) = value
"""

    DisplayOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayOutline(self: IWorksheetView) -> bool

Set: DisplayOutline(self: IWorksheetView) = value
"""

    DisplayZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayZeros(self: IWorksheetView) -> bool

Set: DisplayZeros(self: IWorksheetView) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IWorksheetView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: IWorksheetView) -> object

"""



class IXmlDataBinding:
    # no doc
    def ClearSettings(self):
        """ ClearSettings(self: IXmlDataBinding) """
        pass

    def LoadSettings(self, Url):
        """ LoadSettings(self: IXmlDataBinding, Url: str) """
        pass

    def Refresh(self):
        """ Refresh(self: IXmlDataBinding) -> XlXmlImportResult """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlDataBinding) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlDataBinding) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlDataBinding) -> object

"""

    SourceUrl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceUrl(self: IXmlDataBinding) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IXmlDataBinding) -> str

"""



class IXmlMap:
    # no doc
    def Delete(self):
        """ Delete(self: IXmlMap) """
        pass

    def Export(self, Url, Overwrite):
        """ Export(self: IXmlMap, Url: str, Overwrite: object) -> XlXmlExportResult """
        pass

    def ExportXml(self, Data):
        """ ExportXml(self: IXmlMap) -> (XlXmlExportResult, str) """
        pass

    def Import(self, Url, Overwrite):
        """ Import(self: IXmlMap, Url: str, Overwrite: object) -> XlXmlImportResult """
        pass

    def ImportXml(self, XmlData, Overwrite):
        """ ImportXml(self: IXmlMap, XmlData: str, Overwrite: object) -> XlXmlImportResult """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: IXmlMap) -> bool

Set: AdjustColumnWidth(self: IXmlMap) = value
"""

    AppendOnImport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppendOnImport(self: IXmlMap) -> bool

Set: AppendOnImport(self: IXmlMap) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlMap) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlMap) -> XlCreator

"""

    DataBinding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBinding(self: IXmlMap) -> XmlDataBinding

"""

    IsExportable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsExportable(self: IXmlMap) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IXmlMap) -> str

Set: Name(self: IXmlMap) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlMap) -> object

"""

    PreserveColumnFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnFilter(self: IXmlMap) -> bool

Set: PreserveColumnFilter(self: IXmlMap) = value
"""

    PreserveNumberFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveNumberFormatting(self: IXmlMap) -> bool

Set: PreserveNumberFormatting(self: IXmlMap) = value
"""

    RootElementName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RootElementName(self: IXmlMap) -> str

"""

    RootElementNamespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RootElementNamespace(self: IXmlMap) -> XmlNamespace

"""

    SaveDataSourceDefinition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveDataSourceDefinition(self: IXmlMap) -> bool

Set: SaveDataSourceDefinition(self: IXmlMap) = value
"""

    Schemas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Schemas(self: IXmlMap) -> XmlSchemas

"""

    ShowImportExportValidationErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowImportExportValidationErrors(self: IXmlMap) -> bool

Set: ShowImportExportValidationErrors(self: IXmlMap) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: IXmlMap) -> WorkbookConnection

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IXmlMap) -> str

"""



class IXmlMaps(IEnumerable):
    # no doc
    def Add(self, Schema, RootElementName):
        """ Add(self: IXmlMaps, Schema: str, RootElementName: object) -> XmlMap """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IXmlMaps) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlMaps) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IXmlMaps) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlMaps) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlMaps) -> object

"""



class IXmlNamespace:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlNamespace) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlNamespace) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlNamespace) -> object

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Prefix(self: IXmlNamespace) -> str

"""

    Uri = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Uri(self: IXmlNamespace) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IXmlNamespace) -> str

"""



class IXmlNamespaces(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IXmlNamespaces) -> IEnumerator """
        pass

    def InstallManifest(self, Path, InstallForAllUsers):
        """ InstallManifest(self: IXmlNamespaces, Path: str, InstallForAllUsers: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlNamespaces) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IXmlNamespaces) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlNamespaces) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlNamespaces) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IXmlNamespaces) -> str

"""



class IXmlSchema:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlSchema) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlSchema) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IXmlSchema) -> str

"""

    Namespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Namespace(self: IXmlSchema) -> XmlNamespace

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlSchema) -> object

"""

    XML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XML(self: IXmlSchema) -> str

"""



class IXmlSchemas(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: IXmlSchemas) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXmlSchemas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IXmlSchemas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXmlSchemas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXmlSchemas) -> object

"""



class IXPath:
    # no doc
    def Clear(self):
        """ Clear(self: IXPath) """
        pass

    def SetValue(self, Map, XPath, SelectionNamespace, Repeating):
        """ SetValue(self: IXPath, Map: XmlMap, XPath: str, SelectionNamespace: object, Repeating: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IXPath) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: IXPath) -> XlCreator

"""

    Map = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Map(self: IXPath) -> XmlMap

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: IXPath) -> object

"""

    Repeating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Repeating(self: IXPath) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IXPath) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: IXPath) -> str

"""



class Label:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Label) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Label, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Label) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Label, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Label) -> object """
        pass

    def Delete(self):
        """ Delete(self: Label) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Label) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Label, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Label) -> object """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: Label) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: Label) -> object

Set: Accelerator(self: Label) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Label) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Label) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Label) -> str

Set: Caption(self: Label) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Label) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Label) -> bool

Set: Enabled(self: Label) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Label) -> float

Set: Height(self: Label) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Label) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Label) -> float

Set: Left(self: Label) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Label) -> bool

Set: Locked(self: Label) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Label) -> bool

Set: LockedText(self: Label) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Label) -> str

Set: Name(self: Label) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Label) -> str

Set: OnAction(self: Label) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Label) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: Label) -> object

Set: PhoneticAccelerator(self: Label) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Label) -> object

Set: Placement(self: Label) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Label) -> bool

Set: PrintObject(self: Label) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Label) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Label) -> str

Set: Text(self: Label) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Label) -> float

Set: Top(self: Label) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Label) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Label) -> bool

Set: Visible(self: Label) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Label) -> float

Set: Width(self: Label) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Label) -> int

"""



class Labels(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Labels, Left: float, Top: float, Width: float, Height: float) -> Label """
        pass

    def BringToFront(self):
        """ BringToFront(self: Labels) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Labels, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Labels) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Labels, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Labels) -> object """
        pass

    def Delete(self):
        """ Delete(self: Labels) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Labels) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Labels) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Labels) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Labels, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Labels, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Labels) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Labels) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Labels) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Labels) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Labels) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: Labels) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: Labels) -> object

Set: Accelerator(self: Labels) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Labels) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Labels) -> str

Set: Caption(self: Labels) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Labels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Labels) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Labels) -> bool

Set: Enabled(self: Labels) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Labels) -> float

Set: Height(self: Labels) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Labels) -> float

Set: Left(self: Labels) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Labels) -> bool

Set: Locked(self: Labels) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Labels) -> bool

Set: LockedText(self: Labels) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Labels) -> str

Set: OnAction(self: Labels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Labels) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: Labels) -> object

Set: PhoneticAccelerator(self: Labels) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Labels) -> object

Set: Placement(self: Labels) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Labels) -> bool

Set: PrintObject(self: Labels) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Labels) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Labels) -> str

Set: Text(self: Labels) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Labels) -> float

Set: Top(self: Labels) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Labels) -> bool

Set: Visible(self: Labels) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Labels) -> float

Set: Width(self: Labels) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Labels) -> int

"""



class LeaderLines:
    # no doc
    def Delete(self):
        """ Delete(self: LeaderLines) """
        pass

    def Select(self):
        """ Select(self: LeaderLines) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LeaderLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: LeaderLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LeaderLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: LeaderLines) -> ChartFormat

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LeaderLines) -> object

"""



class Legend:
    # no doc
    def Clear(self):
        """ Clear(self: Legend) -> object """
        pass

    def Delete(self):
        """ Delete(self: Legend) -> object """
        pass

    def LegendEntries(self, Index):
        """ LegendEntries(self: Legend, Index: object) -> object """
        pass

    def Select(self):
        """ Select(self: Legend) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Legend) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Legend) -> object

Set: AutoScaleFont(self: Legend) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Legend) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Legend) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Legend) -> ChartFillFormat

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Legend) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Legend) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Legend) -> float

Set: Height(self: Legend) = value
"""

    IncludeInLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeInLayout(self: Legend) -> bool

Set: IncludeInLayout(self: Legend) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Legend) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Legend) -> float

Set: Left(self: Legend) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Legend) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Legend) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: Legend) -> XlLegendPosition

Set: Position(self: Legend) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Legend) -> bool

Set: Shadow(self: Legend) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Legend) -> float

Set: Top(self: Legend) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Legend) -> float

Set: Width(self: Legend) = value
"""



class LegendEntries(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: LegendEntries) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: LegendEntries, Index: object) -> LegendEntry """
        pass

    def _Default(self, Index):
        """ _Default(self: LegendEntries, Index: object) -> LegendEntry """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LegendEntries) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: LegendEntries) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LegendEntries) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LegendEntries) -> object

"""



class LegendEntry:
    # no doc
    def Delete(self):
        """ Delete(self: LegendEntry) -> object """
        pass

    def Select(self):
        """ Select(self: LegendEntry) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LegendEntry) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: LegendEntry) -> object

Set: AutoScaleFont(self: LegendEntry) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LegendEntry) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: LegendEntry) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: LegendEntry) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: LegendEntry) -> float

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: LegendEntry) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: LegendEntry) -> float

"""

    LegendKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LegendKey(self: LegendEntry) -> LegendKey

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LegendEntry) -> object

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: LegendEntry) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: LegendEntry) -> float

"""



class LegendKey:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: LegendKey) -> object """
        pass

    def Delete(self):
        """ Delete(self: LegendKey) -> object """
        pass

    def Select(self):
        """ Select(self: LegendKey) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LegendKey) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: LegendKey) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LegendKey) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: LegendKey) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: LegendKey) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: LegendKey) -> float

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: LegendKey) -> Interior

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: LegendKey) -> bool

Set: InvertIfNegative(self: LegendKey) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: LegendKey) -> float

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: LegendKey) -> int

Set: MarkerBackgroundColor(self: LegendKey) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: LegendKey) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: LegendKey) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: LegendKey) -> int

Set: MarkerForegroundColor(self: LegendKey) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: LegendKey) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: LegendKey) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: LegendKey) -> int

Set: MarkerSize(self: LegendKey) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: LegendKey) -> XlMarkerStyle

Set: MarkerStyle(self: LegendKey) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LegendKey) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: LegendKey) -> int

Set: PictureType(self: LegendKey) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: LegendKey) -> int

Set: PictureUnit(self: LegendKey) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: LegendKey) -> float

Set: PictureUnit2(self: LegendKey) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: LegendKey) -> bool

Set: Shadow(self: LegendKey) = value
"""

    Smooth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smooth(self: LegendKey) -> bool

Set: Smooth(self: LegendKey) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: LegendKey) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: LegendKey) -> float

"""



class Line:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Line) -> object """
        pass

    def Copy(self):
        """ Copy(self: Line) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Line, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Line) -> object """
        pass

    def Delete(self):
        """ Delete(self: Line) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Line) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Line, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Line) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Line) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: Line) -> object

Set: ArrowHeadLength(self: Line) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: Line) -> object

Set: ArrowHeadStyle(self: Line) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: Line) -> object

Set: ArrowHeadWidth(self: Line) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Line) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Line) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Line) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Line) -> bool

Set: Enabled(self: Line) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Line) -> float

Set: Height(self: Line) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Line) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Line) -> float

Set: Left(self: Line) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Line) -> bool

Set: Locked(self: Line) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Line) -> str

Set: Name(self: Line) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Line) -> str

Set: OnAction(self: Line) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Line) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Line) -> object

Set: Placement(self: Line) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Line) -> bool

Set: PrintObject(self: Line) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Line) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Line) -> float

Set: Top(self: Line) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Line) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Line) -> bool

Set: Visible(self: Line) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Line) -> float

Set: Width(self: Line) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Line) -> int

"""



class LinearGradient:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LinearGradient) -> Application

"""

    ColorStops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorStops(self: LinearGradient) -> ColorStops

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LinearGradient) -> XlCreator

"""

    Degree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree(self: LinearGradient) -> float

Set: Degree(self: LinearGradient) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LinearGradient) -> object

"""



class LineFormat(_IMsoDispObj):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LineFormat) -> object

"""

    BackColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackColor(self: LineFormat) -> ColorFormat

Set: BackColor(self: LineFormat) = value
"""

    BeginArrowheadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginArrowheadLength(self: LineFormat) -> MsoArrowheadLength

Set: BeginArrowheadLength(self: LineFormat) = value
"""

    BeginArrowheadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle

Set: BeginArrowheadStyle(self: LineFormat) = value
"""

    BeginArrowheadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BeginArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth

Set: BeginArrowheadWidth(self: LineFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LineFormat) -> int

"""

    DashStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DashStyle(self: LineFormat) -> MsoLineDashStyle

Set: DashStyle(self: LineFormat) = value
"""

    EndArrowheadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndArrowheadLength(self: LineFormat) -> MsoArrowheadLength

Set: EndArrowheadLength(self: LineFormat) = value
"""

    EndArrowheadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle

Set: EndArrowheadStyle(self: LineFormat) = value
"""

    EndArrowheadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth

Set: EndArrowheadWidth(self: LineFormat) = value
"""

    ForeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeColor(self: LineFormat) -> ColorFormat

Set: ForeColor(self: LineFormat) = value
"""

    InsetPen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsetPen(self: LineFormat) -> MsoTriState

Set: InsetPen(self: LineFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LineFormat) -> object

"""

    Pattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pattern(self: LineFormat) -> MsoPatternType

Set: Pattern(self: LineFormat) = value
"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: LineFormat) -> MsoLineStyle

Set: Style(self: LineFormat) = value
"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Transparency(self: LineFormat) -> Single

Set: Transparency(self: LineFormat) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: LineFormat) -> MsoTriState

Set: Visible(self: LineFormat) = value
"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weight(self: LineFormat) -> Single

Set: Weight(self: LineFormat) = value
"""



class Lines(IEnumerable):
    # no doc
    def Add(self, X1, Y1, X2, Y2):
        """ Add(self: Lines, X1: float, Y1: float, X2: float, Y2: float) -> Line """
        pass

    def BringToFront(self):
        """ BringToFront(self: Lines) -> object """
        pass

    def Copy(self):
        """ Copy(self: Lines) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Lines, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Lines) -> object """
        pass

    def Delete(self):
        """ Delete(self: Lines) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Lines) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Lines) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Lines) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Lines, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Lines, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Lines) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Lines) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Lines) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Lines) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Lines) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Lines) -> Application

"""

    ArrowHeadLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadLength(self: Lines) -> object

Set: ArrowHeadLength(self: Lines) = value
"""

    ArrowHeadStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadStyle(self: Lines) -> object

Set: ArrowHeadStyle(self: Lines) = value
"""

    ArrowHeadWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowHeadWidth(self: Lines) -> object

Set: ArrowHeadWidth(self: Lines) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Lines) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Lines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Lines) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Lines) -> bool

Set: Enabled(self: Lines) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Lines) -> float

Set: Height(self: Lines) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Lines) -> float

Set: Left(self: Lines) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Lines) -> bool

Set: Locked(self: Lines) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Lines) -> str

Set: OnAction(self: Lines) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Lines) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Lines) -> object

Set: Placement(self: Lines) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Lines) -> bool

Set: PrintObject(self: Lines) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Lines) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Lines) -> float

Set: Top(self: Lines) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Lines) -> bool

Set: Visible(self: Lines) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Lines) -> float

Set: Width(self: Lines) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Lines) -> int

"""



class LinkFormat:
    # no doc
    def Update(self):
        """ Update(self: LinkFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: LinkFormat) -> Application

"""

    AutoUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdate(self: LinkFormat) -> bool

Set: AutoUpdate(self: LinkFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: LinkFormat) -> XlCreator

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: LinkFormat) -> bool

Set: Locked(self: LinkFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: LinkFormat) -> object

"""



class ListBox:
    # no doc
    def AddItem(self, Text, Index):
        """ AddItem(self: ListBox, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: ListBox) -> object """
        pass

    def Copy(self):
        """ Copy(self: ListBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ListBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ListBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: ListBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ListBox) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: ListBox) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: ListBox, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ListBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ListBox) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListBox) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ListBox) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListBox) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ListBox) -> bool

Set: Display3DShading(self: ListBox) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ListBox) -> bool

Set: Enabled(self: ListBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ListBox) -> float

Set: Height(self: ListBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ListBox) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ListBox) -> float

Set: Left(self: ListBox) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ListBox) -> str

Set: LinkedCell(self: ListBox) = value
"""

    LinkedObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedObject(self: ListBox) -> object

"""

    ListCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListCount(self: ListBox) -> int

"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: ListBox) -> str

Set: ListFillRange(self: ListBox) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: ListBox) -> int

Set: ListIndex(self: ListBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ListBox) -> bool

Set: Locked(self: ListBox) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: ListBox) -> int

Set: MultiSelect(self: ListBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ListBox) -> str

Set: Name(self: ListBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ListBox) -> str

Set: OnAction(self: ListBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListBox) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ListBox) -> object

Set: Placement(self: ListBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ListBox) -> bool

Set: PrintObject(self: ListBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ListBox) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ListBox) -> float

Set: Top(self: ListBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ListBox) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ListBox) -> int

Set: Value(self: ListBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ListBox) -> bool

Set: Visible(self: ListBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ListBox) -> float

Set: Width(self: ListBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ListBox) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ListBox) -> int

Set: _Default(self: ListBox) = value
"""



class ListBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ListBoxes, Left: float, Top: float, Width: float, Height: float) -> ListBox """
        pass

    def AddItem(self, Text, Index):
        """ AddItem(self: ListBoxes, Text: object, Index: object) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: ListBoxes) -> object """
        pass

    def Copy(self):
        """ Copy(self: ListBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ListBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ListBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: ListBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ListBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ListBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ListBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ListBoxes, Index: object) -> object """
        pass

    def RemoveAllItems(self):
        """ RemoveAllItems(self: ListBoxes) -> object """
        pass

    def RemoveItem(self, Index, Count):
        """ RemoveItem(self: ListBoxes, Index: int, Count: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ListBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ListBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ListBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ListBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ListBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ListBoxes) """
        pass

    def _Dummy31(self):
        """ _Dummy31(self: ListBoxes) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: ListBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListBoxes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ListBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListBoxes) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ListBoxes) -> bool

Set: Display3DShading(self: ListBoxes) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ListBoxes) -> bool

Set: Enabled(self: ListBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ListBoxes) -> float

Set: Height(self: ListBoxes) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ListBoxes) -> float

Set: Left(self: ListBoxes) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ListBoxes) -> str

Set: LinkedCell(self: ListBoxes) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: ListBoxes) -> str

Set: ListFillRange(self: ListBoxes) = value
"""

    ListIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListIndex(self: ListBoxes) -> int

Set: ListIndex(self: ListBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ListBoxes) -> bool

Set: Locked(self: ListBoxes) = value
"""

    MultiSelect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiSelect(self: ListBoxes) -> int

Set: MultiSelect(self: ListBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ListBoxes) -> str

Set: OnAction(self: ListBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListBoxes) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ListBoxes) -> object

Set: Placement(self: ListBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ListBoxes) -> bool

Set: PrintObject(self: ListBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ListBoxes) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ListBoxes) -> float

Set: Top(self: ListBoxes) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ListBoxes) -> int

Set: Value(self: ListBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ListBoxes) -> bool

Set: Visible(self: ListBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ListBoxes) -> float

Set: Width(self: ListBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ListBoxes) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ListBoxes) -> int

Set: _Default(self: ListBoxes) = value
"""



class ListColumn:
    # no doc
    def Delete(self):
        """ Delete(self: ListColumn) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListColumn) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListColumn) -> XlCreator

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: ListColumn) -> Range

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ListColumn) -> int

"""

    ListDataFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListDataFormat(self: ListColumn) -> ListDataFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ListColumn) -> str

Set: Name(self: ListColumn) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListColumn) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: ListColumn) -> Range

"""

    SharePointFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharePointFormula(self: ListColumn) -> str

"""

    Total = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Total(self: ListColumn) -> Range

"""

    TotalsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsCalculation(self: ListColumn) -> XlTotalsCalculation

Set: TotalsCalculation(self: ListColumn) = value
"""

    XPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XPath(self: ListColumn) -> XPath

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ListColumn) -> str

"""



class ListColumns(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: ListColumns, Position: object) -> ListColumn """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ListColumns) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListColumns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ListColumns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListColumns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListColumns) -> object

"""



class ListDataFormat:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowFillIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFillIn(self: ListDataFormat) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListDataFormat) -> Application

"""

    Choices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Choices(self: ListDataFormat) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListDataFormat) -> XlCreator

"""

    DecimalPlaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalPlaces(self: ListDataFormat) -> int

"""

    DefaultValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultValue(self: ListDataFormat) -> object

"""

    IsPercent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPercent(self: ListDataFormat) -> bool

"""

    lcid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: lcid(self: ListDataFormat) -> int

"""

    MaxCharacters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxCharacters(self: ListDataFormat) -> int

"""

    MaxNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxNumber(self: ListDataFormat) -> object

"""

    MinNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinNumber(self: ListDataFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListDataFormat) -> object

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: ListDataFormat) -> bool

"""

    Required = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Required(self: ListDataFormat) -> bool

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ListDataFormat) -> XlListDataType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ListDataFormat) -> XlListDataType

"""



class ListObject:
    # no doc
    def Delete(self):
        """ Delete(self: ListObject) """
        pass

    def ExportToVisio(self):
        """ ExportToVisio(self: ListObject) """
        pass

    def Publish(self, Target, LinkSource):
        """ Publish(self: ListObject, Target: object, LinkSource: bool) -> str """
        pass

    def Refresh(self):
        """ Refresh(self: ListObject) """
        pass

    def Resize(self, Range):
        """ Resize(self: ListObject, Range: Range) """
        pass

    def Unlink(self):
        """ Unlink(self: ListObject) """
        pass

    def Unlist(self):
        """ Unlist(self: ListObject) """
        pass

    def UpdateChanges(self, iConflictType):
        """ UpdateChanges(self: ListObject, iConflictType: XlListConflict) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: ListObject) -> bool

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: ListObject) -> str

Set: AlternativeText(self: ListObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListObject) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: ListObject) -> AutoFilter

"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: ListObject) -> str

Set: Comment(self: ListObject) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListObject) -> XlCreator

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: ListObject) -> Range

"""

    DisplayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayName(self: ListObject) -> str

Set: DisplayName(self: ListObject) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: ListObject) -> bool

"""

    HeaderRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderRowRange(self: ListObject) -> Range

"""

    InsertRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertRowRange(self: ListObject) -> Range

"""

    ListColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListColumns(self: ListObject) -> ListColumns

"""

    ListRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListRows(self: ListObject) -> ListRows

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ListObject) -> str

Set: Name(self: ListObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListObject) -> object

"""

    QueryTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTable(self: ListObject) -> QueryTable

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: ListObject) -> Range

"""

    SharePointURL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharePointURL(self: ListObject) -> str

"""

    ShowAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAutoFilter(self: ListObject) -> bool

Set: ShowAutoFilter(self: ListObject) = value
"""

    ShowAutoFilterDropDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAutoFilterDropDown(self: ListObject) -> bool

Set: ShowAutoFilterDropDown(self: ListObject) = value
"""

    ShowHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHeaders(self: ListObject) -> bool

Set: ShowHeaders(self: ListObject) = value
"""

    ShowTableStyleColumnStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnStripes(self: ListObject) -> bool

Set: ShowTableStyleColumnStripes(self: ListObject) = value
"""

    ShowTableStyleFirstColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleFirstColumn(self: ListObject) -> bool

Set: ShowTableStyleFirstColumn(self: ListObject) = value
"""

    ShowTableStyleLastColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleLastColumn(self: ListObject) -> bool

Set: ShowTableStyleLastColumn(self: ListObject) = value
"""

    ShowTableStyleRowStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowStripes(self: ListObject) -> bool

Set: ShowTableStyleRowStripes(self: ListObject) = value
"""

    ShowTotals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTotals(self: ListObject) -> bool

Set: ShowTotals(self: ListObject) = value
"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: ListObject) -> Slicers

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: ListObject) -> Sort

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: ListObject) -> XlListObjectSourceType

"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: ListObject) -> str

Set: Summary(self: ListObject) = value
"""

    TableObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableObject(self: ListObject) -> TableObject

"""

    TableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle(self: ListObject) -> object

Set: TableStyle(self: ListObject) = value
"""

    TotalsRowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsRowRange(self: ListObject) -> Range

"""

    XmlMap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlMap(self: ListObject) -> XmlMap

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ListObject) -> str

"""



class ListObjects(IEnumerable):
    # no doc
    def Add(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination):
        """ Add(self: ListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object) -> ListObject """
        pass

    def AddEx(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination, TableStyleName):
        """ AddEx(self: ListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object, TableStyleName: object) -> ListObject """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ListObjects) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ListObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListObjects) -> object

"""



class ListRow:
    # no doc
    def Delete(self):
        """ Delete(self: ListRow) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListRow) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListRow) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ListRow) -> int

"""

    InvalidData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvalidData(self: ListRow) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListRow) -> object

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: ListRow) -> Range

"""



class ListRows(IEnumerable):
    # no doc
    def Add(self, Position):
        """ Add(self: ListRows, Position: object) -> ListRow """
        pass

    def AddEx(self, Position, AlwaysInsert):
        """ AddEx(self: ListRows, Position: object, AlwaysInsert: object) -> ListRow """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ListRows) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ListRows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ListRows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ListRows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ListRows) -> object

"""



class Mailer:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Mailer) -> Application

"""

    BCCRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BCCRecipients(self: Mailer) -> object

Set: BCCRecipients(self: Mailer) = value
"""

    CCRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CCRecipients(self: Mailer) -> object

Set: CCRecipients(self: Mailer) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Mailer) -> XlCreator

"""

    Enclosures = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enclosures(self: Mailer) -> object

Set: Enclosures(self: Mailer) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Mailer) -> object

"""

    Received = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Received(self: Mailer) -> bool

"""

    SendDateTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SendDateTime(self: Mailer) -> DateTime

"""

    Sender = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sender(self: Mailer) -> str

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: Mailer) -> str

Set: Subject(self: Mailer) = value
"""

    ToRecipients = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToRecipients(self: Mailer) -> object

Set: ToRecipients(self: Mailer) = value
"""

    WhichAddress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WhichAddress(self: Mailer) -> object

Set: WhichAddress(self: Mailer) = value
"""



class Menu:
    # no doc
    def Delete(self):
        """ Delete(self: Menu) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Menu) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Menu) -> str

Set: Caption(self: Menu) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Menu) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Menu) -> bool

Set: Enabled(self: Menu) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Menu) -> int

"""

    MenuItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MenuItems(self: Menu) -> MenuItems

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Menu) -> object

"""



class MenuBar:
    # no doc
    def Activate(self):
        """ Activate(self: MenuBar) """
        pass

    def Delete(self):
        """ Delete(self: MenuBar) """
        pass

    def Reset(self):
        """ Reset(self: MenuBar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: MenuBar) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: MenuBar) -> bool

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: MenuBar) -> str

Set: Caption(self: MenuBar) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: MenuBar) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: MenuBar) -> int

"""

    Menus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Menus(self: MenuBar) -> Menus

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: MenuBar) -> object

"""



class MenuBars(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: MenuBars, Name: object) -> MenuBar """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: MenuBars) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: MenuBars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: MenuBars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: MenuBars) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: MenuBars) -> object

"""



class MenuItem:
    # no doc
    def Delete(self):
        """ Delete(self: MenuItem) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: MenuItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: MenuItem) -> str

Set: Caption(self: MenuItem) = value
"""

    Checked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Checked(self: MenuItem) -> bool

Set: Checked(self: MenuItem) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: MenuItem) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: MenuItem) -> bool

Set: Enabled(self: MenuItem) = value
"""

    HelpContextID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpContextID(self: MenuItem) -> int

Set: HelpContextID(self: MenuItem) = value
"""

    HelpFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpFile(self: MenuItem) -> str

Set: HelpFile(self: MenuItem) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: MenuItem) -> int

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: MenuItem) -> str

Set: OnAction(self: MenuItem) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: MenuItem) -> object

"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: MenuItem) -> str

Set: StatusBar(self: MenuItem) = value
"""



class MenuItems(IEnumerable):
    # no doc
    def Add(self, Caption, OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID):
        """ Add(self: MenuItems, Caption: str, OnAction: object, ShortcutKey: object, Before: object, Restore: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> MenuItem """
        pass

    def AddMenu(self, Caption, Before, Restore):
        """ AddMenu(self: MenuItems, Caption: str, Before: object, Restore: object) -> Menu """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: MenuItems) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: MenuItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: MenuItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: MenuItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: MenuItems) -> object

"""



class Menus(IEnumerable):
    # no doc
    def Add(self, Caption, Before, Restore):
        """ Add(self: Menus, Caption: str, Before: object, Restore: object) -> Menu """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Menus) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Menus) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Menus) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Menus) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Menus) -> object

"""



class Model:
    # no doc
    def AddConnection(self, ConnectionToDataSource):
        """ AddConnection(self: Model, ConnectionToDataSource: WorkbookConnection) -> WorkbookConnection """
        pass

    def CreateModelWorkbookConnection(self, ModelTable):
        """ CreateModelWorkbookConnection(self: Model, ModelTable: object) -> WorkbookConnection """
        pass

    def Initialize(self):
        """ Initialize(self: Model) """
        pass

    def Refresh(self):
        """ Refresh(self: Model) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Model) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Model) -> XlCreator

"""

    DataModelConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataModelConnection(self: Model) -> WorkbookConnection

"""

    ModelRelationships = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelRelationships(self: Model) -> ModelRelationships

"""

    ModelTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTables(self: Model) -> ModelTables

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Model) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Model) -> object

"""



class ModelChanges:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelChanges) -> Application

"""

    ColumnsAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsAdded(self: ModelChanges) -> ModelColumnNames

"""

    ColumnsChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsChanged(self: ModelChanges) -> ModelColumnChanges

"""

    ColumnsDeleted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnsDeleted(self: ModelChanges) -> ModelColumnNames

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelChanges) -> XlCreator

"""

    MeasuresAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasuresAdded(self: ModelChanges) -> ModelMeasureNames

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelChanges) -> object

"""

    RelationshipChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelationshipChange(self: ModelChanges) -> bool

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Source(self: ModelChanges) -> XlModelChangeSource

"""

    TableNamesChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNamesChanged(self: ModelChanges) -> ModelTableNameChanges

"""

    TablesAdded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesAdded(self: ModelChanges) -> ModelTableNames

"""

    TablesDeleted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesDeleted(self: ModelChanges) -> ModelTableNames

"""

    TablesModified = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesModified(self: ModelChanges) -> ModelTableNames

"""

    UnknownChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnknownChange(self: ModelChanges) -> bool

"""



class ModelColumnChange:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelColumnChange) -> Application

"""

    ColumnName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnName(self: ModelColumnChange) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelColumnChange) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelColumnChange) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: ModelColumnChange) -> str

"""



class ModelColumnChanges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelColumnChanges) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelColumnChanges, Index: object) -> ModelColumnChange """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelColumnChanges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelColumnChanges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelColumnChanges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelColumnChanges) -> object

"""



class ModelColumnName:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelColumnName) -> Application

"""

    ColumnName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnName(self: ModelColumnName) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelColumnName) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelColumnName) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: ModelColumnName) -> str

"""



class ModelColumnNames(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelColumnNames) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelColumnNames, Index: object) -> ModelColumnName """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelColumnNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelColumnNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelColumnNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelColumnNames) -> object

"""



class ModelConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: ModelConnection) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelConnection) -> Application

"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: ModelConnection) -> CalculatedMembers

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: ModelConnection) -> object

Set: CommandText(self: ModelConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: ModelConnection) -> XlCmdType

Set: CommandType(self: ModelConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelConnection) -> object

"""



class ModelMeasureName:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelMeasureName) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelMeasureName) -> XlCreator

"""

    MeasureName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MeasureName(self: ModelMeasureName) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelMeasureName) -> object

"""

    TableName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableName(self: ModelMeasureName) -> str

"""



class ModelMeasureNames(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelMeasureNames) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelMeasureNames, Index: object) -> ModelMeasureName """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelMeasureNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelMeasureNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelMeasureNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelMeasureNames) -> object

"""



class ModelRelationship:
    # no doc
    def Delete(self):
        """ Delete(self: ModelRelationship) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: ModelRelationship) -> bool

Set: Active(self: ModelRelationship) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelRelationship) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelRelationship) -> XlCreator

"""

    ForeignKeyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeignKeyColumn(self: ModelRelationship) -> ModelTableColumn

"""

    ForeignKeyTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeignKeyTable(self: ModelRelationship) -> ModelTable

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelRelationship) -> object

"""

    PrimaryKeyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryKeyColumn(self: ModelRelationship) -> ModelTableColumn

"""

    PrimaryKeyTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryKeyTable(self: ModelRelationship) -> ModelTable

"""



class ModelRelationships(IEnumerable):
    # no doc
    def Add(self, ForeignKeyColumn, PrimaryKeyColumn):
        """ Add(self: ModelRelationships, ForeignKeyColumn: ModelTableColumn, PrimaryKeyColumn: ModelTableColumn) -> ModelRelationship """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ModelRelationships) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelRelationships, Index: object) -> ModelRelationship """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelRelationships) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelRelationships) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelRelationships) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelRelationships) -> object

"""



class ModelTable:
    # no doc
    def Refresh(self):
        """ Refresh(self: ModelTable) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: ModelTable) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTable) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTable) -> XlCreator

"""

    ModelTableColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTableColumns(self: ModelTable) -> ModelTableColumns

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ModelTable) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTable) -> object

"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: ModelTable) -> int

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: ModelTable) -> str

"""

    SourceWorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceWorkbookConnection(self: ModelTable) -> WorkbookConnection

"""



class ModelTableColumn:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTableColumn) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTableColumn) -> XlCreator

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: ModelTableColumn) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ModelTableColumn) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTableColumn) -> object

"""



class ModelTableColumns(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelTableColumns) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelTableColumns, Index: object) -> ModelTableColumn """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTableColumns) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelTableColumns) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTableColumns) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTableColumns) -> object

"""



class ModelTableNameChange:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTableNameChange) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTableNameChange) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTableNameChange) -> object

"""

    TableNameNew = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNameNew(self: ModelTableNameChange) -> str

"""

    TableNameOld = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableNameOld(self: ModelTableNameChange) -> str

"""



class ModelTableNameChanges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelTableNameChanges) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelTableNameChanges, Index: object) -> ModelTableNameChange """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTableNameChanges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelTableNameChanges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTableNameChanges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTableNameChanges) -> object

"""



class ModelTableNames:
    # no doc
    def Item(self, Index):
        """ Item(self: ModelTableNames, Index: object) -> str """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTableNames) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelTableNames) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTableNames) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTableNames) -> object

"""



class ModelTables(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ModelTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ModelTables, Index: object) -> ModelTable """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModelTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ModelTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModelTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModelTables) -> object

"""



class Module:
    # no doc
    def Activate(self):
        """ Activate(self: Module) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: Module, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: Module) """
        pass

    def InsertFile(self, Filename, Merge):
        """ InsertFile(self: Module, Filename: object, Merge: object) -> object """
        pass

    def Move(self, Before, After):
        """ Move(self: Module, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ PrintOut(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ Protect(self: Module, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ SaveAs(self: Module, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Module, Replace: object) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: Module, Password: object) """
        pass

    def _Dummy18(self):
        """ _Dummy18(self: Module) """
        pass

    def _Dummy21(self):
        """ _Dummy21(self: Module) """
        pass

    def _Dummy23(self):
        """ _Dummy23(self: Module) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _PrintOut_2(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut_2(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: Module, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: Module, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Module) -> Application

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: Module) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Module) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Module) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Module) -> str

Set: Name(self: Module) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: Module) -> object

"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: Module) -> str

Set: OnDoubleClick(self: Module) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: Module) -> str

Set: OnSheetActivate(self: Module) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: Module) -> str

Set: OnSheetDeactivate(self: Module) = value
"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: Module) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Module) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: Module) -> object

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: Module) -> bool

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: Module) -> bool

"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: Module) -> Shapes

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Module) -> XlSheetVisibility

Set: Visible(self: Module) = value
"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: Module) -> str

Set: _CodeName(self: Module) = value
"""



class Modules(IEnumerable):
    # no doc
    def Add(self, Before, After, Count):
        """ Add(self: Modules, Before: object, After: object, Count: object) -> Module """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: Modules, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: Modules, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: Modules) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Modules) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: Modules, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Modules, Replace: object) """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Modules) """
        pass

    def _Dummy7(self):
        """ _Dummy7(self: Modules) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Modules) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Modules) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Modules) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: Modules) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Modules) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Modules) -> object

Set: Visible(self: Modules) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: Modules) -> VPageBreaks

"""



class ModuleView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ModuleView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ModuleView) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ModuleView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: ModuleView) -> object

"""



class MultiThreadedCalculation:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: MultiThreadedCalculation) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: MultiThreadedCalculation) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: MultiThreadedCalculation) -> bool

Set: Enabled(self: MultiThreadedCalculation) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: MultiThreadedCalculation) -> object

"""

    ThreadCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreadCount(self: MultiThreadedCalculation) -> int

Set: ThreadCount(self: MultiThreadedCalculation) = value
"""

    ThreadMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreadMode(self: MultiThreadedCalculation) -> XlThreadMode

Set: ThreadMode(self: MultiThreadedCalculation) = value
"""



class Name:
    # no doc
    def Delete(self):
        """ Delete(self: Name) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Name) -> Application

"""

    Category = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Category(self: Name) -> str

Set: Category(self: Name) = value
"""

    CategoryLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryLocal(self: Name) -> str

Set: CategoryLocal(self: Name) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: Name) -> str

Set: Comment(self: Name) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Name) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Name) -> int

"""

    MacroType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MacroType(self: Name) -> XlXLMMacroType

Set: MacroType(self: Name) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Name) -> str

Set: Name(self: Name) = value
"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: Name) -> str

Set: NameLocal(self: Name) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Name) -> object

"""

    RefersTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersTo(self: Name) -> object

Set: RefersTo(self: Name) = value
"""

    RefersToLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToLocal(self: Name) -> object

Set: RefersToLocal(self: Name) = value
"""

    RefersToR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToR1C1(self: Name) -> object

Set: RefersToR1C1(self: Name) = value
"""

    RefersToR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToR1C1Local(self: Name) -> object

Set: RefersToR1C1Local(self: Name) = value
"""

    RefersToRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefersToRange(self: Name) -> Range

"""

    ShortcutKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShortcutKey(self: Name) -> str

Set: ShortcutKey(self: Name) = value
"""

    ValidWorkbookParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ValidWorkbookParameter(self: Name) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Name) -> str

Set: Value(self: Name) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Name) -> bool

Set: Visible(self: Name) = value
"""

    WorkbookParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookParameter(self: Name) -> bool

Set: WorkbookParameter(self: Name) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: Name) -> str

"""



class Names(IEnumerable):
    # no doc
    def Add(self, Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local):
        """ Add(self: Names, Name: object, RefersTo: object, Visible: object, MacroType: object, ShortcutKey: object, Category: object, NameLocal: object, RefersToLocal: object, CategoryLocal: object, RefersToR1C1: object, RefersToR1C1Local: object) -> Name """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Names) -> IEnumerator """
        pass

    def Item(self, Index, IndexLocal, RefersTo):
        """ Item(self: Names, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        pass

    def _Default(self, Index, IndexLocal, RefersTo):
        """ _Default(self: Names, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Names) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Names) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Names) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Names) -> object

"""



class NegativeBarFormat:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: NegativeBarFormat) -> Application

"""

    BorderColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BorderColor(self: NegativeBarFormat) -> object

"""

    BorderColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BorderColorType(self: NegativeBarFormat) -> XlDataBarNegativeColorType

Set: BorderColorType(self: NegativeBarFormat) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: NegativeBarFormat) -> object

"""

    ColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorType(self: NegativeBarFormat) -> XlDataBarNegativeColorType

Set: ColorType(self: NegativeBarFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: NegativeBarFormat) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: NegativeBarFormat) -> object

"""



class ODBCConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: ODBCConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: ODBCConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: ODBCConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: ODBCConnection) -> bool

Set: AlwaysUseConnectionFile(self: ODBCConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ODBCConnection) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: ODBCConnection) -> bool

Set: BackgroundQuery(self: ODBCConnection) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: ODBCConnection) -> object

Set: CommandText(self: ODBCConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: ODBCConnection) -> XlCmdType

Set: CommandType(self: ODBCConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: ODBCConnection) -> object

Set: Connection(self: ODBCConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ODBCConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: ODBCConnection) -> bool

Set: EnableRefresh(self: ODBCConnection) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ODBCConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: ODBCConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: ODBCConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: ODBCConnection) -> bool

Set: RefreshOnFileOpen(self: ODBCConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: ODBCConnection) -> int

Set: RefreshPeriod(self: ODBCConnection) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: ODBCConnection) -> XlRobustConnect

Set: RobustConnect(self: ODBCConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: ODBCConnection) -> bool

Set: SavePassword(self: ODBCConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: ODBCConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: ODBCConnection) = value
"""

    ServerSSOApplicationID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerSSOApplicationID(self: ODBCConnection) -> str

Set: ServerSSOApplicationID(self: ODBCConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: ODBCConnection) -> str

Set: SourceConnectionFile(self: ODBCConnection) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: ODBCConnection) -> object

Set: SourceData(self: ODBCConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: ODBCConnection) -> str

Set: SourceDataFile(self: ODBCConnection) = value
"""



class ODBCError:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ODBCError) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ODBCError) -> XlCreator

"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: ODBCError) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ODBCError) -> object

"""

    SqlState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SqlState(self: ODBCError) -> str

"""



class ODBCErrors(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ODBCErrors) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ODBCErrors, Index: int) -> ODBCError """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ODBCErrors) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ODBCErrors) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ODBCErrors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ODBCErrors) -> object

"""



class OLEDBConnection:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: OLEDBConnection) """
        pass

    def MakeConnection(self):
        """ MakeConnection(self: OLEDBConnection) """
        pass

    def Reconnect(self):
        """ Reconnect(self: OLEDBConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: OLEDBConnection) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: OLEDBConnection, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: OLEDBConnection) -> object

"""

    AlwaysUseConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlwaysUseConnectionFile(self: OLEDBConnection) -> bool

Set: AlwaysUseConnectionFile(self: OLEDBConnection) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEDBConnection) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: OLEDBConnection) -> bool

Set: BackgroundQuery(self: OLEDBConnection) = value
"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: OLEDBConnection) -> CalculatedMembers

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: OLEDBConnection) -> object

Set: CommandText(self: OLEDBConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: OLEDBConnection) -> XlCmdType

Set: CommandType(self: OLEDBConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: OLEDBConnection) -> object

Set: Connection(self: OLEDBConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEDBConnection) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: OLEDBConnection) -> bool

Set: EnableRefresh(self: OLEDBConnection) = value
"""

    IsConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsConnected(self: OLEDBConnection) -> bool

"""

    LocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocalConnection(self: OLEDBConnection) -> object

Set: LocalConnection(self: OLEDBConnection) = value
"""

    LocaleID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocaleID(self: OLEDBConnection) -> int

Set: LocaleID(self: OLEDBConnection) = value
"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: OLEDBConnection) -> bool

Set: MaintainConnection(self: OLEDBConnection) = value
"""

    MaxDrillthroughRecords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxDrillthroughRecords(self: OLEDBConnection) -> int

Set: MaxDrillthroughRecords(self: OLEDBConnection) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: OLEDBConnection) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEDBConnection) -> object

"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: OLEDBConnection) -> DateTime

"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: OLEDBConnection) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: OLEDBConnection) -> bool

Set: RefreshOnFileOpen(self: OLEDBConnection) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: OLEDBConnection) -> int

Set: RefreshPeriod(self: OLEDBConnection) = value
"""

    RetrieveInOfficeUILang = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RetrieveInOfficeUILang(self: OLEDBConnection) -> bool

Set: RetrieveInOfficeUILang(self: OLEDBConnection) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: OLEDBConnection) -> XlRobustConnect

Set: RobustConnect(self: OLEDBConnection) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: OLEDBConnection) -> bool

Set: SavePassword(self: OLEDBConnection) = value
"""

    ServerCredentialsMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerCredentialsMethod(self: OLEDBConnection) -> XlCredentialsMethod

Set: ServerCredentialsMethod(self: OLEDBConnection) = value
"""

    ServerFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerFillColor(self: OLEDBConnection) -> bool

Set: ServerFillColor(self: OLEDBConnection) = value
"""

    ServerFontStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerFontStyle(self: OLEDBConnection) -> bool

Set: ServerFontStyle(self: OLEDBConnection) = value
"""

    ServerNumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerNumberFormat(self: OLEDBConnection) -> bool

Set: ServerNumberFormat(self: OLEDBConnection) = value
"""

    ServerSSOApplicationID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerSSOApplicationID(self: OLEDBConnection) -> str

Set: ServerSSOApplicationID(self: OLEDBConnection) = value
"""

    ServerTextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerTextColor(self: OLEDBConnection) -> bool

Set: ServerTextColor(self: OLEDBConnection) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: OLEDBConnection) -> str

Set: SourceConnectionFile(self: OLEDBConnection) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: OLEDBConnection) -> str

Set: SourceDataFile(self: OLEDBConnection) = value
"""

    UseLocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLocalConnection(self: OLEDBConnection) -> bool

Set: UseLocalConnection(self: OLEDBConnection) = value
"""



class OLEDBError:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEDBError) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEDBError) -> XlCreator

"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: OLEDBError) -> str

"""

    Native = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Native(self: OLEDBError) -> int

"""

    Number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Number(self: OLEDBError) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEDBError) -> object

"""

    SqlState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SqlState(self: OLEDBError) -> str

"""

    Stage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stage(self: OLEDBError) -> int

"""



class OLEDBErrors(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: OLEDBErrors) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: OLEDBErrors, Index: int) -> OLEDBError """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEDBErrors) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: OLEDBErrors) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEDBErrors) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEDBErrors) -> object

"""



class OLEFormat:
    # no doc
    def Activate(self):
        """ Activate(self: OLEFormat) """
        pass

    def Verb(self, Verb):
        """ Verb(self: OLEFormat, Verb: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEFormat) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEFormat) -> XlCreator

"""

    Object = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Object(self: OLEFormat) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEFormat) -> object

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: OLEFormat) -> str

"""



class OLEObjectEvents_Event:
    # no doc
# Error generating skeleton for function add_GotFocus: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_LostFocus: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_GotFocus: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_LostFocus: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GotFocus = None
    LostFocus = None


class _OLEObject:
    # no doc
    def Activate(self):
        """ Activate(self: _OLEObject) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: _OLEObject) -> object """
        pass

    def Copy(self):
        """ Copy(self: _OLEObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: _OLEObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: _OLEObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: _OLEObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: _OLEObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: _OLEObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: _OLEObject) -> object """
        pass

    def Update(self):
        """ Update(self: _OLEObject) -> object """
        pass

    def Verb(self, Verb):
        """ Verb(self: _OLEObject, Verb: XlOLEVerb) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltHTML(self: _OLEObject) -> str

Set: AltHTML(self: _OLEObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _OLEObject) -> Application

"""

    AutoLoad = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLoad(self: _OLEObject) -> bool

Set: AutoLoad(self: _OLEObject) = value
"""

    AutoUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdate(self: _OLEObject) -> bool

Set: AutoUpdate(self: _OLEObject) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: _OLEObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: _OLEObject) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _OLEObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: _OLEObject) -> bool

Set: Enabled(self: _OLEObject) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: _OLEObject) -> float

Set: Height(self: _OLEObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: _OLEObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: _OLEObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: _OLEObject) -> float

Set: Left(self: _OLEObject) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: _OLEObject) -> str

Set: LinkedCell(self: _OLEObject) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: _OLEObject) -> str

Set: ListFillRange(self: _OLEObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: _OLEObject) -> bool

Set: Locked(self: _OLEObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _OLEObject) -> str

Set: Name(self: _OLEObject) = value
"""

    Object = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Object(self: _OLEObject) -> object

"""

    OLEType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEType(self: _OLEObject) -> object

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: _OLEObject) -> str

Set: OnAction(self: _OLEObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _OLEObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: _OLEObject) -> object

Set: Placement(self: _OLEObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: _OLEObject) -> bool

Set: PrintObject(self: _OLEObject) = value
"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: _OLEObject) -> str

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: _OLEObject) -> bool

Set: Shadow(self: _OLEObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: _OLEObject) -> ShapeRange

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: _OLEObject) -> str

Set: SourceName(self: _OLEObject) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: _OLEObject) -> float

Set: Top(self: _OLEObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: _OLEObject) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: _OLEObject) -> bool

Set: Visible(self: _OLEObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: _OLEObject) -> float

Set: Width(self: _OLEObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: _OLEObject) -> int

"""



class OLEObject(_OLEObject, OLEObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class OLEObjectClass(__ComObject, _OLEObject, OLEObject, OLEObjectEvents_Event):
    """ OLEObjectClass() """
    def Activate(self):
        """ Activate(self: OLEObjectClass) -> object """
        pass

# Error generating skeleton for function add_GotFocus: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_LostFocus: sequence item 1: expected string, NoneType found

    def BringToFront(self):
        """ BringToFront(self: OLEObjectClass) -> object """
        pass

    def Copy(self):
        """ Copy(self: OLEObjectClass) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: OLEObjectClass, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: OLEObjectClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: OLEObjectClass) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: OLEObjectClass) -> object """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

# Error generating skeleton for function remove_GotFocus: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_LostFocus: sequence item 1: expected string, NoneType found

    def Select(self, Replace):
        """ Select(self: OLEObjectClass, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: OLEObjectClass) -> object """
        pass

    def Update(self):
        """ Update(self: OLEObjectClass) -> object """
        pass

    def Verb(self, Verb):
        """ Verb(self: OLEObjectClass, Verb: XlOLEVerb) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AltHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltHTML(self: OLEObjectClass) -> str

Set: AltHTML(self: OLEObjectClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEObjectClass) -> Application

"""

    AutoLoad = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLoad(self: OLEObjectClass) -> bool

Set: AutoLoad(self: OLEObjectClass) = value
"""

    AutoUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdate(self: OLEObjectClass) -> bool

Set: AutoUpdate(self: OLEObjectClass) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: OLEObjectClass) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: OLEObjectClass) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEObjectClass) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: OLEObjectClass) -> bool

Set: Enabled(self: OLEObjectClass) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: OLEObjectClass) -> float

Set: Height(self: OLEObjectClass) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: OLEObjectClass) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: OLEObjectClass) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: OLEObjectClass) -> float

Set: Left(self: OLEObjectClass) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: OLEObjectClass) -> str

Set: LinkedCell(self: OLEObjectClass) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: OLEObjectClass) -> str

Set: ListFillRange(self: OLEObjectClass) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: OLEObjectClass) -> bool

Set: Locked(self: OLEObjectClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: OLEObjectClass) -> str

Set: Name(self: OLEObjectClass) = value
"""

    Object = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Object(self: OLEObjectClass) -> object

"""

    OLEType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEType(self: OLEObjectClass) -> object

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: OLEObjectClass) -> str

Set: OnAction(self: OLEObjectClass) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEObjectClass) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: OLEObjectClass) -> object

Set: Placement(self: OLEObjectClass) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: OLEObjectClass) -> bool

Set: PrintObject(self: OLEObjectClass) = value
"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: OLEObjectClass) -> str

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: OLEObjectClass) -> bool

Set: Shadow(self: OLEObjectClass) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: OLEObjectClass) -> ShapeRange

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: OLEObjectClass) -> str

Set: SourceName(self: OLEObjectClass) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: OLEObjectClass) -> float

Set: Top(self: OLEObjectClass) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: OLEObjectClass) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: OLEObjectClass) -> bool

Set: Visible(self: OLEObjectClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: OLEObjectClass) -> float

Set: Width(self: OLEObjectClass) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: OLEObjectClass) -> int

"""


    GotFocus = None
    LostFocus = None


class OLEObjectEvents:
    # no doc
    def GotFocus(self):
        """ GotFocus(self: OLEObjectEvents) """
        pass

    def LostFocus(self):
        """ LostFocus(self: OLEObjectEvents) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class OLEObjectEvents_GotFocusEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ OLEObjectEvents_GotFocusEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: OLEObjectEvents_GotFocusEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class OLEObjectEvents_LostFocusEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ OLEObjectEvents_LostFocusEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: OLEObjectEvents_LostFocusEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class OLEObjectEvents_SinkHelper(object, OLEObjectEvents):
    # no doc
    def GotFocus(self):
        """ GotFocus(self: OLEObjectEvents_SinkHelper) """
        pass

    def LostFocus(self):
        """ LostFocus(self: OLEObjectEvents_SinkHelper) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_dwCookie = None
    m_GotFocusDelegate = None
    m_LostFocusDelegate = None


class OLEObjects(IEnumerable):
    # no doc
    def Add(self, ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height):
        """ Add(self: OLEObjects, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> OLEObject """
        pass

    def BringToFront(self):
        """ BringToFront(self: OLEObjects) -> object """
        pass

    def Copy(self):
        """ Copy(self: OLEObjects) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: OLEObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: OLEObjects) -> object """
        pass

    def Delete(self):
        """ Delete(self: OLEObjects) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: OLEObjects) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: OLEObjects) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: OLEObjects) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: OLEObjects, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: OLEObjects, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: OLEObjects) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: OLEObjects) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: OLEObjects) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: OLEObjects) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: OLEObjects) """
        pass

    def _Dummy30(self):
        """ _Dummy30(self: OLEObjects) """
        pass

    def _Dummy32(self):
        """ _Dummy32(self: OLEObjects) """
        pass

    def _Dummy33(self):
        """ _Dummy33(self: OLEObjects) """
        pass

    def _Dummy34(self):
        """ _Dummy34(self: OLEObjects) """
        pass

    def _Dummy36(self):
        """ _Dummy36(self: OLEObjects) """
        pass

    def _Dummy37(self):
        """ _Dummy37(self: OLEObjects) """
        pass

    def _Dummy38(self):
        """ _Dummy38(self: OLEObjects) """
        pass

    def _Dummy39(self):
        """ _Dummy39(self: OLEObjects) """
        pass

    def _Dummy40(self):
        """ _Dummy40(self: OLEObjects) """
        pass

    def _Dummy41(self):
        """ _Dummy41(self: OLEObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OLEObjects) -> Application

"""

    AutoLoad = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLoad(self: OLEObjects) -> bool

Set: AutoLoad(self: OLEObjects) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: OLEObjects) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: OLEObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OLEObjects) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: OLEObjects) -> bool

Set: Enabled(self: OLEObjects) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: OLEObjects) -> float

Set: Height(self: OLEObjects) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: OLEObjects) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: OLEObjects) -> float

Set: Left(self: OLEObjects) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: OLEObjects) -> bool

Set: Locked(self: OLEObjects) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: OLEObjects) -> str

Set: OnAction(self: OLEObjects) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OLEObjects) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: OLEObjects) -> object

Set: Placement(self: OLEObjects) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: OLEObjects) -> bool

Set: PrintObject(self: OLEObjects) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: OLEObjects) -> bool

Set: Shadow(self: OLEObjects) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: OLEObjects) -> ShapeRange

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: OLEObjects) -> str

Set: SourceName(self: OLEObjects) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: OLEObjects) -> float

Set: Top(self: OLEObjects) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: OLEObjects) -> bool

Set: Visible(self: OLEObjects) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: OLEObjects) -> float

Set: Width(self: OLEObjects) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: OLEObjects) -> int

"""



class OptionButton:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: OptionButton) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: OptionButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: OptionButton) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: OptionButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: OptionButton) -> object """
        pass

    def Delete(self):
        """ Delete(self: OptionButton) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: OptionButton) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: OptionButton, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: OptionButton) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: OptionButton) -> object

Set: Accelerator(self: OptionButton) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OptionButton) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: OptionButton) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: OptionButton) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: OptionButton) -> str

Set: Caption(self: OptionButton) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OptionButton) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: OptionButton) -> bool

Set: Display3DShading(self: OptionButton) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: OptionButton) -> bool

Set: Enabled(self: OptionButton) = value
"""

    GroupBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupBox(self: OptionButton) -> GroupBox

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: OptionButton) -> float

Set: Height(self: OptionButton) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: OptionButton) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: OptionButton) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: OptionButton) -> float

Set: Left(self: OptionButton) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: OptionButton) -> str

Set: LinkedCell(self: OptionButton) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: OptionButton) -> bool

Set: Locked(self: OptionButton) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: OptionButton) -> bool

Set: LockedText(self: OptionButton) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: OptionButton) -> str

Set: Name(self: OptionButton) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: OptionButton) -> str

Set: OnAction(self: OptionButton) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OptionButton) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: OptionButton) -> object

Set: PhoneticAccelerator(self: OptionButton) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: OptionButton) -> object

Set: Placement(self: OptionButton) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: OptionButton) -> bool

Set: PrintObject(self: OptionButton) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: OptionButton) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: OptionButton) -> str

Set: Text(self: OptionButton) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: OptionButton) -> float

Set: Top(self: OptionButton) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: OptionButton) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: OptionButton) -> object

Set: Value(self: OptionButton) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: OptionButton) -> bool

Set: Visible(self: OptionButton) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: OptionButton) -> float

Set: Width(self: OptionButton) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: OptionButton) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: OptionButton) -> int

Set: _Default(self: OptionButton) = value
"""



class OptionButtons(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: OptionButtons, Left: float, Top: float, Width: float, Height: float) -> OptionButton """
        pass

    def BringToFront(self):
        """ BringToFront(self: OptionButtons) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: OptionButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: OptionButtons) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: OptionButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: OptionButtons) -> object """
        pass

    def Delete(self):
        """ Delete(self: OptionButtons) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: OptionButtons) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: OptionButtons) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: OptionButtons) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: OptionButtons, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: OptionButtons, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: OptionButtons) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: OptionButtons) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: OptionButtons) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: OptionButtons) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: OptionButtons) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Accelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Accelerator(self: OptionButtons) -> object

Set: Accelerator(self: OptionButtons) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: OptionButtons) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: OptionButtons) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: OptionButtons) -> str

Set: Caption(self: OptionButtons) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: OptionButtons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: OptionButtons) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: OptionButtons) -> bool

Set: Display3DShading(self: OptionButtons) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: OptionButtons) -> bool

Set: Enabled(self: OptionButtons) = value
"""

    GroupBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupBox(self: OptionButtons) -> GroupBox

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: OptionButtons) -> float

Set: Height(self: OptionButtons) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: OptionButtons) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: OptionButtons) -> float

Set: Left(self: OptionButtons) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: OptionButtons) -> str

Set: LinkedCell(self: OptionButtons) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: OptionButtons) -> bool

Set: Locked(self: OptionButtons) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: OptionButtons) -> bool

Set: LockedText(self: OptionButtons) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: OptionButtons) -> str

Set: OnAction(self: OptionButtons) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: OptionButtons) -> object

"""

    PhoneticAccelerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PhoneticAccelerator(self: OptionButtons) -> object

Set: PhoneticAccelerator(self: OptionButtons) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: OptionButtons) -> object

Set: Placement(self: OptionButtons) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: OptionButtons) -> bool

Set: PrintObject(self: OptionButtons) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: OptionButtons) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: OptionButtons) -> str

Set: Text(self: OptionButtons) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: OptionButtons) -> float

Set: Top(self: OptionButtons) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: OptionButtons) -> object

Set: Value(self: OptionButtons) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: OptionButtons) -> bool

Set: Visible(self: OptionButtons) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: OptionButtons) -> float

Set: Width(self: OptionButtons) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: OptionButtons) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: OptionButtons) -> int

Set: _Default(self: OptionButtons) = value
"""



class Outline:
    # no doc
    def ShowLevels(self, RowLevels, ColumnLevels):
        """ ShowLevels(self: Outline, RowLevels: object, ColumnLevels: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Outline) -> Application

"""

    AutomaticStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutomaticStyles(self: Outline) -> bool

Set: AutomaticStyles(self: Outline) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Outline) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Outline) -> object

"""

    SummaryColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryColumn(self: Outline) -> XlSummaryColumn

Set: SummaryColumn(self: Outline) = value
"""

    SummaryRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryRow(self: Outline) -> XlSummaryRow

Set: SummaryRow(self: Outline) = value
"""



class Oval:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Oval) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Oval, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Oval) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Oval, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Oval) -> object """
        pass

    def Delete(self):
        """ Delete(self: Oval) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Oval) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Oval, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Oval) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Oval) -> bool

Set: AddIndent(self: Oval) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Oval) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Oval) -> object

Set: AutoScaleFont(self: Oval) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Oval) -> bool

Set: AutoSize(self: Oval) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Oval) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Oval) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Oval) -> str

Set: Caption(self: Oval) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Oval) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Oval) -> bool

Set: Enabled(self: Oval) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Oval) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Oval) -> str

Set: Formula(self: Oval) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Oval) -> float

Set: Height(self: Oval) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Oval) -> object

Set: HorizontalAlignment(self: Oval) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Oval) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Oval) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Oval) -> float

Set: Left(self: Oval) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Oval) -> bool

Set: Locked(self: Oval) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Oval) -> bool

Set: LockedText(self: Oval) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Oval) -> str

Set: Name(self: Oval) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Oval) -> str

Set: OnAction(self: Oval) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Oval) -> object

Set: Orientation(self: Oval) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Oval) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Oval) -> object

Set: Placement(self: Oval) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Oval) -> bool

Set: PrintObject(self: Oval) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Oval) -> int

Set: ReadingOrder(self: Oval) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Oval) -> bool

Set: Shadow(self: Oval) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Oval) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Oval) -> str

Set: Text(self: Oval) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Oval) -> float

Set: Top(self: Oval) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Oval) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Oval) -> object

Set: VerticalAlignment(self: Oval) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Oval) -> bool

Set: Visible(self: Oval) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Oval) -> float

Set: Width(self: Oval) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Oval) -> int

"""



class Ovals(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Ovals, Left: float, Top: float, Width: float, Height: float) -> Oval """
        pass

    def BringToFront(self):
        """ BringToFront(self: Ovals) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Ovals, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Ovals) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Ovals, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Ovals) -> object """
        pass

    def Delete(self):
        """ Delete(self: Ovals) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Ovals) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Ovals) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Ovals) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Ovals, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Ovals, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Ovals) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Ovals) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Ovals) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Ovals) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Ovals) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Ovals) -> bool

Set: AddIndent(self: Ovals) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Ovals) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Ovals) -> object

Set: AutoScaleFont(self: Ovals) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Ovals) -> bool

Set: AutoSize(self: Ovals) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Ovals) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Ovals) -> str

Set: Caption(self: Ovals) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Ovals) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Ovals) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Ovals) -> bool

Set: Enabled(self: Ovals) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Ovals) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Ovals) -> str

Set: Formula(self: Ovals) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Ovals) -> float

Set: Height(self: Ovals) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Ovals) -> object

Set: HorizontalAlignment(self: Ovals) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Ovals) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Ovals) -> float

Set: Left(self: Ovals) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Ovals) -> bool

Set: Locked(self: Ovals) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Ovals) -> bool

Set: LockedText(self: Ovals) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Ovals) -> str

Set: OnAction(self: Ovals) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Ovals) -> object

Set: Orientation(self: Ovals) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Ovals) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Ovals) -> object

Set: Placement(self: Ovals) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Ovals) -> bool

Set: PrintObject(self: Ovals) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Ovals) -> int

Set: ReadingOrder(self: Ovals) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Ovals) -> bool

Set: Shadow(self: Ovals) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Ovals) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Ovals) -> str

Set: Text(self: Ovals) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Ovals) -> float

Set: Top(self: Ovals) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Ovals) -> object

Set: VerticalAlignment(self: Ovals) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Ovals) -> bool

Set: Visible(self: Ovals) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Ovals) -> float

Set: Width(self: Ovals) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Ovals) -> int

"""



class Page:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CenterFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooter(self: Page) -> HeaderFooter

"""

    CenterHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeader(self: Page) -> HeaderFooter

"""

    LeftFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooter(self: Page) -> HeaderFooter

"""

    LeftHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeader(self: Page) -> HeaderFooter

"""

    RightFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooter(self: Page) -> HeaderFooter

"""

    RightHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeader(self: Page) -> HeaderFooter

"""



class Pages(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Pages) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Pages) -> int

"""



class PageSetup:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlignMarginsHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlignMarginsHeaderFooter(self: PageSetup) -> bool

Set: AlignMarginsHeaderFooter(self: PageSetup) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PageSetup) -> Application

"""

    BlackAndWhite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackAndWhite(self: PageSetup) -> bool

Set: BlackAndWhite(self: PageSetup) = value
"""

    BottomMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomMargin(self: PageSetup) -> float

Set: BottomMargin(self: PageSetup) = value
"""

    CenterFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooter(self: PageSetup) -> str

Set: CenterFooter(self: PageSetup) = value
"""

    CenterFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterFooterPicture(self: PageSetup) -> Graphic

"""

    CenterHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeader(self: PageSetup) -> str

Set: CenterHeader(self: PageSetup) = value
"""

    CenterHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHeaderPicture(self: PageSetup) -> Graphic

"""

    CenterHorizontally = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterHorizontally(self: PageSetup) -> bool

Set: CenterHorizontally(self: PageSetup) = value
"""

    CenterVertically = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterVertically(self: PageSetup) -> bool

Set: CenterVertically(self: PageSetup) = value
"""

    ChartSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartSize(self: PageSetup) -> XlObjectSize

Set: ChartSize(self: PageSetup) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PageSetup) -> XlCreator

"""

    DifferentFirstPageHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DifferentFirstPageHeaderFooter(self: PageSetup) -> bool

Set: DifferentFirstPageHeaderFooter(self: PageSetup) = value
"""

    Draft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Draft(self: PageSetup) -> bool

Set: Draft(self: PageSetup) = value
"""

    EvenPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EvenPage(self: PageSetup) -> Page

"""

    FirstPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstPage(self: PageSetup) -> Page

"""

    FirstPageNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstPageNumber(self: PageSetup) -> int

Set: FirstPageNumber(self: PageSetup) = value
"""

    FitToPagesTall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitToPagesTall(self: PageSetup) -> object

Set: FitToPagesTall(self: PageSetup) = value
"""

    FitToPagesWide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitToPagesWide(self: PageSetup) -> object

Set: FitToPagesWide(self: PageSetup) = value
"""

    FooterMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FooterMargin(self: PageSetup) -> float

Set: FooterMargin(self: PageSetup) = value
"""

    HeaderMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderMargin(self: PageSetup) -> float

Set: HeaderMargin(self: PageSetup) = value
"""

    LeftFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooter(self: PageSetup) -> str

Set: LeftFooter(self: PageSetup) = value
"""

    LeftFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftFooterPicture(self: PageSetup) -> Graphic

"""

    LeftHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeader(self: PageSetup) -> str

Set: LeftHeader(self: PageSetup) = value
"""

    LeftHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftHeaderPicture(self: PageSetup) -> Graphic

"""

    LeftMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeftMargin(self: PageSetup) -> float

Set: LeftMargin(self: PageSetup) = value
"""

    OddAndEvenPagesHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OddAndEvenPagesHeaderFooter(self: PageSetup) -> bool

Set: OddAndEvenPagesHeaderFooter(self: PageSetup) = value
"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: PageSetup) -> XlOrder

Set: Order(self: PageSetup) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: PageSetup) -> XlPageOrientation

Set: Orientation(self: PageSetup) = value
"""

    Pages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pages(self: PageSetup) -> Pages

"""

    PaperSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSize(self: PageSetup) -> XlPaperSize

Set: PaperSize(self: PageSetup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PageSetup) -> object

"""

    PrintArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintArea(self: PageSetup) -> str

Set: PrintArea(self: PageSetup) = value
"""

    PrintComments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintComments(self: PageSetup) -> XlPrintLocation

Set: PrintComments(self: PageSetup) = value
"""

    PrintErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintErrors(self: PageSetup) -> XlPrintErrors

Set: PrintErrors(self: PageSetup) = value
"""

    PrintGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintGridlines(self: PageSetup) -> bool

Set: PrintGridlines(self: PageSetup) = value
"""

    PrintHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintHeadings(self: PageSetup) -> bool

Set: PrintHeadings(self: PageSetup) = value
"""

    PrintNotes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintNotes(self: PageSetup) -> bool

Set: PrintNotes(self: PageSetup) = value
"""

    PrintTitleColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitleColumns(self: PageSetup) -> str

Set: PrintTitleColumns(self: PageSetup) = value
"""

    PrintTitleRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitleRows(self: PageSetup) -> str

Set: PrintTitleRows(self: PageSetup) = value
"""

    RightFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooter(self: PageSetup) -> str

Set: RightFooter(self: PageSetup) = value
"""

    RightFooterPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightFooterPicture(self: PageSetup) -> Graphic

"""

    RightHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeader(self: PageSetup) -> str

Set: RightHeader(self: PageSetup) = value
"""

    RightHeaderPicture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightHeaderPicture(self: PageSetup) -> Graphic

"""

    RightMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightMargin(self: PageSetup) -> float

Set: RightMargin(self: PageSetup) = value
"""

    ScaleWithDocHeaderFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleWithDocHeaderFooter(self: PageSetup) -> bool

Set: ScaleWithDocHeaderFooter(self: PageSetup) = value
"""

    TopMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopMargin(self: PageSetup) -> float

Set: TopMargin(self: PageSetup) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Zoom(self: PageSetup) -> object

Set: Zoom(self: PageSetup) = value
"""



class Pane:
    # no doc
    def Activate(self):
        """ Activate(self: Pane) -> bool """
        pass

    def LargeScroll(self, Down, Up, ToRight, ToLeft):
        """ LargeScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def PointsToScreenPixelsX(self, Points):
        """ PointsToScreenPixelsX(self: Pane, Points: int) -> int """
        pass

    def PointsToScreenPixelsY(self, Points):
        """ PointsToScreenPixelsY(self: Pane, Points: int) -> int """
        pass

    def ScrollIntoView(self, Left, Top, Width, Height, Start):
        """ ScrollIntoView(self: Pane, Left: int, Top: int, Width: int, Height: int, Start: object) """
        pass

    def SmallScroll(self, Down, Up, ToRight, ToLeft):
        """ SmallScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Pane) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Pane) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Pane) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Pane) -> object

"""

    ScrollColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollColumn(self: Pane) -> int

Set: ScrollColumn(self: Pane) = value
"""

    ScrollRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollRow(self: Pane) -> int

Set: ScrollRow(self: Pane) = value
"""

    VisibleRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleRange(self: Pane) -> Range

"""



class Panes:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Panes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Panes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Panes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Panes) -> object

"""



class Parameter:
    # no doc
    def SetParam(self, Type, Value):
        """ SetParam(self: Parameter, Type: XlParameterType, Value: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Parameter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Parameter) -> XlCreator

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: Parameter) -> XlParameterDataType

Set: DataType(self: Parameter) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Parameter) -> str

Set: Name(self: Parameter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Parameter) -> object

"""

    PromptString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptString(self: Parameter) -> str

"""

    RefreshOnChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnChange(self: Parameter) -> bool

Set: RefreshOnChange(self: Parameter) = value
"""

    SourceRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceRange(self: Parameter) -> Range

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Parameter) -> XlParameterType

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Parameter) -> object

"""



class Parameters(IEnumerable):
    # no doc
    def Add(self, Name, iDataType):
        """ Add(self: Parameters, Name: str, iDataType: object) -> Parameter """
        pass

    def Delete(self):
        """ Delete(self: Parameters) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Parameters) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Parameters, Index: object) -> Parameter """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Parameters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Parameters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Parameters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Parameters) -> object

"""



class Phonetic:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: Phonetic) -> int

Set: Alignment(self: Phonetic) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Phonetic) -> Application

"""

    CharacterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CharacterType(self: Phonetic) -> int

Set: CharacterType(self: Phonetic) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Phonetic) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Phonetic) -> Font

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Phonetic) -> object

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Phonetic) -> str

Set: Text(self: Phonetic) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Phonetic) -> bool

Set: Visible(self: Phonetic) = value
"""



class Phonetics(IEnumerable):
    # no doc
    def Add(self, Start, Length, Text):
        """ Add(self: Phonetics, Start: int, Length: int, Text: str) """
        pass

    def Delete(self):
        """ Delete(self: Phonetics) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Phonetics) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: Phonetics) -> int

Set: Alignment(self: Phonetics) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Phonetics) -> Application

"""

    CharacterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CharacterType(self: Phonetics) -> int

Set: CharacterType(self: Phonetics) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Phonetics) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Phonetics) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Phonetics) -> Font

"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: Phonetics) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Phonetics) -> object

"""

    Start = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Start(self: Phonetics) -> int

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Phonetics) -> str

Set: Text(self: Phonetics) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Phonetics) -> bool

Set: Visible(self: Phonetics) = value
"""



class Picture:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Picture) -> object """
        pass

    def Copy(self):
        """ Copy(self: Picture) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Picture, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Picture) -> object """
        pass

    def Delete(self):
        """ Delete(self: Picture) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Picture) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Picture, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Picture) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Picture) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Picture) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Picture) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Picture) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Picture) -> bool

Set: Enabled(self: Picture) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Picture) -> str

Set: Formula(self: Picture) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Picture) -> float

Set: Height(self: Picture) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Picture) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Picture) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Picture) -> float

Set: Left(self: Picture) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Picture) -> bool

Set: Locked(self: Picture) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Picture) -> str

Set: Name(self: Picture) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Picture) -> str

Set: OnAction(self: Picture) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Picture) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Picture) -> object

Set: Placement(self: Picture) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Picture) -> bool

Set: PrintObject(self: Picture) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Picture) -> bool

Set: Shadow(self: Picture) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Picture) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Picture) -> float

Set: Top(self: Picture) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Picture) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Picture) -> bool

Set: Visible(self: Picture) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Picture) -> float

Set: Width(self: Picture) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Picture) -> int

"""



class PictureFormat(_IMsoDispObj):
    # no doc
    def IncrementBrightness(self, Increment):
        """ IncrementBrightness(self: PictureFormat, Increment: Single) """
        pass

    def IncrementContrast(self, Increment):
        """ IncrementContrast(self: PictureFormat, Increment: Single) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PictureFormat) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: PictureFormat) -> Single

Set: Brightness(self: PictureFormat) = value
"""

    ColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorType(self: PictureFormat) -> MsoPictureColorType

Set: ColorType(self: PictureFormat) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: PictureFormat) -> Single

Set: Contrast(self: PictureFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PictureFormat) -> int

"""

    Crop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Crop(self: PictureFormat) -> Crop

"""

    CropBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropBottom(self: PictureFormat) -> Single

Set: CropBottom(self: PictureFormat) = value
"""

    CropLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropLeft(self: PictureFormat) -> Single

Set: CropLeft(self: PictureFormat) = value
"""

    CropRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropRight(self: PictureFormat) -> Single

Set: CropRight(self: PictureFormat) = value
"""

    CropTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CropTop(self: PictureFormat) -> Single

Set: CropTop(self: PictureFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PictureFormat) -> object

"""

    TransparencyColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransparencyColor(self: PictureFormat) -> int

Set: TransparencyColor(self: PictureFormat) = value
"""

    TransparentBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransparentBackground(self: PictureFormat) -> MsoTriState

Set: TransparentBackground(self: PictureFormat) = value
"""



class Pictures(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Pictures, Left: float, Top: float, Width: float, Height: float) -> Picture """
        pass

    def BringToFront(self):
        """ BringToFront(self: Pictures) -> object """
        pass

    def Copy(self):
        """ Copy(self: Pictures) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Pictures, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Pictures) -> object """
        pass

    def Delete(self):
        """ Delete(self: Pictures) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Pictures) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Pictures) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Pictures) -> GroupObject """
        pass

    def Insert(self, Filename, Converter):
        """ Insert(self: Pictures, Filename: str, Converter: object) -> Picture """
        pass

    def Item(self, Index):
        """ Item(self: Pictures, Index: object) -> object """
        pass

    def Paste(self, Link):
        """ Paste(self: Pictures, Link: object) -> Picture """
        pass

    def Select(self, Replace):
        """ Select(self: Pictures, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Pictures) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Pictures) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Pictures) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Pictures) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Pictures) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Pictures) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Pictures) -> Border

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Pictures) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Pictures) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Pictures) -> bool

Set: Enabled(self: Pictures) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Pictures) -> str

Set: Formula(self: Pictures) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Pictures) -> float

Set: Height(self: Pictures) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Pictures) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Pictures) -> float

Set: Left(self: Pictures) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Pictures) -> bool

Set: Locked(self: Pictures) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Pictures) -> str

Set: OnAction(self: Pictures) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Pictures) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Pictures) -> object

Set: Placement(self: Pictures) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Pictures) -> bool

Set: PrintObject(self: Pictures) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Pictures) -> bool

Set: Shadow(self: Pictures) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Pictures) -> ShapeRange

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Pictures) -> float

Set: Top(self: Pictures) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Pictures) -> bool

Set: Visible(self: Pictures) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Pictures) -> float

Set: Width(self: Pictures) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Pictures) -> int

"""



class PivotAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotAxis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotAxis) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotAxis) -> object

"""

    PivotLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLines(self: PivotAxis) -> PivotLines

"""



class PivotCache:
    # no doc
    def CreatePivotChart(self, ChartDestination, XlChartType, Left, Top, Width, Height):
        """ CreatePivotChart(self: PivotCache, ChartDestination: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def CreatePivotTable(self, TableDestination, TableName, ReadData, DefaultVersion):
        """ CreatePivotTable(self: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        pass

    def MakeConnection(self):
        """ MakeConnection(self: PivotCache) """
        pass

    def Refresh(self):
        """ Refresh(self: PivotCache) """
        pass

    def ResetTimer(self):
        """ ResetTimer(self: PivotCache) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: PivotCache, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ADOConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ADOConnection(self: PivotCache) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotCache) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: PivotCache) -> bool

Set: BackgroundQuery(self: PivotCache) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: PivotCache) -> object

Set: CommandText(self: PivotCache) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: PivotCache) -> XlCmdType

Set: CommandType(self: PivotCache) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: PivotCache) -> object

Set: Connection(self: PivotCache) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotCache) -> XlCreator

"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: PivotCache) -> bool

Set: EnableRefresh(self: PivotCache) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: PivotCache) -> int

"""

    IsConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsConnected(self: PivotCache) -> bool

"""

    LocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocalConnection(self: PivotCache) -> object

Set: LocalConnection(self: PivotCache) = value
"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: PivotCache) -> bool

Set: MaintainConnection(self: PivotCache) = value
"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: PivotCache) -> int

"""

    MissingItemsLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MissingItemsLimit(self: PivotCache) -> XlPivotTableMissingItems

Set: MissingItemsLimit(self: PivotCache) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: PivotCache) -> bool

"""

    OptimizeCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OptimizeCache(self: PivotCache) -> bool

Set: OptimizeCache(self: PivotCache) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotCache) -> object

"""

    QueryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryType(self: PivotCache) -> XlQueryType

"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: PivotCache) -> int

"""

    Recordset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recordset(self: PivotCache) -> object

Set: Recordset(self: PivotCache) = value
"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: PivotCache) -> DateTime

"""

    RefreshName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshName(self: PivotCache) -> str

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: PivotCache) -> bool

Set: RefreshOnFileOpen(self: PivotCache) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: PivotCache) -> int

Set: RefreshPeriod(self: PivotCache) = value
"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: PivotCache) -> XlRobustConnect

Set: RobustConnect(self: PivotCache) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: PivotCache) -> bool

Set: SavePassword(self: PivotCache) = value
"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: PivotCache) -> str

Set: SourceConnectionFile(self: PivotCache) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: PivotCache) -> object

Set: SourceData(self: PivotCache) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: PivotCache) -> str

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: PivotCache) -> XlPivotTableSourceType

"""

    Sql = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sql(self: PivotCache) -> object

Set: Sql(self: PivotCache) = value
"""

    UpgradeOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpgradeOnRefresh(self: PivotCache) -> bool

Set: UpgradeOnRefresh(self: PivotCache) = value
"""

    UseLocalConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLocalConnection(self: PivotCache) -> bool

Set: UseLocalConnection(self: PivotCache) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: PivotCache) -> XlPivotTableVersionList

"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: PivotCache) -> WorkbookConnection

"""



class PivotCaches(IEnumerable):
    # no doc
    def Add(self, SourceType, SourceData):
        """ Add(self: PivotCaches, SourceType: XlPivotTableSourceType, SourceData: object) -> PivotCache """
        pass

    def Create(self, SourceType, SourceData, Version):
        """ Create(self: PivotCaches, SourceType: XlPivotTableSourceType, SourceData: object, Version: object) -> PivotCache """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotCaches) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotCaches, Index: object) -> PivotCache """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotCaches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotCaches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotCaches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotCaches) -> object

"""



class PivotCell:
    # no doc
    def AllocateChange(self):
        """ AllocateChange(self: PivotCell) """
        pass

    def DiscardChange(self):
        """ DiscardChange(self: PivotCell) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotCell) -> Application

"""

    CellChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CellChanged(self: PivotCell) -> XlCellChangedState

"""

    ColumnItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnItems(self: PivotCell) -> PivotItemList

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotCell) -> XlCreator

"""

    CustomSubtotalFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomSubtotalFunction(self: PivotCell) -> XlConsolidationFunction

"""

    DataField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataField(self: PivotCell) -> PivotField

"""

    DataSourceValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataSourceValue(self: PivotCell) -> object

"""

    Dummy18 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dummy18(self: PivotCell) -> str

"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: PivotCell) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotCell) -> object

"""

    PivotCellType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCellType(self: PivotCell) -> XlPivotCellType

"""

    PivotColumnLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotColumnLine(self: PivotCell) -> PivotLine

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: PivotCell) -> PivotField

"""

    PivotItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotItem(self: PivotCell) -> PivotItem

"""

    PivotRowLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotRowLine(self: PivotCell) -> PivotLine

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: PivotCell) -> PivotTable

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: PivotCell) -> Range

"""

    RowItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowItems(self: PivotCell) -> PivotItemList

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: PivotCell) -> Actions

"""



class PivotField:
    # no doc
    def AddPageItem(self, Item, ClearList):
        """ AddPageItem(self: PivotField, Item: str, ClearList: object) """
        pass

    def AutoShow(self, Type, Range, Count, Field):
        """ AutoShow(self: PivotField, Type: int, Range: int, Count: int, Field: str) """
        pass

    def AutoSort(self, Order, Field):
        """ AutoSort(self: PivotField, Order: int, Field: str) """
        pass

    def AutoSortEx(self, Order, Field, PivotLine, CustomSubtotal):
        """ AutoSortEx(self: PivotField, Order: int, Field: str, PivotLine: object, CustomSubtotal: object) """
        pass

    def CalculatedItems(self):
        """ CalculatedItems(self: PivotField) -> CalculatedItems """
        pass

    def ClearAllFilters(self):
        """ ClearAllFilters(self: PivotField) """
        pass

    def ClearLabelFilters(self):
        """ ClearLabelFilters(self: PivotField) """
        pass

    def ClearManualFilter(self):
        """ ClearManualFilter(self: PivotField) """
        pass

    def ClearValueFilters(self):
        """ ClearValueFilters(self: PivotField) """
        pass

    def Delete(self):
        """ Delete(self: PivotField) """
        pass

    def DrillTo(self, Field):
        """ DrillTo(self: PivotField, Field: str) """
        pass

    def PivotItems(self, Index):
        """ PivotItems(self: PivotField, Index: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AllItemsVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllItemsVisible(self: PivotField) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotField) -> Application

"""

    AutoShowCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowCount(self: PivotField) -> int

"""

    AutoShowField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowField(self: PivotField) -> str

"""

    AutoShowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowRange(self: PivotField) -> int

"""

    AutoShowType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShowType(self: PivotField) -> int

"""

    AutoSortCustomSubtotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortCustomSubtotal(self: PivotField) -> int

"""

    AutoSortField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortField(self: PivotField) -> str

"""

    AutoSortOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortOrder(self: PivotField) -> int

"""

    AutoSortPivotLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSortPivotLine(self: PivotField) -> PivotLine

"""

    BaseField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseField(self: PivotField) -> object

Set: BaseField(self: PivotField) = value
"""

    BaseItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseItem(self: PivotField) -> object

Set: BaseItem(self: PivotField) = value
"""

    Calculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Calculation(self: PivotField) -> XlPivotFieldCalculation

Set: Calculation(self: PivotField) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: PivotField) -> str

Set: Caption(self: PivotField) = value
"""

    ChildField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChildField(self: PivotField) -> PivotField

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotField) -> XlCreator

"""

    CubeField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeField(self: PivotField) -> CubeField

"""

    CurrentPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPage(self: PivotField) -> object

Set: CurrentPage(self: PivotField) = value
"""

    CurrentPageList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPageList(self: PivotField) -> object

Set: CurrentPageList(self: PivotField) = value
"""

    CurrentPageName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentPageName(self: PivotField) -> str

Set: CurrentPageName(self: PivotField) = value
"""

    DatabaseSort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DatabaseSort(self: PivotField) -> bool

Set: DatabaseSort(self: PivotField) = value
"""

    DataRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataRange(self: PivotField) -> Range

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataType(self: PivotField) -> XlPivotFieldDataType

"""

    DisplayAsCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAsCaption(self: PivotField) -> bool

"""

    DisplayAsTooltip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAsTooltip(self: PivotField) -> bool

Set: DisplayAsTooltip(self: PivotField) = value
"""

    DisplayInReport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInReport(self: PivotField) -> bool

Set: DisplayInReport(self: PivotField) = value
"""

    DragToColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToColumn(self: PivotField) -> bool

Set: DragToColumn(self: PivotField) = value
"""

    DragToData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToData(self: PivotField) -> bool

Set: DragToData(self: PivotField) = value
"""

    DragToHide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToHide(self: PivotField) -> bool

Set: DragToHide(self: PivotField) = value
"""

    DragToPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToPage(self: PivotField) -> bool

Set: DragToPage(self: PivotField) = value
"""

    DragToRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DragToRow(self: PivotField) -> bool

Set: DragToRow(self: PivotField) = value
"""

    DrilledDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrilledDown(self: PivotField) -> bool

Set: DrilledDown(self: PivotField) = value
"""

    EnableItemSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableItemSelection(self: PivotField) -> bool

Set: EnableItemSelection(self: PivotField) = value
"""

    EnableMultiplePageItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableMultiplePageItems(self: PivotField) -> bool

Set: EnableMultiplePageItems(self: PivotField) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: PivotField) -> str

Set: Formula(self: PivotField) = value
"""

    Function = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Function(self: PivotField) -> XlConsolidationFunction

Set: Function(self: PivotField) = value
"""

    GroupLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupLevel(self: PivotField) -> object

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: PivotField) -> bool

Set: Hidden(self: PivotField) = value
"""

    HiddenItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HiddenItemsList(self: PivotField) -> object

Set: HiddenItemsList(self: PivotField) = value
"""

    IncludeNewItemsInFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeNewItemsInFilter(self: PivotField) -> bool

Set: IncludeNewItemsInFilter(self: PivotField) = value
"""

    IsCalculated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCalculated(self: PivotField) -> bool

"""

    IsMemberProperty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsMemberProperty(self: PivotField) -> bool

"""

    LabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelRange(self: PivotField) -> Range

"""

    LayoutBlankLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutBlankLine(self: PivotField) -> bool

Set: LayoutBlankLine(self: PivotField) = value
"""

    LayoutCompactRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutCompactRow(self: PivotField) -> bool

Set: LayoutCompactRow(self: PivotField) = value
"""

    LayoutForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutForm(self: PivotField) -> XlLayoutFormType

Set: LayoutForm(self: PivotField) = value
"""

    LayoutPageBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutPageBreak(self: PivotField) -> bool

Set: LayoutPageBreak(self: PivotField) = value
"""

    LayoutSubtotalLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutSubtotalLocation(self: PivotField) -> XlSubtototalLocationType

Set: LayoutSubtotalLocation(self: PivotField) = value
"""

    MemberPropertyCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemberPropertyCaption(self: PivotField) -> str

Set: MemberPropertyCaption(self: PivotField) = value
"""

    MemoryUsed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemoryUsed(self: PivotField) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: PivotField) -> str

Set: Name(self: PivotField) = value
"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: PivotField) -> str

Set: NumberFormat(self: PivotField) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: PivotField) -> XlPivotFieldOrientation

Set: Orientation(self: PivotField) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotField) -> object

"""

    ParentField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentField(self: PivotField) -> PivotField

"""

    PivotFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotFilters(self: PivotField) -> PivotFilters

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: PivotField) -> object

Set: Position(self: PivotField) = value
"""

    PropertyOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyOrder(self: PivotField) -> int

Set: PropertyOrder(self: PivotField) = value
"""

    PropertyParentField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyParentField(self: PivotField) -> PivotField

"""

    RepeatLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatLabels(self: PivotField) -> bool

Set: RepeatLabels(self: PivotField) = value
"""

    ServerBased = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerBased(self: PivotField) -> bool

Set: ServerBased(self: PivotField) = value
"""

    ShowAllItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllItems(self: PivotField) -> bool

Set: ShowAllItems(self: PivotField) = value
"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: PivotField) -> bool

Set: ShowDetail(self: PivotField) = value
"""

    ShowingInAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowingInAxis(self: PivotField) -> bool

"""

    SourceCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceCaption(self: PivotField) -> str

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: PivotField) -> str

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: PivotField) -> str

Set: StandardFormula(self: PivotField) = value
"""

    SubtotalName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubtotalName(self: PivotField) -> str

Set: SubtotalName(self: PivotField) = value
"""

    TotalLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalLevels(self: PivotField) -> object

"""

    UseMemberPropertyAsCaption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseMemberPropertyAsCaption(self: PivotField) -> bool

Set: UseMemberPropertyAsCaption(self: PivotField) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: PivotField) -> str

Set: Value(self: PivotField) = value
"""

    VisibleItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleItemsList(self: PivotField) -> object

Set: VisibleItemsList(self: PivotField) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: PivotField) -> str

Set: _Default(self: PivotField) = value
"""



class PivotFields(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: PivotFields) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotFields, Index: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotFields) -> PivotTable

"""



class PivotFilter:
    # no doc
    def Delete(self):
        """ Delete(self: PivotFilter) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Active(self: PivotFilter) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotFilter) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotFilter) -> XlCreator

"""

    DataCubeField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataCubeField(self: PivotFilter) -> CubeField

"""

    DataField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataField(self: PivotFilter) -> PivotField

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: PivotFilter) -> str

"""

    FilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterType(self: PivotFilter) -> XlPivotFilterType

"""

    IsMemberPropertyFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsMemberPropertyFilter(self: PivotFilter) -> bool

"""

    MemberPropertyField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MemberPropertyField(self: PivotFilter) -> PivotField

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: PivotFilter) -> str

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: PivotFilter) -> int

Set: Order(self: PivotFilter) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotFilter) -> object

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: PivotFilter) -> PivotField

"""

    Value1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value1(self: PivotFilter) -> object

"""

    Value2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value2(self: PivotFilter) -> object

"""

    WholeDayFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WholeDayFilter(self: PivotFilter) -> bool

Set: WholeDayFilter(self: PivotFilter) = value
"""



class PivotFilters(IEnumerable):
    # no doc
    def Add(self, Type, DataField, Value1, Value2, Order, Name, Description, MemberPropertyField):
        """ Add(self: PivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object) -> PivotFilter """
        pass

    def Add2(self, Type, DataField, Value1, Value2, Order, Name, Description, MemberPropertyField, WholeDayFilter):
        """ Add2(self: PivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object, WholeDayFilter: object) -> PivotFilter """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotFilters) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotFilters) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotFilters) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotFilters) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotFilters) -> object

"""



class PivotFormula:
    # no doc
    def Delete(self):
        """ Delete(self: PivotFormula) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotFormula) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotFormula) -> XlCreator

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: PivotFormula) -> str

Set: Formula(self: PivotFormula) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: PivotFormula) -> int

Set: Index(self: PivotFormula) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotFormula) -> object

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: PivotFormula) -> str

Set: StandardFormula(self: PivotFormula) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: PivotFormula) -> str

Set: Value(self: PivotFormula) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: PivotFormula) -> str

Set: _Default(self: PivotFormula) = value
"""



class PivotFormulas(IEnumerable):
    # no doc
    def Add(self, Formula, UseStandardFormula):
        """ Add(self: PivotFormulas, Formula: str, UseStandardFormula: object) -> PivotFormula """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotFormulas) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotFormulas, Index: object) -> PivotFormula """
        pass

    def _Add(self, Formula):
        """ _Add(self: PivotFormulas, Formula: str) -> PivotFormula """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotFormulas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotFormulas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotFormulas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotFormulas) -> object

"""



class PivotItem:
    # no doc
    def Delete(self):
        """ Delete(self: PivotItem) """
        pass

    def DrillTo(self, Field):
        """ DrillTo(self: PivotItem, Field: str) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: PivotItem) -> str

Set: Caption(self: PivotItem) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotItem) -> XlCreator

"""

    DataRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataRange(self: PivotItem) -> Range

"""

    DrilledDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrilledDown(self: PivotItem) -> bool

Set: DrilledDown(self: PivotItem) = value
"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: PivotItem) -> str

Set: Formula(self: PivotItem) = value
"""

    IsCalculated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCalculated(self: PivotItem) -> bool

"""

    LabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelRange(self: PivotItem) -> Range

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: PivotItem) -> str

Set: Name(self: PivotItem) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotItem) -> PivotField

"""

    ParentItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentItem(self: PivotItem) -> PivotItem

"""

    ParentShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentShowDetail(self: PivotItem) -> bool

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: PivotItem) -> int

Set: Position(self: PivotItem) = value
"""

    RecordCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RecordCount(self: PivotItem) -> int

"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: PivotItem) -> bool

Set: ShowDetail(self: PivotItem) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: PivotItem) -> object

"""

    SourceNameStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceNameStandard(self: PivotItem) -> str

"""

    StandardFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardFormula(self: PivotItem) -> str

Set: StandardFormula(self: PivotItem) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: PivotItem) -> str

Set: Value(self: PivotItem) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: PivotItem) -> bool

Set: Visible(self: PivotItem) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: PivotItem) -> str

Set: _Default(self: PivotItem) = value
"""



class PivotItemList(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: PivotItemList) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotItemList, Index: object) -> PivotItem """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotItemList) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotItemList) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotItemList) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotItemList) -> object

"""



class PivotItems(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: PivotItems, Name: str) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotItems, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotItems) -> PivotField

"""



class PivotLayout:
    # no doc
    def AddFields(self, RowFields, ColumnFields, PageFields, AppendField):
        """ AddFields(self: PivotLayout, RowFields: object, ColumnFields: object, PageFields: object, AppendField: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotLayout) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotLayout) -> XlCreator

"""

    CubeFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFields(self: PivotLayout) -> CubeFields

"""

    InnerDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InnerDetail(self: PivotLayout) -> str

Set: InnerDetail(self: PivotLayout) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotLayout) -> object

"""

    PivotCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCache(self: PivotLayout) -> PivotCache

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: PivotLayout) -> PivotTable

"""



class PivotLine:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotLine) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotLine) -> XlCreator

"""

    LineType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineType(self: PivotLine) -> XlPivotLineType

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotLine) -> object

"""

    PivotLineCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLineCells(self: PivotLine) -> PivotLineCells

"""

    PivotLineCellsFull = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotLineCellsFull(self: PivotLine) -> PivotLineCells

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: PivotLine) -> int

"""



class PivotLineCells(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: PivotLineCells) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotLineCells) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotLineCells) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotLineCells) -> XlCreator

"""

    Full = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Full(self: PivotLineCells) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotLineCells) -> object

"""



class PivotLines(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: PivotLines) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotLines) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotLines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotLines) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotLines) -> object

"""



class PivotTable:
    # no doc
    def AddDataField(self, Field, Caption, Function):
        """ AddDataField(self: PivotTable, Field: object, Caption: object, Function: object) -> PivotField """
        pass

    def AddFields(self, RowFields, ColumnFields, PageFields, AddToTable):
        """ AddFields(self: PivotTable, RowFields: object, ColumnFields: object, PageFields: object, AddToTable: object) -> object """
        pass

    def AllocateChanges(self):
        """ AllocateChanges(self: PivotTable) """
        pass

    def CalculatedFields(self):
        """ CalculatedFields(self: PivotTable) -> CalculatedFields """
        pass

    def ChangeConnection(self, conn):
        """ ChangeConnection(self: PivotTable, conn: WorkbookConnection) """
        pass

    def ChangePivotCache(self, PivotCache):
        """ ChangePivotCache(self: PivotTable, PivotCache: object) """
        pass

    def ClearAllFilters(self):
        """ ClearAllFilters(self: PivotTable) """
        pass

    def ClearTable(self):
        """ ClearTable(self: PivotTable) """
        pass

    def CommitChanges(self):
        """ CommitChanges(self: PivotTable) """
        pass

    def ConvertToFormulas(self, ConvertFilters):
        """ ConvertToFormulas(self: PivotTable, ConvertFilters: bool) """
        pass

    def CreateCubeFile(self, File, Measures, Levels, Members, Properties):
        """ CreateCubeFile(self: PivotTable, File: str, Measures: object, Levels: object, Members: object, Properties: object) -> str """
        pass

    def DiscardChanges(self):
        """ DiscardChanges(self: PivotTable) """
        pass

    def DrillDown(self, PivotItem, PivotLine):
        """ DrillDown(self: PivotTable, PivotItem: PivotItem, PivotLine: object) """
        pass

    def DrillTo(self, PivotItem, CubeField, PivotLine):
        """ DrillTo(self: PivotTable, PivotItem: PivotItem, CubeField: CubeField, PivotLine: object) """
        pass

    def DrillUp(self, PivotItem, PivotLine, LevelUniqueName):
        """ DrillUp(self: PivotTable, PivotItem: PivotItem, PivotLine: object, LevelUniqueName: object) """
        pass

    def Dummy15(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy15(self: PivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy2(self, Arg1, Arg2, Arg3, Arg4):
        """ Dummy2(self: PivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Format(self, Format):
        """ Format(self: PivotTable, Format: XlPivotFormatType) """
        pass

    def GetData(self, Name):
        """ GetData(self: PivotTable, Name: str) -> float """
        pass

    def GetPivotData(self, DataField, Field1, Item1, Field2, Item2, Field3, Item3, Field4, Item4, Field5, Item5, Field6, Item6, Field7, Item7, Field8, Item8, Field9, Item9, Field10, Item10, Field11, Item11, Field12, Item12, Field13, Item13, Field14, Item14):
        """ GetPivotData(self: PivotTable, DataField: object, Field1: object, Item1: object, Field2: object, Item2: object, Field3: object, Item3: object, Field4: object, Item4: object, Field5: object, Item5: object, Field6: object, Item6: object, Field7: object, Item7: object, Field8: object, Item8: object, Field9: object, Item9: object, Field10: object, Item10: object, Field11: object, Item11: object, Field12: object, Item12: object, Field13: object, Item13: object, Field14: object, Item14: object) -> Range """
        pass

    def ListFormulas(self):
        """ ListFormulas(self: PivotTable) """
        pass

    def PivotCache(self):
        """ PivotCache(self: PivotTable) -> PivotCache """
        pass

    def PivotFields(self, Index):
        """ PivotFields(self: PivotTable, Index: object) -> object """
        pass

    def PivotSelect(self, Name, Mode, UseStandardName):
        """ PivotSelect(self: PivotTable, Name: str, Mode: XlPTSelectionMode, UseStandardName: object) """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: PivotTable, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        pass

    def PivotValueCell(self, rowline, columnline):
        """ PivotValueCell(self: PivotTable, rowline: object, columnline: object) -> PivotValueCell """
        pass

    def RefreshDataSourceValues(self):
        """ RefreshDataSourceValues(self: PivotTable) """
        pass

    def RefreshTable(self):
        """ RefreshTable(self: PivotTable) -> bool """
        pass

    def RepeatAllLabels(self, Repeat):
        """ RepeatAllLabels(self: PivotTable, Repeat: XlPivotFieldRepeatLabels) """
        pass

    def RowAxisLayout(self, RowLayout):
        """ RowAxisLayout(self: PivotTable, RowLayout: XlLayoutRowType) """
        pass

    def ShowPages(self, PageField):
        """ ShowPages(self: PivotTable, PageField: object) -> object """
        pass

    def SubtotalLocation(self, Location):
        """ SubtotalLocation(self: PivotTable, Location: XlSubtototalLocationType) """
        pass

    def Update(self):
        """ Update(self: PivotTable) """
        pass

    def _PivotSelect(self, Name, Mode):
        """ _PivotSelect(self: PivotTable, Name: str, Mode: XlPTSelectionMode) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    ActiveFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveFilters(self: PivotTable) -> PivotFilters

"""

    Allocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Allocation(self: PivotTable) -> XlAllocation

Set: Allocation(self: PivotTable) = value
"""

    AllocationMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationMethod(self: PivotTable) -> XlAllocationMethod

Set: AllocationMethod(self: PivotTable) = value
"""

    AllocationValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationValue(self: PivotTable) -> XlAllocationValue

Set: AllocationValue(self: PivotTable) = value
"""

    AllocationWeightExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationWeightExpression(self: PivotTable) -> str

Set: AllocationWeightExpression(self: PivotTable) = value
"""

    AllowMultipleFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowMultipleFilters(self: PivotTable) -> bool

Set: AllowMultipleFilters(self: PivotTable) = value
"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: PivotTable) -> str

Set: AlternativeText(self: PivotTable) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotTable) -> Application

"""

    CacheIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CacheIndex(self: PivotTable) -> int

Set: CacheIndex(self: PivotTable) = value
"""

    CalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembers(self: PivotTable) -> CalculatedMembers

"""

    CalculatedMembersInFilters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculatedMembersInFilters(self: PivotTable) -> bool

Set: CalculatedMembersInFilters(self: PivotTable) = value
"""

    ChangeList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangeList(self: PivotTable) -> PivotTableChangeList

"""

    ColumnGrand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnGrand(self: PivotTable) -> bool

Set: ColumnGrand(self: PivotTable) = value
"""

    ColumnRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnRange(self: PivotTable) -> Range

"""

    CompactLayoutColumnHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactLayoutColumnHeader(self: PivotTable) -> str

Set: CompactLayoutColumnHeader(self: PivotTable) = value
"""

    CompactLayoutRowHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactLayoutRowHeader(self: PivotTable) -> str

Set: CompactLayoutRowHeader(self: PivotTable) = value
"""

    CompactRowIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CompactRowIndent(self: PivotTable) -> int

Set: CompactRowIndent(self: PivotTable) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotTable) -> XlCreator

"""

    CubeFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CubeFields(self: PivotTable) -> CubeFields

"""

    DataBodyRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBodyRange(self: PivotTable) -> Range

"""

    DataLabelRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabelRange(self: PivotTable) -> Range

"""

    DataPivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataPivotField(self: PivotTable) -> PivotField

"""

    DisplayContextTooltips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayContextTooltips(self: PivotTable) -> bool

Set: DisplayContextTooltips(self: PivotTable) = value
"""

    DisplayEmptyColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEmptyColumn(self: PivotTable) -> bool

Set: DisplayEmptyColumn(self: PivotTable) = value
"""

    DisplayEmptyRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEmptyRow(self: PivotTable) -> bool

Set: DisplayEmptyRow(self: PivotTable) = value
"""

    DisplayErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayErrorString(self: PivotTable) -> bool

Set: DisplayErrorString(self: PivotTable) = value
"""

    DisplayFieldCaptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFieldCaptions(self: PivotTable) -> bool

Set: DisplayFieldCaptions(self: PivotTable) = value
"""

    DisplayImmediateItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayImmediateItems(self: PivotTable) -> bool

Set: DisplayImmediateItems(self: PivotTable) = value
"""

    DisplayMemberPropertyTooltips = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayMemberPropertyTooltips(self: PivotTable) -> bool

Set: DisplayMemberPropertyTooltips(self: PivotTable) = value
"""

    DisplayNullString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayNullString(self: PivotTable) -> bool

Set: DisplayNullString(self: PivotTable) = value
"""

    EnableDataValueEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDataValueEditing(self: PivotTable) -> bool

Set: EnableDataValueEditing(self: PivotTable) = value
"""

    EnableDrilldown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDrilldown(self: PivotTable) -> bool

Set: EnableDrilldown(self: PivotTable) = value
"""

    EnableFieldDialog = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFieldDialog(self: PivotTable) -> bool

Set: EnableFieldDialog(self: PivotTable) = value
"""

    EnableFieldList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFieldList(self: PivotTable) -> bool

Set: EnableFieldList(self: PivotTable) = value
"""

    EnableWizard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableWizard(self: PivotTable) -> bool

Set: EnableWizard(self: PivotTable) = value
"""

    EnableWriteback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableWriteback(self: PivotTable) -> bool

Set: EnableWriteback(self: PivotTable) = value
"""

    ErrorString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorString(self: PivotTable) -> str

Set: ErrorString(self: PivotTable) = value
"""

    FieldListSortAscending = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldListSortAscending(self: PivotTable) -> bool

Set: FieldListSortAscending(self: PivotTable) = value
"""

    GrandTotalName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GrandTotalName(self: PivotTable) -> str

Set: GrandTotalName(self: PivotTable) = value
"""

    HasAutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAutoFormat(self: PivotTable) -> bool

Set: HasAutoFormat(self: PivotTable) = value
"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: PivotTable) -> bool

"""

    InGridDropZones = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InGridDropZones(self: PivotTable) -> bool

Set: InGridDropZones(self: PivotTable) = value
"""

    InnerDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InnerDetail(self: PivotTable) -> str

Set: InnerDetail(self: PivotTable) = value
"""

    LayoutRowDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutRowDefault(self: PivotTable) -> XlLayoutRowType

Set: LayoutRowDefault(self: PivotTable) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: PivotTable) -> str

Set: Location(self: PivotTable) = value
"""

    ManualUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ManualUpdate(self: PivotTable) -> bool

Set: ManualUpdate(self: PivotTable) = value
"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: PivotTable) -> str

"""

    MergeLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeLabels(self: PivotTable) -> bool

Set: MergeLabels(self: PivotTable) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: PivotTable) -> str

Set: Name(self: PivotTable) = value
"""

    NullString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NullString(self: PivotTable) -> str

Set: NullString(self: PivotTable) = value
"""

    PageFieldOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldOrder(self: PivotTable) -> int

Set: PageFieldOrder(self: PivotTable) = value
"""

    PageFieldStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldStyle(self: PivotTable) -> str

Set: PageFieldStyle(self: PivotTable) = value
"""

    PageFieldWrapCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageFieldWrapCount(self: PivotTable) -> int

Set: PageFieldWrapCount(self: PivotTable) = value
"""

    PageRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageRange(self: PivotTable) -> Range

"""

    PageRangeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageRangeCells(self: PivotTable) -> Range

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotTable) -> object

"""

    PivotChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotChart(self: PivotTable) -> Shape

"""

    PivotColumnAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotColumnAxis(self: PivotTable) -> PivotAxis

"""

    PivotFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotFormulas(self: PivotTable) -> PivotFormulas

"""

    PivotRowAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotRowAxis(self: PivotTable) -> PivotAxis

"""

    PivotSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotSelection(self: PivotTable) -> str

Set: PivotSelection(self: PivotTable) = value
"""

    PivotSelectionStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotSelectionStandard(self: PivotTable) -> str

Set: PivotSelectionStandard(self: PivotTable) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: PivotTable) -> bool

Set: PreserveFormatting(self: PivotTable) = value
"""

    PrintDrillIndicators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintDrillIndicators(self: PivotTable) -> bool

Set: PrintDrillIndicators(self: PivotTable) = value
"""

    PrintTitles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintTitles(self: PivotTable) -> bool

Set: PrintTitles(self: PivotTable) = value
"""

    RefreshDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshDate(self: PivotTable) -> DateTime

"""

    RefreshName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshName(self: PivotTable) -> str

"""

    RepeatItemsOnEachPrintedPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatItemsOnEachPrintedPage(self: PivotTable) -> bool

Set: RepeatItemsOnEachPrintedPage(self: PivotTable) = value
"""

    RowGrand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowGrand(self: PivotTable) -> bool

Set: RowGrand(self: PivotTable) = value
"""

    RowRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowRange(self: PivotTable) -> Range

"""

    SaveData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveData(self: PivotTable) -> bool

Set: SaveData(self: PivotTable) = value
"""

    SelectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SelectionMode(self: PivotTable) -> XlPTSelectionMode

Set: SelectionMode(self: PivotTable) = value
"""

    ShowCellBackgroundFromOLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCellBackgroundFromOLAP(self: PivotTable) -> bool

Set: ShowCellBackgroundFromOLAP(self: PivotTable) = value
"""

    ShowDrillIndicators = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDrillIndicators(self: PivotTable) -> bool

Set: ShowDrillIndicators(self: PivotTable) = value
"""

    ShowPageMultipleItemLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPageMultipleItemLabel(self: PivotTable) -> bool

Set: ShowPageMultipleItemLabel(self: PivotTable) = value
"""

    ShowTableStyleColumnHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnHeaders(self: PivotTable) -> bool

Set: ShowTableStyleColumnHeaders(self: PivotTable) = value
"""

    ShowTableStyleColumnStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleColumnStripes(self: PivotTable) -> bool

Set: ShowTableStyleColumnStripes(self: PivotTable) = value
"""

    ShowTableStyleLastColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleLastColumn(self: PivotTable) -> bool

Set: ShowTableStyleLastColumn(self: PivotTable) = value
"""

    ShowTableStyleRowHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowHeaders(self: PivotTable) -> bool

Set: ShowTableStyleRowHeaders(self: PivotTable) = value
"""

    ShowTableStyleRowStripes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTableStyleRowStripes(self: PivotTable) -> bool

Set: ShowTableStyleRowStripes(self: PivotTable) = value
"""

    ShowValuesRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowValuesRow(self: PivotTable) -> bool

Set: ShowValuesRow(self: PivotTable) = value
"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: PivotTable) -> Slicers

"""

    SmallGrid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallGrid(self: PivotTable) -> bool

Set: SmallGrid(self: PivotTable) = value
"""

    SortUsingCustomLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortUsingCustomLists(self: PivotTable) -> bool

Set: SortUsingCustomLists(self: PivotTable) = value
"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: PivotTable) -> object

Set: SourceData(self: PivotTable) = value
"""

    SubtotalHiddenPageItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubtotalHiddenPageItems(self: PivotTable) -> bool

Set: SubtotalHiddenPageItems(self: PivotTable) = value
"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: PivotTable) -> str

Set: Summary(self: PivotTable) = value
"""

    TableRange1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableRange1(self: PivotTable) -> Range

"""

    TableRange2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableRange2(self: PivotTable) -> Range

"""

    TableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle(self: PivotTable) -> str

Set: TableStyle(self: PivotTable) = value
"""

    TableStyle2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyle2(self: PivotTable) -> object

Set: TableStyle2(self: PivotTable) = value
"""

    Tag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tag(self: PivotTable) -> str

Set: Tag(self: PivotTable) = value
"""

    TotalsAnnotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalsAnnotation(self: PivotTable) -> bool

Set: TotalsAnnotation(self: PivotTable) = value
"""

    VacatedStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VacatedStyle(self: PivotTable) -> str

Set: VacatedStyle(self: PivotTable) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: PivotTable) -> str

Set: Value(self: PivotTable) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Version(self: PivotTable) -> XlPivotTableVersionList

"""

    ViewCalculatedMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewCalculatedMembers(self: PivotTable) -> bool

Set: ViewCalculatedMembers(self: PivotTable) = value
"""

    VisualTotals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualTotals(self: PivotTable) -> bool

Set: VisualTotals(self: PivotTable) = value
"""

    VisualTotalsForSets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualTotalsForSets(self: PivotTable) -> bool

Set: VisualTotalsForSets(self: PivotTable) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: PivotTable) -> str

Set: _Default(self: PivotTable) = value
"""



class PivotTableChangeList(IEnumerable):
    # no doc
    def Add(self, Tuple, Value, AllocationValue, AllocationMethod, AllocationWeightExpression):
        """ Add(self: PivotTableChangeList, Tuple: str, Value: float, AllocationValue: object, AllocationMethod: object, AllocationWeightExpression: object) -> ValueChange """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotTableChangeList) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotTableChangeList) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotTableChangeList) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotTableChangeList) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotTableChangeList) -> object

"""



class PivotTables(IEnumerable):
    # no doc
    def Add(self, PivotCache, TableDestination, TableName, ReadData, DefaultVersion):
        """ Add(self: PivotTables, PivotCache: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PivotTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: PivotTables, Index: object) -> PivotTable """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PivotTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotTables) -> object

"""



class PivotValueCell:
    # no doc
    def ShowDetail(self):
        """ ShowDetail(self: PivotValueCell) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PivotValueCell) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PivotValueCell) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PivotValueCell) -> object

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: PivotValueCell) -> PivotCell

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: PivotValueCell) -> Actions

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: PivotValueCell) -> object

"""



class PlotArea:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: PlotArea) -> object """
        pass

    def Select(self):
        """ Select(self: PlotArea) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PlotArea) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: PlotArea) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PlotArea) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: PlotArea) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: PlotArea) -> ChartFormat

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: PlotArea) -> float

Set: Height(self: PlotArea) = value
"""

    InsideHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideHeight(self: PlotArea) -> float

Set: InsideHeight(self: PlotArea) = value
"""

    InsideLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideLeft(self: PlotArea) -> float

Set: InsideLeft(self: PlotArea) = value
"""

    InsideTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideTop(self: PlotArea) -> float

Set: InsideTop(self: PlotArea) = value
"""

    InsideWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsideWidth(self: PlotArea) -> float

Set: InsideWidth(self: PlotArea) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: PlotArea) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: PlotArea) -> float

Set: Left(self: PlotArea) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: PlotArea) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PlotArea) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: PlotArea) -> XlChartElementPosition

Set: Position(self: PlotArea) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: PlotArea) -> float

Set: Top(self: PlotArea) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: PlotArea) -> float

Set: Width(self: PlotArea) = value
"""

    _InsideHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideHeight(self: PlotArea) -> float

"""

    _InsideLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideLeft(self: PlotArea) -> float

"""

    _InsideTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideTop(self: PlotArea) -> float

"""

    _InsideWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _InsideWidth(self: PlotArea) -> float

"""



class Point:
    # no doc
    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: Point, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: Point) -> object """
        pass

    def Copy(self):
        """ Copy(self: Point) -> object """
        pass

    def Delete(self):
        """ Delete(self: Point) -> object """
        pass

    def Paste(self):
        """ Paste(self: Point) -> object """
        pass

    def PieSliceLocation(self, loc, Index):
        """ PieSliceLocation(self: Point, loc: XlPieSliceLocation, Index: XlPieSliceIndex) -> float """
        pass

    def Select(self):
        """ Select(self: Point) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: Point, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Point) -> Application

"""

    ApplyPictToEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToEnd(self: Point) -> bool

Set: ApplyPictToEnd(self: Point) = value
"""

    ApplyPictToFront = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToFront(self: Point) -> bool

Set: ApplyPictToFront(self: Point) = value
"""

    ApplyPictToSides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToSides(self: Point) -> bool

Set: ApplyPictToSides(self: Point) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Point) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Point) -> XlCreator

"""

    DataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabel(self: Point) -> DataLabel

"""

    Explosion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explosion(self: Point) -> int

Set: Explosion(self: Point) = value
"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Point) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Point) -> ChartFormat

"""

    Has3DEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DEffect(self: Point) -> bool

Set: Has3DEffect(self: Point) = value
"""

    HasDataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataLabel(self: Point) -> bool

Set: HasDataLabel(self: Point) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Point) -> float

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Point) -> Interior

"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: Point) -> bool

Set: InvertIfNegative(self: Point) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Point) -> float

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: Point) -> int

Set: MarkerBackgroundColor(self: Point) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: Point) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: Point) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: Point) -> int

Set: MarkerForegroundColor(self: Point) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: Point) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: Point) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: Point) -> int

Set: MarkerSize(self: Point) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: Point) -> XlMarkerStyle

Set: MarkerStyle(self: Point) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Point) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Point) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: Point) -> XlChartPictureType

Set: PictureType(self: Point) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: Point) -> int

Set: PictureUnit(self: Point) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: Point) -> float

Set: PictureUnit2(self: Point) = value
"""

    SecondaryPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondaryPlot(self: Point) -> bool

Set: SecondaryPlot(self: Point) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Point) -> bool

Set: Shadow(self: Point) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Point) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Point) -> float

"""



class Points(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Points) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Points, Index: int) -> Point """
        pass

    def _Default(self, Index):
        """ _Default(self: Points, Index: int) -> Point """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Points) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Points) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Points) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Points) -> object

"""



class ProtectedViewWindow:
    # no doc
    def Activate(self):
        """ Activate(self: ProtectedViewWindow) """
        pass

    def Close(self):
        """ Close(self: ProtectedViewWindow) -> bool """
        pass

    def Edit(self, WriteResPassword, UpdateLinks):
        """ Edit(self: ProtectedViewWindow, WriteResPassword: object, UpdateLinks: object) -> Workbook """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: ProtectedViewWindow) -> str

Set: Caption(self: ProtectedViewWindow) = value
"""

    EnableResize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableResize(self: ProtectedViewWindow) -> bool

Set: EnableResize(self: ProtectedViewWindow) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ProtectedViewWindow) -> float

Set: Height(self: ProtectedViewWindow) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ProtectedViewWindow) -> float

Set: Left(self: ProtectedViewWindow) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: ProtectedViewWindow) -> str

"""

    SourcePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourcePath(self: ProtectedViewWindow) -> str

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ProtectedViewWindow) -> float

Set: Top(self: ProtectedViewWindow) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ProtectedViewWindow) -> bool

Set: Visible(self: ProtectedViewWindow) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ProtectedViewWindow) -> float

Set: Width(self: ProtectedViewWindow) = value
"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: ProtectedViewWindow) -> XlProtectedViewWindowState

Set: WindowState(self: ProtectedViewWindow) = value
"""

    Workbook = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Workbook(self: ProtectedViewWindow) -> Workbook

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ProtectedViewWindow) -> str

"""



class ProtectedViewWindows(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: ProtectedViewWindows) -> IEnumerator """
        pass

    def Open(self, Filename, Password, AddToMru, RepairMode):
        """ Open(self: ProtectedViewWindows, Filename: str, Password: object, AddToMru: object, RepairMode: object) -> ProtectedViewWindow """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ProtectedViewWindows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ProtectedViewWindows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ProtectedViewWindows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ProtectedViewWindows) -> object

"""



class Protection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowDeletingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowDeletingColumns(self: Protection) -> bool

"""

    AllowDeletingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowDeletingRows(self: Protection) -> bool

"""

    AllowEditRanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEditRanges(self: Protection) -> AllowEditRanges

"""

    AllowFiltering = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFiltering(self: Protection) -> bool

"""

    AllowFormattingCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingCells(self: Protection) -> bool

"""

    AllowFormattingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingColumns(self: Protection) -> bool

"""

    AllowFormattingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowFormattingRows(self: Protection) -> bool

"""

    AllowInsertingColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingColumns(self: Protection) -> bool

"""

    AllowInsertingHyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingHyperlinks(self: Protection) -> bool

"""

    AllowInsertingRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowInsertingRows(self: Protection) -> bool

"""

    AllowSorting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowSorting(self: Protection) -> bool

"""

    AllowUsingPivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowUsingPivotTables(self: Protection) -> bool

"""



class PublishObject:
    # no doc
    def Delete(self):
        """ Delete(self: PublishObject) """
        pass

    def Publish(self, Create):
        """ Publish(self: PublishObject, Create: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PublishObject) -> Application

"""

    AutoRepublish = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoRepublish(self: PublishObject) -> bool

Set: AutoRepublish(self: PublishObject) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PublishObject) -> XlCreator

"""

    DivID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DivID(self: PublishObject) -> str

"""

    Filename = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Filename(self: PublishObject) -> str

Set: Filename(self: PublishObject) = value
"""

    HtmlType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HtmlType(self: PublishObject) -> XlHtmlType

Set: HtmlType(self: PublishObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PublishObject) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: PublishObject) -> str

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Source(self: PublishObject) -> str

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: PublishObject) -> XlSourceType

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: PublishObject) -> str

Set: Title(self: PublishObject) = value
"""



class PublishObjects(IEnumerable):
    # no doc
    def Add(self, SourceType, Filename, Sheet, Source, HtmlType, DivID, Title):
        """ Add(self: PublishObjects, SourceType: XlSourceType, Filename: str, Sheet: object, Source: object, HtmlType: object, DivID: object, Title: object) -> PublishObject """
        pass

    def Delete(self):
        """ Delete(self: PublishObjects) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: PublishObjects) -> IEnumerator """
        pass

    def Publish(self):
        """ Publish(self: PublishObjects) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: PublishObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: PublishObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: PublishObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: PublishObjects) -> object

"""



class RefreshEvents_Event:
    # no doc
# Error generating skeleton for function add_AfterRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRefresh: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AfterRefresh = None
    BeforeRefresh = None


class _QueryTable:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: _QueryTable) """
        pass

    def Delete(self):
        """ Delete(self: _QueryTable) """
        pass

    def Refresh(self, BackgroundQuery):
        """ Refresh(self: _QueryTable, BackgroundQuery: object) -> bool """
        pass

    def ResetTimer(self):
        """ ResetTimer(self: _QueryTable) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: _QueryTable, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: _QueryTable) -> bool

Set: AdjustColumnWidth(self: _QueryTable) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _QueryTable) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: _QueryTable) -> bool

Set: BackgroundQuery(self: _QueryTable) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: _QueryTable) -> object

Set: CommandText(self: _QueryTable) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: _QueryTable) -> XlCmdType

Set: CommandType(self: _QueryTable) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: _QueryTable) -> object

Set: Connection(self: _QueryTable) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _QueryTable) -> XlCreator

"""

    Destination = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Destination(self: _QueryTable) -> Range

"""

    EditWebPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditWebPage(self: _QueryTable) -> object

Set: EditWebPage(self: _QueryTable) = value
"""

    EnableEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEditing(self: _QueryTable) -> bool

Set: EnableEditing(self: _QueryTable) = value
"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: _QueryTable) -> bool

Set: EnableRefresh(self: _QueryTable) = value
"""

    FetchedRowOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FetchedRowOverflow(self: _QueryTable) -> bool

"""

    FieldNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldNames(self: _QueryTable) -> bool

Set: FieldNames(self: _QueryTable) = value
"""

    FillAdjacentFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FillAdjacentFormulas(self: _QueryTable) -> bool

Set: FillAdjacentFormulas(self: _QueryTable) = value
"""

    HasAutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAutoFormat(self: _QueryTable) -> bool

Set: HasAutoFormat(self: _QueryTable) = value
"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: _QueryTable) -> ListObject

"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: _QueryTable) -> bool

Set: MaintainConnection(self: _QueryTable) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _QueryTable) -> str

Set: Name(self: _QueryTable) = value
"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parameters(self: _QueryTable) -> Parameters

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _QueryTable) -> object

"""

    PostText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PostText(self: _QueryTable) -> str

Set: PostText(self: _QueryTable) = value
"""

    PreserveColumnInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnInfo(self: _QueryTable) -> bool

Set: PreserveColumnInfo(self: _QueryTable) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: _QueryTable) -> bool

Set: PreserveFormatting(self: _QueryTable) = value
"""

    QueryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryType(self: _QueryTable) -> XlQueryType

"""

    Recordset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recordset(self: _QueryTable) -> object

Set: Recordset(self: _QueryTable) = value
"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: _QueryTable) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: _QueryTable) -> bool

Set: RefreshOnFileOpen(self: _QueryTable) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: _QueryTable) -> int

Set: RefreshPeriod(self: _QueryTable) = value
"""

    RefreshStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshStyle(self: _QueryTable) -> XlCellInsertionMode

Set: RefreshStyle(self: _QueryTable) = value
"""

    ResultRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ResultRange(self: _QueryTable) -> Range

"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: _QueryTable) -> XlRobustConnect

Set: RobustConnect(self: _QueryTable) = value
"""

    RowNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowNumbers(self: _QueryTable) -> bool

Set: RowNumbers(self: _QueryTable) = value
"""

    SaveData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveData(self: _QueryTable) -> bool

Set: SaveData(self: _QueryTable) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: _QueryTable) -> bool

Set: SavePassword(self: _QueryTable) = value
"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: _QueryTable) -> Sort

"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: _QueryTable) -> str

Set: SourceConnectionFile(self: _QueryTable) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: _QueryTable) -> str

Set: SourceDataFile(self: _QueryTable) = value
"""

    Sql = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sql(self: _QueryTable) -> object

Set: Sql(self: _QueryTable) = value
"""

    TablesOnlyFromHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesOnlyFromHTML(self: _QueryTable) -> bool

Set: TablesOnlyFromHTML(self: _QueryTable) = value
"""

    TextFileColumnDataTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileColumnDataTypes(self: _QueryTable) -> object

Set: TextFileColumnDataTypes(self: _QueryTable) = value
"""

    TextFileCommaDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileCommaDelimiter(self: _QueryTable) -> bool

Set: TextFileCommaDelimiter(self: _QueryTable) = value
"""

    TextFileConsecutiveDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileConsecutiveDelimiter(self: _QueryTable) -> bool

Set: TextFileConsecutiveDelimiter(self: _QueryTable) = value
"""

    TextFileDecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileDecimalSeparator(self: _QueryTable) -> str

Set: TextFileDecimalSeparator(self: _QueryTable) = value
"""

    TextFileFixedColumnWidths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileFixedColumnWidths(self: _QueryTable) -> object

Set: TextFileFixedColumnWidths(self: _QueryTable) = value
"""

    TextFileOtherDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileOtherDelimiter(self: _QueryTable) -> str

Set: TextFileOtherDelimiter(self: _QueryTable) = value
"""

    TextFileParseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileParseType(self: _QueryTable) -> XlTextParsingType

Set: TextFileParseType(self: _QueryTable) = value
"""

    TextFilePlatform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePlatform(self: _QueryTable) -> int

Set: TextFilePlatform(self: _QueryTable) = value
"""

    TextFilePromptOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePromptOnRefresh(self: _QueryTable) -> bool

Set: TextFilePromptOnRefresh(self: _QueryTable) = value
"""

    TextFileSemicolonDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSemicolonDelimiter(self: _QueryTable) -> bool

Set: TextFileSemicolonDelimiter(self: _QueryTable) = value
"""

    TextFileSpaceDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSpaceDelimiter(self: _QueryTable) -> bool

Set: TextFileSpaceDelimiter(self: _QueryTable) = value
"""

    TextFileStartRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileStartRow(self: _QueryTable) -> int

Set: TextFileStartRow(self: _QueryTable) = value
"""

    TextFileTabDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTabDelimiter(self: _QueryTable) -> bool

Set: TextFileTabDelimiter(self: _QueryTable) = value
"""

    TextFileTextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTextQualifier(self: _QueryTable) -> XlTextQualifier

Set: TextFileTextQualifier(self: _QueryTable) = value
"""

    TextFileThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileThousandsSeparator(self: _QueryTable) -> str

Set: TextFileThousandsSeparator(self: _QueryTable) = value
"""

    TextFileTrailingMinusNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTrailingMinusNumbers(self: _QueryTable) -> bool

Set: TextFileTrailingMinusNumbers(self: _QueryTable) = value
"""

    TextFileVisualLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileVisualLayout(self: _QueryTable) -> XlTextVisualLayoutType

Set: TextFileVisualLayout(self: _QueryTable) = value
"""

    WebConsecutiveDelimitersAsOne = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebConsecutiveDelimitersAsOne(self: _QueryTable) -> bool

Set: WebConsecutiveDelimitersAsOne(self: _QueryTable) = value
"""

    WebDisableDateRecognition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableDateRecognition(self: _QueryTable) -> bool

Set: WebDisableDateRecognition(self: _QueryTable) = value
"""

    WebDisableRedirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableRedirections(self: _QueryTable) -> bool

Set: WebDisableRedirections(self: _QueryTable) = value
"""

    WebFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebFormatting(self: _QueryTable) -> XlWebFormatting

Set: WebFormatting(self: _QueryTable) = value
"""

    WebPreFormattedTextToColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebPreFormattedTextToColumns(self: _QueryTable) -> bool

Set: WebPreFormattedTextToColumns(self: _QueryTable) = value
"""

    WebSelectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSelectionType(self: _QueryTable) -> XlWebSelectionType

Set: WebSelectionType(self: _QueryTable) = value
"""

    WebSingleBlockTextImport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSingleBlockTextImport(self: _QueryTable) -> bool

Set: WebSingleBlockTextImport(self: _QueryTable) = value
"""

    WebTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebTables(self: _QueryTable) -> str

Set: WebTables(self: _QueryTable) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: _QueryTable) -> WorkbookConnection

"""



class QueryTable(_QueryTable, RefreshEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class QueryTableClass(__ComObject, _QueryTable, QueryTable, RefreshEvents_Event):
    """ QueryTableClass() """
# Error generating skeleton for function add_AfterRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRefresh: sequence item 1: expected string, NoneType found

    def CancelRefresh(self):
        """ CancelRefresh(self: QueryTableClass) """
        pass

    def Delete(self):
        """ Delete(self: QueryTableClass) """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def Refresh(self, BackgroundQuery):
        """ Refresh(self: QueryTableClass, BackgroundQuery: object) -> bool """
        pass

# Error generating skeleton for function remove_AfterRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRefresh: sequence item 1: expected string, NoneType found

    def ResetTimer(self):
        """ ResetTimer(self: QueryTableClass) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: QueryTableClass, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: QueryTableClass) -> bool

Set: AdjustColumnWidth(self: QueryTableClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: QueryTableClass) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: QueryTableClass) -> bool

Set: BackgroundQuery(self: QueryTableClass) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: QueryTableClass) -> object

Set: CommandText(self: QueryTableClass) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: QueryTableClass) -> XlCmdType

Set: CommandType(self: QueryTableClass) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: QueryTableClass) -> object

Set: Connection(self: QueryTableClass) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: QueryTableClass) -> XlCreator

"""

    Destination = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Destination(self: QueryTableClass) -> Range

"""

    EditWebPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditWebPage(self: QueryTableClass) -> object

Set: EditWebPage(self: QueryTableClass) = value
"""

    EnableEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEditing(self: QueryTableClass) -> bool

Set: EnableEditing(self: QueryTableClass) = value
"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: QueryTableClass) -> bool

Set: EnableRefresh(self: QueryTableClass) = value
"""

    FetchedRowOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FetchedRowOverflow(self: QueryTableClass) -> bool

"""

    FieldNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldNames(self: QueryTableClass) -> bool

Set: FieldNames(self: QueryTableClass) = value
"""

    FillAdjacentFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FillAdjacentFormulas(self: QueryTableClass) -> bool

Set: FillAdjacentFormulas(self: QueryTableClass) = value
"""

    HasAutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAutoFormat(self: QueryTableClass) -> bool

Set: HasAutoFormat(self: QueryTableClass) = value
"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: QueryTableClass) -> ListObject

"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: QueryTableClass) -> bool

Set: MaintainConnection(self: QueryTableClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: QueryTableClass) -> str

Set: Name(self: QueryTableClass) = value
"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parameters(self: QueryTableClass) -> Parameters

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: QueryTableClass) -> object

"""

    PostText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PostText(self: QueryTableClass) -> str

Set: PostText(self: QueryTableClass) = value
"""

    PreserveColumnInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnInfo(self: QueryTableClass) -> bool

Set: PreserveColumnInfo(self: QueryTableClass) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: QueryTableClass) -> bool

Set: PreserveFormatting(self: QueryTableClass) = value
"""

    QueryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryType(self: QueryTableClass) -> XlQueryType

"""

    Recordset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recordset(self: QueryTableClass) -> object

Set: Recordset(self: QueryTableClass) = value
"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: QueryTableClass) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: QueryTableClass) -> bool

Set: RefreshOnFileOpen(self: QueryTableClass) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: QueryTableClass) -> int

Set: RefreshPeriod(self: QueryTableClass) = value
"""

    RefreshStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshStyle(self: QueryTableClass) -> XlCellInsertionMode

Set: RefreshStyle(self: QueryTableClass) = value
"""

    ResultRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ResultRange(self: QueryTableClass) -> Range

"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: QueryTableClass) -> XlRobustConnect

Set: RobustConnect(self: QueryTableClass) = value
"""

    RowNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowNumbers(self: QueryTableClass) -> bool

Set: RowNumbers(self: QueryTableClass) = value
"""

    SaveData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveData(self: QueryTableClass) -> bool

Set: SaveData(self: QueryTableClass) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: QueryTableClass) -> bool

Set: SavePassword(self: QueryTableClass) = value
"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: QueryTableClass) -> Sort

"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: QueryTableClass) -> str

Set: SourceConnectionFile(self: QueryTableClass) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: QueryTableClass) -> str

Set: SourceDataFile(self: QueryTableClass) = value
"""

    Sql = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sql(self: QueryTableClass) -> object

Set: Sql(self: QueryTableClass) = value
"""

    TablesOnlyFromHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesOnlyFromHTML(self: QueryTableClass) -> bool

Set: TablesOnlyFromHTML(self: QueryTableClass) = value
"""

    TextFileColumnDataTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileColumnDataTypes(self: QueryTableClass) -> object

Set: TextFileColumnDataTypes(self: QueryTableClass) = value
"""

    TextFileCommaDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileCommaDelimiter(self: QueryTableClass) -> bool

Set: TextFileCommaDelimiter(self: QueryTableClass) = value
"""

    TextFileConsecutiveDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileConsecutiveDelimiter(self: QueryTableClass) -> bool

Set: TextFileConsecutiveDelimiter(self: QueryTableClass) = value
"""

    TextFileDecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileDecimalSeparator(self: QueryTableClass) -> str

Set: TextFileDecimalSeparator(self: QueryTableClass) = value
"""

    TextFileFixedColumnWidths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileFixedColumnWidths(self: QueryTableClass) -> object

Set: TextFileFixedColumnWidths(self: QueryTableClass) = value
"""

    TextFileOtherDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileOtherDelimiter(self: QueryTableClass) -> str

Set: TextFileOtherDelimiter(self: QueryTableClass) = value
"""

    TextFileParseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileParseType(self: QueryTableClass) -> XlTextParsingType

Set: TextFileParseType(self: QueryTableClass) = value
"""

    TextFilePlatform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePlatform(self: QueryTableClass) -> int

Set: TextFilePlatform(self: QueryTableClass) = value
"""

    TextFilePromptOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePromptOnRefresh(self: QueryTableClass) -> bool

Set: TextFilePromptOnRefresh(self: QueryTableClass) = value
"""

    TextFileSemicolonDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSemicolonDelimiter(self: QueryTableClass) -> bool

Set: TextFileSemicolonDelimiter(self: QueryTableClass) = value
"""

    TextFileSpaceDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSpaceDelimiter(self: QueryTableClass) -> bool

Set: TextFileSpaceDelimiter(self: QueryTableClass) = value
"""

    TextFileStartRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileStartRow(self: QueryTableClass) -> int

Set: TextFileStartRow(self: QueryTableClass) = value
"""

    TextFileTabDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTabDelimiter(self: QueryTableClass) -> bool

Set: TextFileTabDelimiter(self: QueryTableClass) = value
"""

    TextFileTextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTextQualifier(self: QueryTableClass) -> XlTextQualifier

Set: TextFileTextQualifier(self: QueryTableClass) = value
"""

    TextFileThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileThousandsSeparator(self: QueryTableClass) -> str

Set: TextFileThousandsSeparator(self: QueryTableClass) = value
"""

    TextFileTrailingMinusNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTrailingMinusNumbers(self: QueryTableClass) -> bool

Set: TextFileTrailingMinusNumbers(self: QueryTableClass) = value
"""

    TextFileVisualLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileVisualLayout(self: QueryTableClass) -> XlTextVisualLayoutType

Set: TextFileVisualLayout(self: QueryTableClass) = value
"""

    WebConsecutiveDelimitersAsOne = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebConsecutiveDelimitersAsOne(self: QueryTableClass) -> bool

Set: WebConsecutiveDelimitersAsOne(self: QueryTableClass) = value
"""

    WebDisableDateRecognition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableDateRecognition(self: QueryTableClass) -> bool

Set: WebDisableDateRecognition(self: QueryTableClass) = value
"""

    WebDisableRedirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableRedirections(self: QueryTableClass) -> bool

Set: WebDisableRedirections(self: QueryTableClass) = value
"""

    WebFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebFormatting(self: QueryTableClass) -> XlWebFormatting

Set: WebFormatting(self: QueryTableClass) = value
"""

    WebPreFormattedTextToColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebPreFormattedTextToColumns(self: QueryTableClass) -> bool

Set: WebPreFormattedTextToColumns(self: QueryTableClass) = value
"""

    WebSelectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSelectionType(self: QueryTableClass) -> XlWebSelectionType

Set: WebSelectionType(self: QueryTableClass) = value
"""

    WebSingleBlockTextImport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSingleBlockTextImport(self: QueryTableClass) -> bool

Set: WebSingleBlockTextImport(self: QueryTableClass) = value
"""

    WebTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebTables(self: QueryTableClass) -> str

Set: WebTables(self: QueryTableClass) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: QueryTableClass) -> WorkbookConnection

"""


    AfterRefresh = None
    BeforeRefresh = None


class QueryTables(IEnumerable):
    # no doc
    def Add(self, Connection, Destination, Sql):
        """ Add(self: QueryTables, Connection: object, Destination: Range, Sql: object) -> QueryTable """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: QueryTables) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: QueryTables, Index: object) -> QueryTable """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: QueryTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: QueryTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: QueryTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: QueryTables) -> object

"""



class QuickAnalysis:
    # no doc
    def Hide(self, XlQuickAnalysisMode):
        """ Hide(self: QuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        pass

    def Show(self, XlQuickAnalysisMode):
        """ Show(self: QuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: QuickAnalysis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: QuickAnalysis) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: QuickAnalysis) -> object

"""



class Range(IEnumerable):
    # no doc
    def Activate(self):
        """ Activate(self: Range) -> object """
        pass

    def AddComment(self, Text):
        """ AddComment(self: Range, Text: object) -> Comment """
        pass

    def AdvancedFilter(self, Action, CriteriaRange, CopyToRange, Unique):
        """ AdvancedFilter(self: Range, Action: XlFilterAction, CriteriaRange: object, CopyToRange: object, Unique: object) -> object """
        pass

    def AllocateChanges(self):
        """ AllocateChanges(self: Range) """
        pass

    def ApplyNames(self, Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast):
        """ ApplyNames(self: Range, Names: object, IgnoreRelativeAbsolute: object, UseRowColumnNames: object, OmitColumn: object, OmitRow: object, Order: XlApplyNamesOrder, AppendLast: object) -> object """
        pass

    def ApplyOutlineStyles(self):
        """ ApplyOutlineStyles(self: Range) -> object """
        pass

    def AutoComplete(self, String):
        """ AutoComplete(self: Range, String: str) -> str """
        pass

    def AutoFill(self, Destination, Type):
        """ AutoFill(self: Range, Destination: Range, Type: XlAutoFillType) -> object """
        pass

    def AutoFilter(self, Field, Criteria1, Operator, Criteria2, VisibleDropDown):
        """ AutoFilter(self: Range, Field: object, Criteria1: object, Operator: XlAutoFilterOperator, Criteria2: object, VisibleDropDown: object) -> object """
        pass

    def AutoFit(self):
        """ AutoFit(self: Range) -> object """
        pass

    def AutoFormat(self, Format, Number, Font, Alignment, Border, Pattern, Width):
        """ AutoFormat(self: Range, Format: XlRangeAutoFormat, Number: object, Font: object, Alignment: object, Border: object, Pattern: object, Width: object) -> object """
        pass

    def AutoOutline(self):
        """ AutoOutline(self: Range) -> object """
        pass

    def BorderAround(self, LineStyle, Weight, ColorIndex, Color):
        """ BorderAround(self: Range, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object) -> object """
        pass

    def BorderAround2(self, LineStyle, Weight, ColorIndex, Color, ThemeColor):
        """ BorderAround2(self: Range, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object, ThemeColor: object) -> object """
        pass

    def Calculate(self):
        """ Calculate(self: Range) -> object """
        pass

    def CalculateRowMajorOrder(self):
        """ CalculateRowMajorOrder(self: Range) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Range, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Clear(self):
        """ Clear(self: Range) -> object """
        pass

    def ClearComments(self):
        """ ClearComments(self: Range) """
        pass

    def ClearContents(self):
        """ ClearContents(self: Range) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: Range) -> object """
        pass

    def ClearHyperlinks(self):
        """ ClearHyperlinks(self: Range) """
        pass

    def ClearNotes(self):
        """ ClearNotes(self: Range) -> object """
        pass

    def ClearOutline(self):
        """ ClearOutline(self: Range) -> object """
        pass

    def ColumnDifferences(self, Comparison):
        """ ColumnDifferences(self: Range, Comparison: object) -> Range """
        pass

    def Consolidate(self, Sources, Function, TopRow, LeftColumn, CreateLinks):
        """ Consolidate(self: Range, Sources: object, Function: object, TopRow: object, LeftColumn: object, CreateLinks: object) -> object """
        pass

    def Copy(self, Destination):
        """ Copy(self: Range, Destination: object) -> object """
        pass

    def CopyFromRecordset(self, Data, MaxRows, MaxColumns):
        """ CopyFromRecordset(self: Range, Data: object, MaxRows: object, MaxColumns: object) -> int """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Range, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def CreateNames(self, Top, Left, Bottom, Right):
        """ CreateNames(self: Range, Top: object, Left: object, Bottom: object, Right: object) -> object """
        pass

    def CreatePublisher(self, Edition, Appearance, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU):
        """ CreatePublisher(self: Range, Edition: object, Appearance: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) -> object """
        pass

    def Cut(self, Destination):
        """ Cut(self: Range, Destination: object) -> object """
        pass

    def DataSeries(self, Rowcol, Type, Date, Step, Stop, Trend):
        """ DataSeries(self: Range, Rowcol: object, Type: XlDataSeriesType, Date: XlDataSeriesDate, Step: object, Stop: object, Trend: object) -> object """
        pass

    def Delete(self, Shift):
        """ Delete(self: Range, Shift: object) -> object """
        pass

    def DialogBox(self):
        """ DialogBox(self: Range) -> object """
        pass

    def Dirty(self):
        """ Dirty(self: Range) """
        pass

    def DiscardChanges(self):
        """ DiscardChanges(self: Range) """
        pass

    def EditionOptions(self, Type, Option, Name, Reference, Appearance, ChartSize, Format):
        """ EditionOptions(self: Range, Type: XlEditionType, Option: XlEditionOptionsOption, Name: object, Reference: object, Appearance: XlPictureAppearance, ChartSize: XlPictureAppearance, Format: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: Range, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FillDown(self):
        """ FillDown(self: Range) -> object """
        pass

    def FillLeft(self):
        """ FillLeft(self: Range) -> object """
        pass

    def FillRight(self):
        """ FillRight(self: Range) -> object """
        pass

    def FillUp(self):
        """ FillUp(self: Range) -> object """
        pass

    def Find(self, What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat):
        """ Find(self: Range, What: object, After: object, LookIn: object, LookAt: object, SearchOrder: object, SearchDirection: XlSearchDirection, MatchCase: object, MatchByte: object, SearchFormat: object) -> Range """
        pass

    def FindNext(self, After):
        """ FindNext(self: Range, After: object) -> Range """
        pass

    def FindPrevious(self, After):
        """ FindPrevious(self: Range, After: object) -> Range """
        pass

    def FlashFill(self):
        """ FlashFill(self: Range) """
        pass

    def FunctionWizard(self):
        """ FunctionWizard(self: Range) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Range) -> IEnumerator """
        pass

    def GoalSeek(self, Goal, ChangingCell):
        """ GoalSeek(self: Range, Goal: object, ChangingCell: Range) -> bool """
        pass

    def Group(self, Start, End, By, Periods):
        """ Group(self: Range, Start: object, End: object, By: object, Periods: object) -> object """
        pass

    def Insert(self, Shift, CopyOrigin):
        """ Insert(self: Range, Shift: object, CopyOrigin: object) -> object """
        pass

    def InsertIndent(self, InsertAmount):
        """ InsertIndent(self: Range, InsertAmount: int) """
        pass

    def Justify(self):
        """ Justify(self: Range) -> object """
        pass

    def ListNames(self):
        """ ListNames(self: Range) -> object """
        pass

    def Merge(self, Across):
        """ Merge(self: Range, Across: object) """
        pass

    def NavigateArrow(self, TowardPrecedent, ArrowNumber, LinkNumber):
        """ NavigateArrow(self: Range, TowardPrecedent: object, ArrowNumber: object, LinkNumber: object) -> object """
        pass

    def NoteText(self, Text, Start, Length):
        """ NoteText(self: Range, Text: object, Start: object, Length: object) -> str """
        pass

    def Parse(self, ParseLine, Destination):
        """ Parse(self: Range, ParseLine: object, Destination: object) -> object """
        pass

    def PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose):
        """ PasteSpecial(self: Range, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOutEx(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: Range, EnableChanges: object) -> object """
        pass

    def RemoveDuplicates(self, Columns, Header):
        """ RemoveDuplicates(self: Range, Columns: object, Header: XlYesNoGuess) """
        pass

    def RemoveSubtotal(self):
        """ RemoveSubtotal(self: Range) -> object """
        pass

    def Replace(self, What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat):
        """ Replace(self: Range, What: object, Replacement: object, LookAt: object, SearchOrder: object, MatchCase: object, MatchByte: object, SearchFormat: object, ReplaceFormat: object) -> bool """
        pass

    def RowDifferences(self, Comparison):
        """ RowDifferences(self: Range, Comparison: object) -> Range """
        pass

    def Run(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Run(self: Range, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Select(self):
        """ Select(self: Range) -> object """
        pass

    def SetPhonetic(self):
        """ SetPhonetic(self: Range) """
        pass

    def Show(self):
        """ Show(self: Range) -> object """
        pass

    def ShowDependents(self, Remove):
        """ ShowDependents(self: Range, Remove: object) -> object """
        pass

    def ShowErrors(self):
        """ ShowErrors(self: Range) -> object """
        pass

    def ShowPrecedents(self, Remove):
        """ ShowPrecedents(self: Range, Remove: object) -> object """
        pass

    def Sort(self, Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3):
        """ Sort(self: Range, Key1: object, Order1: XlSortOrder, Key2: object, Type: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, SortMethod: XlSortMethod, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        pass

    def SortSpecial(self, SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, DataOption1, DataOption2, DataOption3):
        """ SortSpecial(self: Range, SortMethod: XlSortMethod, Key1: object, Order1: XlSortOrder, Type: object, Key2: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        pass

    def Speak(self, SpeakDirection, SpeakFormulas):
        """ Speak(self: Range, SpeakDirection: object, SpeakFormulas: object) """
        pass

    def SpecialCells(self, Type, Value):
        """ SpecialCells(self: Range, Type: XlCellType, Value: object) -> Range """
        pass

    def SubscribeTo(self, Edition, Format):
        """ SubscribeTo(self: Range, Edition: str, Format: XlSubscribeToFormat) -> object """
        pass

    def Subtotal(self, GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData):
        """ Subtotal(self: Range, GroupBy: int, Function: XlConsolidationFunction, TotalList: object, Replace: object, PageBreaks: object, SummaryBelowData: XlSummaryRow) -> object """
        pass

    def Table(self, RowInput, ColumnInput):
        """ Table(self: Range, RowInput: object, ColumnInput: object) -> object """
        pass

    def TextToColumns(self, Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers):
        """ TextToColumns(self: Range, Destination: object, DataType: XlTextParsingType, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object) -> object """
        pass

    def Ungroup(self):
        """ Ungroup(self: Range) -> object """
        pass

    def UnMerge(self):
        """ UnMerge(self: Range) """
        pass

    def _PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose):
        """ _PasteSpecial(self: Range, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Range) -> object

Set: AddIndent(self: Range) = value
"""

    AllowEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEdit(self: Range) -> bool

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Range) -> Application

"""

    Areas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Areas(self: Range) -> Areas

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: Range) -> Borders

"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: Range) -> Range

"""

    Column = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Column(self: Range) -> int

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: Range) -> Range

"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnWidth(self: Range) -> object

Set: ColumnWidth(self: Range) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: Range) -> Comment

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Range) -> int

"""

    CountLarge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CountLarge(self: Range) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Range) -> XlCreator

"""

    CurrentArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentArray(self: Range) -> Range

"""

    CurrentRegion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentRegion(self: Range) -> Range

"""

    Dependents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dependents(self: Range) -> Range

"""

    DirectDependents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectDependents(self: Range) -> Range

"""

    DirectPrecedents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectPrecedents(self: Range) -> Range

"""

    DisplayFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormat(self: Range) -> DisplayFormat

"""

    EntireColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntireColumn(self: Range) -> Range

"""

    EntireRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntireRow(self: Range) -> Range

"""

    Errors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Errors(self: Range) -> Errors

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Range) -> Font

"""

    FormatConditions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormatConditions(self: Range) -> FormatConditions

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Range) -> object

Set: Formula(self: Range) = value
"""

    FormulaArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaArray(self: Range) -> object

Set: FormulaArray(self: Range) = value
"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: Range) -> object

Set: FormulaHidden(self: Range) = value
"""

    FormulaLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLabel(self: Range) -> XlFormulaLabel

Set: FormulaLabel(self: Range) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: Range) -> object

Set: FormulaLocal(self: Range) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: Range) -> object

Set: FormulaR1C1(self: Range) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: Range) -> object

Set: FormulaR1C1Local(self: Range) = value
"""

    HasArray = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasArray(self: Range) -> object

"""

    HasFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasFormula(self: Range) -> object

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Range) -> object

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: Range) -> object

Set: Hidden(self: Range) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Range) -> object

Set: HorizontalAlignment(self: Range) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: Range) -> Hyperlinks

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: Range) -> str

Set: ID(self: Range) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: Range) -> object

Set: IndentLevel(self: Range) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Range) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Range) -> object

"""

    ListHeaderRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListHeaderRows(self: Range) -> int

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: Range) -> ListObject

"""

    LocationInTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocationInTable(self: Range) -> XlLocationInTable

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Range) -> object

Set: Locked(self: Range) = value
"""

    MDX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDX(self: Range) -> str

"""

    MergeArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeArea(self: Range) -> Range

"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: Range) -> object

Set: MergeCells(self: Range) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Range) -> object

Set: Name(self: Range) = value
"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: Range) -> Range

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: Range) -> object

Set: NumberFormat(self: Range) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: Range) -> object

Set: NumberFormatLocal(self: Range) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Range) -> object

Set: Orientation(self: Range) = value
"""

    OutlineLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OutlineLevel(self: Range) -> object

Set: OutlineLevel(self: Range) = value
"""

    PageBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageBreak(self: Range) -> int

Set: PageBreak(self: Range) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Range) -> object

"""

    Phonetic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Phonetic(self: Range) -> Phonetic

"""

    Phonetics = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Phonetics(self: Range) -> Phonetics

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: Range) -> PivotCell

"""

    PivotField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotField(self: Range) -> PivotField

"""

    PivotItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotItem(self: Range) -> PivotItem

"""

    PivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTable(self: Range) -> PivotTable

"""

    Precedents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Precedents(self: Range) -> Range

"""

    PrefixCharacter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrefixCharacter(self: Range) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: Range) -> Range

"""

    QueryTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTable(self: Range) -> QueryTable

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Range) -> int

Set: ReadingOrder(self: Range) = value
"""

    Row = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Row(self: Range) -> int

"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowHeight(self: Range) -> object

Set: RowHeight(self: Range) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: Range) -> Range

"""

    ServerActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerActions(self: Range) -> Actions

"""

    ShowDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowDetail(self: Range) -> object

Set: ShowDetail(self: Range) = value
"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: Range) -> object

Set: ShrinkToFit(self: Range) = value
"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: Range) -> SmartTags

"""

    SoundNote = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoundNote(self: Range) -> SoundNote

"""

    SparklineGroups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SparklineGroups(self: Range) -> SparklineGroups

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: Range) -> object

Set: Style(self: Range) = value
"""

    Summary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Summary(self: Range) -> object

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Range) -> object

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Range) -> object

"""

    UseStandardHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardHeight(self: Range) -> object

Set: UseStandardHeight(self: Range) = value
"""

    UseStandardWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardWidth(self: Range) -> object

Set: UseStandardWidth(self: Range) = value
"""

    Validation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Validation(self: Range) -> Validation

"""

    Value2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value2(self: Range) -> object

Set: Value2(self: Range) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Range) -> object

Set: VerticalAlignment(self: Range) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Range) -> object

"""

    Worksheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheet(self: Range) -> Worksheet

"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: Range) -> object

Set: WrapText(self: Range) = value
"""

    XPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XPath(self: Range) -> XPath

"""



class Ranges(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: Ranges) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Ranges) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Ranges) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Ranges) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Ranges) -> object

"""



class RecentFile:
    # no doc
    def Delete(self):
        """ Delete(self: RecentFile) """
        pass

    def Open(self):
        """ Open(self: RecentFile) -> Workbook """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: RecentFile) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: RecentFile) -> XlCreator

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: RecentFile) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: RecentFile) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: RecentFile) -> object

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: RecentFile) -> str

"""



class RecentFiles(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: RecentFiles, Name: str) -> RecentFile """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: RecentFiles) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: RecentFiles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: RecentFiles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: RecentFiles) -> XlCreator

"""

    Maximum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Maximum(self: RecentFiles) -> int

Set: Maximum(self: RecentFiles) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: RecentFiles) -> object

"""



class Rectangle:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Rectangle) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Rectangle, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Rectangle) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Rectangle, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Rectangle) -> object """
        pass

    def Delete(self):
        """ Delete(self: Rectangle) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Rectangle) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Rectangle, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Rectangle) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Rectangle) -> bool

Set: AddIndent(self: Rectangle) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Rectangle) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Rectangle) -> object

Set: AutoScaleFont(self: Rectangle) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Rectangle) -> bool

Set: AutoSize(self: Rectangle) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Rectangle) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Rectangle) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Rectangle) -> str

Set: Caption(self: Rectangle) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Rectangle) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Rectangle) -> bool

Set: Enabled(self: Rectangle) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Rectangle) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Rectangle) -> str

Set: Formula(self: Rectangle) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Rectangle) -> float

Set: Height(self: Rectangle) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Rectangle) -> object

Set: HorizontalAlignment(self: Rectangle) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Rectangle) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Rectangle) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Rectangle) -> float

Set: Left(self: Rectangle) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Rectangle) -> bool

Set: Locked(self: Rectangle) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Rectangle) -> bool

Set: LockedText(self: Rectangle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Rectangle) -> str

Set: Name(self: Rectangle) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Rectangle) -> str

Set: OnAction(self: Rectangle) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Rectangle) -> object

Set: Orientation(self: Rectangle) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Rectangle) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Rectangle) -> object

Set: Placement(self: Rectangle) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Rectangle) -> bool

Set: PrintObject(self: Rectangle) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Rectangle) -> int

Set: ReadingOrder(self: Rectangle) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: Rectangle) -> bool

Set: RoundedCorners(self: Rectangle) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Rectangle) -> bool

Set: Shadow(self: Rectangle) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Rectangle) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Rectangle) -> str

Set: Text(self: Rectangle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Rectangle) -> float

Set: Top(self: Rectangle) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Rectangle) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Rectangle) -> object

Set: VerticalAlignment(self: Rectangle) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Rectangle) -> bool

Set: Visible(self: Rectangle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Rectangle) -> float

Set: Width(self: Rectangle) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Rectangle) -> int

"""



class Rectangles(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Rectangles, Left: float, Top: float, Width: float, Height: float) -> Rectangle """
        pass

    def BringToFront(self):
        """ BringToFront(self: Rectangles) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: Rectangles, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: Rectangles) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Rectangles, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Rectangles) -> object """
        pass

    def Delete(self):
        """ Delete(self: Rectangles) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Rectangles) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Rectangles) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Rectangles) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Rectangles, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Rectangles, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Rectangles) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Rectangles) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Rectangles) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Rectangles) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Rectangles) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Rectangles) -> bool

Set: AddIndent(self: Rectangles) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Rectangles) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: Rectangles) -> object

Set: AutoScaleFont(self: Rectangles) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: Rectangles) -> bool

Set: AutoSize(self: Rectangles) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Rectangles) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Rectangles) -> str

Set: Caption(self: Rectangles) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Rectangles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Rectangles) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Rectangles) -> bool

Set: Enabled(self: Rectangles) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Rectangles) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Rectangles) -> str

Set: Formula(self: Rectangles) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Rectangles) -> float

Set: Height(self: Rectangles) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Rectangles) -> object

Set: HorizontalAlignment(self: Rectangles) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Rectangles) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Rectangles) -> float

Set: Left(self: Rectangles) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Rectangles) -> bool

Set: Locked(self: Rectangles) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: Rectangles) -> bool

Set: LockedText(self: Rectangles) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Rectangles) -> str

Set: OnAction(self: Rectangles) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Rectangles) -> object

Set: Orientation(self: Rectangles) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Rectangles) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Rectangles) -> object

Set: Placement(self: Rectangles) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Rectangles) -> bool

Set: PrintObject(self: Rectangles) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Rectangles) -> int

Set: ReadingOrder(self: Rectangles) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: Rectangles) -> bool

Set: RoundedCorners(self: Rectangles) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Rectangles) -> bool

Set: Shadow(self: Rectangles) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Rectangles) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: Rectangles) -> str

Set: Text(self: Rectangles) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Rectangles) -> float

Set: Top(self: Rectangles) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Rectangles) -> object

Set: VerticalAlignment(self: Rectangles) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Rectangles) -> bool

Set: Visible(self: Rectangles) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Rectangles) -> float

Set: Width(self: Rectangles) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Rectangles) -> int

"""



class RectangularGradient:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: RectangularGradient) -> Application

"""

    ColorStops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorStops(self: RectangularGradient) -> ColorStops

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: RectangularGradient) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: RectangularGradient) -> object

"""

    RectangleBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleBottom(self: RectangularGradient) -> float

Set: RectangleBottom(self: RectangularGradient) = value
"""

    RectangleLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleLeft(self: RectangularGradient) -> float

Set: RectangleLeft(self: RectangularGradient) = value
"""

    RectangleRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleRight(self: RectangularGradient) -> float

Set: RectangleRight(self: RectangularGradient) = value
"""

    RectangleTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RectangleTop(self: RectangularGradient) -> float

Set: RectangleTop(self: RectangularGradient) = value
"""



class RefreshEvents:
    # no doc
    def AfterRefresh(self, Success):
        """ AfterRefresh(self: RefreshEvents, Success: bool) """
        pass

    def BeforeRefresh(self, Cancel):
        """ BeforeRefresh(self: RefreshEvents) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class RefreshEvents_AfterRefreshEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ RefreshEvents_AfterRefreshEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Success):
        """ Invoke(self: RefreshEvents_AfterRefreshEventHandler, Success: bool) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class RefreshEvents_BeforeRefreshEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ RefreshEvents_BeforeRefreshEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Cancel):
        """ Invoke(self: RefreshEvents_BeforeRefreshEventHandler) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class RefreshEvents_SinkHelper(object, RefreshEvents):
    # no doc
# Error generating skeleton for function AfterRefresh: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeRefresh: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_AfterRefreshDelegate = None
    m_BeforeRefreshDelegate = None
    m_dwCookie = None


class Research:
    # no doc
    def IsResearchService(self, ServiceID):
        """ IsResearchService(self: Research, ServiceID: str) -> bool """
        pass

    def Query(self, ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery):
        """ Query(self: Research, ServiceID: str, QueryString: object, QueryLanguage: object, UseSelection: object, LaunchQuery: object) -> object """
        pass

    def SetLanguagePair(self, LanguageFrom, LanguageTo):
        """ SetLanguagePair(self: Research, LanguageFrom: int, LanguageTo: int) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Research) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Research) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Research) -> object

"""



class RoutingSlip:
    # no doc
    def Reset(self):
        """ Reset(self: RoutingSlip) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: RoutingSlip) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: RoutingSlip) -> XlCreator

"""

    Delivery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Delivery(self: RoutingSlip) -> XlRoutingSlipDelivery

Set: Delivery(self: RoutingSlip) = value
"""

    Message = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Message(self: RoutingSlip) -> object

Set: Message(self: RoutingSlip) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: RoutingSlip) -> object

"""

    ReturnWhenDone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReturnWhenDone(self: RoutingSlip) -> bool

Set: ReturnWhenDone(self: RoutingSlip) = value
"""

    Status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Status(self: RoutingSlip) -> XlRoutingSlipStatus

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: RoutingSlip) -> object

Set: Subject(self: RoutingSlip) = value
"""

    TrackStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrackStatus(self: RoutingSlip) -> bool

Set: TrackStatus(self: RoutingSlip) = value
"""



class RTD:
    # no doc
    def RefreshData(self):
        """ RefreshData(self: RTD) """
        pass

    def RestartServers(self):
        """ RestartServers(self: RTD) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ThrottleInterval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThrottleInterval(self: RTD) -> int

Set: ThrottleInterval(self: RTD) = value
"""



class Scenario:
    # no doc
    def ChangeScenario(self, ChangingCells, Values):
        """ ChangeScenario(self: Scenario, ChangingCells: object, Values: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: Scenario) -> object """
        pass

    def Show(self):
        """ Show(self: Scenario) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Scenario) -> Application

"""

    ChangingCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangingCells(self: Scenario) -> Range

"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: Scenario) -> str

Set: Comment(self: Scenario) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Scenario) -> XlCreator

"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: Scenario) -> bool

Set: Hidden(self: Scenario) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Scenario) -> int

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Scenario) -> bool

Set: Locked(self: Scenario) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Scenario) -> str

Set: Name(self: Scenario) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Scenario) -> object

"""



class Scenarios(IEnumerable):
    # no doc
    def Add(self, Name, ChangingCells, Values, Comment, Locked, Hidden):
        """ Add(self: Scenarios, Name: str, ChangingCells: object, Values: object, Comment: object, Locked: object, Hidden: object) -> Scenario """
        pass

    def CreateSummary(self, ReportType, ResultCells):
        """ CreateSummary(self: Scenarios, ReportType: XlSummaryReportType, ResultCells: object) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Scenarios) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Scenarios, Index: object) -> Scenario """
        pass

    def Merge(self, Source):
        """ Merge(self: Scenarios, Source: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Scenarios) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Scenarios) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Scenarios) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Scenarios) -> object

"""



class ScrollBar:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: ScrollBar) -> object """
        pass

    def Copy(self):
        """ Copy(self: ScrollBar) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ScrollBar, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ScrollBar) -> object """
        pass

    def Delete(self):
        """ Delete(self: ScrollBar) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ScrollBar) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ScrollBar, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ScrollBar) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ScrollBar) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: ScrollBar) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ScrollBar) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ScrollBar) -> bool

Set: Display3DShading(self: ScrollBar) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ScrollBar) -> bool

Set: Enabled(self: ScrollBar) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ScrollBar) -> float

Set: Height(self: ScrollBar) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: ScrollBar) -> int

"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: ScrollBar) -> int

Set: LargeChange(self: ScrollBar) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ScrollBar) -> float

Set: Left(self: ScrollBar) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ScrollBar) -> str

Set: LinkedCell(self: ScrollBar) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ScrollBar) -> bool

Set: Locked(self: ScrollBar) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: ScrollBar) -> int

Set: Max(self: ScrollBar) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: ScrollBar) -> int

Set: Min(self: ScrollBar) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ScrollBar) -> str

Set: Name(self: ScrollBar) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ScrollBar) -> str

Set: OnAction(self: ScrollBar) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ScrollBar) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ScrollBar) -> object

Set: Placement(self: ScrollBar) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ScrollBar) -> bool

Set: PrintObject(self: ScrollBar) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ScrollBar) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: ScrollBar) -> int

Set: SmallChange(self: ScrollBar) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ScrollBar) -> float

Set: Top(self: ScrollBar) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: ScrollBar) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ScrollBar) -> int

Set: Value(self: ScrollBar) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ScrollBar) -> bool

Set: Visible(self: ScrollBar) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ScrollBar) -> float

Set: Width(self: ScrollBar) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ScrollBar) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ScrollBar) -> int

Set: _Default(self: ScrollBar) = value
"""



class ScrollBars(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: ScrollBars, Left: float, Top: float, Width: float, Height: float) -> ScrollBar """
        pass

    def BringToFront(self):
        """ BringToFront(self: ScrollBars) -> object """
        pass

    def Copy(self):
        """ Copy(self: ScrollBars) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: ScrollBars, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: ScrollBars) -> object """
        pass

    def Delete(self):
        """ Delete(self: ScrollBars) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: ScrollBars) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ScrollBars) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ScrollBars) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: ScrollBars, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: ScrollBars, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: ScrollBars) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: ScrollBars) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: ScrollBars) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: ScrollBars) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: ScrollBars) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ScrollBars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ScrollBars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ScrollBars) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: ScrollBars) -> bool

Set: Display3DShading(self: ScrollBars) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ScrollBars) -> bool

Set: Enabled(self: ScrollBars) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ScrollBars) -> float

Set: Height(self: ScrollBars) = value
"""

    LargeChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LargeChange(self: ScrollBars) -> int

Set: LargeChange(self: ScrollBars) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ScrollBars) -> float

Set: Left(self: ScrollBars) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: ScrollBars) -> str

Set: LinkedCell(self: ScrollBars) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: ScrollBars) -> bool

Set: Locked(self: ScrollBars) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: ScrollBars) -> int

Set: Max(self: ScrollBars) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: ScrollBars) -> int

Set: Min(self: ScrollBars) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ScrollBars) -> str

Set: OnAction(self: ScrollBars) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ScrollBars) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: ScrollBars) -> object

Set: Placement(self: ScrollBars) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: ScrollBars) -> bool

Set: PrintObject(self: ScrollBars) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: ScrollBars) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: ScrollBars) -> int

Set: SmallChange(self: ScrollBars) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ScrollBars) -> float

Set: Top(self: ScrollBars) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ScrollBars) -> int

Set: Value(self: ScrollBars) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ScrollBars) -> bool

Set: Visible(self: ScrollBars) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ScrollBars) -> float

Set: Width(self: ScrollBars) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: ScrollBars) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: ScrollBars) -> int

Set: _Default(self: ScrollBars) = value
"""



class Series:
    # no doc
    def ApplyCustomType(self, ChartType):
        """ ApplyCustomType(self: Series, ChartType: XlChartType) """
        pass

    def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
        """ ApplyDataLabels(self: Series, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        pass

    def ClearFormats(self):
        """ ClearFormats(self: Series) -> object """
        pass

    def Copy(self):
        """ Copy(self: Series) -> object """
        pass

    def DataLabels(self, Index):
        """ DataLabels(self: Series, Index: object) -> object """
        pass

    def Delete(self):
        """ Delete(self: Series) -> object """
        pass

    def ErrorBar(self, Direction, Include, Type, Amount, MinusValues):
        """ ErrorBar(self: Series, Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount: object, MinusValues: object) -> object """
        pass

    def Paste(self):
        """ Paste(self: Series) -> object """
        pass

    def Points(self, Index):
        """ Points(self: Series, Index: object) -> object """
        pass

    def Select(self):
        """ Select(self: Series) -> object """
        pass

    def Trendlines(self, Index):
        """ Trendlines(self: Series, Index: object) -> object """
        pass

    def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
        """ _ApplyDataLabels(self: Series, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Series) -> Application

"""

    ApplyPictToEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToEnd(self: Series) -> bool

Set: ApplyPictToEnd(self: Series) = value
"""

    ApplyPictToFront = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToFront(self: Series) -> bool

Set: ApplyPictToFront(self: Series) = value
"""

    ApplyPictToSides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ApplyPictToSides(self: Series) -> bool

Set: ApplyPictToSides(self: Series) = value
"""

    AxisGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisGroup(self: Series) -> XlAxisGroup

Set: AxisGroup(self: Series) = value
"""

    BarShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BarShape(self: Series) -> XlBarShape

Set: BarShape(self: Series) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Series) -> Border

"""

    BubbleSizes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BubbleSizes(self: Series) -> object

Set: BubbleSizes(self: Series) = value
"""

    ChartType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartType(self: Series) -> XlChartType

Set: ChartType(self: Series) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Series) -> XlCreator

"""

    ErrorBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorBars(self: Series) -> ErrorBars

"""

    Explosion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explosion(self: Series) -> int

Set: Explosion(self: Series) = value
"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Series) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Series) -> ChartFormat

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: Series) -> str

Set: Formula(self: Series) = value
"""

    FormulaLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaLocal(self: Series) -> str

Set: FormulaLocal(self: Series) = value
"""

    FormulaR1C1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1(self: Series) -> str

Set: FormulaR1C1(self: Series) = value
"""

    FormulaR1C1Local = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaR1C1Local(self: Series) -> str

Set: FormulaR1C1Local(self: Series) = value
"""

    Has3DEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Has3DEffect(self: Series) -> bool

Set: Has3DEffect(self: Series) = value
"""

    HasDataLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDataLabels(self: Series) -> bool

Set: HasDataLabels(self: Series) = value
"""

    HasErrorBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasErrorBars(self: Series) -> bool

Set: HasErrorBars(self: Series) = value
"""

    HasLeaderLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLeaderLines(self: Series) -> bool

Set: HasLeaderLines(self: Series) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Series) -> Interior

"""

    InvertColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertColor(self: Series) -> int

Set: InvertColor(self: Series) = value
"""

    InvertColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertColorIndex(self: Series) -> int

Set: InvertColorIndex(self: Series) = value
"""

    InvertIfNegative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InvertIfNegative(self: Series) -> bool

Set: InvertIfNegative(self: Series) = value
"""

    IsFiltered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsFiltered(self: Series) -> bool

Set: IsFiltered(self: Series) = value
"""

    LeaderLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLines(self: Series) -> LeaderLines

"""

    MarkerBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColor(self: Series) -> int

Set: MarkerBackgroundColor(self: Series) = value
"""

    MarkerBackgroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerBackgroundColorIndex(self: Series) -> XlColorIndex

Set: MarkerBackgroundColorIndex(self: Series) = value
"""

    MarkerForegroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColor(self: Series) -> int

Set: MarkerForegroundColor(self: Series) = value
"""

    MarkerForegroundColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerForegroundColorIndex(self: Series) -> XlColorIndex

Set: MarkerForegroundColorIndex(self: Series) = value
"""

    MarkerSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerSize(self: Series) -> int

Set: MarkerSize(self: Series) = value
"""

    MarkerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarkerStyle(self: Series) -> XlMarkerStyle

Set: MarkerStyle(self: Series) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Series) -> str

Set: Name(self: Series) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Series) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: Series) -> XlChartPictureType

Set: PictureType(self: Series) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: Series) -> int

Set: PictureUnit(self: Series) = value
"""

    PictureUnit2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit2(self: Series) -> float

Set: PictureUnit2(self: Series) = value
"""

    PlotColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotColorIndex(self: Series) -> int

"""

    PlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrder(self: Series) -> int

Set: PlotOrder(self: Series) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Series) -> bool

Set: Shadow(self: Series) = value
"""

    Smooth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smooth(self: Series) -> bool

Set: Smooth(self: Series) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Series) -> int

Set: Type(self: Series) = value
"""

    Values = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Values(self: Series) -> object

Set: Values(self: Series) = value
"""

    XValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XValues(self: Series) -> object

Set: XValues(self: Series) = value
"""



class SeriesCollection(IEnumerable):
    # no doc
    def Add(self, Source, Rowcol, SeriesLabels, CategoryLabels, Replace):
        """ Add(self: SeriesCollection, Source: object, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object) -> Series """
        pass

    def Extend(self, Source, Rowcol, CategoryLabels):
        """ Extend(self: SeriesCollection, Source: object, Rowcol: object, CategoryLabels: object) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SeriesCollection) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: SeriesCollection, Index: object) -> Series """
        pass

    def NewSeries(self):
        """ NewSeries(self: SeriesCollection) -> Series """
        pass

    def Paste(self, Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries):
        """ Paste(self: SeriesCollection, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object, NewSeries: object) -> object """
        pass

    def _Default(self, Index):
        """ _Default(self: SeriesCollection, Index: object) -> Series """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SeriesCollection) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SeriesCollection) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SeriesCollection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SeriesCollection) -> object

"""



class SeriesLines:
    # no doc
    def Delete(self):
        """ Delete(self: SeriesLines) -> object """
        pass

    def Select(self):
        """ Select(self: SeriesLines) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SeriesLines) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: SeriesLines) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SeriesLines) -> XlCreator

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: SeriesLines) -> ChartFormat

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SeriesLines) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SeriesLines) -> object

"""



class ServerViewableItems(IEnumerable):
    # no doc
    def Add(self, Obj):
        """ Add(self: ServerViewableItems, Obj: object) -> object """
        pass

    def Delete(self, Index):
        """ Delete(self: ServerViewableItems, Index: object) """
        pass

    def DeleteAll(self):
        """ DeleteAll(self: ServerViewableItems) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ServerViewableItems) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: ServerViewableItems, Index: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ServerViewableItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ServerViewableItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ServerViewableItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ServerViewableItems) -> object

"""



class ShadowFormat(_IMsoDispObj):
    # no doc
    def IncrementOffsetX(self, Increment):
        """ IncrementOffsetX(self: ShadowFormat, Increment: Single) """
        pass

    def IncrementOffsetY(self, Increment):
        """ IncrementOffsetY(self: ShadowFormat, Increment: Single) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ShadowFormat) -> object

"""

    Blur = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blur(self: ShadowFormat) -> Single

Set: Blur(self: ShadowFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ShadowFormat) -> int

"""

    ForeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForeColor(self: ShadowFormat) -> ColorFormat

Set: ForeColor(self: ShadowFormat) = value
"""

    Obscured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Obscured(self: ShadowFormat) -> MsoTriState

Set: Obscured(self: ShadowFormat) = value
"""

    OffsetX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OffsetX(self: ShadowFormat) -> Single

Set: OffsetX(self: ShadowFormat) = value
"""

    OffsetY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OffsetY(self: ShadowFormat) -> Single

Set: OffsetY(self: ShadowFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ShadowFormat) -> object

"""

    RotateWithShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotateWithShape(self: ShadowFormat) -> MsoTriState

Set: RotateWithShape(self: ShadowFormat) = value
"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Size(self: ShadowFormat) -> Single

Set: Size(self: ShadowFormat) = value
"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: ShadowFormat) -> MsoShadowStyle

Set: Style(self: ShadowFormat) = value
"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Transparency(self: ShadowFormat) -> Single

Set: Transparency(self: ShadowFormat) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ShadowFormat) -> MsoShadowType

Set: Type(self: ShadowFormat) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ShadowFormat) -> MsoTriState

Set: Visible(self: ShadowFormat) = value
"""



class Shape:
    # no doc
    def Apply(self):
        """ Apply(self: Shape) """
        pass

    def CanvasCropBottom(self, Increment):
        """ CanvasCropBottom(self: Shape, Increment: Single) """
        pass

    def CanvasCropLeft(self, Increment):
        """ CanvasCropLeft(self: Shape, Increment: Single) """
        pass

    def CanvasCropRight(self, Increment):
        """ CanvasCropRight(self: Shape, Increment: Single) """
        pass

    def CanvasCropTop(self, Increment):
        """ CanvasCropTop(self: Shape, Increment: Single) """
        pass

    def Copy(self):
        """ Copy(self: Shape) """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Shape, Appearance: object, Format: object) """
        pass

    def Cut(self):
        """ Cut(self: Shape) """
        pass

    def Delete(self):
        """ Delete(self: Shape) """
        pass

    def Duplicate(self):
        """ Duplicate(self: Shape) -> Shape """
        pass

    def Flip(self, FlipCmd):
        """ Flip(self: Shape, FlipCmd: MsoFlipCmd) """
        pass

    def IncrementLeft(self, Increment):
        """ IncrementLeft(self: Shape, Increment: Single) """
        pass

    def IncrementRotation(self, Increment):
        """ IncrementRotation(self: Shape, Increment: Single) """
        pass

    def IncrementTop(self, Increment):
        """ IncrementTop(self: Shape, Increment: Single) """
        pass

    def PickUp(self):
        """ PickUp(self: Shape) """
        pass

    def RerouteConnections(self):
        """ RerouteConnections(self: Shape) """
        pass

    def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleHeight(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleWidth(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Shape, Replace: object) """
        pass

    def SetShapesDefaultProperties(self):
        """ SetShapesDefaultProperties(self: Shape) """
        pass

    def Ungroup(self):
        """ Ungroup(self: Shape) -> ShapeRange """
        pass

    def ZOrder(self, ZOrderCmd):
        """ ZOrder(self: Shape, ZOrderCmd: MsoZOrderCmd) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: Shape) -> Adjustments

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: Shape) -> str

Set: AlternativeText(self: Shape) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Shape) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: Shape) -> MsoAutoShapeType

Set: AutoShapeType(self: Shape) = value
"""

    BackgroundStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundStyle(self: Shape) -> MsoBackgroundStyleIndex

Set: BackgroundStyle(self: Shape) = value
"""

    BlackWhiteMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackWhiteMode(self: Shape) -> MsoBlackWhiteMode

Set: BlackWhiteMode(self: Shape) = value
"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Shape) -> Range

"""

    Callout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Callout(self: Shape) -> CalloutFormat

"""

    CanvasItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanvasItems(self: Shape) -> CanvasShapes

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: Shape) -> Chart

"""

    Child = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Child(self: Shape) -> MsoTriState

"""

    ConnectionSiteCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionSiteCount(self: Shape) -> int

"""

    Connector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connector(self: Shape) -> MsoTriState

"""

    ConnectorFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectorFormat(self: Shape) -> ConnectorFormat

"""

    ControlFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlFormat(self: Shape) -> ControlFormat

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Shape) -> XlCreator

"""

    Diagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diagram(self: Shape) -> Diagram

"""

    DiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DiagramNode(self: Shape) -> DiagramNode

"""

    DrawingObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingObject(self: Shape) -> object

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Shape) -> FillFormat

"""

    FormControlType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormControlType(self: Shape) -> XlFormControl

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: Shape) -> GlowFormat

"""

    GroupItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupItems(self: Shape) -> GroupShapes

"""

    HasChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasChart(self: Shape) -> MsoTriState

"""

    HasDiagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagram(self: Shape) -> MsoTriState

"""

    HasDiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagramNode(self: Shape) -> MsoTriState

"""

    HasSmartArt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSmartArt(self: Shape) -> MsoTriState

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Shape) -> Single

Set: Height(self: Shape) = value
"""

    HorizontalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalFlip(self: Shape) -> MsoTriState

"""

    Hyperlink = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlink(self: Shape) -> Hyperlink

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: Shape) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Shape) -> Single

Set: Left(self: Shape) = value
"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: Shape) -> LineFormat

"""

    LinkFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkFormat(self: Shape) -> LinkFormat

"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: Shape) -> MsoTriState

Set: LockAspectRatio(self: Shape) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Shape) -> bool

Set: Locked(self: Shape) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Shape) -> str

Set: Name(self: Shape) = value
"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: Shape) -> ShapeNodes

"""

    OLEFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEFormat(self: Shape) -> OLEFormat

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Shape) -> str

Set: OnAction(self: Shape) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Shape) -> object

"""

    ParentGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentGroup(self: Shape) -> Shape

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: Shape) -> PictureFormat

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Shape) -> XlPlacement

Set: Placement(self: Shape) = value
"""

    Reflection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reflection(self: Shape) -> ReflectionFormat

"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: Shape) -> Single

Set: Rotation(self: Shape) = value
"""

    Script = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Script(self: Shape) -> Script

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: Shape) -> ShadowFormat

"""

    ShapeStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeStyle(self: Shape) -> MsoShapeStyleIndex

Set: ShapeStyle(self: Shape) = value
"""

    SmartArt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartArt(self: Shape) -> SmartArt

"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: Shape) -> SoftEdgeFormat

"""

    TextEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextEffect(self: Shape) -> TextEffectFormat

"""

    TextFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame(self: Shape) -> TextFrame

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: Shape) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: Shape) -> ThreeDFormat

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: Shape) -> str

Set: Title(self: Shape) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Shape) -> Single

Set: Top(self: Shape) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Shape) -> Range

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Shape) -> MsoShapeType

"""

    VerticalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalFlip(self: Shape) -> MsoTriState

"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: Shape) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Shape) -> MsoTriState

Set: Visible(self: Shape) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Shape) -> Single

Set: Width(self: Shape) = value
"""

    ZOrderPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrderPosition(self: Shape) -> int

"""



class ShapeNode(_IMsoDispObj):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ShapeNode) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ShapeNode) -> int

"""

    EditingType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditingType(self: ShapeNode) -> MsoEditingType

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ShapeNode) -> object

"""

    Points = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Points(self: ShapeNode) -> object

"""

    SegmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SegmentType(self: ShapeNode) -> MsoSegmentType

"""



class ShapeNodes(_IMsoDispObj, IEnumerable):
    # no doc
    def Delete(self, Index):
        """ Delete(self: ShapeNodes, Index: int) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ShapeNodes) -> IEnumerator """
        pass

    def Insert(self, Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
        """ Insert(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: Single, Y2: Single, X3: Single, Y3: Single) """
        pass

    def Item(self, Index):
        """ Item(self: ShapeNodes, Index: object) -> ShapeNode """
        pass

    def SetEditingType(self, Index, EditingType):
        """ SetEditingType(self: ShapeNodes, Index: int, EditingType: MsoEditingType) """
        pass

    def SetPosition(self, Index, X1, Y1):
        """ SetPosition(self: ShapeNodes, Index: int, X1: Single, Y1: Single) """
        pass

    def SetSegmentType(self, Index, SegmentType):
        """ SetSegmentType(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ShapeNodes) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ShapeNodes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ShapeNodes) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ShapeNodes) -> object

"""



class ShapeRange(IEnumerable):
    # no doc
    def Align(self, AlignCmd, RelativeTo):
        """ Align(self: ShapeRange, AlignCmd: MsoAlignCmd, RelativeTo: MsoTriState) """
        pass

    def Apply(self):
        """ Apply(self: ShapeRange) """
        pass

    def CanvasCropBottom(self, Increment):
        """ CanvasCropBottom(self: ShapeRange, Increment: Single) """
        pass

    def CanvasCropLeft(self, Increment):
        """ CanvasCropLeft(self: ShapeRange, Increment: Single) """
        pass

    def CanvasCropRight(self, Increment):
        """ CanvasCropRight(self: ShapeRange, Increment: Single) """
        pass

    def CanvasCropTop(self, Increment):
        """ CanvasCropTop(self: ShapeRange, Increment: Single) """
        pass

    def Delete(self):
        """ Delete(self: ShapeRange) """
        pass

    def Distribute(self, DistributeCmd, RelativeTo):
        """ Distribute(self: ShapeRange, DistributeCmd: MsoDistributeCmd, RelativeTo: MsoTriState) """
        pass

    def Duplicate(self):
        """ Duplicate(self: ShapeRange) -> ShapeRange """
        pass

    def Flip(self, FlipCmd):
        """ Flip(self: ShapeRange, FlipCmd: MsoFlipCmd) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ShapeRange) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: ShapeRange) -> Shape """
        pass

    def IncrementLeft(self, Increment):
        """ IncrementLeft(self: ShapeRange, Increment: Single) """
        pass

    def IncrementRotation(self, Increment):
        """ IncrementRotation(self: ShapeRange, Increment: Single) """
        pass

    def IncrementTop(self, Increment):
        """ IncrementTop(self: ShapeRange, Increment: Single) """
        pass

    def Item(self, Index):
        """ Item(self: ShapeRange, Index: object) -> Shape """
        pass

    def PickUp(self):
        """ PickUp(self: ShapeRange) """
        pass

    def Regroup(self):
        """ Regroup(self: ShapeRange) -> Shape """
        pass

    def RerouteConnections(self):
        """ RerouteConnections(self: ShapeRange) """
        pass

    def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleHeight(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale):
        """ ScaleWidth(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        pass

    def Select(self, Replace):
        """ Select(self: ShapeRange, Replace: object) """
        pass

    def SetShapesDefaultProperties(self):
        """ SetShapesDefaultProperties(self: ShapeRange) """
        pass

    def Ungroup(self):
        """ Ungroup(self: ShapeRange) -> ShapeRange """
        pass

    def ZOrder(self, ZOrderCmd):
        """ ZOrder(self: ShapeRange, ZOrderCmd: MsoZOrderCmd) """
        pass

    def _Default(self, Index):
        """ _Default(self: ShapeRange, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Adjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Adjustments(self: ShapeRange) -> Adjustments

"""

    AlternativeText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlternativeText(self: ShapeRange) -> str

Set: AlternativeText(self: ShapeRange) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ShapeRange) -> Application

"""

    AutoShapeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoShapeType(self: ShapeRange) -> MsoAutoShapeType

Set: AutoShapeType(self: ShapeRange) = value
"""

    BackgroundStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundStyle(self: ShapeRange) -> MsoBackgroundStyleIndex

Set: BackgroundStyle(self: ShapeRange) = value
"""

    BlackWhiteMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlackWhiteMode(self: ShapeRange) -> MsoBlackWhiteMode

Set: BlackWhiteMode(self: ShapeRange) = value
"""

    Callout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Callout(self: ShapeRange) -> CalloutFormat

"""

    CanvasItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanvasItems(self: ShapeRange) -> CanvasShapes

"""

    Chart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Chart(self: ShapeRange) -> Chart

"""

    Child = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Child(self: ShapeRange) -> MsoTriState

"""

    ConnectionSiteCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionSiteCount(self: ShapeRange) -> int

"""

    Connector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connector(self: ShapeRange) -> MsoTriState

"""

    ConnectorFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectorFormat(self: ShapeRange) -> ConnectorFormat

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ShapeRange) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ShapeRange) -> XlCreator

"""

    Diagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diagram(self: ShapeRange) -> Diagram

"""

    DiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DiagramNode(self: ShapeRange) -> DiagramNode

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: ShapeRange) -> FillFormat

"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Glow(self: ShapeRange) -> GlowFormat

"""

    GroupItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GroupItems(self: ShapeRange) -> GroupShapes

"""

    HasChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasChart(self: ShapeRange) -> MsoTriState

"""

    HasDiagram = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagram(self: ShapeRange) -> MsoTriState

"""

    HasDiagramNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasDiagramNode(self: ShapeRange) -> MsoTriState

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: ShapeRange) -> Single

Set: Height(self: ShapeRange) = value
"""

    HorizontalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalFlip(self: ShapeRange) -> MsoTriState

"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: ShapeRange) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: ShapeRange) -> Single

Set: Left(self: ShapeRange) = value
"""

    Line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Line(self: ShapeRange) -> LineFormat

"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: ShapeRange) -> MsoTriState

Set: LockAspectRatio(self: ShapeRange) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ShapeRange) -> str

Set: Name(self: ShapeRange) = value
"""

    Nodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Nodes(self: ShapeRange) -> ShapeNodes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ShapeRange) -> object

"""

    ParentGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ParentGroup(self: ShapeRange) -> Shape

"""

    PictureFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureFormat(self: ShapeRange) -> PictureFormat

"""

    Reflection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Reflection(self: ShapeRange) -> ReflectionFormat

"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: ShapeRange) -> Single

Set: Rotation(self: ShapeRange) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: ShapeRange) -> ShadowFormat

"""

    ShapeStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeStyle(self: ShapeRange) -> MsoShapeStyleIndex

Set: ShapeStyle(self: ShapeRange) = value
"""

    SoftEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SoftEdge(self: ShapeRange) -> SoftEdgeFormat

"""

    TextEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextEffect(self: ShapeRange) -> TextEffectFormat

"""

    TextFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame(self: ShapeRange) -> TextFrame

"""

    TextFrame2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrame2(self: ShapeRange) -> TextFrame2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: ShapeRange) -> ThreeDFormat

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: ShapeRange) -> str

Set: Title(self: ShapeRange) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: ShapeRange) -> Single

Set: Top(self: ShapeRange) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: ShapeRange) -> MsoShapeType

"""

    VerticalFlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalFlip(self: ShapeRange) -> MsoTriState

"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: ShapeRange) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ShapeRange) -> MsoTriState

Set: Visible(self: ShapeRange) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ShapeRange) -> Single

Set: Width(self: ShapeRange) = value
"""

    ZOrderPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrderPosition(self: ShapeRange) -> int

"""



class Shapes(IEnumerable):
    # no doc
    def AddCallout(self, Type, Left, Top, Width, Height):
        """ AddCallout(self: Shapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddCanvas(self, Left, Top, Width, Height):
        """ AddCanvas(self: Shapes, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddChart(self, XlChartType, Left, Top, Width, Height):
        """ AddChart(self: Shapes, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddChart2(self, Style, XlChartType, Left, Top, Width, Height, NewLayout):
        """ AddChart2(self: Shapes, Style: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object, NewLayout: object) -> Shape """
        pass

    def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
        """ AddConnector(self: Shapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        pass

    def AddCurve(self, SafeArrayOfPoints):
        """ AddCurve(self: Shapes, SafeArrayOfPoints: object) -> Shape """
        pass

    def AddDiagram(self, Type, Left, Top, Width, Height):
        """ AddDiagram(self: Shapes, Type: MsoDiagramType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddFormControl(self, Type, Left, Top, Width, Height):
        """ AddFormControl(self: Shapes, Type: XlFormControl, Left: int, Top: int, Width: int, Height: int) -> Shape """
        pass

    def AddLabel(self, Orientation, Left, Top, Width, Height):
        """ AddLabel(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddLine(self, BeginX, BeginY, EndX, EndY):
        """ AddLine(self: Shapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        pass

    def AddOLEObject(self, ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height):
        """ AddOLEObject(self: Shapes, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddPicture(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
        """ AddPicture(self: Shapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddPicture2(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Compress):
        """ AddPicture2(self: Shapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single, Compress: MsoPictureCompress) -> Shape """
        pass

    def AddPolyline(self, SafeArrayOfPoints):
        """ AddPolyline(self: Shapes, SafeArrayOfPoints: object) -> Shape """
        pass

    def AddShape(self, Type, Left, Top, Width, Height):
        """ AddShape(self: Shapes, Type: MsoAutoShapeType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddSmartArt(self, Layout, Left, Top, Width, Height):
        """ AddSmartArt(self: Shapes, Layout: SmartArtLayout, Left: object, Top: object, Width: object, Height: object) -> Shape """
        pass

    def AddTextbox(self, Orientation, Left, Top, Width, Height):
        """ AddTextbox(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        pass

    def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
        """ AddTextEffect(self: Shapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single) -> Shape """
        pass

    def BuildFreeform(self, EditingType, X1, Y1):
        """ BuildFreeform(self: Shapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Shapes) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Shapes, Index: object) -> Shape """
        pass

    def SelectAll(self):
        """ SelectAll(self: Shapes) """
        pass

    def _Default(self, Index):
        """ _Default(self: Shapes, Index: object) -> Shape """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Shapes) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Shapes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Shapes) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Shapes) -> object

"""



class Sheets(IEnumerable):
    # no doc
    def Add(self, Before, After, Count, Type):
        """ Add(self: Sheets, Before: object, After: object, Count: object, Type: object) -> object """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: Sheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: Sheets, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: Sheets) """
        pass

    def FillAcrossSheets(self, Range, Type):
        """ FillAcrossSheets(self: Sheets, Range: Range, Type: XlFillWith) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Sheets) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: Sheets, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: Sheets, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Sheets, Replace: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Sheets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Sheets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Sheets) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: Sheets) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Sheets) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Sheets) -> object

Set: Visible(self: Sheets) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: Sheets) -> VPageBreaks

"""



class SheetViews(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: SheetViews) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SheetViews) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SheetViews) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SheetViews) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SheetViews) -> object

"""



class Slicer:
    # no doc
    def Copy(self):
        """ Copy(self: Slicer) """
        pass

    def Cut(self):
        """ Cut(self: Slicer) """
        pass

    def Delete(self):
        """ Delete(self: Slicer) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveItem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveItem(self: Slicer) -> SlicerItem

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Slicer) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Slicer) -> str

Set: Caption(self: Slicer) = value
"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnWidth(self: Slicer) -> float

Set: ColumnWidth(self: Slicer) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Slicer) -> XlCreator

"""

    DisableMoveResizeUI = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisableMoveResizeUI(self: Slicer) -> bool

Set: DisableMoveResizeUI(self: Slicer) = value
"""

    DisplayHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeader(self: Slicer) -> bool

Set: DisplayHeader(self: Slicer) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Slicer) -> float

Set: Height(self: Slicer) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Slicer) -> float

Set: Left(self: Slicer) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Slicer) -> bool

Set: Locked(self: Slicer) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Slicer) -> str

Set: Name(self: Slicer) = value
"""

    NumberOfColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfColumns(self: Slicer) -> int

Set: NumberOfColumns(self: Slicer) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Slicer) -> object

"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowHeight(self: Slicer) -> float

Set: RowHeight(self: Slicer) = value
"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shape(self: Slicer) -> Shape

"""

    SlicerCache = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCache(self: Slicer) -> SlicerCache

"""

    SlicerCacheLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheLevel(self: Slicer) -> SlicerCacheLevel

"""

    SlicerCacheType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheType(self: Slicer) -> XlSlicerCacheType

"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Style(self: Slicer) -> object

Set: Style(self: Slicer) = value
"""

    TimelineViewState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimelineViewState(self: Slicer) -> TimelineViewState

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Slicer) -> float

Set: Top(self: Slicer) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Slicer) -> float

Set: Width(self: Slicer) = value
"""



class SlicerCache:
    # no doc
    def ClearAllFilters(self):
        """ ClearAllFilters(self: SlicerCache) """
        pass

    def ClearDateFilter(self):
        """ ClearDateFilter(self: SlicerCache) """
        pass

    def ClearManualFilter(self):
        """ ClearManualFilter(self: SlicerCache) """
        pass

    def Delete(self):
        """ Delete(self: SlicerCache) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerCache) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerCache) -> XlCreator

"""

    CrossFilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossFilterType(self: SlicerCache) -> XlSlicerCrossFilterType

Set: CrossFilterType(self: SlicerCache) = value
"""

    FilterCleared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterCleared(self: SlicerCache) -> bool

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: SlicerCache) -> int

"""

    List = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: List(self: SlicerCache) -> bool

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: SlicerCache) -> ListObject

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SlicerCache) -> str

Set: Name(self: SlicerCache) = value
"""

    OLAP = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLAP(self: SlicerCache) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerCache) -> object

"""

    PivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTables(self: SlicerCache) -> SlicerPivotTables

"""

    RequireManualUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RequireManualUpdate(self: SlicerCache) -> bool

Set: RequireManualUpdate(self: SlicerCache) = value
"""

    ShowAllItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAllItems(self: SlicerCache) -> bool

Set: ShowAllItems(self: SlicerCache) = value
"""

    SlicerCacheLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheLevels(self: SlicerCache) -> SlicerCacheLevels

"""

    SlicerCacheType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCacheType(self: SlicerCache) -> XlSlicerCacheType

"""

    SlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerItems(self: SlicerCache) -> SlicerItems

"""

    Slicers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Slicers(self: SlicerCache) -> Slicers

"""

    SortItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortItems(self: SlicerCache) -> XlSlicerSort

Set: SortItems(self: SlicerCache) = value
"""

    SortUsingCustomLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortUsingCustomLists(self: SlicerCache) -> bool

Set: SortUsingCustomLists(self: SlicerCache) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: SlicerCache) -> str

"""

    SourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceType(self: SlicerCache) -> XlPivotTableSourceType

"""

    TimelineState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimelineState(self: SlicerCache) -> TimelineState

"""

    VisibleSlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItems(self: SlicerCache) -> SlicerItems

"""

    VisibleSlicerItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItemsList(self: SlicerCache) -> object

Set: VisibleSlicerItemsList(self: SlicerCache) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: SlicerCache) -> WorkbookConnection

"""



class SlicerCacheLevel:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerCacheLevel) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SlicerCacheLevel) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerCacheLevel) -> XlCreator

"""

    CrossFilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CrossFilterType(self: SlicerCacheLevel) -> XlSlicerCrossFilterType

Set: CrossFilterType(self: SlicerCacheLevel) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SlicerCacheLevel) -> str

"""

    Ordinal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ordinal(self: SlicerCacheLevel) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerCacheLevel) -> object

"""

    SlicerItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerItems(self: SlicerCacheLevel) -> SlicerItems

"""

    SortItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortItems(self: SlicerCacheLevel) -> XlSlicerSort

Set: SortItems(self: SlicerCacheLevel) = value
"""

    VisibleSlicerItemsList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleSlicerItemsList(self: SlicerCacheLevel) -> object

"""



class SlicerCacheLevels(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: SlicerCacheLevels) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerCacheLevels) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SlicerCacheLevels) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerCacheLevels) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerCacheLevels) -> object

"""



class SlicerCaches(IEnumerable):
    # no doc
    def Add(self, Source, SourceField, Name):
        """ Add(self: SlicerCaches, Source: object, SourceField: object, Name: object) -> SlicerCache """
        pass

    def Add2(self, Source, SourceField, Name, SlicerCacheType):
        """ Add2(self: SlicerCaches, Source: object, SourceField: object, Name: object, SlicerCacheType: object) -> SlicerCache """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SlicerCaches) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerCaches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SlicerCaches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerCaches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerCaches) -> object

"""



class SlicerItem:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerItem) -> Application

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: SlicerItem) -> str

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerItem) -> XlCreator

"""

    HasData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasData(self: SlicerItem) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SlicerItem) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerItem) -> SlicerCache

"""

    Selected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selected(self: SlicerItem) -> bool

Set: Selected(self: SlicerItem) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: SlicerItem) -> object

"""

    SourceNameStandard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceNameStandard(self: SlicerItem) -> str

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: SlicerItem) -> str

"""



class SlicerItems(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: SlicerItems) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerItems) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SlicerItems) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerItems) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerItems) -> object

"""



class SlicerPivotTables(IEnumerable):
    # no doc
    def AddPivotTable(self, PivotTable):
        """ AddPivotTable(self: SlicerPivotTables, PivotTable: PivotTable) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SlicerPivotTables) -> IEnumerator """
        pass

    def RemovePivotTable(self, PivotTable):
        """ RemovePivotTable(self: SlicerPivotTables, PivotTable: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SlicerPivotTables) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SlicerPivotTables) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SlicerPivotTables) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SlicerPivotTables) -> object

"""



class Slicers(IEnumerable):
    # no doc
    def Add(self, SlicerDestination, Level, Name, Caption, Top, Left, Width, Height):
        """ Add(self: Slicers, SlicerDestination: object, Level: object, Name: object, Caption: object, Top: object, Left: object, Width: object, Height: object) -> Slicer """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Slicers) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Slicers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Slicers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Slicers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Slicers) -> object

"""



class SmartTag:
    # no doc
    def Delete(self):
        """ Delete(self: SmartTag) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTag) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTag) -> XlCreator

"""

    DownloadURL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownloadURL(self: SmartTag) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SmartTag) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTag) -> object

"""

    Properties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Properties(self: SmartTag) -> CustomProperties

"""

    Range = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Range(self: SmartTag) -> Range

"""

    SmartTagActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagActions(self: SmartTag) -> SmartTagActions

"""

    XML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XML(self: SmartTag) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: SmartTag) -> str

"""



class SmartTagAction:
    # no doc
    def Execute(self):
        """ Execute(self: SmartTagAction) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveXControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveXControl(self: SmartTagAction) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTagAction) -> Application

"""

    CheckboxState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CheckboxState(self: SmartTagAction) -> bool

Set: CheckboxState(self: SmartTagAction) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTagAction) -> XlCreator

"""

    ExpandHelp = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExpandHelp(self: SmartTagAction) -> bool

Set: ExpandHelp(self: SmartTagAction) = value
"""

    ListSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListSelection(self: SmartTagAction) -> int

Set: ListSelection(self: SmartTagAction) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: SmartTagAction) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTagAction) -> object

"""

    PresentInPane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresentInPane(self: SmartTagAction) -> bool

"""

    RadioGroupSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadioGroupSelection(self: SmartTagAction) -> int

Set: RadioGroupSelection(self: SmartTagAction) = value
"""

    TextboxText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextboxText(self: SmartTagAction) -> str

Set: TextboxText(self: SmartTagAction) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: SmartTagAction) -> XlSmartTagControlType

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: SmartTagAction) -> str

"""



class SmartTagActions(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: SmartTagActions) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTagActions) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SmartTagActions) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTagActions) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTagActions) -> object

"""



class SmartTagOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTagOptions) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTagOptions) -> XlCreator

"""

    DisplaySmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplaySmartTags(self: SmartTagOptions) -> XlSmartTagDisplayMode

Set: DisplaySmartTags(self: SmartTagOptions) = value
"""

    EmbedSmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EmbedSmartTags(self: SmartTagOptions) -> bool

Set: EmbedSmartTags(self: SmartTagOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTagOptions) -> object

"""



class SmartTagRecognizer:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTagRecognizer) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTagRecognizer) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: SmartTagRecognizer) -> bool

Set: Enabled(self: SmartTagRecognizer) = value
"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: SmartTagRecognizer) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTagRecognizer) -> object

"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: SmartTagRecognizer) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: SmartTagRecognizer) -> str

"""



class SmartTagRecognizers(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: SmartTagRecognizers) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTagRecognizers) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SmartTagRecognizers) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTagRecognizers) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTagRecognizers) -> object

"""

    Recognize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recognize(self: SmartTagRecognizers) -> bool

Set: Recognize(self: SmartTagRecognizers) = value
"""



class SmartTags(IEnumerable):
    # no doc
    def Add(self, SmartTagType):
        """ Add(self: SmartTags, SmartTagType: str) -> SmartTag """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SmartTags) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SmartTags) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SmartTags) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SmartTags) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SmartTags) -> object

"""



class Sort:
    # no doc
    def Apply(self):
        """ Apply(self: Sort) """
        pass

    def SetRange(self, Rng):
        """ SetRange(self: Sort, Rng: Range) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Sort) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Sort) -> XlCreator

"""

    Header = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Header(self: Sort) -> XlYesNoGuess

Set: Header(self: Sort) = value
"""

    MatchCase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MatchCase(self: Sort) -> bool

Set: MatchCase(self: Sort) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Sort) -> XlSortOrientation

Set: Orientation(self: Sort) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Sort) -> object

"""

    Rng = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rng(self: Sort) -> Range

"""

    SortFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortFields(self: Sort) -> SortFields

"""

    SortMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortMethod(self: Sort) -> XlSortMethod

Set: SortMethod(self: Sort) = value
"""



class SortField:
    # no doc
    def Delete(self):
        """ Delete(self: SortField) """
        pass

    def ModifyKey(self, Key):
        """ ModifyKey(self: SortField, Key: Range) """
        pass

    def SetIcon(self, Icon):
        """ SetIcon(self: SortField, Icon: Icon) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SortField) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SortField) -> XlCreator

"""

    CustomOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomOrder(self: SortField) -> object

Set: CustomOrder(self: SortField) = value
"""

    DataOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataOption(self: SortField) -> XlSortDataOption

Set: DataOption(self: SortField) = value
"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Key(self: SortField) -> Range

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: SortField) -> XlSortOrder

Set: Order(self: SortField) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SortField) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: SortField) -> int

Set: Priority(self: SortField) = value
"""

    SortOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortOn(self: SortField) -> XlSortOn

Set: SortOn(self: SortField) = value
"""

    SortOnValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SortOnValue(self: SortField) -> object

"""



class SortFields(IEnumerable):
    # no doc
    def Add(self, Key, SortOn, Order, CustomOrder, DataOption):
        """ Add(self: SortFields, Key: Range, SortOn: object, Order: object, CustomOrder: object, DataOption: object) -> SortField """
        pass

    def Clear(self):
        """ Clear(self: SortFields) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SortFields) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SortFields) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SortFields) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SortFields) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SortFields) -> object

"""



class SoundNote:
    # no doc
    def Delete(self):
        """ Delete(self: SoundNote) -> object """
        pass

    def Import(self, Filename):
        """ Import(self: SoundNote, Filename: str) -> object """
        pass

    def Play(self):
        """ Play(self: SoundNote) -> object """
        pass

    def Record(self):
        """ Record(self: SoundNote) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SoundNote) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SoundNote) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SoundNote) -> object

"""



class SparkAxes:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparkAxes) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparkAxes) -> XlCreator

"""

    Horizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Horizontal(self: SparkAxes) -> SparkHorizontalAxis

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparkAxes) -> object

"""

    Vertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertical(self: SparkAxes) -> SparkVerticalAxis

"""



class SparkColor:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparkColor) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: SparkColor) -> FormatColor

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparkColor) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparkColor) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: SparkColor) -> bool

Set: Visible(self: SparkColor) = value
"""



class SparkHorizontalAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparkHorizontalAxis) -> Application

"""

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Axis(self: SparkHorizontalAxis) -> SparkColor

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparkHorizontalAxis) -> XlCreator

"""

    IsDateAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDateAxis(self: SparkHorizontalAxis) -> bool

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparkHorizontalAxis) -> object

"""

    RightToLeftPlotOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RightToLeftPlotOrder(self: SparkHorizontalAxis) -> bool

Set: RightToLeftPlotOrder(self: SparkHorizontalAxis) = value
"""



class Sparkline:
    # no doc
    def ModifyLocation(self, Range):
        """ ModifyLocation(self: Sparkline, Range: Range) """
        pass

    def ModifySourceData(self, Formula):
        """ ModifySourceData(self: Sparkline, Formula: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Sparkline) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Sparkline) -> XlCreator

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: Sparkline) -> Range

Set: Location(self: Sparkline) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Sparkline) -> object

"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: Sparkline) -> str

Set: SourceData(self: Sparkline) = value
"""



class SparklineGroup(IEnumerable):
    # no doc
    def Delete(self):
        """ Delete(self: SparklineGroup) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SparklineGroup) -> IEnumerator """
        pass

    def Modify(self, Location, SourceData):
        """ Modify(self: SparklineGroup, Location: Range, SourceData: str) """
        pass

    def ModifyDateRange(self, DateRange):
        """ ModifyDateRange(self: SparklineGroup, DateRange: str) """
        pass

    def ModifyLocation(self, Location):
        """ ModifyLocation(self: SparklineGroup, Location: Range) """
        pass

    def ModifySourceData(self, SourceData):
        """ ModifySourceData(self: SparklineGroup, SourceData: str) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparklineGroup) -> Application

"""

    Axes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Axes(self: SparklineGroup) -> SparkAxes

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SparklineGroup) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparklineGroup) -> XlCreator

"""

    DateRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DateRange(self: SparklineGroup) -> str

Set: DateRange(self: SparklineGroup) = value
"""

    DisplayBlanksAs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayBlanksAs(self: SparklineGroup) -> XlDisplayBlanksAs

Set: DisplayBlanksAs(self: SparklineGroup) = value
"""

    DisplayHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHidden(self: SparklineGroup) -> bool

Set: DisplayHidden(self: SparklineGroup) = value
"""

    LineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineWeight(self: SparklineGroup) -> object

Set: LineWeight(self: SparklineGroup) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: SparklineGroup) -> Range

Set: Location(self: SparklineGroup) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparklineGroup) -> object

"""

    PlotBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotBy(self: SparklineGroup) -> XlSparklineRowCol

Set: PlotBy(self: SparklineGroup) = value
"""

    Points = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Points(self: SparklineGroup) -> SparkPoints

"""

    SeriesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SeriesColor(self: SparklineGroup) -> FormatColor

"""

    SourceData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceData(self: SparklineGroup) -> str

Set: SourceData(self: SparklineGroup) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: SparklineGroup) -> XlSparkType

Set: Type(self: SparklineGroup) = value
"""



class SparklineGroups(IEnumerable):
    # no doc
    def Add(self, Type, SourceData):
        """ Add(self: SparklineGroups, Type: XlSparkType, SourceData: str) -> SparklineGroup """
        pass

    def Clear(self):
        """ Clear(self: SparklineGroups) """
        pass

    def ClearGroups(self):
        """ ClearGroups(self: SparklineGroups) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: SparklineGroups) -> IEnumerator """
        pass

    def Group(self, Location):
        """ Group(self: SparklineGroups, Location: Range) """
        pass

    def Ungroup(self):
        """ Ungroup(self: SparklineGroups) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparklineGroups) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: SparklineGroups) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparklineGroups) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparklineGroups) -> object

"""



class SparkPoints:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparkPoints) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparkPoints) -> XlCreator

"""

    Firstpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Firstpoint(self: SparkPoints) -> SparkColor

"""

    Highpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Highpoint(self: SparkPoints) -> SparkColor

"""

    Lastpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lastpoint(self: SparkPoints) -> SparkColor

"""

    Lowpoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lowpoint(self: SparkPoints) -> SparkColor

"""

    Markers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Markers(self: SparkPoints) -> SparkColor

"""

    Negative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Negative(self: SparkPoints) -> SparkColor

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparkPoints) -> object

"""



class SparkVerticalAxis:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: SparkVerticalAxis) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: SparkVerticalAxis) -> XlCreator

"""

    CustomMaxScaleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomMaxScaleValue(self: SparkVerticalAxis) -> object

Set: CustomMaxScaleValue(self: SparkVerticalAxis) = value
"""

    CustomMinScaleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomMinScaleValue(self: SparkVerticalAxis) -> object

Set: CustomMinScaleValue(self: SparkVerticalAxis) = value
"""

    MaxScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxScaleType(self: SparkVerticalAxis) -> XlSparkScale

Set: MaxScaleType(self: SparkVerticalAxis) = value
"""

    MinScaleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinScaleType(self: SparkVerticalAxis) -> XlSparkScale

Set: MinScaleType(self: SparkVerticalAxis) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: SparkVerticalAxis) -> object

"""



class Speech:
    # no doc
    def Speak(self, Text, SpeakAsync, SpeakXML, Purge):
        """ Speak(self: Speech, Text: str, SpeakAsync: object, SpeakXML: object, Purge: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: Speech) -> XlSpeakDirection

Set: Direction(self: Speech) = value
"""

    SpeakCellOnEnter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpeakCellOnEnter(self: Speech) -> bool

Set: SpeakCellOnEnter(self: Speech) = value
"""



class SpellingOptions:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ArabicModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicModes(self: SpellingOptions) -> XlArabicModes

Set: ArabicModes(self: SpellingOptions) = value
"""

    ArabicStrictAlefHamza = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictAlefHamza(self: SpellingOptions) -> bool

Set: ArabicStrictAlefHamza(self: SpellingOptions) = value
"""

    ArabicStrictFinalYaa = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictFinalYaa(self: SpellingOptions) -> bool

Set: ArabicStrictFinalYaa(self: SpellingOptions) = value
"""

    ArabicStrictTaaMarboota = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArabicStrictTaaMarboota(self: SpellingOptions) -> bool

Set: ArabicStrictTaaMarboota(self: SpellingOptions) = value
"""

    BrazilReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BrazilReform(self: SpellingOptions) -> XlPortugueseReform

Set: BrazilReform(self: SpellingOptions) = value
"""

    DictLang = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DictLang(self: SpellingOptions) -> int

Set: DictLang(self: SpellingOptions) = value
"""

    GermanPostReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GermanPostReform(self: SpellingOptions) -> bool

Set: GermanPostReform(self: SpellingOptions) = value
"""

    HebrewModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HebrewModes(self: SpellingOptions) -> XlHebrewModes

Set: HebrewModes(self: SpellingOptions) = value
"""

    IgnoreCaps = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreCaps(self: SpellingOptions) -> bool

Set: IgnoreCaps(self: SpellingOptions) = value
"""

    IgnoreFileNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreFileNames(self: SpellingOptions) -> bool

Set: IgnoreFileNames(self: SpellingOptions) = value
"""

    IgnoreMixedDigits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreMixedDigits(self: SpellingOptions) -> bool

Set: IgnoreMixedDigits(self: SpellingOptions) = value
"""

    KoreanCombineAux = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanCombineAux(self: SpellingOptions) -> bool

Set: KoreanCombineAux(self: SpellingOptions) = value
"""

    KoreanProcessCompound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanProcessCompound(self: SpellingOptions) -> bool

Set: KoreanProcessCompound(self: SpellingOptions) = value
"""

    KoreanUseAutoChangeList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KoreanUseAutoChangeList(self: SpellingOptions) -> bool

Set: KoreanUseAutoChangeList(self: SpellingOptions) = value
"""

    PortugalReform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PortugalReform(self: SpellingOptions) -> XlPortugueseReform

Set: PortugalReform(self: SpellingOptions) = value
"""

    RussianStrictE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RussianStrictE(self: SpellingOptions) -> bool

Set: RussianStrictE(self: SpellingOptions) = value
"""

    SpanishModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SpanishModes(self: SpellingOptions) -> XlSpanishModes

Set: SpanishModes(self: SpellingOptions) = value
"""

    SuggestMainOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuggestMainOnly(self: SpellingOptions) -> bool

Set: SuggestMainOnly(self: SpellingOptions) = value
"""

    UserDict = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserDict(self: SpellingOptions) -> str

Set: UserDict(self: SpellingOptions) = value
"""



class Spinner:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: Spinner) -> object """
        pass

    def Copy(self):
        """ Copy(self: Spinner) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Spinner, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Spinner) -> object """
        pass

    def Delete(self):
        """ Delete(self: Spinner) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Spinner) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Spinner, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Spinner) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Spinner) -> Application

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: Spinner) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Spinner) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: Spinner) -> bool

Set: Display3DShading(self: Spinner) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Spinner) -> bool

Set: Enabled(self: Spinner) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Spinner) -> float

Set: Height(self: Spinner) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Spinner) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Spinner) -> float

Set: Left(self: Spinner) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: Spinner) -> str

Set: LinkedCell(self: Spinner) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Spinner) -> bool

Set: Locked(self: Spinner) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: Spinner) -> int

Set: Max(self: Spinner) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: Spinner) -> int

Set: Min(self: Spinner) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Spinner) -> str

Set: Name(self: Spinner) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Spinner) -> str

Set: OnAction(self: Spinner) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Spinner) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Spinner) -> object

Set: Placement(self: Spinner) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Spinner) -> bool

Set: PrintObject(self: Spinner) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Spinner) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: Spinner) -> int

Set: SmallChange(self: Spinner) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Spinner) -> float

Set: Top(self: Spinner) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: Spinner) -> Range

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Spinner) -> int

Set: Value(self: Spinner) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Spinner) -> bool

Set: Visible(self: Spinner) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Spinner) -> float

Set: Width(self: Spinner) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Spinner) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: Spinner) -> int

Set: _Default(self: Spinner) = value
"""



class Spinners(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: Spinners, Left: float, Top: float, Width: float, Height: float) -> Spinner """
        pass

    def BringToFront(self):
        """ BringToFront(self: Spinners) -> object """
        pass

    def Copy(self):
        """ Copy(self: Spinners) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: Spinners, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: Spinners) -> object """
        pass

    def Delete(self):
        """ Delete(self: Spinners) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: Spinners) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Spinners) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: Spinners) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: Spinners, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: Spinners, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: Spinners) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: Spinners) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: Spinners) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: Spinners) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: Spinners) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Spinners) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Spinners) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Spinners) -> XlCreator

"""

    Display3DShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Display3DShading(self: Spinners) -> bool

Set: Display3DShading(self: Spinners) = value
"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: Spinners) -> bool

Set: Enabled(self: Spinners) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Spinners) -> float

Set: Height(self: Spinners) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Spinners) -> float

Set: Left(self: Spinners) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: Spinners) -> str

Set: LinkedCell(self: Spinners) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Spinners) -> bool

Set: Locked(self: Spinners) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Max(self: Spinners) -> int

Set: Max(self: Spinners) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Min(self: Spinners) -> int

Set: Min(self: Spinners) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: Spinners) -> str

Set: OnAction(self: Spinners) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Spinners) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: Spinners) -> object

Set: Placement(self: Spinners) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: Spinners) -> bool

Set: PrintObject(self: Spinners) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: Spinners) -> ShapeRange

"""

    SmallChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmallChange(self: Spinners) -> int

Set: SmallChange(self: Spinners) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Spinners) -> float

Set: Top(self: Spinners) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Spinners) -> int

Set: Value(self: Spinners) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Spinners) -> bool

Set: Visible(self: Spinners) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Spinners) -> float

Set: Width(self: Spinners) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: Spinners) -> int

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: Spinners) -> int

Set: _Default(self: Spinners) = value
"""



class Style:
    # no doc
    def Delete(self):
        """ Delete(self: Style) -> object """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: Style) -> bool

Set: AddIndent(self: Style) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Style) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: Style) -> Borders

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: Style) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Style) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Style) -> Font

"""

    FormulaHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FormulaHidden(self: Style) -> bool

Set: FormulaHidden(self: Style) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: Style) -> XlHAlign

Set: HorizontalAlignment(self: Style) = value
"""

    IncludeAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeAlignment(self: Style) -> bool

Set: IncludeAlignment(self: Style) = value
"""

    IncludeBorder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeBorder(self: Style) -> bool

Set: IncludeBorder(self: Style) = value
"""

    IncludeFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeFont(self: Style) -> bool

Set: IncludeFont(self: Style) = value
"""

    IncludeNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeNumber(self: Style) -> bool

Set: IncludeNumber(self: Style) = value
"""

    IncludePatterns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludePatterns(self: Style) -> bool

Set: IncludePatterns(self: Style) = value
"""

    IncludeProtection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IncludeProtection(self: Style) -> bool

Set: IncludeProtection(self: Style) = value
"""

    IndentLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndentLevel(self: Style) -> int

Set: IndentLevel(self: Style) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Style) -> Interior

"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: Style) -> bool

Set: Locked(self: Style) = value
"""

    MergeCells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MergeCells(self: Style) -> object

Set: MergeCells(self: Style) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Style) -> str

"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: Style) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: Style) -> str

Set: NumberFormat(self: Style) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: Style) -> str

Set: NumberFormatLocal(self: Style) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: Style) -> XlOrientation

Set: Orientation(self: Style) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Style) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: Style) -> int

Set: ReadingOrder(self: Style) = value
"""

    ShrinkToFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShrinkToFit(self: Style) -> bool

Set: ShrinkToFit(self: Style) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Style) -> str

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: Style) -> XlVAlign

Set: VerticalAlignment(self: Style) = value
"""

    WrapText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WrapText(self: Style) -> bool

Set: WrapText(self: Style) = value
"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: Style) -> str

"""



class Styles(IEnumerable):
    # no doc
    def Add(self, Name, BasedOn):
        """ Add(self: Styles, Name: str, BasedOn: object) -> Style """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Styles) -> IEnumerator """
        pass

    def Merge(self, Workbook):
        """ Merge(self: Styles, Workbook: object) -> object """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Styles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Styles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Styles) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Styles) -> object

"""



class Tab:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Tab) -> Application

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Color(self: Tab) -> object

Set: Color(self: Tab) = value
"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: Tab) -> XlColorIndex

Set: ColorIndex(self: Tab) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Tab) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Tab) -> object

"""

    ThemeColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThemeColor(self: Tab) -> XlThemeColor

Set: ThemeColor(self: Tab) = value
"""

    TintAndShade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TintAndShade(self: Tab) -> object

Set: TintAndShade(self: Tab) = value
"""



class TableObject:
    # no doc
    def Delete(self):
        """ Delete(self: TableObject) """
        pass

    def Refresh(self):
        """ Refresh(self: TableObject) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: TableObject) -> bool

Set: AdjustColumnWidth(self: TableObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TableObject) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TableObject) -> XlCreator

"""

    Destination = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Destination(self: TableObject) -> Range

"""

    EnableEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEditing(self: TableObject) -> bool

Set: EnableEditing(self: TableObject) = value
"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: TableObject) -> bool

Set: EnableRefresh(self: TableObject) = value
"""

    FetchedRowOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FetchedRowOverflow(self: TableObject) -> bool

"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: TableObject) -> ListObject

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TableObject) -> object

"""

    PreserveColumnInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnInfo(self: TableObject) -> bool

Set: PreserveColumnInfo(self: TableObject) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: TableObject) -> bool

Set: PreserveFormatting(self: TableObject) = value
"""

    RefreshStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshStyle(self: TableObject) -> XlCellInsertionMode

Set: RefreshStyle(self: TableObject) = value
"""

    ResultRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ResultRange(self: TableObject) -> Range

"""

    RowNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowNumbers(self: TableObject) -> bool

Set: RowNumbers(self: TableObject) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: TableObject) -> WorkbookConnection

"""



class TableStyle:
    # no doc
    def Delete(self):
        """ Delete(self: TableStyle) """
        pass

    def Duplicate(self, NewTableStyleName):
        """ Duplicate(self: TableStyle, NewTableStyleName: object) -> TableStyle """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TableStyle) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: TableStyle) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TableStyle) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: TableStyle) -> str

"""

    NameLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameLocal(self: TableStyle) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TableStyle) -> object

"""

    ShowAsAvailablePivotTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailablePivotTableStyle(self: TableStyle) -> bool

Set: ShowAsAvailablePivotTableStyle(self: TableStyle) = value
"""

    ShowAsAvailableSlicerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableSlicerStyle(self: TableStyle) -> bool

Set: ShowAsAvailableSlicerStyle(self: TableStyle) = value
"""

    ShowAsAvailableTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableTableStyle(self: TableStyle) -> bool

Set: ShowAsAvailableTableStyle(self: TableStyle) = value
"""

    ShowAsAvailableTimelineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAsAvailableTimelineStyle(self: TableStyle) -> bool

Set: ShowAsAvailableTimelineStyle(self: TableStyle) = value
"""

    TableStyleElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyleElements(self: TableStyle) -> TableStyleElements

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: TableStyle) -> str

"""



class TableStyleElement:
    # no doc
    def Clear(self):
        """ Clear(self: TableStyleElement) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TableStyleElement) -> Application

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: TableStyleElement) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TableStyleElement) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: TableStyleElement) -> Font

"""

    HasFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasFormat(self: TableStyleElement) -> bool

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: TableStyleElement) -> Interior

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TableStyleElement) -> object

"""

    StripeSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StripeSize(self: TableStyleElement) -> int

Set: StripeSize(self: TableStyleElement) = value
"""



class TableStyleElements(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: TableStyleElements) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: TableStyleElements, Index: XlTableStyleElementType) -> TableStyleElement """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TableStyleElements) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: TableStyleElements) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TableStyleElements) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TableStyleElements) -> object

"""



class TableStyles(IEnumerable):
    # no doc
    def Add(self, TableStyleName):
        """ Add(self: TableStyles, TableStyleName: str) -> TableStyle """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: TableStyles) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: TableStyles, Index: object) -> TableStyle """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TableStyles) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: TableStyles) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TableStyles) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TableStyles) -> object

"""



class TextBox:
    # no doc
    def BringToFront(self):
        """ BringToFront(self: TextBox) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: TextBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: TextBox) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: TextBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: TextBox) -> object """
        pass

    def Delete(self):
        """ Delete(self: TextBox) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: TextBox) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: TextBox, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: TextBox) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: TextBox) -> bool

Set: AddIndent(self: TextBox) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextBox) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: TextBox) -> object

Set: AutoScaleFont(self: TextBox) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: TextBox) -> bool

Set: AutoSize(self: TextBox) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: TextBox) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: TextBox) -> Range

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: TextBox) -> str

Set: Caption(self: TextBox) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextBox) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: TextBox) -> bool

Set: Enabled(self: TextBox) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: TextBox) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: TextBox) -> str

Set: Formula(self: TextBox) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: TextBox) -> float

Set: Height(self: TextBox) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: TextBox) -> object

Set: HorizontalAlignment(self: TextBox) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: TextBox) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: TextBox) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: TextBox) -> float

Set: Left(self: TextBox) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: TextBox) -> bool

Set: Locked(self: TextBox) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: TextBox) -> bool

Set: LockedText(self: TextBox) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: TextBox) -> str

Set: Name(self: TextBox) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: TextBox) -> str

Set: OnAction(self: TextBox) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: TextBox) -> object

Set: Orientation(self: TextBox) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextBox) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: TextBox) -> object

Set: Placement(self: TextBox) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: TextBox) -> bool

Set: PrintObject(self: TextBox) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: TextBox) -> int

Set: ReadingOrder(self: TextBox) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: TextBox) -> bool

Set: RoundedCorners(self: TextBox) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: TextBox) -> bool

Set: Shadow(self: TextBox) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: TextBox) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: TextBox) -> str

Set: Text(self: TextBox) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: TextBox) -> float

Set: Top(self: TextBox) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: TextBox) -> Range

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: TextBox) -> object

Set: VerticalAlignment(self: TextBox) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: TextBox) -> bool

Set: Visible(self: TextBox) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: TextBox) -> float

Set: Width(self: TextBox) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: TextBox) -> int

"""



class TextBoxes(IEnumerable):
    # no doc
    def Add(self, Left, Top, Width, Height):
        """ Add(self: TextBoxes, Left: float, Top: float, Width: float, Height: float) -> TextBox """
        pass

    def BringToFront(self):
        """ BringToFront(self: TextBoxes) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: TextBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        pass

    def Copy(self):
        """ Copy(self: TextBoxes) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: TextBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: TextBoxes) -> object """
        pass

    def Delete(self):
        """ Delete(self: TextBoxes) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: TextBoxes) -> object """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: TextBoxes) -> IEnumerator """
        pass

    def Group(self):
        """ Group(self: TextBoxes) -> GroupObject """
        pass

    def Item(self, Index):
        """ Item(self: TextBoxes, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: TextBoxes, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: TextBoxes) -> object """
        pass

    def _Dummy12(self):
        """ _Dummy12(self: TextBoxes) """
        pass

    def _Dummy15(self):
        """ _Dummy15(self: TextBoxes) """
        pass

    def _Dummy22(self):
        """ _Dummy22(self: TextBoxes) """
        pass

    def _Dummy3(self):
        """ _Dummy3(self: TextBoxes) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AddIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AddIndent(self: TextBoxes) -> bool

Set: AddIndent(self: TextBoxes) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextBoxes) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: TextBoxes) -> object

Set: AutoScaleFont(self: TextBoxes) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: TextBoxes) -> bool

Set: AutoSize(self: TextBoxes) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: TextBoxes) -> Border

"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: TextBoxes) -> str

Set: Caption(self: TextBoxes) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: TextBoxes) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextBoxes) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: TextBoxes) -> bool

Set: Enabled(self: TextBoxes) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: TextBoxes) -> Font

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula(self: TextBoxes) -> str

Set: Formula(self: TextBoxes) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: TextBoxes) -> float

Set: Height(self: TextBoxes) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: TextBoxes) -> object

Set: HorizontalAlignment(self: TextBoxes) = value
"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: TextBoxes) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: TextBoxes) -> float

Set: Left(self: TextBoxes) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: TextBoxes) -> bool

Set: Locked(self: TextBoxes) = value
"""

    LockedText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockedText(self: TextBoxes) -> bool

Set: LockedText(self: TextBoxes) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: TextBoxes) -> str

Set: OnAction(self: TextBoxes) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: TextBoxes) -> object

Set: Orientation(self: TextBoxes) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextBoxes) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: TextBoxes) -> object

Set: Placement(self: TextBoxes) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: TextBoxes) -> bool

Set: PrintObject(self: TextBoxes) = value
"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: TextBoxes) -> int

Set: ReadingOrder(self: TextBoxes) = value
"""

    RoundedCorners = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundedCorners(self: TextBoxes) -> bool

Set: RoundedCorners(self: TextBoxes) = value
"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: TextBoxes) -> bool

Set: Shadow(self: TextBoxes) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: TextBoxes) -> ShapeRange

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: TextBoxes) -> str

Set: Text(self: TextBoxes) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: TextBoxes) -> float

Set: Top(self: TextBoxes) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: TextBoxes) -> object

Set: VerticalAlignment(self: TextBoxes) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: TextBoxes) -> bool

Set: Visible(self: TextBoxes) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: TextBoxes) -> float

Set: Width(self: TextBoxes) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: TextBoxes) -> int

"""



class TextConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextConnection) -> Application

"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: TextConnection) -> object

Set: Connection(self: TextConnection) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextConnection) -> object

"""

    TextFileColumnDataTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileColumnDataTypes(self: TextConnection) -> object

Set: TextFileColumnDataTypes(self: TextConnection) = value
"""

    TextFileCommaDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileCommaDelimiter(self: TextConnection) -> bool

Set: TextFileCommaDelimiter(self: TextConnection) = value
"""

    TextFileConsecutiveDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileConsecutiveDelimiter(self: TextConnection) -> bool

Set: TextFileConsecutiveDelimiter(self: TextConnection) = value
"""

    TextFileDecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileDecimalSeparator(self: TextConnection) -> str

Set: TextFileDecimalSeparator(self: TextConnection) = value
"""

    TextFileFixedColumnWidths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileFixedColumnWidths(self: TextConnection) -> object

Set: TextFileFixedColumnWidths(self: TextConnection) = value
"""

    TextFileHeaderRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileHeaderRow(self: TextConnection) -> bool

Set: TextFileHeaderRow(self: TextConnection) = value
"""

    TextFileOtherDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileOtherDelimiter(self: TextConnection) -> str

Set: TextFileOtherDelimiter(self: TextConnection) = value
"""

    TextFileParseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileParseType(self: TextConnection) -> XlTextParsingType

Set: TextFileParseType(self: TextConnection) = value
"""

    TextFilePlatform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePlatform(self: TextConnection) -> XlPlatform

Set: TextFilePlatform(self: TextConnection) = value
"""

    TextFilePromptOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePromptOnRefresh(self: TextConnection) -> bool

Set: TextFilePromptOnRefresh(self: TextConnection) = value
"""

    TextFileSemicolonDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSemicolonDelimiter(self: TextConnection) -> bool

Set: TextFileSemicolonDelimiter(self: TextConnection) = value
"""

    TextFileSpaceDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSpaceDelimiter(self: TextConnection) -> bool

Set: TextFileSpaceDelimiter(self: TextConnection) = value
"""

    TextFileStartRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileStartRow(self: TextConnection) -> int

Set: TextFileStartRow(self: TextConnection) = value
"""

    TextFileTabDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTabDelimiter(self: TextConnection) -> bool

Set: TextFileTabDelimiter(self: TextConnection) = value
"""

    TextFileTextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTextQualifier(self: TextConnection) -> XlTextQualifier

Set: TextFileTextQualifier(self: TextConnection) = value
"""

    TextFileThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileThousandsSeparator(self: TextConnection) -> str

Set: TextFileThousandsSeparator(self: TextConnection) = value
"""

    TextFileTrailingMinusNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTrailingMinusNumbers(self: TextConnection) -> bool

Set: TextFileTrailingMinusNumbers(self: TextConnection) = value
"""

    TextFileVisualLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileVisualLayout(self: TextConnection) -> XlTextVisualLayoutType

Set: TextFileVisualLayout(self: TextConnection) = value
"""



class TextEffectFormat(_IMsoDispObj):
    # no doc
    def ToggleVerticalText(self):
        """ ToggleVerticalText(self: TextEffectFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: TextEffectFormat) -> MsoTextEffectAlignment

Set: Alignment(self: TextEffectFormat) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextEffectFormat) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextEffectFormat) -> int

"""

    FontBold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontBold(self: TextEffectFormat) -> MsoTriState

Set: FontBold(self: TextEffectFormat) = value
"""

    FontItalic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontItalic(self: TextEffectFormat) -> MsoTriState

Set: FontItalic(self: TextEffectFormat) = value
"""

    FontName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontName(self: TextEffectFormat) -> str

Set: FontName(self: TextEffectFormat) = value
"""

    FontSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FontSize(self: TextEffectFormat) -> Single

Set: FontSize(self: TextEffectFormat) = value
"""

    KernedPairs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KernedPairs(self: TextEffectFormat) -> MsoTriState

Set: KernedPairs(self: TextEffectFormat) = value
"""

    NormalizedHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NormalizedHeight(self: TextEffectFormat) -> MsoTriState

Set: NormalizedHeight(self: TextEffectFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextEffectFormat) -> object

"""

    PresetShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetShape(self: TextEffectFormat) -> MsoPresetTextEffectShape

Set: PresetShape(self: TextEffectFormat) = value
"""

    PresetTextEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetTextEffect(self: TextEffectFormat) -> MsoPresetTextEffect

Set: PresetTextEffect(self: TextEffectFormat) = value
"""

    RotatedChars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotatedChars(self: TextEffectFormat) -> MsoTriState

Set: RotatedChars(self: TextEffectFormat) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Text(self: TextEffectFormat) -> str

Set: Text(self: TextEffectFormat) = value
"""

    Tracking = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tracking(self: TextEffectFormat) -> Single

Set: Tracking(self: TextEffectFormat) = value
"""



class TextFrame:
    # no doc
    def Characters(self, Start, Length):
        """ Characters(self: TextFrame, Start: object, Length: object) -> Characters """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextFrame) -> Application

"""

    AutoMargins = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoMargins(self: TextFrame) -> bool

Set: AutoMargins(self: TextFrame) = value
"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: TextFrame) -> bool

Set: AutoSize(self: TextFrame) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextFrame) -> XlCreator

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: TextFrame) -> XlHAlign

Set: HorizontalAlignment(self: TextFrame) = value
"""

    HorizontalOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalOverflow(self: TextFrame) -> XlOartHorizontalOverflow

Set: HorizontalOverflow(self: TextFrame) = value
"""

    MarginBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginBottom(self: TextFrame) -> Single

Set: MarginBottom(self: TextFrame) = value
"""

    MarginLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginLeft(self: TextFrame) -> Single

Set: MarginLeft(self: TextFrame) = value
"""

    MarginRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginRight(self: TextFrame) -> Single

Set: MarginRight(self: TextFrame) = value
"""

    MarginTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginTop(self: TextFrame) -> Single

Set: MarginTop(self: TextFrame) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: TextFrame) -> MsoTextOrientation

Set: Orientation(self: TextFrame) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextFrame) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: TextFrame) -> int

Set: ReadingOrder(self: TextFrame) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: TextFrame) -> XlVAlign

Set: VerticalAlignment(self: TextFrame) = value
"""

    VerticalOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalOverflow(self: TextFrame) -> XlOartVerticalOverflow

Set: VerticalOverflow(self: TextFrame) = value
"""



class TextFrame2(_IMsoDispObj):
    # no doc
    def DeleteText(self):
        """ DeleteText(self: TextFrame2) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TextFrame2) -> object

"""

    AutoSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoSize(self: TextFrame2) -> MsoAutoSize

Set: AutoSize(self: TextFrame2) = value
"""

    Column = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Column(self: TextFrame2) -> TextColumn2

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TextFrame2) -> int

"""

    HasText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasText(self: TextFrame2) -> MsoTriState

"""

    HorizontalAnchor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAnchor(self: TextFrame2) -> MsoHorizontalAnchor

Set: HorizontalAnchor(self: TextFrame2) = value
"""

    MarginBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginBottom(self: TextFrame2) -> Single

Set: MarginBottom(self: TextFrame2) = value
"""

    MarginLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginLeft(self: TextFrame2) -> Single

Set: MarginLeft(self: TextFrame2) = value
"""

    MarginRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginRight(self: TextFrame2) -> Single

Set: MarginRight(self: TextFrame2) = value
"""

    MarginTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MarginTop(self: TextFrame2) -> Single

Set: MarginTop(self: TextFrame2) = value
"""

    NoTextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NoTextRotation(self: TextFrame2) -> MsoTriState

Set: NoTextRotation(self: TextFrame2) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: TextFrame2) -> MsoTextOrientation

Set: Orientation(self: TextFrame2) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TextFrame2) -> object

"""

    PathFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PathFormat(self: TextFrame2) -> MsoPathFormat

Set: PathFormat(self: TextFrame2) = value
"""

    Ruler = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ruler(self: TextFrame2) -> Ruler2

"""

    TextRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRange(self: TextFrame2) -> TextRange2

"""

    ThreeD = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ThreeD(self: TextFrame2) -> ThreeDFormat

"""

    VerticalAnchor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAnchor(self: TextFrame2) -> MsoVerticalAnchor

Set: VerticalAnchor(self: TextFrame2) = value
"""

    WarpFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WarpFormat(self: TextFrame2) -> MsoWarpFormat

Set: WarpFormat(self: TextFrame2) = value
"""

    WordArtformat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WordArtformat(self: TextFrame2) -> MsoPresetTextEffect

Set: WordArtformat(self: TextFrame2) = value
"""

    WordWrap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WordWrap(self: TextFrame2) -> MsoTriState

Set: WordWrap(self: TextFrame2) = value
"""



class ThreeDFormat(_IMsoDispObj):
    # no doc
    def IncrementRotationHorizontal(self, Increment):
        """ IncrementRotationHorizontal(self: ThreeDFormat, Increment: Single) """
        pass

    def IncrementRotationVertical(self, Increment):
        """ IncrementRotationVertical(self: ThreeDFormat, Increment: Single) """
        pass

    def IncrementRotationX(self, Increment):
        """ IncrementRotationX(self: ThreeDFormat, Increment: Single) """
        pass

    def IncrementRotationY(self, Increment):
        """ IncrementRotationY(self: ThreeDFormat, Increment: Single) """
        pass

    def IncrementRotationZ(self, Increment):
        """ IncrementRotationZ(self: ThreeDFormat, Increment: Single) """
        pass

    def ResetRotation(self):
        """ ResetRotation(self: ThreeDFormat) """
        pass

    def SetExtrusionDirection(self, PresetExtrusionDirection):
        """ SetExtrusionDirection(self: ThreeDFormat, PresetExtrusionDirection: MsoPresetExtrusionDirection) """
        pass

    def SetPresetCamera(self, PresetCamera):
        """ SetPresetCamera(self: ThreeDFormat, PresetCamera: MsoPresetCamera) """
        pass

    def SetThreeDFormat(self, PresetThreeDFormat):
        """ SetThreeDFormat(self: ThreeDFormat, PresetThreeDFormat: MsoPresetThreeDFormat) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ThreeDFormat) -> object

"""

    BevelBottomDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelBottomDepth(self: ThreeDFormat) -> Single

Set: BevelBottomDepth(self: ThreeDFormat) = value
"""

    BevelBottomInset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelBottomInset(self: ThreeDFormat) -> Single

Set: BevelBottomInset(self: ThreeDFormat) = value
"""

    BevelBottomType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelBottomType(self: ThreeDFormat) -> MsoBevelType

Set: BevelBottomType(self: ThreeDFormat) = value
"""

    BevelTopDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelTopDepth(self: ThreeDFormat) -> Single

Set: BevelTopDepth(self: ThreeDFormat) = value
"""

    BevelTopInset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelTopInset(self: ThreeDFormat) -> Single

Set: BevelTopInset(self: ThreeDFormat) = value
"""

    BevelTopType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BevelTopType(self: ThreeDFormat) -> MsoBevelType

Set: BevelTopType(self: ThreeDFormat) = value
"""

    ContourColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContourColor(self: ThreeDFormat) -> ColorFormat

"""

    ContourWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContourWidth(self: ThreeDFormat) -> Single

Set: ContourWidth(self: ThreeDFormat) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ThreeDFormat) -> int

"""

    Depth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Depth(self: ThreeDFormat) -> Single

Set: Depth(self: ThreeDFormat) = value
"""

    ExtrusionColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtrusionColor(self: ThreeDFormat) -> ColorFormat

"""

    ExtrusionColorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtrusionColorType(self: ThreeDFormat) -> MsoExtrusionColorType

Set: ExtrusionColorType(self: ThreeDFormat) = value
"""

    FieldOfView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldOfView(self: ThreeDFormat) -> Single

Set: FieldOfView(self: ThreeDFormat) = value
"""

    LightAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LightAngle(self: ThreeDFormat) -> Single

Set: LightAngle(self: ThreeDFormat) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ThreeDFormat) -> object

"""

    Perspective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Perspective(self: ThreeDFormat) -> MsoTriState

Set: Perspective(self: ThreeDFormat) = value
"""

    PresetCamera = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetCamera(self: ThreeDFormat) -> MsoPresetCamera

"""

    PresetExtrusionDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetExtrusionDirection(self: ThreeDFormat) -> MsoPresetExtrusionDirection

"""

    PresetLighting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetLighting(self: ThreeDFormat) -> MsoLightRigType

Set: PresetLighting(self: ThreeDFormat) = value
"""

    PresetLightingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetLightingDirection(self: ThreeDFormat) -> MsoPresetLightingDirection

Set: PresetLightingDirection(self: ThreeDFormat) = value
"""

    PresetLightingSoftness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetLightingSoftness(self: ThreeDFormat) -> MsoPresetLightingSoftness

Set: PresetLightingSoftness(self: ThreeDFormat) = value
"""

    PresetMaterial = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetMaterial(self: ThreeDFormat) -> MsoPresetMaterial

Set: PresetMaterial(self: ThreeDFormat) = value
"""

    PresetThreeDFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PresetThreeDFormat(self: ThreeDFormat) -> MsoPresetThreeDFormat

"""

    ProjectText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProjectText(self: ThreeDFormat) -> MsoTriState

Set: ProjectText(self: ThreeDFormat) = value
"""

    RotationX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotationX(self: ThreeDFormat) -> Single

Set: RotationX(self: ThreeDFormat) = value
"""

    RotationY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotationY(self: ThreeDFormat) -> Single

Set: RotationY(self: ThreeDFormat) = value
"""

    RotationZ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RotationZ(self: ThreeDFormat) -> Single

Set: RotationZ(self: ThreeDFormat) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: ThreeDFormat) -> MsoTriState

Set: Visible(self: ThreeDFormat) = value
"""

    Z = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Z(self: ThreeDFormat) -> Single

Set: Z(self: ThreeDFormat) = value
"""



class TickLabels:
    # no doc
    def Delete(self):
        """ Delete(self: TickLabels) -> object """
        pass

    def Select(self):
        """ Select(self: TickLabels) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: TickLabels) -> int

Set: Alignment(self: TickLabels) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TickLabels) -> Application

"""

    AutoScaleFont = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoScaleFont(self: TickLabels) -> object

Set: AutoScaleFont(self: TickLabels) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TickLabels) -> XlCreator

"""

    Depth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Depth(self: TickLabels) -> int

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: TickLabels) -> Font

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: TickLabels) -> ChartFormat

"""

    MultiLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiLevel(self: TickLabels) -> bool

Set: MultiLevel(self: TickLabels) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: TickLabels) -> str

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: TickLabels) -> str

Set: NumberFormat(self: TickLabels) = value
"""

    NumberFormatLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLinked(self: TickLabels) -> bool

Set: NumberFormatLinked(self: TickLabels) = value
"""

    NumberFormatLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormatLocal(self: TickLabels) -> object

Set: NumberFormatLocal(self: TickLabels) = value
"""

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Offset(self: TickLabels) -> int

Set: Offset(self: TickLabels) = value
"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Orientation(self: TickLabels) -> XlTickLabelOrientation

Set: Orientation(self: TickLabels) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TickLabels) -> object

"""

    ReadingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadingOrder(self: TickLabels) -> int

Set: ReadingOrder(self: TickLabels) = value
"""



class TimelineState:
    # no doc
    def SetFilterDateRange(self, StartDate, EndDate):
        """ SetFilterDateRange(self: TimelineState, StartDate: object, EndDate: object) -> XlFilterStatus """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TimelineState) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TimelineState) -> XlCreator

"""

    EndDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDate(self: TimelineState) -> object

"""

    FilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterType(self: TimelineState) -> XlPivotFilterType

"""

    FilterValue1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterValue1(self: TimelineState) -> object

"""

    FilterValue2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterValue2(self: TimelineState) -> object

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TimelineState) -> object

"""

    SingleRangeFilterState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SingleRangeFilterState(self: TimelineState) -> bool

"""

    StartDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDate(self: TimelineState) -> object

"""



class TimelineViewState:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TimelineViewState) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TimelineViewState) -> XlCreator

"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Level(self: TimelineViewState) -> XlTimelineLevel

Set: Level(self: TimelineViewState) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TimelineViewState) -> object

"""

    ShowHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHeader(self: TimelineViewState) -> bool

Set: ShowHeader(self: TimelineViewState) = value
"""

    ShowHorizontalScrollbar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHorizontalScrollbar(self: TimelineViewState) -> bool

Set: ShowHorizontalScrollbar(self: TimelineViewState) = value
"""

    ShowSelectionLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowSelectionLabel(self: TimelineViewState) -> bool

Set: ShowSelectionLabel(self: TimelineViewState) = value
"""

    ShowTimeLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowTimeLevel(self: TimelineViewState) -> bool

Set: ShowTimeLevel(self: TimelineViewState) = value
"""



class Toolbar:
    # no doc
    def Delete(self):
        """ Delete(self: Toolbar) """
        pass

    def Reset(self):
        """ Reset(self: Toolbar) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Toolbar) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: Toolbar) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Toolbar) -> XlCreator

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Toolbar) -> int

Set: Height(self: Toolbar) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Toolbar) -> int

Set: Left(self: Toolbar) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Toolbar) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Toolbar) -> object

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: Toolbar) -> int

Set: Position(self: Toolbar) = value
"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: Toolbar) -> XlToolbarProtection

Set: Protection(self: Toolbar) = value
"""

    ToolbarButtons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToolbarButtons(self: Toolbar) -> ToolbarButtons

"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Toolbar) -> int

Set: Top(self: Toolbar) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Toolbar) -> bool

Set: Visible(self: Toolbar) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Toolbar) -> int

Set: Width(self: Toolbar) = value
"""



class ToolbarButton:
    # no doc
    def Copy(self, Toolbar, Before):
        """ Copy(self: ToolbarButton, Toolbar: Toolbar, Before: int) """
        pass

    def CopyFace(self):
        """ CopyFace(self: ToolbarButton) """
        pass

    def Delete(self):
        """ Delete(self: ToolbarButton) """
        pass

    def Edit(self):
        """ Edit(self: ToolbarButton) """
        pass

    def Move(self, Toolbar, Before):
        """ Move(self: ToolbarButton, Toolbar: Toolbar, Before: int) """
        pass

    def PasteFace(self):
        """ PasteFace(self: ToolbarButton) """
        pass

    def Reset(self):
        """ Reset(self: ToolbarButton) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ToolbarButton) -> Application

"""

    BuiltIn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltIn(self: ToolbarButton) -> bool

"""

    BuiltInFace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltInFace(self: ToolbarButton) -> bool

Set: BuiltInFace(self: ToolbarButton) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ToolbarButton) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: ToolbarButton) -> bool

Set: Enabled(self: ToolbarButton) = value
"""

    HelpContextID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpContextID(self: ToolbarButton) -> int

Set: HelpContextID(self: ToolbarButton) = value
"""

    HelpFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HelpFile(self: ToolbarButton) -> str

Set: HelpFile(self: ToolbarButton) = value
"""

    ID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ID(self: ToolbarButton) -> int

"""

    IsGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsGap(self: ToolbarButton) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ToolbarButton) -> str

Set: Name(self: ToolbarButton) = value
"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: ToolbarButton) -> str

Set: OnAction(self: ToolbarButton) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ToolbarButton) -> object

"""

    Pushed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Pushed(self: ToolbarButton) -> bool

Set: Pushed(self: ToolbarButton) = value
"""

    StatusBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StatusBar(self: ToolbarButton) -> str

Set: StatusBar(self: ToolbarButton) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: ToolbarButton) -> int

Set: Width(self: ToolbarButton) = value
"""



class ToolbarButtons(IEnumerable):
    # no doc
    def Add(self, Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID):
        """ Add(self: ToolbarButtons, Button: object, Before: object, OnAction: object, Pushed: object, Enabled: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> ToolbarButton """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: ToolbarButtons) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ToolbarButtons) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: ToolbarButtons) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ToolbarButtons) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ToolbarButtons) -> object

"""



class Toolbars(IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: Toolbars, Name: object) -> Toolbar """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Toolbars) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Toolbars) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Toolbars) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Toolbars) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Toolbars) -> object

"""



class Top10:
    # no doc
    def Delete(self):
        """ Delete(self: Top10) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: Top10, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: Top10) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: Top10) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Top10) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: Top10) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: Top10) -> Borders

"""

    CalcFor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalcFor(self: Top10) -> XlCalcFor

Set: CalcFor(self: Top10) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Top10) -> XlCreator

"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: Top10) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Top10) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: Top10) -> object

Set: NumberFormat(self: Top10) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Top10) -> object

"""

    Percent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Percent(self: Top10) -> bool

Set: Percent(self: Top10) = value
"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: Top10) -> int

Set: Priority(self: Top10) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: Top10) -> bool

"""

    Rank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rank(self: Top10) -> int

Set: Rank(self: Top10) = value
"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: Top10) -> XlPivotConditionScope

Set: ScopeType(self: Top10) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: Top10) -> bool

Set: StopIfTrue(self: Top10) = value
"""

    TopBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopBottom(self: Top10) -> XlTopBottom

Set: TopBottom(self: Top10) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Top10) -> int

"""



class TreeviewControl:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: TreeviewControl) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: TreeviewControl) -> XlCreator

"""

    Drilled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Drilled(self: TreeviewControl) -> object

Set: Drilled(self: TreeviewControl) = value
"""

    Hidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hidden(self: TreeviewControl) -> object

Set: Hidden(self: TreeviewControl) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: TreeviewControl) -> object

"""



class Trendline:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: Trendline) -> object """
        pass

    def Delete(self):
        """ Delete(self: Trendline) -> object """
        pass

    def Select(self):
        """ Select(self: Trendline) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Trendline) -> Application

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: Trendline) -> int

Set: Backward(self: Trendline) = value
"""

    Backward2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward2(self: Trendline) -> float

Set: Backward2(self: Trendline) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Trendline) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Trendline) -> XlCreator

"""

    DataLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataLabel(self: Trendline) -> DataLabel

"""

    DisplayEquation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayEquation(self: Trendline) -> bool

Set: DisplayEquation(self: Trendline) = value
"""

    DisplayRSquared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRSquared(self: Trendline) -> bool

Set: DisplayRSquared(self: Trendline) = value
"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Trendline) -> ChartFormat

"""

    Forward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Forward(self: Trendline) -> int

Set: Forward(self: Trendline) = value
"""

    Forward2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Forward2(self: Trendline) -> float

Set: Forward2(self: Trendline) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Trendline) -> int

"""

    Intercept = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Intercept(self: Trendline) -> float

Set: Intercept(self: Trendline) = value
"""

    InterceptIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InterceptIsAuto(self: Trendline) -> bool

Set: InterceptIsAuto(self: Trendline) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Trendline) -> str

Set: Name(self: Trendline) = value
"""

    NameIsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NameIsAuto(self: Trendline) -> bool

Set: NameIsAuto(self: Trendline) = value
"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: Trendline) -> int

Set: Order(self: Trendline) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Trendline) -> object

"""

    Period = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Period(self: Trendline) -> int

Set: Period(self: Trendline) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Trendline) -> XlTrendlineType

Set: Type(self: Trendline) = value
"""



class Trendlines(IEnumerable):
    # no doc
    def Add(self, Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name):
        """ Add(self: Trendlines, Type: XlTrendlineType, Order: object, Period: object, Forward: object, Backward: object, Intercept: object, DisplayEquation: object, DisplayRSquared: object, Name: object) -> Trendline """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Trendlines) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: Trendlines, Index: object) -> Trendline """
        pass

    def _Default(self, Index):
        """ _Default(self: Trendlines, Index: object) -> Trendline """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Trendlines) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Trendlines) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Trendlines) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Trendlines) -> object

"""



class UniqueValues:
    # no doc
    def Delete(self):
        """ Delete(self: UniqueValues) """
        pass

    def ModifyAppliesToRange(self, Range):
        """ ModifyAppliesToRange(self: UniqueValues, Range: Range) """
        pass

    def SetFirstPriority(self):
        """ SetFirstPriority(self: UniqueValues) """
        pass

    def SetLastPriority(self):
        """ SetLastPriority(self: UniqueValues) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: UniqueValues) -> Application

"""

    AppliesTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppliesTo(self: UniqueValues) -> Range

"""

    Borders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Borders(self: UniqueValues) -> Borders

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: UniqueValues) -> XlCreator

"""

    DupeUnique = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DupeUnique(self: UniqueValues) -> XlDupeUnique

Set: DupeUnique(self: UniqueValues) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Font(self: UniqueValues) -> Font

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: UniqueValues) -> Interior

"""

    NumberFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberFormat(self: UniqueValues) -> object

Set: NumberFormat(self: UniqueValues) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: UniqueValues) -> object

"""

    Priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Priority(self: UniqueValues) -> int

Set: Priority(self: UniqueValues) = value
"""

    PTCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PTCondition(self: UniqueValues) -> bool

"""

    ScopeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScopeType(self: UniqueValues) -> XlPivotConditionScope

Set: ScopeType(self: UniqueValues) = value
"""

    StopIfTrue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StopIfTrue(self: UniqueValues) -> bool

Set: StopIfTrue(self: UniqueValues) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: UniqueValues) -> int

"""



class UpBars:
    # no doc
    def Delete(self):
        """ Delete(self: UpBars) -> object """
        pass

    def Select(self):
        """ Select(self: UpBars) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: UpBars) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: UpBars) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: UpBars) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: UpBars) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: UpBars) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: UpBars) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: UpBars) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: UpBars) -> object

"""



class UsedObjects(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: UsedObjects) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: UsedObjects) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: UsedObjects) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: UsedObjects) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: UsedObjects) -> object

"""



class UserAccess:
    # no doc
    def Delete(self):
        """ Delete(self: UserAccess) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowEdit(self: UserAccess) -> bool

Set: AllowEdit(self: UserAccess) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: UserAccess) -> str

"""



class UserAccessList(IEnumerable):
    # no doc
    def Add(self, Name, AllowEdit):
        """ Add(self: UserAccessList, Name: str, AllowEdit: bool) -> UserAccess """
        pass

    def DeleteAll(self):
        """ DeleteAll(self: UserAccessList) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: UserAccessList) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: UserAccessList) -> int

"""



class Validation:
    # no doc
    def Add(self, Type, AlertStyle, Operator, Formula1, Formula2):
        """ Add(self: Validation, Type: XlDVType, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        pass

    def Delete(self):
        """ Delete(self: Validation) """
        pass

    def Modify(self, Type, AlertStyle, Operator, Formula1, Formula2):
        """ Modify(self: Validation, Type: object, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlertStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlertStyle(self: Validation) -> int

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Validation) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Validation) -> XlCreator

"""

    ErrorMessage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorMessage(self: Validation) -> str

Set: ErrorMessage(self: Validation) = value
"""

    ErrorTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ErrorTitle(self: Validation) -> str

Set: ErrorTitle(self: Validation) = value
"""

    Formula1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula1(self: Validation) -> str

"""

    Formula2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Formula2(self: Validation) -> str

"""

    IgnoreBlank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IgnoreBlank(self: Validation) -> bool

Set: IgnoreBlank(self: Validation) = value
"""

    IMEMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IMEMode(self: Validation) -> int

Set: IMEMode(self: Validation) = value
"""

    InCellDropdown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InCellDropdown(self: Validation) -> bool

Set: InCellDropdown(self: Validation) = value
"""

    InputMessage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputMessage(self: Validation) -> str

Set: InputMessage(self: Validation) = value
"""

    InputTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InputTitle(self: Validation) -> str

Set: InputTitle(self: Validation) = value
"""

    Operator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Operator(self: Validation) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Validation) -> object

"""

    ShowError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowError(self: Validation) -> bool

Set: ShowError(self: Validation) = value
"""

    ShowInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowInput(self: Validation) -> bool

Set: ShowInput(self: Validation) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Validation) -> int

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: Validation) -> bool

"""



class ValueChange:
    # no doc
    def Delete(self):
        """ Delete(self: ValueChange) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllocationMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationMethod(self: ValueChange) -> XlAllocationMethod

"""

    AllocationValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationValue(self: ValueChange) -> XlAllocationValue

"""

    AllocationWeightExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllocationWeightExpression(self: ValueChange) -> str

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: ValueChange) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: ValueChange) -> XlCreator

"""

    Order = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Order(self: ValueChange) -> int

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: ValueChange) -> object

"""

    PivotCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotCell(self: ValueChange) -> PivotCell

"""

    Tuple = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tuple(self: ValueChange) -> str

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: ValueChange) -> float

"""

    VisibleInPivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleInPivotTable(self: ValueChange) -> bool

"""



class VPageBreak:
    # no doc
    def Delete(self):
        """ Delete(self: VPageBreak) """
        pass

    def DragOff(self, Direction, RegionIndex):
        """ DragOff(self: VPageBreak, Direction: XlDirection, RegionIndex: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: VPageBreak) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: VPageBreak) -> XlCreator

"""

    Extent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Extent(self: VPageBreak) -> XlPageBreakExtent

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Location(self: VPageBreak) -> Range

Set: Location(self: VPageBreak) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: VPageBreak) -> Worksheet

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: VPageBreak) -> XlPageBreak

Set: Type(self: VPageBreak) = value
"""



class VPageBreaks(IEnumerable):
    # no doc
    def Add(self, Before):
        """ Add(self: VPageBreaks, Before: object) -> VPageBreak """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: VPageBreaks) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: VPageBreaks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: VPageBreaks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: VPageBreaks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: VPageBreaks) -> object

"""



class Walls:
    # no doc
    def ClearFormats(self):
        """ ClearFormats(self: Walls) -> object """
        pass

    def Paste(self):
        """ Paste(self: Walls) """
        pass

    def Select(self):
        """ Select(self: Walls) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Walls) -> Application

"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: Walls) -> Border

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Walls) -> XlCreator

"""

    Fill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fill(self: Walls) -> ChartFillFormat

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Format(self: Walls) -> ChartFormat

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: Walls) -> Interior

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: Walls) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Walls) -> object

"""

    PictureType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureType(self: Walls) -> object

Set: PictureType(self: Walls) = value
"""

    PictureUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PictureUnit(self: Walls) -> object

Set: PictureUnit(self: Walls) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: Walls) -> int

Set: Thickness(self: Walls) = value
"""



class Watch:
    # no doc
    def Delete(self):
        """ Delete(self: Watch) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Watch) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Watch) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Watch) -> object

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Source(self: Watch) -> object

"""



class Watches(IEnumerable):
    # no doc
    def Add(self, Source):
        """ Add(self: Watches, Source: object) -> Watch """
        pass

    def Delete(self):
        """ Delete(self: Watches) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Watches) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Watches) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Watches) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Watches) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Watches) -> object

"""



class WebOptions:
    # no doc
    def UseDefaultFolderSuffix(self):
        """ UseDefaultFolderSuffix(self: WebOptions) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowPNG = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowPNG(self: WebOptions) -> bool

Set: AllowPNG(self: WebOptions) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WebOptions) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WebOptions) -> XlCreator

"""

    DownloadComponents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DownloadComponents(self: WebOptions) -> bool

Set: DownloadComponents(self: WebOptions) = value
"""

    Encoding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Encoding(self: WebOptions) -> MsoEncoding

Set: Encoding(self: WebOptions) = value
"""

    FolderSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FolderSuffix(self: WebOptions) -> str

"""

    LocationOfComponents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LocationOfComponents(self: WebOptions) -> str

Set: LocationOfComponents(self: WebOptions) = value
"""

    OrganizeInFolder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrganizeInFolder(self: WebOptions) -> bool

Set: OrganizeInFolder(self: WebOptions) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WebOptions) -> object

"""

    PixelsPerInch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PixelsPerInch(self: WebOptions) -> int

Set: PixelsPerInch(self: WebOptions) = value
"""

    RelyOnCSS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelyOnCSS(self: WebOptions) -> bool

Set: RelyOnCSS(self: WebOptions) = value
"""

    RelyOnVML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RelyOnVML(self: WebOptions) -> bool

Set: RelyOnVML(self: WebOptions) = value
"""

    ScreenSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScreenSize(self: WebOptions) -> MsoScreenSize

Set: ScreenSize(self: WebOptions) = value
"""

    TargetBrowser = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TargetBrowser(self: WebOptions) -> MsoTargetBrowser

Set: TargetBrowser(self: WebOptions) = value
"""

    UseLongFileNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseLongFileNames(self: WebOptions) -> bool

Set: UseLongFileNames(self: WebOptions) = value
"""



class Window:
    # no doc
    def Activate(self):
        """ Activate(self: Window) -> object """
        pass

    def ActivateNext(self):
        """ ActivateNext(self: Window) -> object """
        pass

    def ActivatePrevious(self):
        """ ActivatePrevious(self: Window) -> object """
        pass

    def Close(self, SaveChanges, Filename, RouteWorkbook):
        """ Close(self: Window, SaveChanges: object, Filename: object, RouteWorkbook: object) -> bool """
        pass

    def LargeScroll(self, Down, Up, ToRight, ToLeft):
        """ LargeScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def NewWindow(self):
        """ NewWindow(self: Window) -> Window """
        pass

    def PointsToScreenPixelsX(self, Points):
        """ PointsToScreenPixelsX(self: Window, Points: int) -> int """
        pass

    def PointsToScreenPixelsY(self, Points):
        """ PointsToScreenPixelsY(self: Window, Points: int) -> int """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Window, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: Window, EnableChanges: object) -> object """
        pass

    def RangeFromPoint(self, x, y):
        """ RangeFromPoint(self: Window, x: int, y: int) -> object """
        pass

    def ScrollIntoView(self, Left, Top, Width, Height, Start):
        """ ScrollIntoView(self: Window, Left: int, Top: int, Width: int, Height: int, Start: object) """
        pass

    def ScrollWorkbookTabs(self, Sheets, Position):
        """ ScrollWorkbookTabs(self: Window, Sheets: object, Position: object) -> object """
        pass

    def SmallScroll(self, Down, Up, ToRight, ToLeft):
        """ SmallScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ _PrintOut(self: Window, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveCell(self: Window) -> Range

"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: Window) -> Chart

"""

    ActivePane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActivePane(self: Window) -> Pane

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: Window) -> object

"""

    ActiveSheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheetView(self: Window) -> object

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Window) -> Application

"""

    AutoFilterDateGrouping = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilterDateGrouping(self: Window) -> bool

Set: AutoFilterDateGrouping(self: Window) = value
"""

    Caption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Caption(self: Window) -> object

Set: Caption(self: Window) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Window) -> XlCreator

"""

    DisplayFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulas(self: Window) -> bool

Set: DisplayFormulas(self: Window) = value
"""

    DisplayGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayGridlines(self: Window) -> bool

Set: DisplayGridlines(self: Window) = value
"""

    DisplayHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeadings(self: Window) -> bool

Set: DisplayHeadings(self: Window) = value
"""

    DisplayHorizontalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHorizontalScrollBar(self: Window) -> bool

Set: DisplayHorizontalScrollBar(self: Window) = value
"""

    DisplayOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayOutline(self: Window) -> bool

Set: DisplayOutline(self: Window) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: Window) -> bool

Set: DisplayRightToLeft(self: Window) = value
"""

    DisplayRuler = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRuler(self: Window) -> bool

Set: DisplayRuler(self: Window) = value
"""

    DisplayVerticalScrollBar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayVerticalScrollBar(self: Window) -> bool

Set: DisplayVerticalScrollBar(self: Window) = value
"""

    DisplayWhitespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayWhitespace(self: Window) -> bool

Set: DisplayWhitespace(self: Window) = value
"""

    DisplayWorkbookTabs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayWorkbookTabs(self: Window) -> bool

Set: DisplayWorkbookTabs(self: Window) = value
"""

    DisplayZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayZeros(self: Window) -> bool

Set: DisplayZeros(self: Window) = value
"""

    EnableResize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableResize(self: Window) -> bool

Set: EnableResize(self: Window) = value
"""

    FreezePanes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FreezePanes(self: Window) -> bool

Set: FreezePanes(self: Window) = value
"""

    GridlineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridlineColor(self: Window) -> int

Set: GridlineColor(self: Window) = value
"""

    GridlineColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridlineColorIndex(self: Window) -> XlColorIndex

Set: GridlineColorIndex(self: Window) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: Window) -> float

Set: Height(self: Window) = value
"""

    Hwnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hwnd(self: Window) -> int

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: Window) -> int

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: Window) -> float

Set: Left(self: Window) = value
"""

    OnWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnWindow(self: Window) -> str

Set: OnWindow(self: Window) = value
"""

    Panes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Panes(self: Window) -> Panes

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Window) -> object

"""

    RangeSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RangeSelection(self: Window) -> Range

"""

    ScrollColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollColumn(self: Window) -> int

Set: ScrollColumn(self: Window) = value
"""

    ScrollRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollRow(self: Window) -> int

Set: ScrollRow(self: Window) = value
"""

    SelectedSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SelectedSheets(self: Window) -> Sheets

"""

    Selection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Selection(self: Window) -> object

"""

    SheetViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetViews(self: Window) -> SheetViews

"""

    Split = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Split(self: Window) -> bool

Set: Split(self: Window) = value
"""

    SplitColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitColumn(self: Window) -> int

Set: SplitColumn(self: Window) = value
"""

    SplitHorizontal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitHorizontal(self: Window) -> float

Set: SplitHorizontal(self: Window) = value
"""

    SplitRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitRow(self: Window) -> int

Set: SplitRow(self: Window) = value
"""

    SplitVertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplitVertical(self: Window) -> float

Set: SplitVertical(self: Window) = value
"""

    TabRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TabRatio(self: Window) -> float

Set: TabRatio(self: Window) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: Window) -> float

Set: Top(self: Window) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Window) -> XlWindowType

"""

    UsableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableHeight(self: Window) -> float

"""

    UsableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsableWidth(self: Window) -> float

"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: View(self: Window) -> XlWindowView

Set: View(self: Window) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Window) -> bool

Set: Visible(self: Window) = value
"""

    VisibleRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibleRange(self: Window) -> Range

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: Window) -> float

Set: Width(self: Window) = value
"""

    WindowNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowNumber(self: Window) -> int

"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WindowState(self: Window) -> XlWindowState

Set: WindowState(self: Window) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Zoom(self: Window) -> object

Set: Zoom(self: Window) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: Window) -> bool

Set: _DisplayRightToLeft(self: Window) = value
"""



class Windows(IEnumerable):
    # no doc
    def Arrange(self, ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical):
        """ Arrange(self: Windows, ArrangeStyle: XlArrangeStyle, ActiveWorkbook: object, SyncHorizontal: object, SyncVertical: object) -> object """
        pass

    def BreakSideBySide(self):
        """ BreakSideBySide(self: Windows) -> bool """
        pass

    def CompareSideBySideWith(self, WindowName):
        """ CompareSideBySideWith(self: Windows, WindowName: object) -> bool """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Windows) -> IEnumerator """
        pass

    def ResetPositionsSideBySide(self):
        """ ResetPositionsSideBySide(self: Windows) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Windows) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Windows) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Windows) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Windows) -> object

"""

    SyncScrollingSideBySide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SyncScrollingSideBySide(self: Windows) -> bool

Set: SyncScrollingSideBySide(self: Windows) = value
"""



class WorkbookEvents_Event:
    # no doc
# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Open: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_RowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Sync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowResize: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Open: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_RowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Sync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowResize: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Activate = None
    AddinInstall = None
    AddinUninstall = None
    AfterSave = None
    AfterXmlExport = None
    AfterXmlImport = None
    BeforeClose = None
    BeforePrint = None
    BeforeSave = None
    BeforeXmlExport = None
    BeforeXmlImport = None
    Deactivate = None
    ModelChange = None
    NewChart = None
    NewSheet = None
    Open = None
    PivotTableCloseConnection = None
    PivotTableOpenConnection = None
    RowsetComplete = None
    SheetActivate = None
    SheetBeforeDelete = None
    SheetBeforeDoubleClick = None
    SheetBeforeRightClick = None
    SheetCalculate = None
    SheetChange = None
    SheetDeactivate = None
    SheetFollowHyperlink = None
    SheetLensGalleryRenderComplete = None
    SheetPivotTableAfterValueChange = None
    SheetPivotTableBeforeAllocateChanges = None
    SheetPivotTableBeforeCommitChanges = None
    SheetPivotTableBeforeDiscardChanges = None
    SheetPivotTableChangeSync = None
    SheetPivotTableUpdate = None
    SheetSelectionChange = None
    SheetTableUpdate = None
    Sync = None
    WindowActivate = None
    WindowDeactivate = None
    WindowResize = None


class _Workbook:
    # no doc
    def AcceptAllChanges(self, When, Who, Where):
        """ AcceptAllChanges(self: _Workbook, When: object, Who: object, Where: object) """
        pass

    def Activate(self):
        """ Activate(self: _Workbook) """
        pass

    def AddToFavorites(self):
        """ AddToFavorites(self: _Workbook) """
        pass

    def ApplyTheme(self, Filename):
        """ ApplyTheme(self: _Workbook, Filename: str) """
        pass

    def BreakLink(self, Name, Type):
        """ BreakLink(self: _Workbook, Name: str, Type: XlLinkType) """
        pass

    def CanCheckIn(self):
        """ CanCheckIn(self: _Workbook) -> bool """
        pass

    def ChangeFileAccess(self, Mode, WritePassword, Notify):
        """ ChangeFileAccess(self: _Workbook, Mode: XlFileAccess, WritePassword: object, Notify: object) """
        pass

    def ChangeLink(self, Name, NewName, Type):
        """ ChangeLink(self: _Workbook, Name: str, NewName: str, Type: XlLinkType) """
        pass

    def CheckIn(self, SaveChanges, Comments, MakePublic):
        """ CheckIn(self: _Workbook, SaveChanges: object, Comments: object, MakePublic: object) """
        pass

    def CheckInWithVersion(self, SaveChanges, Comments, MakePublic, VersionType):
        """ CheckInWithVersion(self: _Workbook, SaveChanges: object, Comments: object, MakePublic: object, VersionType: object) """
        pass

    def Close(self, SaveChanges, Filename, RouteWorkbook):
        """ Close(self: _Workbook, SaveChanges: object, Filename: object, RouteWorkbook: object) """
        pass

    def DeleteNumberFormat(self, NumberFormat):
        """ DeleteNumberFormat(self: _Workbook, NumberFormat: str) """
        pass

    def Dummy16(self):
        """ Dummy16(self: _Workbook) """
        pass

    def Dummy17(self, calcid):
        """ Dummy17(self: _Workbook, calcid: int) """
        pass

    def Dummy26(self):
        """ Dummy26(self: _Workbook) """
        pass

    def Dummy27(self):
        """ Dummy27(self: _Workbook) """
        pass

    def EnableConnections(self):
        """ EnableConnections(self: _Workbook) """
        pass

    def EndReview(self):
        """ EndReview(self: _Workbook) """
        pass

    def ExclusiveAccess(self):
        """ ExclusiveAccess(self: _Workbook) -> bool """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: _Workbook, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FollowHyperlink(self, Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):
        """ FollowHyperlink(self: _Workbook, Address: str, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        pass

    def ForwardMailer(self):
        """ ForwardMailer(self: _Workbook) """
        pass

    def GetWorkflowTasks(self):
        """ GetWorkflowTasks(self: _Workbook) -> WorkflowTasks """
        pass

    def GetWorkflowTemplates(self):
        """ GetWorkflowTemplates(self: _Workbook) -> WorkflowTemplates """
        pass

    def HighlightChangesOptions(self, When, Who, Where):
        """ HighlightChangesOptions(self: _Workbook, When: object, Who: object, Where: object) """
        pass

    def LinkInfo(self, Name, LinkInfo, Type, EditionRef):
        """ LinkInfo(self: _Workbook, Name: str, LinkInfo: XlLinkInfo, Type: object, EditionRef: object) -> object """
        pass

    def LinkSources(self, Type):
        """ LinkSources(self: _Workbook, Type: object) -> object """
        pass

    def LockServerFile(self):
        """ LockServerFile(self: _Workbook) """
        pass

    def MergeWorkbook(self, Filename):
        """ MergeWorkbook(self: _Workbook, Filename: object) """
        pass

    def NewWindow(self):
        """ NewWindow(self: _Workbook) -> Window """
        pass

    def OpenLinks(self, Name, ReadOnly, Type):
        """ OpenLinks(self: _Workbook, Name: str, ReadOnly: object, Type: object) """
        pass

    def PivotCaches(self):
        """ PivotCaches(self: _Workbook) -> PivotCaches """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: _Workbook, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        pass

    def Post(self, DestName):
        """ Post(self: _Workbook, DestName: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: _Workbook, EnableChanges: object) """
        pass

    def Protect(self, Password, Structure, Windows):
        """ Protect(self: _Workbook, Password: object, Structure: object, Windows: object) """
        pass

    def ProtectSharing(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword):
        """ ProtectSharing(self: _Workbook, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object) """
        pass

    def ProtectSharingEx(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword, FileFormat):
        """ ProtectSharingEx(self: _Workbook, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object, FileFormat: object) """
        pass

    def PurgeChangeHistoryNow(self, Days, SharingPassword):
        """ PurgeChangeHistoryNow(self: _Workbook, Days: int, SharingPassword: object) """
        pass

    def RecheckSmartTags(self):
        """ RecheckSmartTags(self: _Workbook) """
        pass

    def RefreshAll(self):
        """ RefreshAll(self: _Workbook) """
        pass

    def RejectAllChanges(self, When, Who, Where):
        """ RejectAllChanges(self: _Workbook, When: object, Who: object, Where: object) """
        pass

    def ReloadAs(self, Encoding):
        """ ReloadAs(self: _Workbook, Encoding: MsoEncoding) """
        pass

    def RemoveDocumentInformation(self, RemoveDocInfoType):
        """ RemoveDocumentInformation(self: _Workbook, RemoveDocInfoType: XlRemoveDocInfoType) """
        pass

    def RemoveUser(self, Index):
        """ RemoveUser(self: _Workbook, Index: int) """
        pass

    def Reply(self):
        """ Reply(self: _Workbook) """
        pass

    def ReplyAll(self):
        """ ReplyAll(self: _Workbook) """
        pass

    def ReplyWithChanges(self, ShowMessage):
        """ ReplyWithChanges(self: _Workbook, ShowMessage: object) """
        pass

    def ResetColors(self):
        """ ResetColors(self: _Workbook) """
        pass

    def Route(self):
        """ Route(self: _Workbook) """
        pass

    def RunAutoMacros(self, Which):
        """ RunAutoMacros(self: _Workbook, Which: XlRunAutoMacro) """
        pass

    def Save(self):
        """ Save(self: _Workbook) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: _Workbook, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def SaveAsXMLData(self, Filename, Map):
        """ SaveAsXMLData(self: _Workbook, Filename: str, Map: XmlMap) """
        pass

    def SaveCopyAs(self, Filename):
        """ SaveCopyAs(self: _Workbook, Filename: object) """
        pass

    def sblt(self, s):
        """ sblt(self: _Workbook, s: str) """
        pass

    def SendFaxOverInternet(self, Recipients, Subject, ShowMessage):
        """ SendFaxOverInternet(self: _Workbook, Recipients: object, Subject: object, ShowMessage: object) """
        pass

    def SendForReview(self, Recipients, Subject, ShowMessage, IncludeAttachment):
        """ SendForReview(self: _Workbook, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) """
        pass

    def SendMail(self, Recipients, Subject, ReturnReceipt):
        """ SendMail(self: _Workbook, Recipients: object, Subject: object, ReturnReceipt: object) """
        pass

    def SendMailer(self, FileFormat, Priority):
        """ SendMailer(self: _Workbook, FileFormat: object, Priority: XlPriority) """
        pass

    def SetLinkOnData(self, Name, Procedure):
        """ SetLinkOnData(self: _Workbook, Name: str, Procedure: object) """
        pass

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties):
        """ SetPasswordEncryptionOptions(self: _Workbook, PasswordEncryptionProvider: object, PasswordEncryptionAlgorithm: object, PasswordEncryptionKeyLength: object, PasswordEncryptionFileProperties: object) """
        pass

    def ToggleFormsDesign(self):
        """ ToggleFormsDesign(self: _Workbook) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: _Workbook, Password: object) """
        pass

    def UnprotectSharing(self, SharingPassword):
        """ UnprotectSharing(self: _Workbook, SharingPassword: object) """
        pass

    def UpdateFromFile(self):
        """ UpdateFromFile(self: _Workbook) """
        pass

    def UpdateLink(self, Name, Type):
        """ UpdateLink(self: _Workbook, Name: object, Type: object) """
        pass

    def WebPagePreview(self):
        """ WebPagePreview(self: _Workbook) """
        pass

    def XmlImport(self, Url, ImportMap, Overwrite, Destination):
        """ XmlImport(self: _Workbook, Url: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        pass

    def XmlImportXml(self, Data, ImportMap, Overwrite, Destination):
        """ XmlImportXml(self: _Workbook, Data: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, Structure, Windows):
        """ _Protect(self: _Workbook, Password: object, Structure: object, Windows: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: _Workbook, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AcceptLabelsInFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AcceptLabelsInFormulas(self: _Workbook) -> bool

Set: AcceptLabelsInFormulas(self: _Workbook) = value
"""

    AccuracyVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AccuracyVersion(self: _Workbook) -> int

Set: AccuracyVersion(self: _Workbook) = value
"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: _Workbook) -> Chart

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: _Workbook) -> object

"""

    ActiveSlicer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSlicer(self: _Workbook) -> Slicer

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _Workbook) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: _Workbook) -> str

Set: Author(self: _Workbook) = value
"""

    AutoUpdateFrequency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdateFrequency(self: _Workbook) -> int

Set: AutoUpdateFrequency(self: _Workbook) = value
"""

    AutoUpdateSaveChanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdateSaveChanges(self: _Workbook) -> bool

Set: AutoUpdateSaveChanges(self: _Workbook) = value
"""

    BuiltinDocumentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltinDocumentProperties(self: _Workbook) -> object

"""

    CalculationVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationVersion(self: _Workbook) -> int

"""

    CaseSensitive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CaseSensitive(self: _Workbook) -> bool

"""

    ChangeHistoryDuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangeHistoryDuration(self: _Workbook) -> int

Set: ChangeHistoryDuration(self: _Workbook) = value
"""

    ChartDataPointTrack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartDataPointTrack(self: _Workbook) -> bool

Set: ChartDataPointTrack(self: _Workbook) = value
"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: _Workbook) -> Sheets

"""

    CheckCompatibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CheckCompatibility(self: _Workbook) -> bool

Set: CheckCompatibility(self: _Workbook) = value
"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: _Workbook) -> str

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: _Workbook) -> CommandBars

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: _Workbook) -> str

Set: Comments(self: _Workbook) = value
"""

    ConflictResolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConflictResolution(self: _Workbook) -> XlSaveConflictResolution

Set: ConflictResolution(self: _Workbook) = value
"""

    Connections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connections(self: _Workbook) -> Connections

"""

    ConnectionsDisabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionsDisabled(self: _Workbook) -> bool

"""

    Container = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Container(self: _Workbook) -> object

"""

    ContentTypeProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentTypeProperties(self: _Workbook) -> MetaProperties

"""

    CreateBackup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreateBackup(self: _Workbook) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _Workbook) -> XlCreator

"""

    CustomDocumentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomDocumentProperties(self: _Workbook) -> object

"""

    CustomViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomViews(self: _Workbook) -> CustomViews

"""

    CustomXMLParts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomXMLParts(self: _Workbook) -> CustomXMLParts

"""

    Date1904 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Date1904(self: _Workbook) -> bool

Set: Date1904(self: _Workbook) = value
"""

    DefaultPivotTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultPivotTableStyle(self: _Workbook) -> object

Set: DefaultPivotTableStyle(self: _Workbook) = value
"""

    DefaultSlicerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSlicerStyle(self: _Workbook) -> object

Set: DefaultSlicerStyle(self: _Workbook) = value
"""

    DefaultTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultTableStyle(self: _Workbook) -> object

Set: DefaultTableStyle(self: _Workbook) = value
"""

    DefaultTimelineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultTimelineStyle(self: _Workbook) -> object

Set: DefaultTimelineStyle(self: _Workbook) = value
"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: _Workbook) -> Sheets

"""

    DisplayDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDrawingObjects(self: _Workbook) -> XlDisplayDrawingObjects

Set: DisplayDrawingObjects(self: _Workbook) = value
"""

    DisplayInkComments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInkComments(self: _Workbook) -> bool

Set: DisplayInkComments(self: _Workbook) = value
"""

    DocumentInspectors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DocumentInspectors(self: _Workbook) -> DocumentInspectors

"""

    DocumentLibraryVersions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DocumentLibraryVersions(self: _Workbook) -> DocumentLibraryVersions

"""

    DoNotPromptForConvert = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoNotPromptForConvert(self: _Workbook) -> bool

Set: DoNotPromptForConvert(self: _Workbook) = value
"""

    EnableAutoRecover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoRecover(self: _Workbook) -> bool

Set: EnableAutoRecover(self: _Workbook) = value
"""

    EncryptionProvider = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EncryptionProvider(self: _Workbook) -> str

Set: EncryptionProvider(self: _Workbook) = value
"""

    EnvelopeVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnvelopeVisible(self: _Workbook) -> bool

Set: EnvelopeVisible(self: _Workbook) = value
"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: _Workbook) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: _Workbook) -> Sheets

"""

    Excel8CompatibilityMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel8CompatibilityMode(self: _Workbook) -> bool

"""

    FileFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFormat(self: _Workbook) -> XlFileFormat

"""

    Final = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Final(self: _Workbook) -> bool

Set: Final(self: _Workbook) = value
"""

    ForceFullCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceFullCalculation(self: _Workbook) -> bool

Set: ForceFullCalculation(self: _Workbook) = value
"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: _Workbook) -> str

"""

    FullNameURLEncoded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullNameURLEncoded(self: _Workbook) -> str

"""

    HasMailer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMailer(self: _Workbook) -> bool

Set: HasMailer(self: _Workbook) = value
"""

    HasPassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasPassword(self: _Workbook) -> bool

"""

    HasRoutingSlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasRoutingSlip(self: _Workbook) -> bool

Set: HasRoutingSlip(self: _Workbook) = value
"""

    HasVBProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasVBProject(self: _Workbook) -> bool

"""

    HighlightChangesOnScreen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HighlightChangesOnScreen(self: _Workbook) -> bool

Set: HighlightChangesOnScreen(self: _Workbook) = value
"""

    HTMLProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HTMLProject(self: _Workbook) -> HTMLProject

"""

    IconSets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconSets(self: _Workbook) -> IconSets

"""

    InactiveListBorderVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InactiveListBorderVisible(self: _Workbook) -> bool

Set: InactiveListBorderVisible(self: _Workbook) = value
"""

    IsAddin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsAddin(self: _Workbook) -> bool

Set: IsAddin(self: _Workbook) = value
"""

    IsInplace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsInplace(self: _Workbook) -> bool

"""

    KeepChangeHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KeepChangeHistory(self: _Workbook) -> bool

Set: KeepChangeHistory(self: _Workbook) = value
"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: _Workbook) -> str

Set: Keywords(self: _Workbook) = value
"""

    ListChangesOnNewSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListChangesOnNewSheet(self: _Workbook) -> bool

Set: ListChangesOnNewSheet(self: _Workbook) = value
"""

    Mailer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Mailer(self: _Workbook) -> Mailer

"""

    Model = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Model(self: _Workbook) -> Model

"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: _Workbook) -> Sheets

"""

    MultiUserEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiUserEditing(self: _Workbook) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _Workbook) -> str

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: _Workbook) -> Names

"""

    OnSave = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSave(self: _Workbook) -> str

Set: OnSave(self: _Workbook) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: _Workbook) -> str

Set: OnSheetActivate(self: _Workbook) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: _Workbook) -> str

Set: OnSheetDeactivate(self: _Workbook) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _Workbook) -> object

"""

    Password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Password(self: _Workbook) -> str

Set: Password(self: _Workbook) = value
"""

    PasswordEncryptionAlgorithm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionAlgorithm(self: _Workbook) -> str

"""

    PasswordEncryptionFileProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionFileProperties(self: _Workbook) -> bool

"""

    PasswordEncryptionKeyLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionKeyLength(self: _Workbook) -> int

"""

    PasswordEncryptionProvider = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionProvider(self: _Workbook) -> str

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: _Workbook) -> str

"""

    Permission = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Permission(self: _Workbook) -> Permission

"""

    PersonalViewListSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PersonalViewListSettings(self: _Workbook) -> bool

Set: PersonalViewListSettings(self: _Workbook) = value
"""

    PersonalViewPrintSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PersonalViewPrintSettings(self: _Workbook) -> bool

Set: PersonalViewPrintSettings(self: _Workbook) = value
"""

    PivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTables(self: _Workbook) -> object

"""

    PrecisionAsDisplayed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrecisionAsDisplayed(self: _Workbook) -> bool

Set: PrecisionAsDisplayed(self: _Workbook) = value
"""

    ProtectStructure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectStructure(self: _Workbook) -> bool

"""

    ProtectWindows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectWindows(self: _Workbook) -> bool

"""

    PublishObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PublishObjects(self: _Workbook) -> PublishObjects

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: _Workbook) -> bool

"""

    ReadOnlyRecommended = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnlyRecommended(self: _Workbook) -> bool

Set: ReadOnlyRecommended(self: _Workbook) = value
"""

    RemovePersonalInformation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RemovePersonalInformation(self: _Workbook) -> bool

Set: RemovePersonalInformation(self: _Workbook) = value
"""

    Research = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Research(self: _Workbook) -> Research

"""

    RevisionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevisionNumber(self: _Workbook) -> int

"""

    Routed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Routed(self: _Workbook) -> bool

"""

    RoutingSlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoutingSlip(self: _Workbook) -> RoutingSlip

"""

    Saved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Saved(self: _Workbook) -> bool

Set: Saved(self: _Workbook) = value
"""

    SaveLinkValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveLinkValues(self: _Workbook) -> bool

Set: SaveLinkValues(self: _Workbook) = value
"""

    ServerPolicy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerPolicy(self: _Workbook) -> ServerPolicy

"""

    ServerViewableItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerViewableItems(self: _Workbook) -> ServerViewableItems

"""

    SharedWorkspace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharedWorkspace(self: _Workbook) -> SharedWorkspace

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: _Workbook) -> Sheets

"""

    ShowConflictHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowConflictHistory(self: _Workbook) -> bool

Set: ShowConflictHistory(self: _Workbook) = value
"""

    ShowPivotChartActiveFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPivotChartActiveFields(self: _Workbook) -> bool

Set: ShowPivotChartActiveFields(self: _Workbook) = value
"""

    ShowPivotTableFieldList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPivotTableFieldList(self: _Workbook) -> bool

Set: ShowPivotTableFieldList(self: _Workbook) = value
"""

    Signatures = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Signatures(self: _Workbook) -> SignatureSet

"""

    SlicerCaches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCaches(self: _Workbook) -> SlicerCaches

"""

    SmartDocument = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartDocument(self: _Workbook) -> SmartDocument

"""

    SmartTagOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagOptions(self: _Workbook) -> SmartTagOptions

"""

    Styles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Styles(self: _Workbook) -> Styles

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: _Workbook) -> str

Set: Subject(self: _Workbook) = value
"""

    Sync = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sync(self: _Workbook) -> Sync

"""

    TableStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyles(self: _Workbook) -> TableStyles

"""

    TemplateRemoveExtData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplateRemoveExtData(self: _Workbook) -> bool

Set: TemplateRemoveExtData(self: _Workbook) = value
"""

    Theme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Theme(self: _Workbook) -> OfficeTheme

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: _Workbook) -> str

Set: Title(self: _Workbook) = value
"""

    UpdateLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpdateLinks(self: _Workbook) -> XlUpdateLinks

Set: UpdateLinks(self: _Workbook) = value
"""

    UpdateRemoteReferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpdateRemoteReferences(self: _Workbook) -> bool

Set: UpdateRemoteReferences(self: _Workbook) = value
"""

    UserControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserControl(self: _Workbook) -> bool

Set: UserControl(self: _Workbook) = value
"""

    UserStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserStatus(self: _Workbook) -> object

"""

    UseWholeCellCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseWholeCellCriteria(self: _Workbook) -> bool

"""

    UseWildcards = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseWildcards(self: _Workbook) -> bool

"""

    VBASigned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBASigned(self: _Workbook) -> bool

"""

    VBProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBProject(self: _Workbook) -> VBProject

"""

    WebOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebOptions(self: _Workbook) -> WebOptions

"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: _Workbook) -> Windows

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: _Workbook) -> Sheets

"""

    WritePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WritePassword(self: _Workbook) -> str

Set: WritePassword(self: _Workbook) = value
"""

    WriteReserved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WriteReserved(self: _Workbook) -> bool

"""

    WriteReservedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WriteReservedBy(self: _Workbook) -> str

"""

    XmlMaps = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlMaps(self: _Workbook) -> XmlMaps

"""

    XmlNamespaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlNamespaces(self: _Workbook) -> XmlNamespaces

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: _Workbook) -> str

Set: _CodeName(self: _Workbook) = value
"""

    _ReadOnlyRecommended = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _ReadOnlyRecommended(self: _Workbook) -> bool

"""



class Workbook(_Workbook, WorkbookEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorkbookClass(__ComObject, _Workbook, Workbook, WorkbookEvents_Event):
    """ WorkbookClass() """
    def AcceptAllChanges(self, When, Who, Where):
        """ AcceptAllChanges(self: WorkbookClass, When: object, Who: object, Where: object) """
        pass

    def Activate(self):
        """ Activate(self: WorkbookClass) """
        pass

    def AddToFavorites(self):
        """ AddToFavorites(self: WorkbookClass) """
        pass

# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_AfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_ModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_NewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Open: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_RowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Sync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_WindowResize: sequence item 1: expected string, NoneType found

    def ApplyTheme(self, Filename):
        """ ApplyTheme(self: WorkbookClass, Filename: str) """
        pass

    def BreakLink(self, Name, Type):
        """ BreakLink(self: WorkbookClass, Name: str, Type: XlLinkType) """
        pass

    def CanCheckIn(self):
        """ CanCheckIn(self: WorkbookClass) -> bool """
        pass

    def ChangeFileAccess(self, Mode, WritePassword, Notify):
        """ ChangeFileAccess(self: WorkbookClass, Mode: XlFileAccess, WritePassword: object, Notify: object) """
        pass

    def ChangeLink(self, Name, NewName, Type):
        """ ChangeLink(self: WorkbookClass, Name: str, NewName: str, Type: XlLinkType) """
        pass

    def CheckIn(self, SaveChanges, Comments, MakePublic):
        """ CheckIn(self: WorkbookClass, SaveChanges: object, Comments: object, MakePublic: object) """
        pass

    def CheckInWithVersion(self, SaveChanges, Comments, MakePublic, VersionType):
        """ CheckInWithVersion(self: WorkbookClass, SaveChanges: object, Comments: object, MakePublic: object, VersionType: object) """
        pass

    def Close(self, SaveChanges, Filename, RouteWorkbook):
        """ Close(self: WorkbookClass, SaveChanges: object, Filename: object, RouteWorkbook: object) """
        pass

    def DeleteNumberFormat(self, NumberFormat):
        """ DeleteNumberFormat(self: WorkbookClass, NumberFormat: str) """
        pass

    def Dummy16(self):
        """ Dummy16(self: WorkbookClass) """
        pass

    def Dummy17(self, calcid):
        """ Dummy17(self: WorkbookClass, calcid: int) """
        pass

    def Dummy26(self):
        """ Dummy26(self: WorkbookClass) """
        pass

    def Dummy27(self):
        """ Dummy27(self: WorkbookClass) """
        pass

    def EnableConnections(self):
        """ EnableConnections(self: WorkbookClass) """
        pass

    def EndReview(self):
        """ EndReview(self: WorkbookClass) """
        pass

    def ExclusiveAccess(self):
        """ ExclusiveAccess(self: WorkbookClass) -> bool """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: WorkbookClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def FollowHyperlink(self, Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):
        """ FollowHyperlink(self: WorkbookClass, Address: str, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        pass

    def ForwardMailer(self):
        """ ForwardMailer(self: WorkbookClass) """
        pass

    def GetWorkflowTasks(self):
        """ GetWorkflowTasks(self: WorkbookClass) -> WorkflowTasks """
        pass

    def GetWorkflowTemplates(self):
        """ GetWorkflowTemplates(self: WorkbookClass) -> WorkflowTemplates """
        pass

    def HighlightChangesOptions(self, When, Who, Where):
        """ HighlightChangesOptions(self: WorkbookClass, When: object, Who: object, Where: object) """
        pass

    def LinkInfo(self, Name, LinkInfo, Type, EditionRef):
        """ LinkInfo(self: WorkbookClass, Name: str, LinkInfo: XlLinkInfo, Type: object, EditionRef: object) -> object """
        pass

    def LinkSources(self, Type):
        """ LinkSources(self: WorkbookClass, Type: object) -> object """
        pass

    def LockServerFile(self):
        """ LockServerFile(self: WorkbookClass) """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def MergeWorkbook(self, Filename):
        """ MergeWorkbook(self: WorkbookClass, Filename: object) """
        pass

    def NewWindow(self):
        """ NewWindow(self: WorkbookClass) -> Window """
        pass

    def OpenLinks(self, Name, ReadOnly, Type):
        """ OpenLinks(self: WorkbookClass, Name: str, ReadOnly: object, Type: object) """
        pass

    def PivotCaches(self):
        """ PivotCaches(self: WorkbookClass) -> PivotCaches """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: WorkbookClass, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        pass

    def Post(self, DestName):
        """ Post(self: WorkbookClass, DestName: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: WorkbookClass, EnableChanges: object) """
        pass

    def Protect(self, Password, Structure, Windows):
        """ Protect(self: WorkbookClass, Password: object, Structure: object, Windows: object) """
        pass

    def ProtectSharing(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword):
        """ ProtectSharing(self: WorkbookClass, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object) """
        pass

    def ProtectSharingEx(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword, FileFormat):
        """ ProtectSharingEx(self: WorkbookClass, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object, FileFormat: object) """
        pass

    def PurgeChangeHistoryNow(self, Days, SharingPassword):
        """ PurgeChangeHistoryNow(self: WorkbookClass, Days: int, SharingPassword: object) """
        pass

    def RecheckSmartTags(self):
        """ RecheckSmartTags(self: WorkbookClass) """
        pass

    def RefreshAll(self):
        """ RefreshAll(self: WorkbookClass) """
        pass

    def RejectAllChanges(self, When, Who, Where):
        """ RejectAllChanges(self: WorkbookClass, When: object, Who: object, Where: object) """
        pass

    def ReloadAs(self, Encoding):
        """ ReloadAs(self: WorkbookClass, Encoding: MsoEncoding) """
        pass

    def RemoveDocumentInformation(self, RemoveDocInfoType):
        """ RemoveDocumentInformation(self: WorkbookClass, RemoveDocInfoType: XlRemoveDocInfoType) """
        pass

    def RemoveUser(self, Index):
        """ RemoveUser(self: WorkbookClass, Index: int) """
        pass

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AddinInstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AddinUninstall: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_AfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_ModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_NewSheet: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Open: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_RowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Sync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_WindowResize: sequence item 1: expected string, NoneType found

    def Reply(self):
        """ Reply(self: WorkbookClass) """
        pass

    def ReplyAll(self):
        """ ReplyAll(self: WorkbookClass) """
        pass

    def ReplyWithChanges(self, ShowMessage):
        """ ReplyWithChanges(self: WorkbookClass, ShowMessage: object) """
        pass

    def ResetColors(self):
        """ ResetColors(self: WorkbookClass) """
        pass

    def Route(self):
        """ Route(self: WorkbookClass) """
        pass

    def RunAutoMacros(self, Which):
        """ RunAutoMacros(self: WorkbookClass, Which: XlRunAutoMacro) """
        pass

    def Save(self):
        """ Save(self: WorkbookClass) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: WorkbookClass, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def SaveAsXMLData(self, Filename, Map):
        """ SaveAsXMLData(self: WorkbookClass, Filename: str, Map: XmlMap) """
        pass

    def SaveCopyAs(self, Filename):
        """ SaveCopyAs(self: WorkbookClass, Filename: object) """
        pass

    def sblt(self, s):
        """ sblt(self: WorkbookClass, s: str) """
        pass

    def SendFaxOverInternet(self, Recipients, Subject, ShowMessage):
        """ SendFaxOverInternet(self: WorkbookClass, Recipients: object, Subject: object, ShowMessage: object) """
        pass

    def SendForReview(self, Recipients, Subject, ShowMessage, IncludeAttachment):
        """ SendForReview(self: WorkbookClass, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) """
        pass

    def SendMail(self, Recipients, Subject, ReturnReceipt):
        """ SendMail(self: WorkbookClass, Recipients: object, Subject: object, ReturnReceipt: object) """
        pass

    def SendMailer(self, FileFormat, Priority):
        """ SendMailer(self: WorkbookClass, FileFormat: object, Priority: XlPriority) """
        pass

    def SetLinkOnData(self, Name, Procedure):
        """ SetLinkOnData(self: WorkbookClass, Name: str, Procedure: object) """
        pass

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties):
        """ SetPasswordEncryptionOptions(self: WorkbookClass, PasswordEncryptionProvider: object, PasswordEncryptionAlgorithm: object, PasswordEncryptionKeyLength: object, PasswordEncryptionFileProperties: object) """
        pass

    def ToggleFormsDesign(self):
        """ ToggleFormsDesign(self: WorkbookClass) """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: WorkbookClass, Password: object) """
        pass

    def UnprotectSharing(self, SharingPassword):
        """ UnprotectSharing(self: WorkbookClass, SharingPassword: object) """
        pass

    def UpdateFromFile(self):
        """ UpdateFromFile(self: WorkbookClass) """
        pass

    def UpdateLink(self, Name, Type):
        """ UpdateLink(self: WorkbookClass, Name: object, Type: object) """
        pass

    def WebPagePreview(self):
        """ WebPagePreview(self: WorkbookClass) """
        pass

    def XmlImport(self, Url, ImportMap, Overwrite, Destination):
        """ XmlImport(self: WorkbookClass, Url: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        pass

    def XmlImportXml(self, Data, ImportMap, Overwrite, Destination):
        """ XmlImportXml(self: WorkbookClass, Data: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, Structure, Windows):
        """ _Protect(self: WorkbookClass, Password: object, Structure: object, Windows: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: WorkbookClass, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AcceptLabelsInFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AcceptLabelsInFormulas(self: WorkbookClass) -> bool

Set: AcceptLabelsInFormulas(self: WorkbookClass) = value
"""

    AccuracyVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AccuracyVersion(self: WorkbookClass) -> int

Set: AccuracyVersion(self: WorkbookClass) = value
"""

    ActiveChart = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveChart(self: WorkbookClass) -> Chart

"""

    ActiveSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSheet(self: WorkbookClass) -> object

"""

    ActiveSlicer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ActiveSlicer(self: WorkbookClass) -> Slicer

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorkbookClass) -> Application

"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: WorkbookClass) -> str

Set: Author(self: WorkbookClass) = value
"""

    AutoUpdateFrequency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdateFrequency(self: WorkbookClass) -> int

Set: AutoUpdateFrequency(self: WorkbookClass) = value
"""

    AutoUpdateSaveChanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdateSaveChanges(self: WorkbookClass) -> bool

Set: AutoUpdateSaveChanges(self: WorkbookClass) = value
"""

    BuiltinDocumentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BuiltinDocumentProperties(self: WorkbookClass) -> object

"""

    CalculationVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CalculationVersion(self: WorkbookClass) -> int

"""

    CaseSensitive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CaseSensitive(self: WorkbookClass) -> bool

"""

    ChangeHistoryDuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChangeHistoryDuration(self: WorkbookClass) -> int

Set: ChangeHistoryDuration(self: WorkbookClass) = value
"""

    ChartDataPointTrack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChartDataPointTrack(self: WorkbookClass) -> bool

Set: ChartDataPointTrack(self: WorkbookClass) = value
"""

    Charts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Charts(self: WorkbookClass) -> Sheets

"""

    CheckCompatibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CheckCompatibility(self: WorkbookClass) -> bool

Set: CheckCompatibility(self: WorkbookClass) = value
"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: WorkbookClass) -> str

"""

    CommandBars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandBars(self: WorkbookClass) -> CommandBars

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: WorkbookClass) -> str

Set: Comments(self: WorkbookClass) = value
"""

    ConflictResolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConflictResolution(self: WorkbookClass) -> XlSaveConflictResolution

Set: ConflictResolution(self: WorkbookClass) = value
"""

    Connections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connections(self: WorkbookClass) -> Connections

"""

    ConnectionsDisabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConnectionsDisabled(self: WorkbookClass) -> bool

"""

    Container = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Container(self: WorkbookClass) -> object

"""

    ContentTypeProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentTypeProperties(self: WorkbookClass) -> MetaProperties

"""

    CreateBackup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreateBackup(self: WorkbookClass) -> bool

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorkbookClass) -> XlCreator

"""

    CustomDocumentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomDocumentProperties(self: WorkbookClass) -> object

"""

    CustomViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomViews(self: WorkbookClass) -> CustomViews

"""

    CustomXMLParts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomXMLParts(self: WorkbookClass) -> CustomXMLParts

"""

    Date1904 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Date1904(self: WorkbookClass) -> bool

Set: Date1904(self: WorkbookClass) = value
"""

    DefaultPivotTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultPivotTableStyle(self: WorkbookClass) -> object

Set: DefaultPivotTableStyle(self: WorkbookClass) = value
"""

    DefaultSlicerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultSlicerStyle(self: WorkbookClass) -> object

Set: DefaultSlicerStyle(self: WorkbookClass) = value
"""

    DefaultTableStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultTableStyle(self: WorkbookClass) -> object

Set: DefaultTableStyle(self: WorkbookClass) = value
"""

    DefaultTimelineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DefaultTimelineStyle(self: WorkbookClass) -> object

Set: DefaultTimelineStyle(self: WorkbookClass) = value
"""

    DialogSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DialogSheets(self: WorkbookClass) -> Sheets

"""

    DisplayDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayDrawingObjects(self: WorkbookClass) -> XlDisplayDrawingObjects

Set: DisplayDrawingObjects(self: WorkbookClass) = value
"""

    DisplayInkComments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayInkComments(self: WorkbookClass) -> bool

Set: DisplayInkComments(self: WorkbookClass) = value
"""

    DocumentInspectors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DocumentInspectors(self: WorkbookClass) -> DocumentInspectors

"""

    DocumentLibraryVersions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DocumentLibraryVersions(self: WorkbookClass) -> DocumentLibraryVersions

"""

    DoNotPromptForConvert = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoNotPromptForConvert(self: WorkbookClass) -> bool

Set: DoNotPromptForConvert(self: WorkbookClass) = value
"""

    EnableAutoRecover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoRecover(self: WorkbookClass) -> bool

Set: EnableAutoRecover(self: WorkbookClass) = value
"""

    EncryptionProvider = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EncryptionProvider(self: WorkbookClass) -> str

Set: EncryptionProvider(self: WorkbookClass) = value
"""

    EnvelopeVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnvelopeVisible(self: WorkbookClass) -> bool

Set: EnvelopeVisible(self: WorkbookClass) = value
"""

    Excel4IntlMacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4IntlMacroSheets(self: WorkbookClass) -> Sheets

"""

    Excel4MacroSheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel4MacroSheets(self: WorkbookClass) -> Sheets

"""

    Excel8CompatibilityMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Excel8CompatibilityMode(self: WorkbookClass) -> bool

"""

    FileFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FileFormat(self: WorkbookClass) -> XlFileFormat

"""

    Final = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Final(self: WorkbookClass) -> bool

Set: Final(self: WorkbookClass) = value
"""

    ForceFullCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceFullCalculation(self: WorkbookClass) -> bool

Set: ForceFullCalculation(self: WorkbookClass) = value
"""

    FullName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullName(self: WorkbookClass) -> str

"""

    FullNameURLEncoded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FullNameURLEncoded(self: WorkbookClass) -> str

"""

    HasMailer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasMailer(self: WorkbookClass) -> bool

Set: HasMailer(self: WorkbookClass) = value
"""

    HasPassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasPassword(self: WorkbookClass) -> bool

"""

    HasRoutingSlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasRoutingSlip(self: WorkbookClass) -> bool

Set: HasRoutingSlip(self: WorkbookClass) = value
"""

    HasVBProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasVBProject(self: WorkbookClass) -> bool

"""

    HighlightChangesOnScreen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HighlightChangesOnScreen(self: WorkbookClass) -> bool

Set: HighlightChangesOnScreen(self: WorkbookClass) = value
"""

    HTMLProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HTMLProject(self: WorkbookClass) -> HTMLProject

"""

    IconSets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IconSets(self: WorkbookClass) -> IconSets

"""

    InactiveListBorderVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InactiveListBorderVisible(self: WorkbookClass) -> bool

Set: InactiveListBorderVisible(self: WorkbookClass) = value
"""

    IsAddin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsAddin(self: WorkbookClass) -> bool

Set: IsAddin(self: WorkbookClass) = value
"""

    IsInplace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsInplace(self: WorkbookClass) -> bool

"""

    KeepChangeHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KeepChangeHistory(self: WorkbookClass) -> bool

Set: KeepChangeHistory(self: WorkbookClass) = value
"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: WorkbookClass) -> str

Set: Keywords(self: WorkbookClass) = value
"""

    ListChangesOnNewSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListChangesOnNewSheet(self: WorkbookClass) -> bool

Set: ListChangesOnNewSheet(self: WorkbookClass) = value
"""

    Mailer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Mailer(self: WorkbookClass) -> Mailer

"""

    Model = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Model(self: WorkbookClass) -> Model

"""

    Modules = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Modules(self: WorkbookClass) -> Sheets

"""

    MultiUserEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MultiUserEditing(self: WorkbookClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: WorkbookClass) -> str

"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: WorkbookClass) -> Names

"""

    OnSave = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSave(self: WorkbookClass) -> str

Set: OnSave(self: WorkbookClass) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: WorkbookClass) -> str

Set: OnSheetActivate(self: WorkbookClass) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: WorkbookClass) -> str

Set: OnSheetDeactivate(self: WorkbookClass) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorkbookClass) -> object

"""

    Password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Password(self: WorkbookClass) -> str

Set: Password(self: WorkbookClass) = value
"""

    PasswordEncryptionAlgorithm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionAlgorithm(self: WorkbookClass) -> str

"""

    PasswordEncryptionFileProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionFileProperties(self: WorkbookClass) -> bool

"""

    PasswordEncryptionKeyLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionKeyLength(self: WorkbookClass) -> int

"""

    PasswordEncryptionProvider = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PasswordEncryptionProvider(self: WorkbookClass) -> str

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: WorkbookClass) -> str

"""

    Permission = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Permission(self: WorkbookClass) -> Permission

"""

    PersonalViewListSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PersonalViewListSettings(self: WorkbookClass) -> bool

Set: PersonalViewListSettings(self: WorkbookClass) = value
"""

    PersonalViewPrintSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PersonalViewPrintSettings(self: WorkbookClass) -> bool

Set: PersonalViewPrintSettings(self: WorkbookClass) = value
"""

    PivotTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PivotTables(self: WorkbookClass) -> object

"""

    PrecisionAsDisplayed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrecisionAsDisplayed(self: WorkbookClass) -> bool

Set: PrecisionAsDisplayed(self: WorkbookClass) = value
"""

    ProtectStructure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectStructure(self: WorkbookClass) -> bool

"""

    ProtectWindows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectWindows(self: WorkbookClass) -> bool

"""

    PublishObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PublishObjects(self: WorkbookClass) -> PublishObjects

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: WorkbookClass) -> bool

"""

    ReadOnlyRecommended = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnlyRecommended(self: WorkbookClass) -> bool

Set: ReadOnlyRecommended(self: WorkbookClass) = value
"""

    RemovePersonalInformation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RemovePersonalInformation(self: WorkbookClass) -> bool

Set: RemovePersonalInformation(self: WorkbookClass) = value
"""

    Research = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Research(self: WorkbookClass) -> Research

"""

    RevisionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevisionNumber(self: WorkbookClass) -> int

"""

    Routed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Routed(self: WorkbookClass) -> bool

"""

    RoutingSlip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoutingSlip(self: WorkbookClass) -> RoutingSlip

"""

    Saved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Saved(self: WorkbookClass) -> bool

Set: Saved(self: WorkbookClass) = value
"""

    SaveLinkValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveLinkValues(self: WorkbookClass) -> bool

Set: SaveLinkValues(self: WorkbookClass) = value
"""

    ServerPolicy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerPolicy(self: WorkbookClass) -> ServerPolicy

"""

    ServerViewableItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ServerViewableItems(self: WorkbookClass) -> ServerViewableItems

"""

    SharedWorkspace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SharedWorkspace(self: WorkbookClass) -> SharedWorkspace

"""

    Sheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheets(self: WorkbookClass) -> Sheets

"""

    ShowConflictHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowConflictHistory(self: WorkbookClass) -> bool

Set: ShowConflictHistory(self: WorkbookClass) = value
"""

    ShowPivotChartActiveFields = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPivotChartActiveFields(self: WorkbookClass) -> bool

Set: ShowPivotChartActiveFields(self: WorkbookClass) = value
"""

    ShowPivotTableFieldList = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPivotTableFieldList(self: WorkbookClass) -> bool

Set: ShowPivotTableFieldList(self: WorkbookClass) = value
"""

    Signatures = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Signatures(self: WorkbookClass) -> SignatureSet

"""

    SlicerCaches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SlicerCaches(self: WorkbookClass) -> SlicerCaches

"""

    SmartDocument = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartDocument(self: WorkbookClass) -> SmartDocument

"""

    SmartTagOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTagOptions(self: WorkbookClass) -> SmartTagOptions

"""

    Styles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Styles(self: WorkbookClass) -> Styles

"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: WorkbookClass) -> str

Set: Subject(self: WorkbookClass) = value
"""

    Sync = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sync(self: WorkbookClass) -> Sync

"""

    TableStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyles(self: WorkbookClass) -> TableStyles

"""

    TemplateRemoveExtData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplateRemoveExtData(self: WorkbookClass) -> bool

Set: TemplateRemoveExtData(self: WorkbookClass) = value
"""

    Theme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Theme(self: WorkbookClass) -> OfficeTheme

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: WorkbookClass) -> str

Set: Title(self: WorkbookClass) = value
"""

    UpdateLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpdateLinks(self: WorkbookClass) -> XlUpdateLinks

Set: UpdateLinks(self: WorkbookClass) = value
"""

    UpdateRemoteReferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpdateRemoteReferences(self: WorkbookClass) -> bool

Set: UpdateRemoteReferences(self: WorkbookClass) = value
"""

    UserControl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserControl(self: WorkbookClass) -> bool

Set: UserControl(self: WorkbookClass) = value
"""

    UserStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserStatus(self: WorkbookClass) -> object

"""

    UseWholeCellCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseWholeCellCriteria(self: WorkbookClass) -> bool

"""

    UseWildcards = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseWildcards(self: WorkbookClass) -> bool

"""

    VBASigned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBASigned(self: WorkbookClass) -> bool

"""

    VBProject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VBProject(self: WorkbookClass) -> VBProject

"""

    WebOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebOptions(self: WorkbookClass) -> WebOptions

"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Windows(self: WorkbookClass) -> Windows

"""

    Worksheets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Worksheets(self: WorkbookClass) -> Sheets

"""

    WritePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WritePassword(self: WorkbookClass) -> str

Set: WritePassword(self: WorkbookClass) = value
"""

    WriteReserved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WriteReserved(self: WorkbookClass) -> bool

"""

    WriteReservedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WriteReservedBy(self: WorkbookClass) -> str

"""

    XmlMaps = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlMaps(self: WorkbookClass) -> XmlMaps

"""

    XmlNamespaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XmlNamespaces(self: WorkbookClass) -> XmlNamespaces

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: WorkbookClass) -> str

Set: _CodeName(self: WorkbookClass) = value
"""

    _ReadOnlyRecommended = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _ReadOnlyRecommended(self: WorkbookClass) -> bool

"""


    AddinInstall = None
    AddinUninstall = None
    AfterSave = None
    AfterXmlExport = None
    AfterXmlImport = None
    BeforeClose = None
    BeforePrint = None
    BeforeSave = None
    BeforeXmlExport = None
    BeforeXmlImport = None
    Deactivate = None
    ModelChange = None
    NewChart = None
    NewSheet = None
    Open = None
    PivotTableCloseConnection = None
    PivotTableOpenConnection = None
    RowsetComplete = None
    SheetActivate = None
    SheetBeforeDelete = None
    SheetBeforeDoubleClick = None
    SheetBeforeRightClick = None
    SheetCalculate = None
    SheetChange = None
    SheetDeactivate = None
    SheetFollowHyperlink = None
    SheetLensGalleryRenderComplete = None
    SheetPivotTableAfterValueChange = None
    SheetPivotTableBeforeAllocateChanges = None
    SheetPivotTableBeforeCommitChanges = None
    SheetPivotTableBeforeDiscardChanges = None
    SheetPivotTableChangeSync = None
    SheetPivotTableUpdate = None
    SheetSelectionChange = None
    SheetTableUpdate = None
    WindowActivate = None
    WindowDeactivate = None
    WindowResize = None
    WorkbookEvents_Event_Activate = None
    WorkbookEvents_Event_Sync = None


class WorkbookConnection:
    # no doc
    def Delete(self):
        """ Delete(self: WorkbookConnection) """
        pass

    def Refresh(self):
        """ Refresh(self: WorkbookConnection) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorkbookConnection) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorkbookConnection) -> XlCreator

"""

    DataFeedConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataFeedConnection(self: WorkbookConnection) -> DataFeedConnection

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: WorkbookConnection) -> str

Set: Description(self: WorkbookConnection) = value
"""

    InModel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InModel(self: WorkbookConnection) -> bool

"""

    ModelConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelConnection(self: WorkbookConnection) -> ModelConnection

"""

    ModelTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelTables(self: WorkbookConnection) -> ModelTables

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: WorkbookConnection) -> str

Set: Name(self: WorkbookConnection) = value
"""

    ODBCConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ODBCConnection(self: WorkbookConnection) -> ODBCConnection

"""

    OLEDBConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEDBConnection(self: WorkbookConnection) -> OLEDBConnection

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorkbookConnection) -> object

"""

    Ranges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Ranges(self: WorkbookConnection) -> Ranges

"""

    RefreshWithRefreshAll = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshWithRefreshAll(self: WorkbookConnection) -> bool

Set: RefreshWithRefreshAll(self: WorkbookConnection) = value
"""

    TextConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextConnection(self: WorkbookConnection) -> TextConnection

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: WorkbookConnection) -> XlConnectionType

"""

    WorksheetDataConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorksheetDataConnection(self: WorkbookConnection) -> WorksheetDataConnection

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: WorkbookConnection) -> str

Set: _Default(self: WorkbookConnection) = value
"""



class WorkbookEvents:
    # no doc
    def Activate(self):
        """ Activate(self: WorkbookEvents) """
        pass

    def AddinInstall(self):
        """ AddinInstall(self: WorkbookEvents) """
        pass

    def AddinUninstall(self):
        """ AddinUninstall(self: WorkbookEvents) """
        pass

    def AfterSave(self, Success):
        """ AfterSave(self: WorkbookEvents, Success: bool) """
        pass

    def AfterXmlExport(self, Map, Url, Result):
        """ AfterXmlExport(self: WorkbookEvents, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def AfterXmlImport(self, Map, IsRefresh, Result):
        """ AfterXmlImport(self: WorkbookEvents, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def BeforeClose(self, Cancel):
        """ BeforeClose(self: WorkbookEvents) -> bool """
        pass

    def BeforePrint(self, Cancel):
        """ BeforePrint(self: WorkbookEvents) -> bool """
        pass

    def BeforeSave(self, SaveAsUI, Cancel):
        """ BeforeSave(self: WorkbookEvents, SaveAsUI: bool) -> bool """
        pass

    def BeforeXmlExport(self, Map, Url, Cancel):
        """ BeforeXmlExport(self: WorkbookEvents, Map: XmlMap, Url: str) -> bool """
        pass

    def BeforeXmlImport(self, Map, Url, IsRefresh, Cancel):
        """ BeforeXmlImport(self: WorkbookEvents, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def Deactivate(self):
        """ Deactivate(self: WorkbookEvents) """
        pass

    def ModelChange(self, Changes):
        """ ModelChange(self: WorkbookEvents, Changes: ModelChanges) """
        pass

    def NewChart(self, Ch):
        """ NewChart(self: WorkbookEvents, Ch: Chart) """
        pass

    def NewSheet(self, Sh):
        """ NewSheet(self: WorkbookEvents, Sh: object) """
        pass

    def Open(self):
        """ Open(self: WorkbookEvents) """
        pass

    def PivotTableCloseConnection(self, Target):
        """ PivotTableCloseConnection(self: WorkbookEvents, Target: PivotTable) """
        pass

    def PivotTableOpenConnection(self, Target):
        """ PivotTableOpenConnection(self: WorkbookEvents, Target: PivotTable) """
        pass

    def RowsetComplete(self, Description, Sheet, Success):
        """ RowsetComplete(self: WorkbookEvents, Description: str, Sheet: str, Success: bool) """
        pass

    def SheetActivate(self, Sh):
        """ SheetActivate(self: WorkbookEvents, Sh: object) """
        pass

    def SheetBeforeDelete(self, Sh):
        """ SheetBeforeDelete(self: WorkbookEvents, Sh: object) """
        pass

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel):
        """ SheetBeforeDoubleClick(self: WorkbookEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetBeforeRightClick(self, Sh, Target, Cancel):
        """ SheetBeforeRightClick(self: WorkbookEvents, Sh: object, Target: Range) -> bool """
        pass

    def SheetCalculate(self, Sh):
        """ SheetCalculate(self: WorkbookEvents, Sh: object) """
        pass

    def SheetChange(self, Sh, Target):
        """ SheetChange(self: WorkbookEvents, Sh: object, Target: Range) """
        pass

    def SheetDeactivate(self, Sh):
        """ SheetDeactivate(self: WorkbookEvents, Sh: object) """
        pass

    def SheetFollowHyperlink(self, Sh, Target):
        """ SheetFollowHyperlink(self: WorkbookEvents, Sh: object, Target: Hyperlink) """
        pass

    def SheetLensGalleryRenderComplete(self, Sh):
        """ SheetLensGalleryRenderComplete(self: WorkbookEvents, Sh: object) """
        pass

    def SheetPivotTableAfterValueChange(self, Sh, TargetPivotTable, TargetRange):
        """ SheetPivotTableAfterValueChange(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeAllocateChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ SheetPivotTableBeforeCommitChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def SheetPivotTableBeforeDiscardChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ SheetPivotTableBeforeDiscardChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def SheetPivotTableChangeSync(self, Sh, Target):
        """ SheetPivotTableChangeSync(self: WorkbookEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetPivotTableUpdate(self, Sh, Target):
        """ SheetPivotTableUpdate(self: WorkbookEvents, Sh: object, Target: PivotTable) """
        pass

    def SheetSelectionChange(self, Sh, Target):
        """ SheetSelectionChange(self: WorkbookEvents, Sh: object, Target: Range) """
        pass

    def SheetTableUpdate(self, Sh, Target):
        """ SheetTableUpdate(self: WorkbookEvents, Sh: object, Target: TableObject) """
        pass

    def Sync(self, SyncEventType):
        """ Sync(self: WorkbookEvents, SyncEventType: MsoSyncEventType) """
        pass

    def WindowActivate(self, Wn):
        """ WindowActivate(self: WorkbookEvents, Wn: Window) """
        pass

    def WindowDeactivate(self, Wn):
        """ WindowDeactivate(self: WorkbookEvents, Wn: Window) """
        pass

    def WindowResize(self, Wn):
        """ WindowResize(self: WorkbookEvents, Wn: Window) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorkbookEvents_ActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_ActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: WorkbookEvents_ActivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_AddinInstallEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_AddinInstallEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: WorkbookEvents_AddinInstallEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_AddinUninstallEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_AddinUninstallEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: WorkbookEvents_AddinUninstallEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_AfterSaveEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_AfterSaveEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Success):
        """ Invoke(self: WorkbookEvents_AfterSaveEventHandler, Success: bool) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_AfterXmlExportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_AfterXmlExportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Map, Url, Result):
        """ Invoke(self: WorkbookEvents_AfterXmlExportEventHandler, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_AfterXmlImportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_AfterXmlImportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Map, IsRefresh, Result):
        """ Invoke(self: WorkbookEvents_AfterXmlImportEventHandler, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_BeforeCloseEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_BeforeCloseEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Cancel):
        """ Invoke(self: WorkbookEvents_BeforeCloseEventHandler) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_BeforePrintEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_BeforePrintEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Cancel):
        """ Invoke(self: WorkbookEvents_BeforePrintEventHandler) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_BeforeSaveEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_BeforeSaveEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, SaveAsUI, Cancel):
        """ Invoke(self: WorkbookEvents_BeforeSaveEventHandler, SaveAsUI: bool) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_BeforeXmlExportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_BeforeXmlExportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Map, Url, Cancel):
        """ Invoke(self: WorkbookEvents_BeforeXmlExportEventHandler, Map: XmlMap, Url: str) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_BeforeXmlImportEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_BeforeXmlImportEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Map, Url, IsRefresh, Cancel):
        """ Invoke(self: WorkbookEvents_BeforeXmlImportEventHandler, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_DeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: WorkbookEvents_DeactivateEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_ModelChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_ModelChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Changes):
        """ Invoke(self: WorkbookEvents_ModelChangeEventHandler, Changes: ModelChanges) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_NewChartEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_NewChartEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Ch):
        """ Invoke(self: WorkbookEvents_NewChartEventHandler, Ch: Chart) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_NewSheetEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_NewSheetEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_NewSheetEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_OpenEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_OpenEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self):
        """ Invoke(self: WorkbookEvents_OpenEventHandler) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_PivotTableCloseConnectionEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_PivotTableCloseConnectionEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: WorkbookEvents_PivotTableCloseConnectionEventHandler, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_PivotTableOpenConnectionEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_PivotTableOpenConnectionEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Target):
        """ Invoke(self: WorkbookEvents_PivotTableOpenConnectionEventHandler, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_RowsetCompleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_RowsetCompleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Description, Sheet, Success):
        """ Invoke(self: WorkbookEvents_RowsetCompleteEventHandler, Description: str, Sheet: str, Success: bool) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_SheetActivateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetBeforeDeleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetBeforeDeleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_SheetBeforeDeleteEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetBeforeDoubleClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target, Cancel):
        """ Invoke(self: WorkbookEvents_SheetBeforeDoubleClickEventHandler, Sh: object, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetBeforeRightClickEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetBeforeRightClickEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target, Cancel):
        """ Invoke(self: WorkbookEvents_SheetBeforeRightClickEventHandler, Sh: object, Target: Range) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetCalculateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetCalculateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_SheetCalculateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetChangeEventHandler, Sh: object, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_SheetDeactivateEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetFollowHyperlinkEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetFollowHyperlinkEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetFollowHyperlinkEventHandler, Sh: object, Target: Hyperlink) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh):
        """ Invoke(self: WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler, Sh: object) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, TargetRange):
        """ Invoke(self: WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel):
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd):
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableChangeSyncEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableChangeSyncEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetPivotTableChangeSyncEventHandler, Sh: object, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetPivotTableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetPivotTableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetPivotTableUpdateEventHandler, Sh: object, Target: PivotTable) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetSelectionChangeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetSelectionChangeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetSelectionChangeEventHandler, Sh: object, Target: Range) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SheetTableUpdateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SheetTableUpdateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Sh, Target):
        """ Invoke(self: WorkbookEvents_SheetTableUpdateEventHandler, Sh: object, Target: TableObject) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_SinkHelper(object, WorkbookEvents):
    # no doc
    def Activate(self):
        """ Activate(self: WorkbookEvents_SinkHelper) """
        pass

    def AddinInstall(self):
        """ AddinInstall(self: WorkbookEvents_SinkHelper) """
        pass

    def AddinUninstall(self):
        """ AddinUninstall(self: WorkbookEvents_SinkHelper) """
        pass

# Error generating skeleton for function AfterSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function AfterXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function AfterXmlImport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeClose: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforePrint: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeSave: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeXmlExport: sequence item 1: expected string, NoneType found

# Error generating skeleton for function BeforeXmlImport: sequence item 1: expected string, NoneType found

    def Deactivate(self):
        """ Deactivate(self: WorkbookEvents_SinkHelper) """
        pass

# Error generating skeleton for function ModelChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function NewChart: sequence item 1: expected string, NoneType found

# Error generating skeleton for function NewSheet: sequence item 1: expected string, NoneType found

    def Open(self):
        """ Open(self: WorkbookEvents_SinkHelper) """
        pass

# Error generating skeleton for function PivotTableCloseConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function PivotTableOpenConnection: sequence item 1: expected string, NoneType found

# Error generating skeleton for function RowsetComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetBeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetCalculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetFollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetLensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetPivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetSelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function SheetTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function Sync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowActivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowDeactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function WindowResize: sequence item 1: expected string, NoneType found

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    m_ActivateDelegate = None
    m_AddinInstallDelegate = None
    m_AddinUninstallDelegate = None
    m_AfterSaveDelegate = None
    m_AfterXmlExportDelegate = None
    m_AfterXmlImportDelegate = None
    m_BeforeCloseDelegate = None
    m_BeforePrintDelegate = None
    m_BeforeSaveDelegate = None
    m_BeforeXmlExportDelegate = None
    m_BeforeXmlImportDelegate = None
    m_DeactivateDelegate = None
    m_dwCookie = None
    m_ModelChangeDelegate = None
    m_NewChartDelegate = None
    m_NewSheetDelegate = None
    m_OpenDelegate = None
    m_PivotTableCloseConnectionDelegate = None
    m_PivotTableOpenConnectionDelegate = None
    m_RowsetCompleteDelegate = None
    m_SheetActivateDelegate = None
    m_SheetBeforeDeleteDelegate = None
    m_SheetBeforeDoubleClickDelegate = None
    m_SheetBeforeRightClickDelegate = None
    m_SheetCalculateDelegate = None
    m_SheetChangeDelegate = None
    m_SheetDeactivateDelegate = None
    m_SheetFollowHyperlinkDelegate = None
    m_SheetLensGalleryRenderCompleteDelegate = None
    m_SheetPivotTableAfterValueChangeDelegate = None
    m_SheetPivotTableBeforeAllocateChangesDelegate = None
    m_SheetPivotTableBeforeCommitChangesDelegate = None
    m_SheetPivotTableBeforeDiscardChangesDelegate = None
    m_SheetPivotTableChangeSyncDelegate = None
    m_SheetPivotTableUpdateDelegate = None
    m_SheetSelectionChangeDelegate = None
    m_SheetTableUpdateDelegate = None
    m_SyncDelegate = None
    m_WindowActivateDelegate = None
    m_WindowDeactivateDelegate = None
    m_WindowResizeDelegate = None


class WorkbookEvents_SyncEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_SyncEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, SyncEventType):
        """ Invoke(self: WorkbookEvents_SyncEventHandler, SyncEventType: MsoSyncEventType) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_WindowActivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_WindowActivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wn):
        """ Invoke(self: WorkbookEvents_WindowActivateEventHandler, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_WindowDeactivateEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wn):
        """ Invoke(self: WorkbookEvents_WindowDeactivateEventHandler, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class WorkbookEvents_WindowResizeEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ WorkbookEvents_WindowResizeEventHandler(: object, : UIntPtr) """
    def CombineImpl(self, *args): #cannot find CLR method
        """ CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """ DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """ GetMethodImpl(self: MulticastDelegate) -> MethodInfo """
        pass

    def Invoke(self, Wn):
        """ Invoke(self: WorkbookEvents_WindowResizeEventHandler, Wn: Window) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """ RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
# Error generating skeleton for function __new__: sequence item 1: expected string, NoneType found

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class Workbooks(IEnumerable):
    # no doc
    def Add(self, Template):
        """ Add(self: Workbooks, Template: object) -> Workbook """
        pass

    def CanCheckOut(self, Filename):
        """ CanCheckOut(self: Workbooks, Filename: str) -> bool """
        pass

    def CheckOut(self, Filename):
        """ CheckOut(self: Workbooks, Filename: str) """
        pass

    def Close(self):
        """ Close(self: Workbooks) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Workbooks) -> IEnumerator """
        pass

    def Open(self, Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, Local, CorruptLoad):
        """ Open(self: Workbooks, Filename: str, UpdateLinks: object, ReadOnly: object, Format: object, Password: object, WriteResPassword: object, IgnoreReadOnlyRecommended: object, Origin: object, Delimiter: object, Editable: object, Notify: object, Converter: object, AddToMru: object, Local: object, CorruptLoad: object) -> Workbook """
        pass

    def OpenDatabase(self, Filename, CommandText, CommandType, BackgroundQuery, ImportDataAs):
        """ OpenDatabase(self: Workbooks, Filename: str, CommandText: object, CommandType: object, BackgroundQuery: object, ImportDataAs: object) -> Workbook """
        pass

    def OpenText(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers, Local):
        """ OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object, Local: object) """
        pass

    def OpenXML(self, Filename, Stylesheets, LoadOption):
        """ OpenXML(self: Workbooks, Filename: str, Stylesheets: object, LoadOption: object) -> Workbook """
        pass

    def _Open(self, Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru):
        """ _Open(self: Workbooks, Filename: str, UpdateLinks: object, ReadOnly: object, Format: object, Password: object, WriteResPassword: object, IgnoreReadOnlyRecommended: object, Origin: object, Delimiter: object, Editable: object, Notify: object, Converter: object, AddToMru: object) -> Workbook """
        pass

    def _OpenText(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator):
        """ _OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object, DecimalSeparator: object, ThousandsSeparator: object) """
        pass

    def _OpenXML(self, Filename, Stylesheets):
        """ _OpenXML(self: Workbooks, Filename: str, Stylesheets: object) -> Workbook """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __OpenText(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout):
        """ __OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Workbooks) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Workbooks) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Workbooks) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Workbooks) -> object

"""



class _Worksheet:
    # no doc
    def Activate(self):
        """ Activate(self: _Worksheet) """
        pass

    def Arcs(self, Index):
        """ Arcs(self: _Worksheet, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: _Worksheet, Index: object) -> object """
        pass

    def Calculate(self):
        """ Calculate(self: _Worksheet) """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: _Worksheet, Index: object) -> object """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: _Worksheet, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: _Worksheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def CircleInvalid(self):
        """ CircleInvalid(self: _Worksheet) """
        pass

    def ClearArrows(self):
        """ ClearArrows(self: _Worksheet) """
        pass

    def ClearCircles(self):
        """ ClearCircles(self: _Worksheet) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: _Worksheet, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: _Worksheet) """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: _Worksheet, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: _Worksheet, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: _Worksheet, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: _Worksheet, Name: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: _Worksheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: _Worksheet, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: _Worksheet, Index: object) -> object """
        pass

    def Labels(self, Index):
        """ Labels(self: _Worksheet, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: _Worksheet, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: _Worksheet, Index: object) -> object """
        pass

    def Move(self, Before, After):
        """ Move(self: _Worksheet, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: _Worksheet, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: _Worksheet, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: _Worksheet, Index: object) -> object """
        pass

    def Paste(self, Destination, Link):
        """ Paste(self: _Worksheet, Destination: object, Link: object) """
        pass

    def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting):
        """ PasteSpecial(self: _Worksheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: _Worksheet, Index: object) -> object """
        pass

    def PivotTables(self, Index):
        """ PivotTables(self: _Worksheet, Index: object) -> object """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: _Worksheet, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) -> PivotTable """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: _Worksheet, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables):
        """ Protect(self: _Worksheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: _Worksheet, Index: object) -> object """
        pass

    def ResetAllPageBreaks(self):
        """ ResetAllPageBreaks(self: _Worksheet) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: _Worksheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def Scenarios(self, Index):
        """ Scenarios(self: _Worksheet, Index: object) -> object """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: _Worksheet, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: _Worksheet, Replace: object) """
        pass

    def SetBackgroundPicture(self, Filename):
        """ SetBackgroundPicture(self: _Worksheet, Filename: str) """
        pass

    def ShowAllData(self):
        """ ShowAllData(self: _Worksheet) """
        pass

    def ShowDataForm(self):
        """ ShowDataForm(self: _Worksheet) """
        pass

    def Spinners(self, Index):
        """ Spinners(self: _Worksheet, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: _Worksheet, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: _Worksheet, Password: object) """
        pass

    def XmlDataQuery(self, XPath, SelectionNamespaces, Map):
        """ XmlDataQuery(self: _Worksheet, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        pass

    def XmlMapQuery(self, XPath, SelectionNamespaces, Map):
        """ XmlMapQuery(self: _Worksheet, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        pass

    def _CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript):
        """ _CheckSpelling(self: _Worksheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: _Worksheet, Name: object) -> object """
        pass

    def _PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel):
        """ _PasteSpecial(self: _Worksheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: _Worksheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: _Worksheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _Worksheet) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: _Worksheet) -> AutoFilter

"""

    AutoFilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilterMode(self: _Worksheet) -> bool

Set: AutoFilterMode(self: _Worksheet) = value
"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: _Worksheet) -> Range

"""

    CircularReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CircularReference(self: _Worksheet) -> Range

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: _Worksheet) -> str

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: _Worksheet) -> Range

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: _Worksheet) -> Comments

"""

    ConsolidationFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationFunction(self: _Worksheet) -> XlConsolidationFunction

"""

    ConsolidationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationOptions(self: _Worksheet) -> object

"""

    ConsolidationSources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationSources(self: _Worksheet) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _Worksheet) -> XlCreator

"""

    CustomProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomProperties(self: _Worksheet) -> CustomProperties

"""

    DisplayAutomaticPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutomaticPageBreaks(self: _Worksheet) -> bool

Set: DisplayAutomaticPageBreaks(self: _Worksheet) = value
"""

    DisplayPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPageBreaks(self: _Worksheet) -> bool

Set: DisplayPageBreaks(self: _Worksheet) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: _Worksheet) -> bool

Set: DisplayRightToLeft(self: _Worksheet) = value
"""

    EnableAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoFilter(self: _Worksheet) -> bool

Set: EnableAutoFilter(self: _Worksheet) = value
"""

    EnableCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCalculation(self: _Worksheet) -> bool

Set: EnableCalculation(self: _Worksheet) = value
"""

    EnableFormatConditionsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFormatConditionsCalculation(self: _Worksheet) -> bool

Set: EnableFormatConditionsCalculation(self: _Worksheet) = value
"""

    EnableOutlining = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableOutlining(self: _Worksheet) -> bool

Set: EnableOutlining(self: _Worksheet) = value
"""

    EnablePivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnablePivotTable(self: _Worksheet) -> bool

Set: EnablePivotTable(self: _Worksheet) = value
"""

    EnableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSelection(self: _Worksheet) -> XlEnableSelection

Set: EnableSelection(self: _Worksheet) = value
"""

    FilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterMode(self: _Worksheet) -> bool

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: _Worksheet) -> HPageBreaks

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: _Worksheet) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: _Worksheet) -> int

"""

    ListObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObjects(self: _Worksheet) -> ListObjects

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: _Worksheet) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _Worksheet) -> str

Set: Name(self: _Worksheet) = value
"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: _Worksheet) -> Names

"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: _Worksheet) -> object

"""

    OnCalculate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnCalculate(self: _Worksheet) -> str

Set: OnCalculate(self: _Worksheet) = value
"""

    OnData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnData(self: _Worksheet) -> str

Set: OnData(self: _Worksheet) = value
"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: _Worksheet) -> str

Set: OnDoubleClick(self: _Worksheet) = value
"""

    OnEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnEntry(self: _Worksheet) -> str

Set: OnEntry(self: _Worksheet) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: _Worksheet) -> str

Set: OnSheetActivate(self: _Worksheet) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: _Worksheet) -> str

Set: OnSheetDeactivate(self: _Worksheet) = value
"""

    Outline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Outline(self: _Worksheet) -> Outline

"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: _Worksheet) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _Worksheet) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: _Worksheet) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: _Worksheet) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: _Worksheet) -> bool

"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: _Worksheet) -> bool

"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: _Worksheet) -> Protection

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: _Worksheet) -> bool

"""

    ProtectScenarios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectScenarios(self: _Worksheet) -> bool

"""

    QueryTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTables(self: _Worksheet) -> QueryTables

"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: _Worksheet) -> Range

"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: _Worksheet) -> Scripts

"""

    ScrollArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollArea(self: _Worksheet) -> str

Set: ScrollArea(self: _Worksheet) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: _Worksheet) -> Shapes

"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: _Worksheet) -> SmartTags

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: _Worksheet) -> Sort

"""

    StandardHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardHeight(self: _Worksheet) -> float

"""

    StandardWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardWidth(self: _Worksheet) -> float

Set: StandardWidth(self: _Worksheet) = value
"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: _Worksheet) -> Tab

"""

    TransitionExpEval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionExpEval(self: _Worksheet) -> bool

Set: TransitionExpEval(self: _Worksheet) = value
"""

    TransitionFormEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionFormEntry(self: _Worksheet) -> bool

Set: TransitionFormEntry(self: _Worksheet) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: _Worksheet) -> XlSheetType

"""

    UsedRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsedRange(self: _Worksheet) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: _Worksheet) -> XlSheetVisibility

Set: Visible(self: _Worksheet) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: _Worksheet) -> VPageBreaks

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: _Worksheet) -> str

Set: _CodeName(self: _Worksheet) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: _Worksheet) -> int

Set: _DisplayRightToLeft(self: _Worksheet) = value
"""



class Worksheet(_Worksheet, DocEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorksheetClass(__ComObject, _Worksheet, Worksheet, DocEvents_Event):
    """ WorksheetClass() """
    def Activate(self):
        """ Activate(self: WorksheetClass) """
        pass

# Error generating skeleton for function add_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Change: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_FollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_LensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_PivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_SelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function add_TableUpdate: sequence item 1: expected string, NoneType found

    def Arcs(self, Index):
        """ Arcs(self: WorksheetClass, Index: object) -> object """
        pass

    def Buttons(self, Index):
        """ Buttons(self: WorksheetClass, Index: object) -> object """
        pass

    def Calculate(self):
        """ Calculate(self: WorksheetClass) """
        pass

    def ChartObjects(self, Index):
        """ ChartObjects(self: WorksheetClass, Index: object) -> object """
        pass

    def CheckBoxes(self, Index):
        """ CheckBoxes(self: WorksheetClass, Index: object) -> object """
        pass

    def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):
        """ CheckSpelling(self: WorksheetClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        pass

    def CircleInvalid(self):
        """ CircleInvalid(self: WorksheetClass) """
        pass

    def ClearArrows(self):
        """ ClearArrows(self: WorksheetClass) """
        pass

    def ClearCircles(self):
        """ ClearCircles(self: WorksheetClass) """
        pass

    def Copy(self, Before, After):
        """ Copy(self: WorksheetClass, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: WorksheetClass) """
        pass

    def DrawingObjects(self, Index):
        """ DrawingObjects(self: WorksheetClass, Index: object) -> object """
        pass

    def Drawings(self, Index):
        """ Drawings(self: WorksheetClass, Index: object) -> object """
        pass

    def DropDowns(self, Index):
        """ DropDowns(self: WorksheetClass, Index: object) -> object """
        pass

    def Evaluate(self, Name):
        """ Evaluate(self: WorksheetClass, Name: object) -> object """
        pass

    def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):
        """ ExportAsFixedFormat(self: WorksheetClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        pass

    def GroupBoxes(self, Index):
        """ GroupBoxes(self: WorksheetClass, Index: object) -> object """
        pass

    def GroupObjects(self, Index):
        """ GroupObjects(self: WorksheetClass, Index: object) -> object """
        pass

    def Labels(self, Index):
        """ Labels(self: WorksheetClass, Index: object) -> object """
        pass

    def Lines(self, Index):
        """ Lines(self: WorksheetClass, Index: object) -> object """
        pass

    def ListBoxes(self, Index):
        """ ListBoxes(self: WorksheetClass, Index: object) -> object """
        pass

    def MemberwiseClone(self, *args): #cannot find CLR method
        """
        MemberwiseClone(self: MarshalByRefObject, cloneIdentity: bool) -> MarshalByRefObject
        MemberwiseClone(self: object) -> object
        """
        pass

    def Move(self, Before, After):
        """ Move(self: WorksheetClass, Before: object, After: object) """
        pass

    def OLEObjects(self, Index):
        """ OLEObjects(self: WorksheetClass, Index: object) -> object """
        pass

    def OptionButtons(self, Index):
        """ OptionButtons(self: WorksheetClass, Index: object) -> object """
        pass

    def Ovals(self, Index):
        """ Ovals(self: WorksheetClass, Index: object) -> object """
        pass

    def Paste(self, Destination, Link):
        """ Paste(self: WorksheetClass, Destination: object, Link: object) """
        pass

    def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting):
        """ PasteSpecial(self: WorksheetClass, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        pass

    def Pictures(self, Index):
        """ Pictures(self: WorksheetClass, Index: object) -> object """
        pass

    def PivotTables(self, Index):
        """ PivotTables(self: WorksheetClass, Index: object) -> object """
        pass

    def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):
        """ PivotTableWizard(self: WorksheetClass, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) -> PivotTable """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: WorksheetClass, EnableChanges: object) """
        pass

    def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables):
        """ Protect(self: WorksheetClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        pass

    def Rectangles(self, Index):
        """ Rectangles(self: WorksheetClass, Index: object) -> object """
        pass

# Error generating skeleton for function remove_Activate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDelete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeDoubleClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_BeforeRightClick: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Calculate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Change: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_Deactivate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_FollowHyperlink: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_LensGalleryRenderComplete: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableAfterValueChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeAllocateChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeCommitChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableBeforeDiscardChanges: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableChangeSync: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_PivotTableUpdate: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_SelectionChange: sequence item 1: expected string, NoneType found

# Error generating skeleton for function remove_TableUpdate: sequence item 1: expected string, NoneType found

    def ResetAllPageBreaks(self):
        """ ResetAllPageBreaks(self: WorksheetClass) """
        pass

    def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):
        """ SaveAs(self: WorksheetClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        pass

    def Scenarios(self, Index):
        """ Scenarios(self: WorksheetClass, Index: object) -> object """
        pass

    def ScrollBars(self, Index):
        """ ScrollBars(self: WorksheetClass, Index: object) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: WorksheetClass, Replace: object) """
        pass

    def SetBackgroundPicture(self, Filename):
        """ SetBackgroundPicture(self: WorksheetClass, Filename: str) """
        pass

    def ShowAllData(self):
        """ ShowAllData(self: WorksheetClass) """
        pass

    def ShowDataForm(self):
        """ ShowDataForm(self: WorksheetClass) """
        pass

    def Spinners(self, Index):
        """ Spinners(self: WorksheetClass, Index: object) -> object """
        pass

    def TextBoxes(self, Index):
        """ TextBoxes(self: WorksheetClass, Index: object) -> object """
        pass

    def Unprotect(self, Password):
        """ Unprotect(self: WorksheetClass, Password: object) """
        pass

    def XmlDataQuery(self, XPath, SelectionNamespaces, Map):
        """ XmlDataQuery(self: WorksheetClass, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        pass

    def XmlMapQuery(self, XPath, SelectionNamespaces, Map):
        """ XmlMapQuery(self: WorksheetClass, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        pass

    def _CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript):
        """ _CheckSpelling(self: WorksheetClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        pass

    def _Evaluate(self, Name):
        """ _Evaluate(self: WorksheetClass, Name: object) -> object """
        pass

    def _PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel):
        """ _PasteSpecial(self: WorksheetClass, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
        """ _Protect(self: WorksheetClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        pass

    def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):
        """ _SaveAs(self: WorksheetClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorksheetClass) -> Application

"""

    AutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilter(self: WorksheetClass) -> AutoFilter

"""

    AutoFilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoFilterMode(self: WorksheetClass) -> bool

Set: AutoFilterMode(self: WorksheetClass) = value
"""

    Cells = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Cells(self: WorksheetClass) -> Range

"""

    CircularReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CircularReference(self: WorksheetClass) -> Range

"""

    CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CodeName(self: WorksheetClass) -> str

"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: WorksheetClass) -> Range

"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: WorksheetClass) -> Comments

"""

    ConsolidationFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationFunction(self: WorksheetClass) -> XlConsolidationFunction

"""

    ConsolidationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationOptions(self: WorksheetClass) -> object

"""

    ConsolidationSources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConsolidationSources(self: WorksheetClass) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorksheetClass) -> XlCreator

"""

    CustomProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomProperties(self: WorksheetClass) -> CustomProperties

"""

    DisplayAutomaticPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayAutomaticPageBreaks(self: WorksheetClass) -> bool

Set: DisplayAutomaticPageBreaks(self: WorksheetClass) = value
"""

    DisplayPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayPageBreaks(self: WorksheetClass) -> bool

Set: DisplayPageBreaks(self: WorksheetClass) = value
"""

    DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayRightToLeft(self: WorksheetClass) -> bool

Set: DisplayRightToLeft(self: WorksheetClass) = value
"""

    EnableAutoFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableAutoFilter(self: WorksheetClass) -> bool

Set: EnableAutoFilter(self: WorksheetClass) = value
"""

    EnableCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableCalculation(self: WorksheetClass) -> bool

Set: EnableCalculation(self: WorksheetClass) = value
"""

    EnableFormatConditionsCalculation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFormatConditionsCalculation(self: WorksheetClass) -> bool

Set: EnableFormatConditionsCalculation(self: WorksheetClass) = value
"""

    EnableOutlining = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableOutlining(self: WorksheetClass) -> bool

Set: EnableOutlining(self: WorksheetClass) = value
"""

    EnablePivotTable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnablePivotTable(self: WorksheetClass) -> bool

Set: EnablePivotTable(self: WorksheetClass) = value
"""

    EnableSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableSelection(self: WorksheetClass) -> XlEnableSelection

Set: EnableSelection(self: WorksheetClass) = value
"""

    FilterMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FilterMode(self: WorksheetClass) -> bool

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: WorksheetClass) -> HPageBreaks

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: WorksheetClass) -> Hyperlinks

"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: WorksheetClass) -> int

"""

    ListObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObjects(self: WorksheetClass) -> ListObjects

"""

    MailEnvelope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MailEnvelope(self: WorksheetClass) -> MsoEnvelope

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: WorksheetClass) -> str

Set: Name(self: WorksheetClass) = value
"""

    Names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Names(self: WorksheetClass) -> Names

"""

    Next = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Next(self: WorksheetClass) -> object

"""

    OnCalculate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnCalculate(self: WorksheetClass) -> str

Set: OnCalculate(self: WorksheetClass) = value
"""

    OnData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnData(self: WorksheetClass) -> str

Set: OnData(self: WorksheetClass) = value
"""

    OnDoubleClick = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnDoubleClick(self: WorksheetClass) -> str

Set: OnDoubleClick(self: WorksheetClass) = value
"""

    OnEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnEntry(self: WorksheetClass) -> str

Set: OnEntry(self: WorksheetClass) = value
"""

    OnSheetActivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetActivate(self: WorksheetClass) -> str

Set: OnSheetActivate(self: WorksheetClass) = value
"""

    OnSheetDeactivate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnSheetDeactivate(self: WorksheetClass) -> str

Set: OnSheetDeactivate(self: WorksheetClass) = value
"""

    Outline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Outline(self: WorksheetClass) -> Outline

"""

    PageSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PageSetup(self: WorksheetClass) -> PageSetup

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorksheetClass) -> object

"""

    Previous = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Previous(self: WorksheetClass) -> object

"""

    PrintedCommentPages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintedCommentPages(self: WorksheetClass) -> int

"""

    ProtectContents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectContents(self: WorksheetClass) -> bool

"""

    ProtectDrawingObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectDrawingObjects(self: WorksheetClass) -> bool

"""

    Protection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Protection(self: WorksheetClass) -> Protection

"""

    ProtectionMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectionMode(self: WorksheetClass) -> bool

"""

    ProtectScenarios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProtectScenarios(self: WorksheetClass) -> bool

"""

    QueryTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryTables(self: WorksheetClass) -> QueryTables

"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: WorksheetClass) -> Range

"""

    Scripts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Scripts(self: WorksheetClass) -> Scripts

"""

    ScrollArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScrollArea(self: WorksheetClass) -> str

Set: ScrollArea(self: WorksheetClass) = value
"""

    Shapes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shapes(self: WorksheetClass) -> Shapes

"""

    SmartTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SmartTags(self: WorksheetClass) -> SmartTags

"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: WorksheetClass) -> Sort

"""

    StandardHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardHeight(self: WorksheetClass) -> float

"""

    StandardWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardWidth(self: WorksheetClass) -> float

Set: StandardWidth(self: WorksheetClass) = value
"""

    Tab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Tab(self: WorksheetClass) -> Tab

"""

    TransitionExpEval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionExpEval(self: WorksheetClass) -> bool

Set: TransitionExpEval(self: WorksheetClass) = value
"""

    TransitionFormEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TransitionFormEntry(self: WorksheetClass) -> bool

Set: TransitionFormEntry(self: WorksheetClass) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: WorksheetClass) -> XlSheetType

"""

    UsedRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UsedRange(self: WorksheetClass) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: WorksheetClass) -> XlSheetVisibility

Set: Visible(self: WorksheetClass) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: WorksheetClass) -> VPageBreaks

"""

    _CodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _CodeName(self: WorksheetClass) -> str

Set: _CodeName(self: WorksheetClass) = value
"""

    _DisplayRightToLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _DisplayRightToLeft(self: WorksheetClass) -> int

Set: _DisplayRightToLeft(self: WorksheetClass) = value
"""


    BeforeDelete = None
    BeforeDoubleClick = None
    BeforeRightClick = None
    Change = None
    Deactivate = None
    DocEvents_Event_Activate = None
    DocEvents_Event_Calculate = None
    FollowHyperlink = None
    LensGalleryRenderComplete = None
    PivotTableAfterValueChange = None
    PivotTableBeforeAllocateChanges = None
    PivotTableBeforeCommitChanges = None
    PivotTableBeforeDiscardChanges = None
    PivotTableChangeSync = None
    PivotTableUpdate = None
    SelectionChange = None
    TableUpdate = None


class WorksheetDataConnection:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorksheetDataConnection) -> Application

"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: WorksheetDataConnection) -> object

Set: CommandText(self: WorksheetDataConnection) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: WorksheetDataConnection) -> XlCmdType

Set: CommandType(self: WorksheetDataConnection) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: WorksheetDataConnection) -> object

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorksheetDataConnection) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorksheetDataConnection) -> object

"""



class WorksheetFunction:
    # no doc
    def AccrInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AccrInt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def AccrIntM(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ AccrIntM(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Acos(self, Arg1):
        """ Acos(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Acosh(self, Arg1):
        """ Acosh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Acot(self, Arg1):
        """ Acot(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Acoth(self, Arg1):
        """ Acoth(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Aggregate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Aggregate(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: Range, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def AmorDegrc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AmorDegrc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def AmorLinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ AmorLinc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def And(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ And(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def Arabic(self, Arg1):
        """ Arabic(self: WorksheetFunction, Arg1: str) -> float """
        pass

    def Asc(self, Arg1):
        """ Asc(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def Asin(self, Arg1):
        """ Asin(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Asinh(self, Arg1):
        """ Asinh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Atan2(self, Arg1, Arg2):
        """ Atan2(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Atanh(self, Arg1):
        """ Atanh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def AveDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ AveDev(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Average(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Average(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def AverageIf(self, Arg1, Arg2, Arg3):
        """ AverageIf(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def AverageIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):
        """ AverageIfs(self: WorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        pass

    def BahtText(self, Arg1):
        """ BahtText(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def Base(self, Arg1, Arg2, Arg3):
        """ Base(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: object) -> str """
        pass

    def BesselI(self, Arg1, Arg2):
        """ BesselI(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselJ(self, Arg1, Arg2):
        """ BesselJ(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselK(self, Arg1, Arg2):
        """ BesselK(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BesselY(self, Arg1, Arg2):
        """ BesselY(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def BetaDist(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ BetaDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def BetaInv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ BetaInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Beta_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Beta_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool, Arg5: object, Arg6: object) -> float """
        pass

    def Beta_Inv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Beta_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Bin2Dec(self, Arg1):
        """ Bin2Dec(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def Bin2Hex(self, Arg1, Arg2):
        """ Bin2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Bin2Oct(self, Arg1, Arg2):
        """ Bin2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def BinomDist(self, Arg1, Arg2, Arg3, Arg4):
        """ BinomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Binom_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Binom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Binom_Dist_Range(self, Arg1, Arg2, Arg3, Arg4):
        """ Binom_Dist_Range(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object) -> float """
        pass

    def Binom_Inv(self, Arg1, Arg2, Arg3):
        """ Binom_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Bitand(self, Arg1, Arg2):
        """ Bitand(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitlshift(self, Arg1, Arg2):
        """ Bitlshift(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitor(self, Arg1, Arg2):
        """ Bitor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitrshift(self, Arg1, Arg2):
        """ Bitrshift(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Bitxor(self, Arg1, Arg2):
        """ Bitxor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ceiling(self, Arg1, Arg2):
        """ Ceiling(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ceiling_Math(self, Arg1, Arg2, Arg3):
        """ Ceiling_Math(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Ceiling_Precise(self, Arg1, Arg2):
        """ Ceiling_Precise(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def ChiDist(self, Arg1, Arg2):
        """ ChiDist(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiInv(self, Arg1, Arg2):
        """ ChiInv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Dist(self, Arg1, Arg2, Arg3):
        """ ChiSq_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def ChiSq_Dist_RT(self, Arg1, Arg2):
        """ ChiSq_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Inv(self, Arg1, Arg2):
        """ ChiSq_Inv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Inv_RT(self, Arg1, Arg2):
        """ ChiSq_Inv_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def ChiSq_Test(self, Arg1, Arg2):
        """ ChiSq_Test(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def ChiTest(self, Arg1, Arg2):
        """ ChiTest(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Choose(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Choose(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Clean(self, Arg1):
        """ Clean(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def Combin(self, Arg1, Arg2):
        """ Combin(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Combina(self, Arg1, Arg2):
        """ Combina(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Complex(self, Arg1, Arg2, Arg3):
        """ Complex(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> str """
        pass

    def Confidence(self, Arg1, Arg2, Arg3):
        """ Confidence(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Confidence_Norm(self, Arg1, Arg2, Arg3):
        """ Confidence_Norm(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Confidence_T(self, Arg1, Arg2, Arg3):
        """ Confidence_T(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Convert(self, Arg1, Arg2, Arg3):
        """ Convert(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Correl(self, Arg1, Arg2):
        """ Correl(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Cosh(self, Arg1):
        """ Cosh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Cot(self, Arg1):
        """ Cot(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Coth(self, Arg1):
        """ Coth(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Count(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Count(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CountA(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ CountA(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CountBlank(self, Arg1):
        """ CountBlank(self: WorksheetFunction, Arg1: Range) -> float """
        pass

    def CountIf(self, Arg1, Arg2):
        """ CountIf(self: WorksheetFunction, Arg1: Range, Arg2: object) -> float """
        pass

    def CountIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ CountIfs(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def CoupDayBs(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDayBs(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupDays(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDays(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupDaysNc(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupDaysNc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupNcd(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupNcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupNum(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupNum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def CoupPcd(self, Arg1, Arg2, Arg3, Arg4):
        """ CoupPcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Covar(self, Arg1, Arg2):
        """ Covar(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Covariance_P(self, Arg1, Arg2):
        """ Covariance_P(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Covariance_S(self, Arg1, Arg2):
        """ Covariance_S(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def CritBinom(self, Arg1, Arg2, Arg3):
        """ CritBinom(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Csc(self, Arg1):
        """ Csc(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Csch(self, Arg1):
        """ Csch(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def CumIPmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ CumIPmt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def CumPrinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ CumPrinc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def DAverage(self, Arg1, Arg2, Arg3):
        """ DAverage(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Days(self, Arg1, Arg2):
        """ Days(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Days360(self, Arg1, Arg2, Arg3):
        """ Days360(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Db(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Db(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        pass

    def Dbcs(self, Arg1):
        """ Dbcs(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def DCount(self, Arg1, Arg2, Arg3):
        """ DCount(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DCountA(self, Arg1, Arg2, Arg3):
        """ DCountA(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Ddb(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Ddb(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        pass

    def Dec2Bin(self, Arg1, Arg2):
        """ Dec2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Dec2Hex(self, Arg1, Arg2):
        """ Dec2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Dec2Oct(self, Arg1, Arg2):
        """ Dec2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Decimal(self, Arg1, Arg2):
        """ Decimal(self: WorksheetFunction, Arg1: str, Arg2: float) -> float """
        pass

    def Degrees(self, Arg1):
        """ Degrees(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Delta(self, Arg1, Arg2):
        """ Delta(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DevSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ DevSq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def DGet(self, Arg1, Arg2, Arg3):
        """ DGet(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> object """
        pass

    def Disc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Disc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def DMax(self, Arg1, Arg2, Arg3):
        """ DMax(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DMin(self, Arg1, Arg2, Arg3):
        """ DMin(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Dollar(self, Arg1, Arg2):
        """ Dollar(self: WorksheetFunction, Arg1: float, Arg2: object) -> str """
        pass

    def DollarDe(self, Arg1, Arg2):
        """ DollarDe(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DollarFr(self, Arg1, Arg2):
        """ DollarFr(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def DProduct(self, Arg1, Arg2, Arg3):
        """ DProduct(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DStDev(self, Arg1, Arg2, Arg3):
        """ DStDev(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DStDevP(self, Arg1, Arg2, Arg3):
        """ DStDevP(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DSum(self, Arg1, Arg2, Arg3):
        """ DSum(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def Dummy19(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Dummy19(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Dummy21(self, Arg1, Arg2):
        """ Dummy21(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Duration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Duration(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def DVar(self, Arg1, Arg2, Arg3):
        """ DVar(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def DVarP(self, Arg1, Arg2, Arg3):
        """ DVarP(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def EDate(self, Arg1, Arg2):
        """ EDate(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Effect(self, Arg1, Arg2):
        """ Effect(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def EncodeURL(self, Arg1):
        """ EncodeURL(self: WorksheetFunction, Arg1: str) -> object """
        pass

    def EoMonth(self, Arg1, Arg2):
        """ EoMonth(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Erf(self, Arg1, Arg2):
        """ Erf(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def ErfC(self, Arg1):
        """ ErfC(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def ErfC_Precise(self, Arg1):
        """ ErfC_Precise(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def Erf_Precise(self, Arg1):
        """ Erf_Precise(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def Even(self, Arg1):
        """ Even(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def ExponDist(self, Arg1, Arg2, Arg3):
        """ ExponDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Expon_Dist(self, Arg1, Arg2, Arg3):
        """ Expon_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Fact(self, Arg1):
        """ Fact(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def FactDouble(self, Arg1):
        """ FactDouble(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def FDist(self, Arg1, Arg2, Arg3):
        """ FDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def FilterXML(self, Arg1, Arg2):
        """ FilterXML(self: WorksheetFunction, Arg1: str, Arg2: str) -> object """
        pass

    def Find(self, Arg1, Arg2, Arg3):
        """ Find(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def FindB(self, Arg1, Arg2, Arg3):
        """ FindB(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def FInv(self, Arg1, Arg2, Arg3):
        """ FInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Fisher(self, Arg1):
        """ Fisher(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def FisherInv(self, Arg1):
        """ FisherInv(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Fixed(self, Arg1, Arg2, Arg3):
        """ Fixed(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> str """
        pass

    def Floor(self, Arg1, Arg2):
        """ Floor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Floor_Math(self, Arg1, Arg2, Arg3):
        """ Floor_Math(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Floor_Precise(self, Arg1, Arg2):
        """ Floor_Precise(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Forecast(self, Arg1, Arg2, Arg3):
        """ Forecast(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        pass

    def Frequency(self, Arg1, Arg2):
        """ Frequency(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def FTest(self, Arg1, Arg2):
        """ FTest(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Fv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Fv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def FVSchedule(self, Arg1, Arg2):
        """ FVSchedule(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def F_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ F_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def F_Dist_RT(self, Arg1, Arg2, Arg3):
        """ F_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Inv(self, Arg1, Arg2, Arg3):
        """ F_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Inv_RT(self, Arg1, Arg2, Arg3):
        """ F_Inv_RT(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def F_Test(self, Arg1, Arg2):
        """ F_Test(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Gamma(self, Arg1):
        """ Gamma(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def GammaDist(self, Arg1, Arg2, Arg3, Arg4):
        """ GammaDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def GammaInv(self, Arg1, Arg2, Arg3):
        """ GammaInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def GammaLn(self, Arg1):
        """ GammaLn(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def GammaLn_Precise(self, Arg1):
        """ GammaLn_Precise(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Gamma_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Gamma_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Gamma_Inv(self, Arg1, Arg2, Arg3):
        """ Gamma_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Gauss(self, Arg1):
        """ Gauss(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Gcd(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Gcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def GeoMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ GeoMean(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def GeStep(self, Arg1, Arg2):
        """ GeStep(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Growth(self, Arg1, Arg2, Arg3, Arg4):
        """ Growth(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def HarMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ HarMean(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Hex2Bin(self, Arg1, Arg2):
        """ Hex2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Hex2Dec(self, Arg1):
        """ Hex2Dec(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def Hex2Oct(self, Arg1, Arg2):
        """ Hex2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def HLookup(self, Arg1, Arg2, Arg3, Arg4):
        """ HLookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def HypGeomDist(self, Arg1, Arg2, Arg3, Arg4):
        """ HypGeomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def HypGeom_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ HypGeom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: bool) -> float """
        pass

    def IfError(self, Arg1, Arg2):
        """ IfError(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def IfNa(self, Arg1, Arg2):
        """ IfNa(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def ImAbs(self, Arg1):
        """ ImAbs(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def Imaginary(self, Arg1):
        """ Imaginary(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def ImArgument(self, Arg1):
        """ ImArgument(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImConjugate(self, Arg1):
        """ ImConjugate(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImCos(self, Arg1):
        """ ImCos(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImCosh(self, Arg1):
        """ ImCosh(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImCot(self, Arg1):
        """ ImCot(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImCsc(self, Arg1):
        """ ImCsc(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImCsch(self, Arg1):
        """ ImCsch(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImDiv(self, Arg1, Arg2):
        """ ImDiv(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImExp(self, Arg1):
        """ ImExp(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImLn(self, Arg1):
        """ ImLn(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImLog10(self, Arg1):
        """ ImLog10(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImLog2(self, Arg1):
        """ ImLog2(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImPower(self, Arg1, Arg2):
        """ ImPower(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ ImProduct(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        pass

    def ImReal(self, Arg1):
        """ ImReal(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def ImSec(self, Arg1):
        """ ImSec(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImSech(self, Arg1):
        """ ImSech(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImSin(self, Arg1):
        """ ImSin(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImSinh(self, Arg1):
        """ ImSinh(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImSqrt(self, Arg1):
        """ ImSqrt(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def ImSub(self, Arg1, Arg2):
        """ ImSub(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def ImSum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ ImSum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        pass

    def ImTan(self, Arg1):
        """ ImTan(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def Index(self, Arg1, Arg2, Arg3, Arg4):
        """ Index(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object, Arg4: object) -> object """
        pass

    def Intercept(self, Arg1, Arg2):
        """ Intercept(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def IntRate(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ IntRate(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Ipmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Ipmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        pass

    def Irr(self, Arg1, Arg2):
        """ Irr(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def IsErr(self, Arg1):
        """ IsErr(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsError(self, Arg1):
        """ IsError(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsEven(self, Arg1):
        """ IsEven(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsFormula(self, Arg1):
        """ IsFormula(self: WorksheetFunction, Arg1: Range) -> bool """
        pass

    def IsLogical(self, Arg1):
        """ IsLogical(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNA(self, Arg1):
        """ IsNA(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNonText(self, Arg1):
        """ IsNonText(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsNumber(self, Arg1):
        """ IsNumber(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsOdd(self, Arg1):
        """ IsOdd(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsoWeekNum(self, Arg1, Arg2):
        """ IsoWeekNum(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def ISO_Ceiling(self, Arg1, Arg2):
        """ ISO_Ceiling(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Ispmt(self, Arg1, Arg2, Arg3, Arg4):
        """ Ispmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def IsText(self, Arg1):
        """ IsText(self: WorksheetFunction, Arg1: object) -> bool """
        pass

    def IsThaiDigit(self, Arg1):
        """ IsThaiDigit(self: WorksheetFunction, Arg1: str) -> bool """
        pass

    def Kurt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Kurt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Large(self, Arg1, Arg2):
        """ Large(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Lcm(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Lcm(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def LinEst(self, Arg1, Arg2, Arg3, Arg4):
        """ LinEst(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Ln(self, Arg1):
        """ Ln(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Log(self, Arg1, Arg2):
        """ Log(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        pass

    def Log10(self, Arg1):
        """ Log10(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def LogEst(self, Arg1, Arg2, Arg3, Arg4):
        """ LogEst(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def LogInv(self, Arg1, Arg2, Arg3):
        """ LogInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def LogNormDist(self, Arg1, Arg2, Arg3):
        """ LogNormDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def LogNorm_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ LogNorm_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def LogNorm_Inv(self, Arg1, Arg2, Arg3):
        """ LogNorm_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Lookup(self, Arg1, Arg2, Arg3):
        """ Lookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> object """
        pass

    def Match(self, Arg1, Arg2, Arg3):
        """ Match(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Max(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Max(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MDeterm(self, Arg1):
        """ MDeterm(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def MDuration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ MDuration(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Median(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Median(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Min(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Min(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MInverse(self, Arg1):
        """ MInverse(self: WorksheetFunction, Arg1: object) -> object """
        pass

    def MIrr(self, Arg1, Arg2, Arg3):
        """ MIrr(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: float) -> float """
        pass

    def MMult(self, Arg1, Arg2):
        """ MMult(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        pass

    def Mode(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Mode_Mult(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode_Mult(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def Mode_Sngl(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Mode_Sngl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def MRound(self, Arg1, Arg2):
        """ MRound(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def MultiNomial(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ MultiNomial(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Munit(self, Arg1):
        """ Munit(self: WorksheetFunction, Arg1: float) -> object """
        pass

    def NegBinomDist(self, Arg1, Arg2, Arg3):
        """ NegBinomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def NegBinom_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ NegBinom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def NetworkDays(self, Arg1, Arg2, Arg3):
        """ NetworkDays(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def NetworkDays_Intl(self, Arg1, Arg2, Arg3, Arg4):
        """ NetworkDays_Intl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Nominal(self, Arg1, Arg2):
        """ Nominal(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def NormDist(self, Arg1, Arg2, Arg3, Arg4):
        """ NormDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def NormInv(self, Arg1, Arg2, Arg3):
        """ NormInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def NormSDist(self, Arg1):
        """ NormSDist(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def NormSInv(self, Arg1):
        """ NormSInv(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Norm_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Norm_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Norm_Inv(self, Arg1, Arg2, Arg3):
        """ Norm_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Norm_S_Dist(self, Arg1, Arg2):
        """ Norm_S_Dist(self: WorksheetFunction, Arg1: float, Arg2: bool) -> float """
        pass

    def Norm_S_Inv(self, Arg1):
        """ Norm_S_Inv(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def NPer(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ NPer(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Npv(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Npv(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def NumberValue(self, Arg1, Arg2, Arg3):
        """ NumberValue(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: str) -> float """
        pass

    def Oct2Bin(self, Arg1, Arg2):
        """ Oct2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Oct2Dec(self, Arg1):
        """ Oct2Dec(self: WorksheetFunction, Arg1: object) -> str """
        pass

    def Oct2Hex(self, Arg1, Arg2):
        """ Oct2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        pass

    def Odd(self, Arg1):
        """ Odd(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def OddFPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9):
        """ OddFPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        pass

    def OddFYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9):
        """ OddFYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        pass

    def OddLPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ OddLPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        pass

    def OddLYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):
        """ OddLYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        pass

    def Or(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Or(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def PDuration(self, Arg1, Arg2, Arg3):
        """ PDuration(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Pearson(self, Arg1, Arg2):
        """ Pearson(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Percentile(self, Arg1, Arg2):
        """ Percentile(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Percentile_Exc(self, Arg1, Arg2):
        """ Percentile_Exc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Percentile_Inc(self, Arg1, Arg2):
        """ Percentile_Inc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def PercentRank(self, Arg1, Arg2, Arg3):
        """ PercentRank(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def PercentRank_Exc(self, Arg1, Arg2, Arg3):
        """ PercentRank_Exc(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def PercentRank_Inc(self, Arg1, Arg2, Arg3):
        """ PercentRank_Inc(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def Permut(self, Arg1, Arg2):
        """ Permut(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Permutationa(self, Arg1, Arg2):
        """ Permutationa(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Phi(self, Arg1):
        """ Phi(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Phonetic(self, Arg1):
        """ Phonetic(self: WorksheetFunction, Arg1: Range) -> str """
        pass

    def Pi(self):
        """ Pi(self: WorksheetFunction) -> float """
        pass

    def Pmt(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Pmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Poisson(self, Arg1, Arg2, Arg3):
        """ Poisson(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Poisson_Dist(self, Arg1, Arg2, Arg3):
        """ Poisson_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def Power(self, Arg1, Arg2):
        """ Power(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Ppmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Ppmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        pass

    def Price(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ Price(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        pass

    def PriceDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ PriceDisc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def PriceMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ PriceMat(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Prob(self, Arg1, Arg2, Arg3, Arg4):
        """ Prob(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: object) -> float """
        pass

    def Product(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Product(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Proper(self, Arg1):
        """ Proper(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def Pv(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Pv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        pass

    def Quartile(self, Arg1, Arg2):
        """ Quartile(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quartile_Exc(self, Arg1, Arg2):
        """ Quartile_Exc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quartile_Inc(self, Arg1, Arg2):
        """ Quartile_Inc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def Quotient(self, Arg1, Arg2):
        """ Quotient(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Radians(self, Arg1):
        """ Radians(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def RandBetween(self, Arg1, Arg2):
        """ RandBetween(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Rank(self, Arg1, Arg2, Arg3):
        """ Rank(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rank_Avg(self, Arg1, Arg2, Arg3):
        """ Rank_Avg(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rank_Eq(self, Arg1, Arg2, Arg3):
        """ Rank_Eq(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        pass

    def Rate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ Rate(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def Received(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ Received(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def Replace(self, Arg1, Arg2, Arg3, Arg4):
        """ Replace(self: WorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        pass

    def ReplaceB(self, Arg1, Arg2, Arg3, Arg4):
        """ ReplaceB(self: WorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        pass

    def Rept(self, Arg1, Arg2):
        """ Rept(self: WorksheetFunction, Arg1: str, Arg2: float) -> str """
        pass

    def Roman(self, Arg1, Arg2):
        """ Roman(self: WorksheetFunction, Arg1: float, Arg2: object) -> str """
        pass

    def Round(self, Arg1, Arg2):
        """ Round(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def RoundBahtDown(self, Arg1):
        """ RoundBahtDown(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def RoundBahtUp(self, Arg1):
        """ RoundBahtUp(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def RoundDown(self, Arg1, Arg2):
        """ RoundDown(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def RoundUp(self, Arg1, Arg2):
        """ RoundUp(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Rri(self, Arg1, Arg2, Arg3):
        """ Rri(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def RSq(self, Arg1, Arg2):
        """ RSq(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def RTD(self, progID, server, topic1, topic2, topic3, topic4, topic5, topic6, topic7, topic8, topic9, topic10, topic11, topic12, topic13, topic14, topic15, topic16, topic17, topic18, topic19, topic20, topic21, topic22, topic23, topic24, topic25, topic26, topic27, topic28):
        """ RTD(self: WorksheetFunction, progID: object, server: object, topic1: object, topic2: object, topic3: object, topic4: object, topic5: object, topic6: object, topic7: object, topic8: object, topic9: object, topic10: object, topic11: object, topic12: object, topic13: object, topic14: object, topic15: object, topic16: object, topic17: object, topic18: object, topic19: object, topic20: object, topic21: object, topic22: object, topic23: object, topic24: object, topic25: object, topic26: object, topic27: object, topic28: object) -> object """
        pass

    def Search(self, Arg1, Arg2, Arg3):
        """ Search(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def SearchB(self, Arg1, Arg2, Arg3):
        """ SearchB(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        pass

    def Sec(self, Arg1):
        """ Sec(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Sech(self, Arg1):
        """ Sech(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def SeriesSum(self, Arg1, Arg2, Arg3, Arg4):
        """ SeriesSum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Sinh(self, Arg1):
        """ Sinh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def Skew(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Skew(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Skew_p(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Skew_p(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Sln(self, Arg1, Arg2, Arg3):
        """ Sln(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Slope(self, Arg1, Arg2):
        """ Slope(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Small(self, Arg1, Arg2):
        """ Small(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def SqrtPi(self, Arg1):
        """ SqrtPi(self: WorksheetFunction, Arg1: object) -> float """
        pass

    def Standardize(self, Arg1, Arg2, Arg3):
        """ Standardize(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def StDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDevP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDevP(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDev_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev_P(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StDev_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ StDev_S(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def StEyx(self, Arg1, Arg2):
        """ StEyx(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Substitute(self, Arg1, Arg2, Arg3, Arg4):
        """ Substitute(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: str, Arg4: object) -> str """
        pass

    def Subtotal(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Subtotal(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Sum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Sum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumIf(self, Arg1, Arg2, Arg3):
        """ SumIf(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        pass

    def SumIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):
        """ SumIfs(self: WorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        pass

    def SumProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ SumProduct(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ SumSq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def SumX2MY2(self, Arg1, Arg2):
        """ SumX2MY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def SumX2PY2(self, Arg1, Arg2):
        """ SumX2PY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def SumXMY2(self, Arg1, Arg2):
        """ SumXMY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Syd(self, Arg1, Arg2, Arg3, Arg4):
        """ Syd(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        pass

    def Tanh(self, Arg1):
        """ Tanh(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def TBillEq(self, Arg1, Arg2, Arg3):
        """ TBillEq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TBillPrice(self, Arg1, Arg2, Arg3):
        """ TBillPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TBillYield(self, Arg1, Arg2, Arg3):
        """ TBillYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def TDist(self, Arg1, Arg2, Arg3):
        """ TDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        pass

    def Text(self, Arg1, Arg2):
        """ Text(self: WorksheetFunction, Arg1: object, Arg2: str) -> str """
        pass

    def ThaiDayOfWeek(self, Arg1):
        """ ThaiDayOfWeek(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiDigit(self, Arg1):
        """ ThaiDigit(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def ThaiMonthOfYear(self, Arg1):
        """ ThaiMonthOfYear(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiNumSound(self, Arg1):
        """ ThaiNumSound(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiNumString(self, Arg1):
        """ ThaiNumString(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def ThaiStringLength(self, Arg1):
        """ ThaiStringLength(self: WorksheetFunction, Arg1: str) -> float """
        pass

    def ThaiYear(self, Arg1):
        """ ThaiYear(self: WorksheetFunction, Arg1: float) -> float """
        pass

    def TInv(self, Arg1, Arg2):
        """ TInv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def Transpose(self, Arg1):
        """ Transpose(self: WorksheetFunction, Arg1: object) -> object """
        pass

    def Trend(self, Arg1, Arg2, Arg3, Arg4):
        """ Trend(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def Trim(self, Arg1):
        """ Trim(self: WorksheetFunction, Arg1: str) -> str """
        pass

    def TrimMean(self, Arg1, Arg2):
        """ TrimMean(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        pass

    def TTest(self, Arg1, Arg2, Arg3, Arg4):
        """ TTest(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        pass

    def T_Dist(self, Arg1, Arg2, Arg3):
        """ T_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        pass

    def T_Dist_2T(self, Arg1, Arg2):
        """ T_Dist_2T(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Dist_RT(self, Arg1, Arg2):
        """ T_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Inv(self, Arg1, Arg2):
        """ T_Inv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Inv_2T(self, Arg1, Arg2):
        """ T_Inv_2T(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        pass

    def T_Test(self, Arg1, Arg2, Arg3, Arg4):
        """ T_Test(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        pass

    def Unichar(self, Arg1):
        """ Unichar(self: WorksheetFunction, Arg1: float) -> str """
        pass

    def Unicode(self, Arg1):
        """ Unicode(self: WorksheetFunction, Arg1: str) -> float """
        pass

    def USDollar(self, Arg1, Arg2):
        """ USDollar(self: WorksheetFunction, Arg1: float, Arg2: float) -> str """
        pass

    def Var(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def VarP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ VarP(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Var_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var_P(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Var_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Var_S(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        pass

    def Vdb(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7):
        """ Vdb(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: float, Arg6: object, Arg7: object) -> float """
        pass

    def VLookup(self, Arg1, Arg2, Arg3, Arg4):
        """ VLookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        pass

    def WebService(self, Arg1):
        """ WebService(self: WorksheetFunction, Arg1: str) -> object """
        pass

    def Weekday(self, Arg1, Arg2):
        """ Weekday(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def WeekNum(self, Arg1, Arg2):
        """ WeekNum(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Weibull(self, Arg1, Arg2, Arg3, Arg4):
        """ Weibull(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def Weibull_Dist(self, Arg1, Arg2, Arg3, Arg4):
        """ Weibull_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        pass

    def WorkDay(self, Arg1, Arg2, Arg3):
        """ WorkDay(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def WorkDay_Intl(self, Arg1, Arg2, Arg3, Arg4):
        """ WorkDay_Intl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        pass

    def Xirr(self, Arg1, Arg2, Arg3):
        """ Xirr(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def Xnpv(self, Arg1, Arg2):
        """ Xnpv(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        pass

    def Xor(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ Xor(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        pass

    def YearFrac(self, Arg1, Arg2, Arg3):
        """ YearFrac(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        pass

    def YieldDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5):
        """ YieldDisc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        pass

    def YieldMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):
        """ YieldMat(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        pass

    def ZTest(self, Arg1, Arg2, Arg3):
        """ ZTest(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def Z_Test(self, Arg1, Arg2, Arg3):
        """ Z_Test(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        pass

    def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):
        """ _WSFunction(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __pow__(self, *args): #cannot find CLR method
        """ x.__pow__(y[, z]) <==> pow(x, y[, z]) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorksheetFunction) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorksheetFunction) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorksheetFunction) -> object

"""



class Worksheets(IEnumerable):
    # no doc
    def Add(self, Before, After, Count, Type):
        """ Add(self: Worksheets, Before: object, After: object, Count: object, Type: object) -> object """
        pass

    def Add2(self, Before, After, Count, NewLayout):
        """ Add2(self: Worksheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        pass

    def Copy(self, Before, After):
        """ Copy(self: Worksheets, Before: object, After: object) """
        pass

    def Delete(self):
        """ Delete(self: Worksheets) """
        pass

    def FillAcrossSheets(self, Range, Type):
        """ FillAcrossSheets(self: Worksheets, Range: Range, Type: XlFillWith) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: Worksheets) -> IEnumerator """
        pass

    def Move(self, Before, After):
        """ Move(self: Worksheets, Before: object, After: object) """
        pass

    def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):
        """ PrintOut(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        pass

    def PrintOutEx(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):
        """ PrintOutEx(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        pass

    def PrintPreview(self, EnableChanges):
        """ PrintPreview(self: Worksheets, EnableChanges: object) """
        pass

    def Select(self, Replace):
        """ Select(self: Worksheets, Replace: object) """
        pass

    def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):
        """ _PrintOut(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Worksheets) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: Worksheets) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: Worksheets) -> XlCreator

"""

    HPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HPageBreaks(self: Worksheets) -> HPageBreaks

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: Worksheets) -> object

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Worksheets) -> object

Set: Visible(self: Worksheets) = value
"""

    VPageBreaks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VPageBreaks(self: Worksheets) -> VPageBreaks

"""



class WorksheetView:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: WorksheetView) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: WorksheetView) -> XlCreator

"""

    DisplayFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayFormulas(self: WorksheetView) -> bool

Set: DisplayFormulas(self: WorksheetView) = value
"""

    DisplayGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayGridlines(self: WorksheetView) -> bool

Set: DisplayGridlines(self: WorksheetView) = value
"""

    DisplayHeadings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayHeadings(self: WorksheetView) -> bool

Set: DisplayHeadings(self: WorksheetView) = value
"""

    DisplayOutline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayOutline(self: WorksheetView) -> bool

Set: DisplayOutline(self: WorksheetView) = value
"""

    DisplayZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayZeros(self: WorksheetView) -> bool

Set: DisplayZeros(self: WorksheetView) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: WorksheetView) -> object

"""

    Sheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sheet(self: WorksheetView) -> object

"""



class XlAboveBelow(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAboveBelow, values: xlAboveAverage (0), xlAboveStdDev (4), xlBelowAverage (1), xlBelowStdDev (5), xlEqualAboveAverage (2), xlEqualBelowAverage (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAboveAverage = None
    xlAboveStdDev = None
    xlBelowAverage = None
    xlBelowStdDev = None
    xlEqualAboveAverage = None
    xlEqualBelowAverage = None


class XlActionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlActionType, values: xlActionTypeDrillthrough (256), xlActionTypeReport (128), xlActionTypeRowset (16), xlActionTypeUrl (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlActionTypeDrillthrough = None
    xlActionTypeReport = None
    xlActionTypeRowset = None
    xlActionTypeUrl = None


class XlAllocation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAllocation, values: xlAutomaticAllocation (2), xlManualAllocation (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAutomaticAllocation = None
    xlManualAllocation = None


class XlAllocationMethod(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAllocationMethod, values: xlEqualAllocation (1), xlWeightedAllocation (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlEqualAllocation = None
    xlWeightedAllocation = None


class XlAllocationValue(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAllocationValue, values: xlAllocateIncrement (2), xlAllocateValue (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllocateIncrement = None
    xlAllocateValue = None


class XlApplicationInternational(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlApplicationInternational, values: xl24HourClock (33), xl4DigitYears (43), xlAlternateArraySeparator (16), xlColumnSeparator (14), xlCountryCode (1), xlCountrySetting (2), xlCurrencyBefore (37), xlCurrencyCode (25), xlCurrencyDigits (27), xlCurrencyLeadingZeros (40), xlCurrencyMinusSign (38), xlCurrencyNegative (28), xlCurrencySpaceBefore (36), xlCurrencyTrailingZeros (39), xlDateOrder (32), xlDateSeparator (17), xlDayCode (21), xlDayLeadingZero (42), xlDecimalSeparator (3), xlGeneralFormatName (26), xlHourCode (22), xlLeftBrace (12), xlLeftBracket (10), xlListSeparator (5), xlLowerCaseColumnLetter (9), xlLowerCaseRowLetter (8), xlMDY (44), xlMetric (35), xlMinuteCode (23), xlMonthCode (20), xlMonthLeadingZero (41), xlMonthNameChars (30), xlNoncurrencyDigits (29), xlNonEnglishFunctions (34), xlRightBrace (13), xlRightBracket (11), xlRowSeparator (15), xlSecondCode (24), xlThousandsSeparator (4), xlTimeLeadingZero (45), xlTimeSeparator (18), xlUpperCaseColumnLetter (7), xlUpperCaseRowLetter (6), xlWeekdayNameChars (31), xlYearCode (19) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xl24HourClock = None
    xl4DigitYears = None
    xlAlternateArraySeparator = None
    xlColumnSeparator = None
    xlCountryCode = None
    xlCountrySetting = None
    xlCurrencyBefore = None
    xlCurrencyCode = None
    xlCurrencyDigits = None
    xlCurrencyLeadingZeros = None
    xlCurrencyMinusSign = None
    xlCurrencyNegative = None
    xlCurrencySpaceBefore = None
    xlCurrencyTrailingZeros = None
    xlDateOrder = None
    xlDateSeparator = None
    xlDayCode = None
    xlDayLeadingZero = None
    xlDecimalSeparator = None
    xlGeneralFormatName = None
    xlHourCode = None
    xlLeftBrace = None
    xlLeftBracket = None
    xlListSeparator = None
    xlLowerCaseColumnLetter = None
    xlLowerCaseRowLetter = None
    xlMDY = None
    xlMetric = None
    xlMinuteCode = None
    xlMonthCode = None
    xlMonthLeadingZero = None
    xlMonthNameChars = None
    xlNoncurrencyDigits = None
    xlNonEnglishFunctions = None
    xlRightBrace = None
    xlRightBracket = None
    xlRowSeparator = None
    xlSecondCode = None
    xlThousandsSeparator = None
    xlTimeLeadingZero = None
    xlTimeSeparator = None
    xlUpperCaseColumnLetter = None
    xlUpperCaseRowLetter = None
    xlWeekdayNameChars = None
    xlYearCode = None


class XlApplyNamesOrder(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlApplyNamesOrder, values: xlColumnThenRow (2), xlRowThenColumn (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColumnThenRow = None
    xlRowThenColumn = None


class XlArabicModes(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlArabicModes, values: xlArabicBothStrict (3), xlArabicNone (0), xlArabicStrictAlefHamza (1), xlArabicStrictFinalYaa (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlArabicBothStrict = None
    xlArabicNone = None
    xlArabicStrictAlefHamza = None
    xlArabicStrictFinalYaa = None


class XlArrangeStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlArrangeStyle, values: xlArrangeStyleCascade (7), xlArrangeStyleHorizontal (-4128), xlArrangeStyleTiled (1), xlArrangeStyleVertical (-4166) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlArrangeStyleCascade = None
    xlArrangeStyleHorizontal = None
    xlArrangeStyleTiled = None
    xlArrangeStyleVertical = None


class XlArrowHeadLength(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlArrowHeadLength, values: xlArrowHeadLengthLong (3), xlArrowHeadLengthMedium (-4138), xlArrowHeadLengthShort (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlArrowHeadLengthLong = None
    xlArrowHeadLengthMedium = None
    xlArrowHeadLengthShort = None


class XlArrowHeadStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlArrowHeadStyle, values: xlArrowHeadStyleClosed (3), xlArrowHeadStyleDoubleClosed (5), xlArrowHeadStyleDoubleOpen (4), xlArrowHeadStyleNone (-4142), xlArrowHeadStyleOpen (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlArrowHeadStyleClosed = None
    xlArrowHeadStyleDoubleClosed = None
    xlArrowHeadStyleDoubleOpen = None
    xlArrowHeadStyleNone = None
    xlArrowHeadStyleOpen = None


class XlArrowHeadWidth(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlArrowHeadWidth, values: xlArrowHeadWidthMedium (-4138), xlArrowHeadWidthNarrow (1), xlArrowHeadWidthWide (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlArrowHeadWidthMedium = None
    xlArrowHeadWidthNarrow = None
    xlArrowHeadWidthWide = None


class XlAutoFillType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAutoFillType, values: xlFillCopy (1), xlFillDays (5), xlFillDefault (0), xlFillFormats (3), xlFillMonths (7), xlFillSeries (2), xlFillValues (4), xlFillWeekdays (6), xlFillYears (8), xlFlashFill (11), xlGrowthTrend (10), xlLinearTrend (9) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFillCopy = None
    xlFillDays = None
    xlFillDefault = None
    xlFillFormats = None
    xlFillMonths = None
    xlFillSeries = None
    xlFillValues = None
    xlFillWeekdays = None
    xlFillYears = None
    xlFlashFill = None
    xlGrowthTrend = None
    xlLinearTrend = None


class XlAutoFilterOperator(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAutoFilterOperator, values: xlAnd (1), xlBottom10Items (4), xlBottom10Percent (6), xlFilterAutomaticFontColor (13), xlFilterCellColor (8), xlFilterDynamic (11), xlFilterFontColor (9), xlFilterIcon (10), xlFilterNoFill (12), xlFilterNoIcon (14), xlFilterValues (7), xlOr (2), xlTop10Items (3), xlTop10Percent (5) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAnd = None
    xlBottom10Items = None
    xlBottom10Percent = None
    xlFilterAutomaticFontColor = None
    xlFilterCellColor = None
    xlFilterDynamic = None
    xlFilterFontColor = None
    xlFilterIcon = None
    xlFilterNoFill = None
    xlFilterNoIcon = None
    xlFilterValues = None
    xlOr = None
    xlTop10Items = None
    xlTop10Percent = None


class XlAxisCrosses(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAxisCrosses, values: xlAxisCrossesAutomatic (-4105), xlAxisCrossesCustom (-4114), xlAxisCrossesMaximum (2), xlAxisCrossesMinimum (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAxisCrossesAutomatic = None
    xlAxisCrossesCustom = None
    xlAxisCrossesMaximum = None
    xlAxisCrossesMinimum = None


class XlAxisGroup(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAxisGroup, values: xlPrimary (1), xlSecondary (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPrimary = None
    xlSecondary = None


class XlAxisType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlAxisType, values: xlCategory (1), xlSeriesAxis (3), xlValue (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCategory = None
    xlSeriesAxis = None
    xlValue = None


class XlBackground(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlBackground, values: xlBackgroundAutomatic (-4105), xlBackgroundOpaque (3), xlBackgroundTransparent (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBackgroundAutomatic = None
    xlBackgroundOpaque = None
    xlBackgroundTransparent = None


class XlBarShape(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlBarShape, values: xlBox (0), xlConeToMax (5), xlConeToPoint (4), xlCylinder (3), xlPyramidToMax (2), xlPyramidToPoint (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBox = None
    xlConeToMax = None
    xlConeToPoint = None
    xlCylinder = None
    xlPyramidToMax = None
    xlPyramidToPoint = None


class XlBordersIndex(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlBordersIndex, values: xlDiagonalDown (5), xlDiagonalUp (6), xlEdgeBottom (9), xlEdgeLeft (7), xlEdgeRight (10), xlEdgeTop (8), xlInsideHorizontal (12), xlInsideVertical (11) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDiagonalDown = None
    xlDiagonalUp = None
    xlEdgeBottom = None
    xlEdgeLeft = None
    xlEdgeRight = None
    xlEdgeTop = None
    xlInsideHorizontal = None
    xlInsideVertical = None


class XlBorderWeight(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlBorderWeight, values: xlHairline (1), xlMedium (-4138), xlThick (4), xlThin (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHairline = None
    xlMedium = None
    xlThick = None
    xlThin = None


class XlBuiltInDialog(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlBuiltInDialog, values: _xlDialogChartSourceData (541), _xlDialogPhonetic (538), xlDialogActivate (103), xlDialogActiveCellFont (476), xlDialogAddChartAutoformat (390), xlDialogAddinManager (321), xlDialogAlignment (43), xlDialogApplyNames (133), xlDialogApplyStyle (212), xlDialogAppMove (170), xlDialogAppSize (171), xlDialogArrangeAll (12), xlDialogAssignToObject (213), xlDialogAssignToTool (293), xlDialogAttachText (80), xlDialogAttachToolbars (323), xlDialogAutoCorrect (485), xlDialogAxes (78), xlDialogBorder (45), xlDialogCalculation (32), xlDialogCellProtection (46), xlDialogChangeLink (166), xlDialogChartAddData (392), xlDialogChartLocation (527), xlDialogChartOptionsDataLabelMultiple (724), xlDialogChartOptionsDataLabels (505), xlDialogChartOptionsDataTable (506), xlDialogChartSourceData (540), xlDialogChartTrend (350), xlDialogChartType (526), xlDialogChartWizard (288), xlDialogCheckboxProperties (435), xlDialogClear (52), xlDialogColorPalette (161), xlDialogColumnWidth (47), xlDialogCombination (73), xlDialogConditionalFormatting (583), xlDialogConsolidate (191), xlDialogCopyChart (147), xlDialogCopyPicture (108), xlDialogCreateList (796), xlDialogCreateNames (62), xlDialogCreatePublisher (217), xlDialogCreateRelationship (1272), xlDialogCustomizeToolbar (276), xlDialogCustomViews (493), xlDialogDataDelete (36), xlDialogDataLabel (379), xlDialogDataLabelMultiple (723), xlDialogDataSeries (40), xlDialogDataValidation (525), xlDialogDefineName (61), xlDialogDefineStyle (229), xlDialogDeleteFormat (111), xlDialogDeleteName (110), xlDialogDemote (203), xlDialogDisplay (27), xlDialogDocumentInspector (862), xlDialogEditboxProperties (438), xlDialogEditColor (223), xlDialogEditDelete (54), xlDialogEditionOptions (251), xlDialogEditSeries (228), xlDialogErrorbarX (463), xlDialogErrorbarY (464), xlDialogErrorChecking (732), xlDialogEvaluateFormula (709), xlDialogExternalDataProperties (530), xlDialogExtract (35), xlDialogFileDelete (6), xlDialogFileSharing (481), xlDialogFillGroup (200), xlDialogFillWorkgroup (301), xlDialogFilter (447), xlDialogFilterAdvanced (370), xlDialogFindFile (475), xlDialogFont (26), xlDialogFontProperties (381), xlDialogFormatAuto (269), xlDialogFormatChart (465), xlDialogFormatCharttype (423), xlDialogFormatFont (150), xlDialogFormatLegend (88), xlDialogFormatMain (225), xlDialogFormatMove (128), xlDialogFormatNumber (42), xlDialogFormatOverlay (226), xlDialogFormatSize (129), xlDialogFormatText (89), xlDialogFormulaFind (64), xlDialogFormulaGoto (63), xlDialogFormulaReplace (130), xlDialogFunctionWizard (450), xlDialogGallery3dArea (193), xlDialogGallery3dBar (272), xlDialogGallery3dColumn (194), xlDialogGallery3dLine (195), xlDialogGallery3dPie (196), xlDialogGallery3dSurface (273), xlDialogGalleryArea (67), xlDialogGalleryBar (68), xlDialogGalleryColumn (69), xlDialogGalleryCustom (388), xlDialogGalleryDoughnut (344), xlDialogGalleryLine (70), xlDialogGalleryPie (71), xlDialogGalleryRadar (249), xlDialogGalleryScatter (72), xlDialogGoalSeek (198), xlDialogGridlines (76), xlDialogImportTextFile (666), xlDialogInsert (55), xlDialogInsertHyperlink (596), xlDialogInsertNameLabel (496), xlDialogInsertObject (259), xlDialogInsertPicture (342), xlDialogInsertTitle (380), xlDialogLabelProperties (436), xlDialogListboxProperties (437), xlDialogMacroOptions (382), xlDialogMailEditMailer (470), xlDialogMailLogon (339), xlDialogMailNextLetter (378), xlDialogMainChart (85), xlDialogMainChartType (185), xlDialogManageRelationships (1271), xlDialogMenuEditor (322), xlDialogMove (262), xlDialogMyPermission (834), xlDialogNameManager (977), xlDialogNew (119), xlDialogNewName (978), xlDialogNewWebQuery (667), xlDialogNote (154), xlDialogObjectProperties (207), xlDialogObjectProtection (214), xlDialogOpen (1), xlDialogOpenLinks (2), xlDialogOpenMail (188), xlDialogOpenText (441), xlDialogOptionsCalculation (318), xlDialogOptionsChart (325), xlDialogOptionsEdit (319), xlDialogOptionsGeneral (356), xlDialogOptionsListsAdd (458), xlDialogOptionsME (647), xlDialogOptionsTransition (355), xlDialogOptionsView (320), xlDialogOutline (142), xlDialogOverlay (86), xlDialogOverlayChartType (186), xlDialogPageSetup (7), xlDialogParse (91), xlDialogPasteNames (58), xlDialogPasteSpecial (53), xlDialogPatterns (84), xlDialogPermission (832), xlDialogPhonetic (656), xlDialogPivotCalculatedField (570), xlDialogPivotCalculatedItem (572), xlDialogPivotClientServerSet (689), xlDialogPivotFieldGroup (433), xlDialogPivotFieldProperties (313), xlDialogPivotFieldUngroup (434), xlDialogPivotShowPages (421), xlDialogPivotSolveOrder (568), xlDialogPivotTableOptions (567), xlDialogPivotTableSlicerConnections (1183), xlDialogPivotTableWhatIfAnalysisSettings (1153), xlDialogPivotTableWizard (312), xlDialogPlacement (300), xlDialogPrint (8), xlDialogPrinterSetup (9), xlDialogPrintPreview (222), xlDialogPromote (202), xlDialogProperties (474), xlDialogPropertyFields (754), xlDialogProtectDocument (28), xlDialogProtectSharing (620), xlDialogPublishAsWebPage (653), xlDialogPushbuttonProperties (445), xlDialogRecommendedPivotTables (1258), xlDialogReplaceFont (134), xlDialogRoutingSlip (336), xlDialogRowHeight (127), xlDialogRun (17), xlDialogSaveAs (5), xlDialogSaveCopyAs (456), xlDialogSaveNewObject (208), xlDialogSaveWorkbook (145), xlDialogSaveWorkspace (285), xlDialogScale (87), xlDialogScenarioAdd (307), xlDialogScenarioCells (305), xlDialogScenarioEdit (308), xlDialogScenarioMerge (473), xlDialogScenarioSummary (311), xlDialogScrollbarProperties (420), xlDialogSearch (731), xlDialogSelectSpecial (132), xlDialogSendMail (189), xlDialogSeriesAxes (460), xlDialogSeriesOptions (557), xlDialogSeriesOrder (466), xlDialogSeriesShape (504), xlDialogSeriesX (461), xlDialogSeriesY (462), xlDialogSetBackgroundPicture (509), xlDialogSetManager (1109), xlDialogSetMDXEditor (1208), xlDialogSetPrintTitles (23), xlDialogSetTupleEditorOnColumns (1108), xlDialogSetTupleEditorOnRows (1107), xlDialogSetUpdateStatus (159), xlDialogShowDetail (204), xlDialogShowToolbar (220), xlDialogSize (261), xlDialogSlicerCreation (1182), xlDialogSlicerPivotTableConnections (1184), xlDialogSlicerSettings (1179), xlDialogSort (39), xlDialogSortSpecial (192), xlDialogSparklineInsertColumn (1134), xlDialogSparklineInsertLine (1133), xlDialogSparklineInsertWinLoss (1135), xlDialogSplit (137), xlDialogStandardFont (190), xlDialogStandardWidth (472), xlDialogStyle (44), xlDialogSubscribeTo (218), xlDialogSubtotalCreate (398), xlDialogSummaryInfo (474), xlDialogTable (41), xlDialogTabOrder (394), xlDialogTextToColumns (422), xlDialogUnhide (94), xlDialogUpdateLink (201), xlDialogVbaInsertFile (328), xlDialogVbaMakeAddin (478), xlDialogVbaProcedureDefinition (330), xlDialogView3d (197), xlDialogWebOptionsBrowsers (773), xlDialogWebOptionsEncoding (686), xlDialogWebOptionsFiles (684), xlDialogWebOptionsFonts (687), xlDialogWebOptionsGeneral (683), xlDialogWebOptionsPictures (685), xlDialogWindowMove (14), xlDialogWindowSize (13), xlDialogWorkbookAdd (281), xlDialogWorkbookCopy (283), xlDialogWorkbookInsert (354), xlDialogWorkbookMove (282), xlDialogWorkbookName (386), xlDialogWorkbookNew (302), xlDialogWorkbookOptions (284), xlDialogWorkbookProtect (417), xlDialogWorkbookTabSplit (415), xlDialogWorkbookUnhide (384), xlDialogWorkgroup (199), xlDialogWorkspace (95), xlDialogZoom (256) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDialogActivate = None
    xlDialogActiveCellFont = None
    xlDialogAddChartAutoformat = None
    xlDialogAddinManager = None
    xlDialogAlignment = None
    xlDialogApplyNames = None
    xlDialogApplyStyle = None
    xlDialogAppMove = None
    xlDialogAppSize = None
    xlDialogArrangeAll = None
    xlDialogAssignToObject = None
    xlDialogAssignToTool = None
    xlDialogAttachText = None
    xlDialogAttachToolbars = None
    xlDialogAutoCorrect = None
    xlDialogAxes = None
    xlDialogBorder = None
    xlDialogCalculation = None
    xlDialogCellProtection = None
    xlDialogChangeLink = None
    xlDialogChartAddData = None
    xlDialogChartLocation = None
    xlDialogChartOptionsDataLabelMultiple = None
    xlDialogChartOptionsDataLabels = None
    xlDialogChartOptionsDataTable = None
    xlDialogChartSourceData = None
    xlDialogChartTrend = None
    xlDialogChartType = None
    xlDialogChartWizard = None
    xlDialogCheckboxProperties = None
    xlDialogClear = None
    xlDialogColorPalette = None
    xlDialogColumnWidth = None
    xlDialogCombination = None
    xlDialogConditionalFormatting = None
    xlDialogConsolidate = None
    xlDialogCopyChart = None
    xlDialogCopyPicture = None
    xlDialogCreateList = None
    xlDialogCreateNames = None
    xlDialogCreatePublisher = None
    xlDialogCreateRelationship = None
    xlDialogCustomizeToolbar = None
    xlDialogCustomViews = None
    xlDialogDataDelete = None
    xlDialogDataLabel = None
    xlDialogDataLabelMultiple = None
    xlDialogDataSeries = None
    xlDialogDataValidation = None
    xlDialogDefineName = None
    xlDialogDefineStyle = None
    xlDialogDeleteFormat = None
    xlDialogDeleteName = None
    xlDialogDemote = None
    xlDialogDisplay = None
    xlDialogDocumentInspector = None
    xlDialogEditboxProperties = None
    xlDialogEditColor = None
    xlDialogEditDelete = None
    xlDialogEditionOptions = None
    xlDialogEditSeries = None
    xlDialogErrorbarX = None
    xlDialogErrorbarY = None
    xlDialogErrorChecking = None
    xlDialogEvaluateFormula = None
    xlDialogExternalDataProperties = None
    xlDialogExtract = None
    xlDialogFileDelete = None
    xlDialogFileSharing = None
    xlDialogFillGroup = None
    xlDialogFillWorkgroup = None
    xlDialogFilter = None
    xlDialogFilterAdvanced = None
    xlDialogFindFile = None
    xlDialogFont = None
    xlDialogFontProperties = None
    xlDialogFormatAuto = None
    xlDialogFormatChart = None
    xlDialogFormatCharttype = None
    xlDialogFormatFont = None
    xlDialogFormatLegend = None
    xlDialogFormatMain = None
    xlDialogFormatMove = None
    xlDialogFormatNumber = None
    xlDialogFormatOverlay = None
    xlDialogFormatSize = None
    xlDialogFormatText = None
    xlDialogFormulaFind = None
    xlDialogFormulaGoto = None
    xlDialogFormulaReplace = None
    xlDialogFunctionWizard = None
    xlDialogGallery3dArea = None
    xlDialogGallery3dBar = None
    xlDialogGallery3dColumn = None
    xlDialogGallery3dLine = None
    xlDialogGallery3dPie = None
    xlDialogGallery3dSurface = None
    xlDialogGalleryArea = None
    xlDialogGalleryBar = None
    xlDialogGalleryColumn = None
    xlDialogGalleryCustom = None
    xlDialogGalleryDoughnut = None
    xlDialogGalleryLine = None
    xlDialogGalleryPie = None
    xlDialogGalleryRadar = None
    xlDialogGalleryScatter = None
    xlDialogGoalSeek = None
    xlDialogGridlines = None
    xlDialogImportTextFile = None
    xlDialogInsert = None
    xlDialogInsertHyperlink = None
    xlDialogInsertNameLabel = None
    xlDialogInsertObject = None
    xlDialogInsertPicture = None
    xlDialogInsertTitle = None
    xlDialogLabelProperties = None
    xlDialogListboxProperties = None
    xlDialogMacroOptions = None
    xlDialogMailEditMailer = None
    xlDialogMailLogon = None
    xlDialogMailNextLetter = None
    xlDialogMainChart = None
    xlDialogMainChartType = None
    xlDialogManageRelationships = None
    xlDialogMenuEditor = None
    xlDialogMove = None
    xlDialogMyPermission = None
    xlDialogNameManager = None
    xlDialogNew = None
    xlDialogNewName = None
    xlDialogNewWebQuery = None
    xlDialogNote = None
    xlDialogObjectProperties = None
    xlDialogObjectProtection = None
    xlDialogOpen = None
    xlDialogOpenLinks = None
    xlDialogOpenMail = None
    xlDialogOpenText = None
    xlDialogOptionsCalculation = None
    xlDialogOptionsChart = None
    xlDialogOptionsEdit = None
    xlDialogOptionsGeneral = None
    xlDialogOptionsListsAdd = None
    xlDialogOptionsME = None
    xlDialogOptionsTransition = None
    xlDialogOptionsView = None
    xlDialogOutline = None
    xlDialogOverlay = None
    xlDialogOverlayChartType = None
    xlDialogPageSetup = None
    xlDialogParse = None
    xlDialogPasteNames = None
    xlDialogPasteSpecial = None
    xlDialogPatterns = None
    xlDialogPermission = None
    xlDialogPhonetic = None
    xlDialogPivotCalculatedField = None
    xlDialogPivotCalculatedItem = None
    xlDialogPivotClientServerSet = None
    xlDialogPivotFieldGroup = None
    xlDialogPivotFieldProperties = None
    xlDialogPivotFieldUngroup = None
    xlDialogPivotShowPages = None
    xlDialogPivotSolveOrder = None
    xlDialogPivotTableOptions = None
    xlDialogPivotTableSlicerConnections = None
    xlDialogPivotTableWhatIfAnalysisSettings = None
    xlDialogPivotTableWizard = None
    xlDialogPlacement = None
    xlDialogPrint = None
    xlDialogPrinterSetup = None
    xlDialogPrintPreview = None
    xlDialogPromote = None
    xlDialogProperties = None
    xlDialogPropertyFields = None
    xlDialogProtectDocument = None
    xlDialogProtectSharing = None
    xlDialogPublishAsWebPage = None
    xlDialogPushbuttonProperties = None
    xlDialogRecommendedPivotTables = None
    xlDialogReplaceFont = None
    xlDialogRoutingSlip = None
    xlDialogRowHeight = None
    xlDialogRun = None
    xlDialogSaveAs = None
    xlDialogSaveCopyAs = None
    xlDialogSaveNewObject = None
    xlDialogSaveWorkbook = None
    xlDialogSaveWorkspace = None
    xlDialogScale = None
    xlDialogScenarioAdd = None
    xlDialogScenarioCells = None
    xlDialogScenarioEdit = None
    xlDialogScenarioMerge = None
    xlDialogScenarioSummary = None
    xlDialogScrollbarProperties = None
    xlDialogSearch = None
    xlDialogSelectSpecial = None
    xlDialogSendMail = None
    xlDialogSeriesAxes = None
    xlDialogSeriesOptions = None
    xlDialogSeriesOrder = None
    xlDialogSeriesShape = None
    xlDialogSeriesX = None
    xlDialogSeriesY = None
    xlDialogSetBackgroundPicture = None
    xlDialogSetManager = None
    xlDialogSetMDXEditor = None
    xlDialogSetPrintTitles = None
    xlDialogSetTupleEditorOnColumns = None
    xlDialogSetTupleEditorOnRows = None
    xlDialogSetUpdateStatus = None
    xlDialogShowDetail = None
    xlDialogShowToolbar = None
    xlDialogSize = None
    xlDialogSlicerCreation = None
    xlDialogSlicerPivotTableConnections = None
    xlDialogSlicerSettings = None
    xlDialogSort = None
    xlDialogSortSpecial = None
    xlDialogSparklineInsertColumn = None
    xlDialogSparklineInsertLine = None
    xlDialogSparklineInsertWinLoss = None
    xlDialogSplit = None
    xlDialogStandardFont = None
    xlDialogStandardWidth = None
    xlDialogStyle = None
    xlDialogSubscribeTo = None
    xlDialogSubtotalCreate = None
    xlDialogSummaryInfo = None
    xlDialogTable = None
    xlDialogTabOrder = None
    xlDialogTextToColumns = None
    xlDialogUnhide = None
    xlDialogUpdateLink = None
    xlDialogVbaInsertFile = None
    xlDialogVbaMakeAddin = None
    xlDialogVbaProcedureDefinition = None
    xlDialogView3d = None
    xlDialogWebOptionsBrowsers = None
    xlDialogWebOptionsEncoding = None
    xlDialogWebOptionsFiles = None
    xlDialogWebOptionsFonts = None
    xlDialogWebOptionsGeneral = None
    xlDialogWebOptionsPictures = None
    xlDialogWindowMove = None
    xlDialogWindowSize = None
    xlDialogWorkbookAdd = None
    xlDialogWorkbookCopy = None
    xlDialogWorkbookInsert = None
    xlDialogWorkbookMove = None
    xlDialogWorkbookName = None
    xlDialogWorkbookNew = None
    xlDialogWorkbookOptions = None
    xlDialogWorkbookProtect = None
    xlDialogWorkbookTabSplit = None
    xlDialogWorkbookUnhide = None
    xlDialogWorkgroup = None
    xlDialogWorkspace = None
    xlDialogZoom = None
    _xlDialogChartSourceData = None
    _xlDialogPhonetic = None


class XlCalcFor(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalcFor, values: xlAllValues (0), xlColGroups (2), xlRowGroups (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllValues = None
    xlColGroups = None
    xlRowGroups = None


class XlCalcMemNumberFormatType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalcMemNumberFormatType, values: xlNumberFormatTypeDefault (0), xlNumberFormatTypeNumber (1), xlNumberFormatTypePercent (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNumberFormatTypeDefault = None
    xlNumberFormatTypeNumber = None
    xlNumberFormatTypePercent = None


class XlCalculatedMemberType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalculatedMemberType, values: xlCalculatedMeasure (2), xlCalculatedMember (0), xlCalculatedSet (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCalculatedMeasure = None
    xlCalculatedMember = None
    xlCalculatedSet = None


class XlCalculation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalculation, values: xlCalculationAutomatic (-4105), xlCalculationManual (-4135), xlCalculationSemiautomatic (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCalculationAutomatic = None
    xlCalculationManual = None
    xlCalculationSemiautomatic = None


class XlCalculationInterruptKey(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalculationInterruptKey, values: xlAnyKey (2), xlEscKey (1), xlNoKey (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAnyKey = None
    xlEscKey = None
    xlNoKey = None


class XlCalculationState(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCalculationState, values: xlCalculating (1), xlDone (0), xlPending (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCalculating = None
    xlDone = None
    xlPending = None


class XlCategoryLabelLevel(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCategoryLabelLevel, values: xlCategoryLabelLevelAll (-1), xlCategoryLabelLevelCustom (-2), xlCategoryLabelLevelNone (-3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCategoryLabelLevelAll = None
    xlCategoryLabelLevelCustom = None
    xlCategoryLabelLevelNone = None


class XlCategoryType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCategoryType, values: xlAutomaticScale (-4105), xlCategoryScale (2), xlTimeScale (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAutomaticScale = None
    xlCategoryScale = None
    xlTimeScale = None


class XlCellChangedState(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCellChangedState, values: xlCellChangeApplied (3), xlCellChanged (2), xlCellNotChanged (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCellChangeApplied = None
    xlCellChanged = None
    xlCellNotChanged = None


class XlCellInsertionMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCellInsertionMode, values: xlInsertDeleteCells (1), xlInsertEntireRows (2), xlOverwriteCells (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlInsertDeleteCells = None
    xlInsertEntireRows = None
    xlOverwriteCells = None


class XlCellType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCellType, values: xlCellTypeAllFormatConditions (-4172), xlCellTypeAllValidation (-4174), xlCellTypeBlanks (4), xlCellTypeComments (-4144), xlCellTypeConstants (2), xlCellTypeFormulas (-4123), xlCellTypeLastCell (11), xlCellTypeSameFormatConditions (-4173), xlCellTypeSameValidation (-4175), xlCellTypeVisible (12) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCellTypeAllFormatConditions = None
    xlCellTypeAllValidation = None
    xlCellTypeBlanks = None
    xlCellTypeComments = None
    xlCellTypeConstants = None
    xlCellTypeFormulas = None
    xlCellTypeLastCell = None
    xlCellTypeSameFormatConditions = None
    xlCellTypeSameValidation = None
    xlCellTypeVisible = None


class XlChartElementPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartElementPosition, values: xlChartElementPositionAutomatic (-4105), xlChartElementPositionCustom (-4114) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlChartElementPositionAutomatic = None
    xlChartElementPositionCustom = None


class XlChartGallery(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartGallery, values: xlAnyGallery (23), xlBuiltIn (21), xlUserDefined (22) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAnyGallery = None
    xlBuiltIn = None
    xlUserDefined = None


class XlChartItem(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartItem, values: xlAxis (21), xlAxisTitle (17), xlChartArea (2), xlChartTitle (4), xlCorners (6), xlDataLabel (0), xlDataTable (7), xlDisplayUnitLabel (30), xlDownBars (20), xlDropLines (26), xlErrorBars (9), xlFloor (23), xlHiLoLines (25), xlLeaderLines (29), xlLegend (24), xlLegendEntry (12), xlLegendKey (13), xlMajorGridlines (15), xlMinorGridlines (16), xlNothing (28), xlPivotChartDropZone (32), xlPivotChartFieldButton (31), xlPlotArea (19), xlRadarAxisLabels (27), xlSeries (3), xlSeriesLines (22), xlShape (14), xlTrendline (8), xlUpBars (18), xlWalls (5), xlXErrorBars (10), xlYErrorBars (11) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAxis = None
    xlAxisTitle = None
    xlChartArea = None
    xlChartTitle = None
    xlCorners = None
    xlDataLabel = None
    xlDataTable = None
    xlDisplayUnitLabel = None
    xlDownBars = None
    xlDropLines = None
    xlErrorBars = None
    xlFloor = None
    xlHiLoLines = None
    xlLeaderLines = None
    xlLegend = None
    xlLegendEntry = None
    xlLegendKey = None
    xlMajorGridlines = None
    xlMinorGridlines = None
    xlNothing = None
    xlPivotChartDropZone = None
    xlPivotChartFieldButton = None
    xlPlotArea = None
    xlRadarAxisLabels = None
    xlSeries = None
    xlSeriesLines = None
    xlShape = None
    xlTrendline = None
    xlUpBars = None
    xlWalls = None
    xlXErrorBars = None
    xlYErrorBars = None


class XlChartLocation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartLocation, values: xlLocationAsNewSheet (1), xlLocationAsObject (2), xlLocationAutomatic (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLocationAsNewSheet = None
    xlLocationAsObject = None
    xlLocationAutomatic = None


class XlChartPicturePlacement(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartPicturePlacement, values: xlAllFaces (7), xlEnd (2), xlEndSides (3), xlFront (4), xlFrontEnd (6), xlFrontSides (5), xlSides (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllFaces = None
    xlEnd = None
    xlEndSides = None
    xlFront = None
    xlFrontEnd = None
    xlFrontSides = None
    xlSides = None


class XlChartPictureType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartPictureType, values: xlStack (2), xlStackScale (3), xlStretch (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlStack = None
    xlStackScale = None
    xlStretch = None


class XlChartSplitType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartSplitType, values: xlSplitByCustomSplit (4), xlSplitByPercentValue (3), xlSplitByPosition (1), xlSplitByValue (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSplitByCustomSplit = None
    xlSplitByPercentValue = None
    xlSplitByPosition = None
    xlSplitByValue = None


class XlChartType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlChartType, values: xl3DArea (-4098), xl3DAreaStacked (78), xl3DAreaStacked100 (79), xl3DBarClustered (60), xl3DBarStacked (61), xl3DBarStacked100 (62), xl3DColumn (-4100), xl3DColumnClustered (54), xl3DColumnStacked (55), xl3DColumnStacked100 (56), xl3DLine (-4101), xl3DPie (-4102), xl3DPieExploded (70), xlArea (1), xlAreaStacked (76), xlAreaStacked100 (77), xlBarClustered (57), xlBarOfPie (71), xlBarStacked (58), xlBarStacked100 (59), xlBubble (15), xlBubble3DEffect (87), xlColumnClustered (51), xlColumnStacked (52), xlColumnStacked100 (53), xlConeBarClustered (102), xlConeBarStacked (103), xlConeBarStacked100 (104), xlConeCol (105), xlConeColClustered (99), xlConeColStacked (100), xlConeColStacked100 (101), xlCylinderBarClustered (95), xlCylinderBarStacked (96), xlCylinderBarStacked100 (97), xlCylinderCol (98), xlCylinderColClustered (92), xlCylinderColStacked (93), xlCylinderColStacked100 (94), xlDoughnut (-4120), xlDoughnutExploded (80), xlLine (4), xlLineMarkers (65), xlLineMarkersStacked (66), xlLineMarkersStacked100 (67), xlLineStacked (63), xlLineStacked100 (64), xlPie (5), xlPieExploded (69), xlPieOfPie (68), xlPyramidBarClustered (109), xlPyramidBarStacked (110), xlPyramidBarStacked100 (111), xlPyramidCol (112), xlPyramidColClustered (106), xlPyramidColStacked (107), xlPyramidColStacked100 (108), xlRadar (-4151), xlRadarFilled (82), xlRadarMarkers (81), xlStockHLC (88), xlStockOHLC (89), xlStockVHLC (90), xlStockVOHLC (91), xlSurface (83), xlSurfaceTopView (85), xlSurfaceTopViewWireframe (86), xlSurfaceWireframe (84), xlXYScatter (-4169), xlXYScatterLines (74), xlXYScatterLinesNoMarkers (75), xlXYScatterSmooth (72), xlXYScatterSmoothNoMarkers (73) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xl3DArea = None
    xl3DAreaStacked = None
    xl3DAreaStacked100 = None
    xl3DBarClustered = None
    xl3DBarStacked = None
    xl3DBarStacked100 = None
    xl3DColumn = None
    xl3DColumnClustered = None
    xl3DColumnStacked = None
    xl3DColumnStacked100 = None
    xl3DLine = None
    xl3DPie = None
    xl3DPieExploded = None
    xlArea = None
    xlAreaStacked = None
    xlAreaStacked100 = None
    xlBarClustered = None
    xlBarOfPie = None
    xlBarStacked = None
    xlBarStacked100 = None
    xlBubble = None
    xlBubble3DEffect = None
    xlColumnClustered = None
    xlColumnStacked = None
    xlColumnStacked100 = None
    xlConeBarClustered = None
    xlConeBarStacked = None
    xlConeBarStacked100 = None
    xlConeCol = None
    xlConeColClustered = None
    xlConeColStacked = None
    xlConeColStacked100 = None
    xlCylinderBarClustered = None
    xlCylinderBarStacked = None
    xlCylinderBarStacked100 = None
    xlCylinderCol = None
    xlCylinderColClustered = None
    xlCylinderColStacked = None
    xlCylinderColStacked100 = None
    xlDoughnut = None
    xlDoughnutExploded = None
    xlLine = None
    xlLineMarkers = None
    xlLineMarkersStacked = None
    xlLineMarkersStacked100 = None
    xlLineStacked = None
    xlLineStacked100 = None
    xlPie = None
    xlPieExploded = None
    xlPieOfPie = None
    xlPyramidBarClustered = None
    xlPyramidBarStacked = None
    xlPyramidBarStacked100 = None
    xlPyramidCol = None
    xlPyramidColClustered = None
    xlPyramidColStacked = None
    xlPyramidColStacked100 = None
    xlRadar = None
    xlRadarFilled = None
    xlRadarMarkers = None
    xlStockHLC = None
    xlStockOHLC = None
    xlStockVHLC = None
    xlStockVOHLC = None
    xlSurface = None
    xlSurfaceTopView = None
    xlSurfaceTopViewWireframe = None
    xlSurfaceWireframe = None
    xlXYScatter = None
    xlXYScatterLines = None
    xlXYScatterLinesNoMarkers = None
    xlXYScatterSmooth = None
    xlXYScatterSmoothNoMarkers = None


class XlCheckInVersionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCheckInVersionType, values: xlCheckInMajorVersion (1), xlCheckInMinorVersion (0), xlCheckInOverwriteVersion (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCheckInMajorVersion = None
    xlCheckInMinorVersion = None
    xlCheckInOverwriteVersion = None


class XlClipboardFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlClipboardFormat, values: xlClipboardFormatBIFF (8), xlClipboardFormatBIFF12 (63), xlClipboardFormatBIFF2 (18), xlClipboardFormatBIFF3 (20), xlClipboardFormatBIFF4 (30), xlClipboardFormatBinary (15), xlClipboardFormatBitmap (9), xlClipboardFormatCGM (13), xlClipboardFormatCSV (5), xlClipboardFormatDIF (4), xlClipboardFormatDspText (12), xlClipboardFormatEmbeddedObject (21), xlClipboardFormatEmbedSource (22), xlClipboardFormatLink (11), xlClipboardFormatLinkSource (23), xlClipboardFormatLinkSourceDesc (32), xlClipboardFormatMovie (24), xlClipboardFormatNative (14), xlClipboardFormatObjectDesc (31), xlClipboardFormatObjectLink (19), xlClipboardFormatOwnerLink (17), xlClipboardFormatPICT (2), xlClipboardFormatPrintPICT (3), xlClipboardFormatRTF (7), xlClipboardFormatScreenPICT (29), xlClipboardFormatStandardFont (28), xlClipboardFormatStandardScale (27), xlClipboardFormatSYLK (6), xlClipboardFormatTable (16), xlClipboardFormatText (0), xlClipboardFormatToolFace (25), xlClipboardFormatToolFacePICT (26), xlClipboardFormatVALU (1), xlClipboardFormatWK1 (10) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlClipboardFormatBIFF = None
    xlClipboardFormatBIFF12 = None
    xlClipboardFormatBIFF2 = None
    xlClipboardFormatBIFF3 = None
    xlClipboardFormatBIFF4 = None
    xlClipboardFormatBinary = None
    xlClipboardFormatBitmap = None
    xlClipboardFormatCGM = None
    xlClipboardFormatCSV = None
    xlClipboardFormatDIF = None
    xlClipboardFormatDspText = None
    xlClipboardFormatEmbeddedObject = None
    xlClipboardFormatEmbedSource = None
    xlClipboardFormatLink = None
    xlClipboardFormatLinkSource = None
    xlClipboardFormatLinkSourceDesc = None
    xlClipboardFormatMovie = None
    xlClipboardFormatNative = None
    xlClipboardFormatObjectDesc = None
    xlClipboardFormatObjectLink = None
    xlClipboardFormatOwnerLink = None
    xlClipboardFormatPICT = None
    xlClipboardFormatPrintPICT = None
    xlClipboardFormatRTF = None
    xlClipboardFormatScreenPICT = None
    xlClipboardFormatStandardFont = None
    xlClipboardFormatStandardScale = None
    xlClipboardFormatSYLK = None
    xlClipboardFormatTable = None
    xlClipboardFormatText = None
    xlClipboardFormatToolFace = None
    xlClipboardFormatToolFacePICT = None
    xlClipboardFormatVALU = None
    xlClipboardFormatWK1 = None


class XlCmdType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCmdType, values: xlCmdCube (1), xlCmdDAX (8), xlCmdDefault (4), xlCmdExcel (7), xlCmdList (5), xlCmdSql (2), xlCmdTable (3), xlCmdTableCollection (6) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCmdCube = None
    xlCmdDAX = None
    xlCmdDefault = None
    xlCmdExcel = None
    xlCmdList = None
    xlCmdSql = None
    xlCmdTable = None
    xlCmdTableCollection = None


class XlColorIndex(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlColorIndex, values: xlColorIndexAutomatic (-4105), xlColorIndexNone (-4142) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColorIndexAutomatic = None
    xlColorIndexNone = None


class XlColumnDataType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlColumnDataType, values: xlDMYFormat (4), xlDYMFormat (7), xlEMDFormat (10), xlGeneralFormat (1), xlMDYFormat (3), xlMYDFormat (6), xlSkipColumn (9), xlTextFormat (2), xlYDMFormat (8), xlYMDFormat (5) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDMYFormat = None
    xlDYMFormat = None
    xlEMDFormat = None
    xlGeneralFormat = None
    xlMDYFormat = None
    xlMYDFormat = None
    xlSkipColumn = None
    xlTextFormat = None
    xlYDMFormat = None
    xlYMDFormat = None


class XlCommandUnderlines(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCommandUnderlines, values: xlCommandUnderlinesAutomatic (-4105), xlCommandUnderlinesOff (-4146), xlCommandUnderlinesOn (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCommandUnderlinesAutomatic = None
    xlCommandUnderlinesOff = None
    xlCommandUnderlinesOn = None


class XlCommentDisplayMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCommentDisplayMode, values: xlCommentAndIndicator (1), xlCommentIndicatorOnly (-1), xlNoIndicator (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCommentAndIndicator = None
    xlCommentIndicatorOnly = None
    xlNoIndicator = None


class XlConditionValueTypes(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlConditionValueTypes, values: xlConditionValueAutomaticMax (7), xlConditionValueAutomaticMin (6), xlConditionValueFormula (4), xlConditionValueHighestValue (2), xlConditionValueLowestValue (1), xlConditionValueNone (-1), xlConditionValueNumber (0), xlConditionValuePercent (3), xlConditionValuePercentile (5) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlConditionValueAutomaticMax = None
    xlConditionValueAutomaticMin = None
    xlConditionValueFormula = None
    xlConditionValueHighestValue = None
    xlConditionValueLowestValue = None
    xlConditionValueNone = None
    xlConditionValueNumber = None
    xlConditionValuePercent = None
    xlConditionValuePercentile = None


class XlConnectionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlConnectionType, values: xlConnectionTypeDATAFEED (6), xlConnectionTypeMODEL (7), xlConnectionTypeNOSOURCE (9), xlConnectionTypeODBC (2), xlConnectionTypeOLEDB (1), xlConnectionTypeTEXT (4), xlConnectionTypeWEB (5), xlConnectionTypeWORKSHEET (8), xlConnectionTypeXMLMAP (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlConnectionTypeDATAFEED = None
    xlConnectionTypeMODEL = None
    xlConnectionTypeNOSOURCE = None
    xlConnectionTypeODBC = None
    xlConnectionTypeOLEDB = None
    xlConnectionTypeTEXT = None
    xlConnectionTypeWEB = None
    xlConnectionTypeWORKSHEET = None
    xlConnectionTypeXMLMAP = None


class XlConsolidationFunction(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlConsolidationFunction, values: xlAverage (-4106), xlCount (-4112), xlCountNums (-4113), xlDistinctCount (11), xlMax (-4136), xlMin (-4139), xlProduct (-4149), xlStDev (-4155), xlStDevP (-4156), xlSum (-4157), xlUnknown (1000), xlVar (-4164), xlVarP (-4165) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAverage = None
    xlCount = None
    xlCountNums = None
    xlDistinctCount = None
    xlMax = None
    xlMin = None
    xlProduct = None
    xlStDev = None
    xlStDevP = None
    xlSum = None
    xlUnknown = None
    xlVar = None
    xlVarP = None


class XlContainsOperator(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlContainsOperator, values: xlBeginsWith (2), xlContains (0), xlDoesNotContain (1), xlEndsWith (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBeginsWith = None
    xlContains = None
    xlDoesNotContain = None
    xlEndsWith = None


class XlCopyPictureFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCopyPictureFormat, values: xlBitmap (2), xlPicture (-4147) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBitmap = None
    xlPicture = None


class XlCorruptLoad(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCorruptLoad, values: xlExtractData (2), xlNormalLoad (0), xlRepairFile (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlExtractData = None
    xlNormalLoad = None
    xlRepairFile = None


class XlCreator(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCreator, values: xlCreatorCode (1480803660) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCreatorCode = None


class XlCredentialsMethod(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCredentialsMethod, values: xlCredentialsMethodIntegrated (0), xlCredentialsMethodNone (1), xlCredentialsMethodStored (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCredentialsMethodIntegrated = None
    xlCredentialsMethodNone = None
    xlCredentialsMethodStored = None


class XlCubeFieldSubType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCubeFieldSubType, values: xlCubeAttribute (4), xlCubeCalculatedMeasure (5), xlCubeHierarchy (1), xlCubeImplicitMeasure (11), xlCubeKPIGoal (7), xlCubeKPIStatus (8), xlCubeKPITrend (9), xlCubeKPIValue (6), xlCubeKPIWeight (10), xlCubeMeasure (2), xlCubeSet (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCubeAttribute = None
    xlCubeCalculatedMeasure = None
    xlCubeHierarchy = None
    xlCubeImplicitMeasure = None
    xlCubeKPIGoal = None
    xlCubeKPIStatus = None
    xlCubeKPITrend = None
    xlCubeKPIValue = None
    xlCubeKPIWeight = None
    xlCubeMeasure = None
    xlCubeSet = None


class XlCubeFieldType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCubeFieldType, values: xlHierarchy (1), xlMeasure (2), xlSet (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHierarchy = None
    xlMeasure = None
    xlSet = None


class XlCutCopyMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCutCopyMode, values: xlCopy (1), xlCut (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCopy = None
    xlCut = None


class XlCVError(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlCVError, values: xlErrDiv0 (2007), xlErrNA (2042), xlErrName (2029), xlErrNull (2000), xlErrNum (2036), xlErrRef (2023), xlErrValue (2015) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlErrDiv0 = None
    xlErrNA = None
    xlErrName = None
    xlErrNull = None
    xlErrNum = None
    xlErrRef = None
    xlErrValue = None


class XlDataBarAxisPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataBarAxisPosition, values: xlDataBarAxisAutomatic (0), xlDataBarAxisMidpoint (1), xlDataBarAxisNone (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataBarAxisAutomatic = None
    xlDataBarAxisMidpoint = None
    xlDataBarAxisNone = None


class XlDataBarBorderType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataBarBorderType, values: xlDataBarBorderNone (0), xlDataBarBorderSolid (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataBarBorderNone = None
    xlDataBarBorderSolid = None


class XlDataBarFillType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataBarFillType, values: xlDataBarFillGradient (1), xlDataBarFillSolid (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataBarFillGradient = None
    xlDataBarFillSolid = None


class XlDataBarNegativeColorType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataBarNegativeColorType, values: xlDataBarColor (0), xlDataBarSameAsPositive (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataBarColor = None
    xlDataBarSameAsPositive = None


class XlDataLabelPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataLabelPosition, values: xlLabelPositionAbove (0), xlLabelPositionBelow (1), xlLabelPositionBestFit (5), xlLabelPositionCenter (-4108), xlLabelPositionCustom (7), xlLabelPositionInsideBase (4), xlLabelPositionInsideEnd (3), xlLabelPositionLeft (-4131), xlLabelPositionMixed (6), xlLabelPositionOutsideEnd (2), xlLabelPositionRight (-4152) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLabelPositionAbove = None
    xlLabelPositionBelow = None
    xlLabelPositionBestFit = None
    xlLabelPositionCenter = None
    xlLabelPositionCustom = None
    xlLabelPositionInsideBase = None
    xlLabelPositionInsideEnd = None
    xlLabelPositionLeft = None
    xlLabelPositionMixed = None
    xlLabelPositionOutsideEnd = None
    xlLabelPositionRight = None


class XlDataLabelSeparator(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataLabelSeparator, values: xlDataLabelSeparatorDefault (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataLabelSeparatorDefault = None


class XlDataLabelsType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataLabelsType, values: xlDataLabelsShowBubbleSizes (6), xlDataLabelsShowLabel (4), xlDataLabelsShowLabelAndPercent (5), xlDataLabelsShowNone (-4142), xlDataLabelsShowPercent (3), xlDataLabelsShowValue (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataLabelsShowBubbleSizes = None
    xlDataLabelsShowLabel = None
    xlDataLabelsShowLabelAndPercent = None
    xlDataLabelsShowNone = None
    xlDataLabelsShowPercent = None
    xlDataLabelsShowValue = None


class XlDataSeriesDate(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataSeriesDate, values: xlDay (1), xlMonth (3), xlWeekday (2), xlYear (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDay = None
    xlMonth = None
    xlWeekday = None
    xlYear = None


class XlDataSeriesType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDataSeriesType, values: xlAutoFill (4), xlChronological (3), xlDataSeriesLinear (-4132), xlGrowth (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAutoFill = None
    xlChronological = None
    xlDataSeriesLinear = None
    xlGrowth = None


class XlDeleteShiftDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDeleteShiftDirection, values: xlShiftToLeft (-4159), xlShiftUp (-4162) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlShiftToLeft = None
    xlShiftUp = None


class XlDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDirection, values: xlDown (-4121), xlToLeft (-4159), xlToRight (-4161), xlUp (-4162) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDown = None
    xlToLeft = None
    xlToRight = None
    xlUp = None


class XlDisplayBlanksAs(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDisplayBlanksAs, values: xlInterpolated (3), xlNotPlotted (1), xlZero (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlInterpolated = None
    xlNotPlotted = None
    xlZero = None


class XlDisplayDrawingObjects(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDisplayDrawingObjects, values: xlDisplayShapes (-4104), xlHide (3), xlPlaceholders (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDisplayShapes = None
    xlHide = None
    xlPlaceholders = None


class XlDisplayUnit(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDisplayUnit, values: xlHundredMillions (-8), xlHundreds (-2), xlHundredThousands (-5), xlMillionMillions (-10), xlMillions (-6), xlTenMillions (-7), xlTenThousands (-4), xlThousandMillions (-9), xlThousands (-3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHundredMillions = None
    xlHundreds = None
    xlHundredThousands = None
    xlMillionMillions = None
    xlMillions = None
    xlTenMillions = None
    xlTenThousands = None
    xlThousandMillions = None
    xlThousands = None


class XlDupeUnique(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDupeUnique, values: xlDuplicate (1), xlUnique (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDuplicate = None
    xlUnique = None


class XlDVAlertStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDVAlertStyle, values: xlValidAlertInformation (3), xlValidAlertStop (1), xlValidAlertWarning (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlValidAlertInformation = None
    xlValidAlertStop = None
    xlValidAlertWarning = None


class XlDVType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDVType, values: xlValidateCustom (7), xlValidateDate (4), xlValidateDecimal (2), xlValidateInputOnly (0), xlValidateList (3), xlValidateTextLength (6), xlValidateTime (5), xlValidateWholeNumber (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlValidateCustom = None
    xlValidateDate = None
    xlValidateDecimal = None
    xlValidateInputOnly = None
    xlValidateList = None
    xlValidateTextLength = None
    xlValidateTime = None
    xlValidateWholeNumber = None


class XlDynamicFilterCriteria(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlDynamicFilterCriteria, values: xlFilterAboveAverage (33), xlFilterAllDatesInPeriodApril (24), xlFilterAllDatesInPeriodAugust (28), xlFilterAllDatesInPeriodDecember (32), xlFilterAllDatesInPeriodFebruray (22), xlFilterAllDatesInPeriodJanuary (21), xlFilterAllDatesInPeriodJuly (27), xlFilterAllDatesInPeriodJune (26), xlFilterAllDatesInPeriodMarch (23), xlFilterAllDatesInPeriodMay (25), xlFilterAllDatesInPeriodNovember (31), xlFilterAllDatesInPeriodOctober (30), xlFilterAllDatesInPeriodQuarter1 (17), xlFilterAllDatesInPeriodQuarter2 (18), xlFilterAllDatesInPeriodQuarter3 (19), xlFilterAllDatesInPeriodQuarter4 (20), xlFilterAllDatesInPeriodSeptember (29), xlFilterBelowAverage (34), xlFilterLastMonth (8), xlFilterLastQuarter (11), xlFilterLastWeek (5), xlFilterLastYear (14), xlFilterNextMonth (9), xlFilterNextQuarter (12), xlFilterNextWeek (6), xlFilterNextYear (15), xlFilterThisMonth (7), xlFilterThisQuarter (10), xlFilterThisWeek (4), xlFilterThisYear (13), xlFilterToday (1), xlFilterTomorrow (3), xlFilterYearToDate (16), xlFilterYesterday (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFilterAboveAverage = None
    xlFilterAllDatesInPeriodApril = None
    xlFilterAllDatesInPeriodAugust = None
    xlFilterAllDatesInPeriodDecember = None
    xlFilterAllDatesInPeriodFebruray = None
    xlFilterAllDatesInPeriodJanuary = None
    xlFilterAllDatesInPeriodJuly = None
    xlFilterAllDatesInPeriodJune = None
    xlFilterAllDatesInPeriodMarch = None
    xlFilterAllDatesInPeriodMay = None
    xlFilterAllDatesInPeriodNovember = None
    xlFilterAllDatesInPeriodOctober = None
    xlFilterAllDatesInPeriodQuarter1 = None
    xlFilterAllDatesInPeriodQuarter2 = None
    xlFilterAllDatesInPeriodQuarter3 = None
    xlFilterAllDatesInPeriodQuarter4 = None
    xlFilterAllDatesInPeriodSeptember = None
    xlFilterBelowAverage = None
    xlFilterLastMonth = None
    xlFilterLastQuarter = None
    xlFilterLastWeek = None
    xlFilterLastYear = None
    xlFilterNextMonth = None
    xlFilterNextQuarter = None
    xlFilterNextWeek = None
    xlFilterNextYear = None
    xlFilterThisMonth = None
    xlFilterThisQuarter = None
    xlFilterThisWeek = None
    xlFilterThisYear = None
    xlFilterToday = None
    xlFilterTomorrow = None
    xlFilterYearToDate = None
    xlFilterYesterday = None


class XlEditionFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEditionFormat, values: xlBIFF (2), xlPICT (1), xlRTF (4), xlVALU (8) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBIFF = None
    xlPICT = None
    xlRTF = None
    xlVALU = None


class XlEditionOptionsOption(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEditionOptionsOption, values: xlAutomaticUpdate (4), xlCancel (1), xlChangeAttributes (6), xlManualUpdate (5), xlOpenSource (3), xlSelect (3), xlSendPublisher (2), xlUpdateSubscriber (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAutomaticUpdate = None
    xlCancel = None
    xlChangeAttributes = None
    xlManualUpdate = None
    xlOpenSource = None
    xlSelect = None
    xlSendPublisher = None
    xlUpdateSubscriber = None


class XlEditionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEditionType, values: xlPublisher (1), xlSubscriber (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPublisher = None
    xlSubscriber = None


class XlEnableCancelKey(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEnableCancelKey, values: xlDisabled (0), xlErrorHandler (2), xlInterrupt (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDisabled = None
    xlErrorHandler = None
    xlInterrupt = None


class XlEnableSelection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEnableSelection, values: xlNoRestrictions (0), xlNoSelection (-4142), xlUnlockedCells (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNoRestrictions = None
    xlNoSelection = None
    xlUnlockedCells = None


class XlEndStyleCap(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlEndStyleCap, values: xlCap (1), xlNoCap (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCap = None
    xlNoCap = None


class XlErrorBarDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlErrorBarDirection, values: xlX (-4168), xlY (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlX = None
    xlY = None


class XlErrorBarInclude(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlErrorBarInclude, values: xlErrorBarIncludeBoth (1), xlErrorBarIncludeMinusValues (3), xlErrorBarIncludeNone (-4142), xlErrorBarIncludePlusValues (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlErrorBarIncludeBoth = None
    xlErrorBarIncludeMinusValues = None
    xlErrorBarIncludeNone = None
    xlErrorBarIncludePlusValues = None


class XlErrorBarType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlErrorBarType, values: xlErrorBarTypeCustom (-4114), xlErrorBarTypeFixedValue (1), xlErrorBarTypePercent (2), xlErrorBarTypeStDev (-4155), xlErrorBarTypeStError (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlErrorBarTypeCustom = None
    xlErrorBarTypeFixedValue = None
    xlErrorBarTypePercent = None
    xlErrorBarTypeStDev = None
    xlErrorBarTypeStError = None


class XlErrorChecks(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlErrorChecks, values: xlEmptyCellReferences (7), xlEvaluateToError (1), xlInconsistentFormula (4), xlInconsistentListFormula (9), xlListDataValidation (8), xlNumberAsText (3), xlOmittedCells (5), xlTextDate (2), xlUnlockedFormulaCells (6) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlEmptyCellReferences = None
    xlEvaluateToError = None
    xlInconsistentFormula = None
    xlInconsistentListFormula = None
    xlListDataValidation = None
    xlNumberAsText = None
    xlOmittedCells = None
    xlTextDate = None
    xlUnlockedFormulaCells = None


class XlFileAccess(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFileAccess, values: xlReadOnly (3), xlReadWrite (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlReadOnly = None
    xlReadWrite = None


class XlFileFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFileFormat, values: xlAddIn (18), xlAddIn8 (18), xlCSV (6), xlCSVMac (22), xlCSVMSDOS (24), xlCSVWindows (23), xlCurrentPlatformText (-4158), xlDBF2 (7), xlDBF3 (8), xlDBF4 (11), xlDIF (9), xlExcel12 (50), xlExcel2 (16), xlExcel2FarEast (27), xlExcel3 (29), xlExcel4 (33), xlExcel4Workbook (35), xlExcel5 (39), xlExcel7 (39), xlExcel8 (56), xlExcel9795 (43), xlHtml (44), xlIntlAddIn (26), xlIntlMacro (25), xlOpenDocumentSpreadsheet (60), xlOpenXMLAddIn (55), xlOpenXMLStrictWorkbook (61), xlOpenXMLTemplate (54), xlOpenXMLTemplateMacroEnabled (53), xlOpenXMLWorkbook (51), xlOpenXMLWorkbookMacroEnabled (52), xlSYLK (2), xlTemplate (17), xlTemplate8 (17), xlTextMac (19), xlTextMSDOS (21), xlTextPrinter (36), xlTextWindows (20), xlUnicodeText (42), xlWebArchive (45), xlWJ2WD1 (14), xlWJ3 (40), xlWJ3FJ3 (41), xlWK1 (5), xlWK1ALL (31), xlWK1FMT (30), xlWK3 (15), xlWK3FM3 (32), xlWK4 (38), xlWKS (4), xlWorkbookDefault (51), xlWorkbookNormal (-4143), xlWorks2FarEast (28), xlWQ1 (34), xlXMLSpreadsheet (46) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAddIn = None
    xlAddIn8 = None
    xlCSV = None
    xlCSVMac = None
    xlCSVMSDOS = None
    xlCSVWindows = None
    xlCurrentPlatformText = None
    xlDBF2 = None
    xlDBF3 = None
    xlDBF4 = None
    xlDIF = None
    xlExcel12 = None
    xlExcel2 = None
    xlExcel2FarEast = None
    xlExcel3 = None
    xlExcel4 = None
    xlExcel4Workbook = None
    xlExcel5 = None
    xlExcel7 = None
    xlExcel8 = None
    xlExcel9795 = None
    xlHtml = None
    xlIntlAddIn = None
    xlIntlMacro = None
    xlOpenDocumentSpreadsheet = None
    xlOpenXMLAddIn = None
    xlOpenXMLStrictWorkbook = None
    xlOpenXMLTemplate = None
    xlOpenXMLTemplateMacroEnabled = None
    xlOpenXMLWorkbook = None
    xlOpenXMLWorkbookMacroEnabled = None
    xlSYLK = None
    xlTemplate = None
    xlTemplate8 = None
    xlTextMac = None
    xlTextMSDOS = None
    xlTextPrinter = None
    xlTextWindows = None
    xlUnicodeText = None
    xlWebArchive = None
    xlWJ2WD1 = None
    xlWJ3 = None
    xlWJ3FJ3 = None
    xlWK1 = None
    xlWK1ALL = None
    xlWK1FMT = None
    xlWK3 = None
    xlWK3FM3 = None
    xlWK4 = None
    xlWKS = None
    xlWorkbookDefault = None
    xlWorkbookNormal = None
    xlWorks2FarEast = None
    xlWQ1 = None
    xlXMLSpreadsheet = None


class XlFileValidationPivotMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFileValidationPivotMode, values: xlFileValidationPivotDefault (0), xlFileValidationPivotRun (1), xlFileValidationPivotSkip (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFileValidationPivotDefault = None
    xlFileValidationPivotRun = None
    xlFileValidationPivotSkip = None


class XlFillWith(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFillWith, values: xlFillWithAll (-4104), xlFillWithContents (2), xlFillWithFormats (-4122) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFillWithAll = None
    xlFillWithContents = None
    xlFillWithFormats = None


class XlFilterAction(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFilterAction, values: xlFilterCopy (2), xlFilterInPlace (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFilterCopy = None
    xlFilterInPlace = None


class XlFilterAllDatesInPeriod(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFilterAllDatesInPeriod, values: xlFilterAllDatesInPeriodDay (2), xlFilterAllDatesInPeriodHour (3), xlFilterAllDatesInPeriodMinute (4), xlFilterAllDatesInPeriodMonth (1), xlFilterAllDatesInPeriodSecond (5), xlFilterAllDatesInPeriodYear (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFilterAllDatesInPeriodDay = None
    xlFilterAllDatesInPeriodHour = None
    xlFilterAllDatesInPeriodMinute = None
    xlFilterAllDatesInPeriodMonth = None
    xlFilterAllDatesInPeriodSecond = None
    xlFilterAllDatesInPeriodYear = None


class XlFilterStatus(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFilterStatus, values: xlFilterStatusDateHasTime (2), xlFilterStatusDateWrongOrder (1), xlFilterStatusInvalidDate (3), xlFilterStatusOK (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFilterStatusDateHasTime = None
    xlFilterStatusDateWrongOrder = None
    xlFilterStatusInvalidDate = None
    xlFilterStatusOK = None


class XlFindLookIn(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFindLookIn, values: xlComments (-4144), xlFormulas (-4123), xlValues (-4163) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlComments = None
    xlFormulas = None
    xlValues = None


class XlFixedFormatQuality(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFixedFormatQuality, values: xlQualityMinimum (1), xlQualityStandard (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlQualityMinimum = None
    xlQualityStandard = None


class XlFixedFormatType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFixedFormatType, values: xlTypePDF (0), xlTypeXPS (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTypePDF = None
    xlTypeXPS = None


class XlFormatConditionOperator(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFormatConditionOperator, values: xlBetween (1), xlEqual (3), xlGreater (5), xlGreaterEqual (7), xlLess (6), xlLessEqual (8), xlNotBetween (2), xlNotEqual (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBetween = None
    xlEqual = None
    xlGreater = None
    xlGreaterEqual = None
    xlLess = None
    xlLessEqual = None
    xlNotBetween = None
    xlNotEqual = None


class XlFormatConditionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFormatConditionType, values: xlAboveAverageCondition (12), xlBlanksCondition (10), xlCellValue (1), xlColorScale (3), xlDatabar (4), xlErrorsCondition (16), xlExpression (2), xlIconSets (6), xlNoBlanksCondition (13), xlNoErrorsCondition (17), xlTextString (9), xlTimePeriod (11), xlTop10 (5), xlUniqueValues (8) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAboveAverageCondition = None
    xlBlanksCondition = None
    xlCellValue = None
    xlColorScale = None
    xlDatabar = None
    xlErrorsCondition = None
    xlExpression = None
    xlIconSets = None
    xlNoBlanksCondition = None
    xlNoErrorsCondition = None
    xlTextString = None
    xlTimePeriod = None
    xlTop10 = None
    xlUniqueValues = None


class XlFormatFilterTypes(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFormatFilterTypes, values: xlFilterBottom (0), xlFilterBottomPercent (2), xlFilterTop (1), xlFilterTopPercent (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFilterBottom = None
    xlFilterBottomPercent = None
    xlFilterTop = None
    xlFilterTopPercent = None


class XlFormControl(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFormControl, values: xlButtonControl (0), xlCheckBox (1), xlDropDown (2), xlEditBox (3), xlGroupBox (4), xlLabel (5), xlListBox (6), xlOptionButton (7), xlScrollBar (8), xlSpinner (9) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlButtonControl = None
    xlCheckBox = None
    xlDropDown = None
    xlEditBox = None
    xlGroupBox = None
    xlLabel = None
    xlListBox = None
    xlOptionButton = None
    xlScrollBar = None
    xlSpinner = None


class XlFormulaLabel(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlFormulaLabel, values: xlColumnLabels (2), xlMixedLabels (3), xlNoLabels (-4142), xlRowLabels (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColumnLabels = None
    xlMixedLabels = None
    xlNoLabels = None
    xlRowLabels = None


class XlGenerateTableRefs(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlGenerateTableRefs, values: xlGenerateTableRefA1 (0), xlGenerateTableRefStruct (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlGenerateTableRefA1 = None
    xlGenerateTableRefStruct = None


class XlGradientFillType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlGradientFillType, values: xlGradientFillLinear (0), xlGradientFillPath (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlGradientFillLinear = None
    xlGradientFillPath = None


class XlHAlign(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlHAlign, values: xlHAlignCenter (-4108), xlHAlignCenterAcrossSelection (7), xlHAlignDistributed (-4117), xlHAlignFill (5), xlHAlignGeneral (1), xlHAlignJustify (-4130), xlHAlignLeft (-4131), xlHAlignRight (-4152) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHAlignCenter = None
    xlHAlignCenterAcrossSelection = None
    xlHAlignDistributed = None
    xlHAlignFill = None
    xlHAlignGeneral = None
    xlHAlignJustify = None
    xlHAlignLeft = None
    xlHAlignRight = None


class XlHebrewModes(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlHebrewModes, values: xlHebrewFullScript (0), xlHebrewMixedAuthorizedScript (3), xlHebrewMixedScript (2), xlHebrewPartialScript (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHebrewFullScript = None
    xlHebrewMixedAuthorizedScript = None
    xlHebrewMixedScript = None
    xlHebrewPartialScript = None


class XlHighlightChangesTime(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlHighlightChangesTime, values: xlAllChanges (2), xlNotYetReviewed (3), xlSinceMyLastSave (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllChanges = None
    xlNotYetReviewed = None
    xlSinceMyLastSave = None


class XlHtmlType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlHtmlType, values: xlHtmlCalc (1), xlHtmlChart (3), xlHtmlList (2), xlHtmlStatic (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHtmlCalc = None
    xlHtmlChart = None
    xlHtmlList = None
    xlHtmlStatic = None


class XlIcon(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlIcon, values: xlIcon0Bars (37), xlIcon0FilledBoxes (52), xlIcon1Bar (38), xlIcon1FilledBox (51), xlIcon2Bars (39), xlIcon2FilledBoxes (50), xlIcon3Bars (40), xlIcon3FilledBoxes (49), xlIcon4Bars (41), xlIcon4FilledBoxes (48), xlIconBlackCircle (32), xlIconBlackCircleWithBorder (13), xlIconCircleWithOneWhiteQuarter (33), xlIconCircleWithThreeWhiteQuarters (35), xlIconCircleWithTwoWhiteQuarters (34), xlIconGoldStar (42), xlIconGrayCircle (31), xlIconGrayDownArrow (6), xlIconGrayDownInclineArrow (28), xlIconGraySideArrow (5), xlIconGrayUpArrow (4), xlIconGrayUpInclineArrow (27), xlIconGreenCheck (22), xlIconGreenCheckSymbol (19), xlIconGreenCircle (10), xlIconGreenFlag (7), xlIconGreenTrafficLight (14), xlIconGreenUpArrow (1), xlIconGreenUpTriangle (45), xlIconHalfGoldStar (43), xlIconNoCellIcon (-1), xlIconPinkCircle (30), xlIconRedCircle (29), xlIconRedCircleWithBorder (12), xlIconRedCross (24), xlIconRedCrossSymbol (21), xlIconRedDiamond (18), xlIconRedDownArrow (3), xlIconRedDownTriangle (47), xlIconRedFlag (9), xlIconRedTrafficLight (16), xlIconSilverStar (44), xlIconWhiteCircleAllWhiteQuarters (36), xlIconYellowCircle (11), xlIconYellowDash (46), xlIconYellowDownInclineArrow (26), xlIconYellowExclamation (23), xlIconYellowExclamationSymbol (20), xlIconYellowFlag (8), xlIconYellowSideArrow (2), xlIconYellowTrafficLight (15), xlIconYellowTriangle (17), xlIconYellowUpInclineArrow (25) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlIcon0Bars = None
    xlIcon0FilledBoxes = None
    xlIcon1Bar = None
    xlIcon1FilledBox = None
    xlIcon2Bars = None
    xlIcon2FilledBoxes = None
    xlIcon3Bars = None
    xlIcon3FilledBoxes = None
    xlIcon4Bars = None
    xlIcon4FilledBoxes = None
    xlIconBlackCircle = None
    xlIconBlackCircleWithBorder = None
    xlIconCircleWithOneWhiteQuarter = None
    xlIconCircleWithThreeWhiteQuarters = None
    xlIconCircleWithTwoWhiteQuarters = None
    xlIconGoldStar = None
    xlIconGrayCircle = None
    xlIconGrayDownArrow = None
    xlIconGrayDownInclineArrow = None
    xlIconGraySideArrow = None
    xlIconGrayUpArrow = None
    xlIconGrayUpInclineArrow = None
    xlIconGreenCheck = None
    xlIconGreenCheckSymbol = None
    xlIconGreenCircle = None
    xlIconGreenFlag = None
    xlIconGreenTrafficLight = None
    xlIconGreenUpArrow = None
    xlIconGreenUpTriangle = None
    xlIconHalfGoldStar = None
    xlIconNoCellIcon = None
    xlIconPinkCircle = None
    xlIconRedCircle = None
    xlIconRedCircleWithBorder = None
    xlIconRedCross = None
    xlIconRedCrossSymbol = None
    xlIconRedDiamond = None
    xlIconRedDownArrow = None
    xlIconRedDownTriangle = None
    xlIconRedFlag = None
    xlIconRedTrafficLight = None
    xlIconSilverStar = None
    xlIconWhiteCircleAllWhiteQuarters = None
    xlIconYellowCircle = None
    xlIconYellowDash = None
    xlIconYellowDownInclineArrow = None
    xlIconYellowExclamation = None
    xlIconYellowExclamationSymbol = None
    xlIconYellowFlag = None
    xlIconYellowSideArrow = None
    xlIconYellowTrafficLight = None
    xlIconYellowTriangle = None
    xlIconYellowUpInclineArrow = None


class XlIconSet(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlIconSet, values: xl3Arrows (1), xl3ArrowsGray (2), xl3Flags (3), xl3Signs (6), xl3Stars (18), xl3Symbols (7), xl3Symbols2 (8), xl3TrafficLights1 (4), xl3TrafficLights2 (5), xl3Triangles (19), xl4Arrows (9), xl4ArrowsGray (10), xl4CRV (12), xl4RedToBlack (11), xl4TrafficLights (13), xl5Arrows (14), xl5ArrowsGray (15), xl5Boxes (20), xl5CRV (16), xl5Quarters (17), xlCustomSet (-1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xl3Arrows = None
    xl3ArrowsGray = None
    xl3Flags = None
    xl3Signs = None
    xl3Stars = None
    xl3Symbols = None
    xl3Symbols2 = None
    xl3TrafficLights1 = None
    xl3TrafficLights2 = None
    xl3Triangles = None
    xl4Arrows = None
    xl4ArrowsGray = None
    xl4CRV = None
    xl4RedToBlack = None
    xl4TrafficLights = None
    xl5Arrows = None
    xl5ArrowsGray = None
    xl5Boxes = None
    xl5CRV = None
    xl5Quarters = None
    xlCustomSet = None


class XlIMEMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlIMEMode, values: xlIMEModeAlpha (8), xlIMEModeAlphaFull (7), xlIMEModeDisable (3), xlIMEModeHangul (10), xlIMEModeHangulFull (9), xlIMEModeHiragana (4), xlIMEModeKatakana (5), xlIMEModeKatakanaHalf (6), xlIMEModeNoControl (0), xlIMEModeOff (2), xlIMEModeOn (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlIMEModeAlpha = None
    xlIMEModeAlphaFull = None
    xlIMEModeDisable = None
    xlIMEModeHangul = None
    xlIMEModeHangulFull = None
    xlIMEModeHiragana = None
    xlIMEModeKatakana = None
    xlIMEModeKatakanaHalf = None
    xlIMEModeNoControl = None
    xlIMEModeOff = None
    xlIMEModeOn = None


class XlImportDataAs(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlImportDataAs, values: xlPivotTableReport (1), xlQueryTable (0), xlTable (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPivotTableReport = None
    xlQueryTable = None
    xlTable = None


class XlInsertFormatOrigin(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlInsertFormatOrigin, values: xlFormatFromLeftOrAbove (0), xlFormatFromRightOrBelow (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFormatFromLeftOrAbove = None
    xlFormatFromRightOrBelow = None


class XlInsertShiftDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlInsertShiftDirection, values: xlShiftDown (-4121), xlShiftToRight (-4161) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlShiftDown = None
    xlShiftToRight = None


class XlLayoutFormType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLayoutFormType, values: xlOutline (1), xlTabular (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlOutline = None
    xlTabular = None


class XlLayoutRowType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLayoutRowType, values: xlCompactRow (0), xlOutlineRow (2), xlTabularRow (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCompactRow = None
    xlOutlineRow = None
    xlTabularRow = None


class XlLegendPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLegendPosition, values: xlLegendPositionBottom (-4107), xlLegendPositionCorner (2), xlLegendPositionCustom (-4161), xlLegendPositionLeft (-4131), xlLegendPositionRight (-4152), xlLegendPositionTop (-4160) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLegendPositionBottom = None
    xlLegendPositionCorner = None
    xlLegendPositionCustom = None
    xlLegendPositionLeft = None
    xlLegendPositionRight = None
    xlLegendPositionTop = None


class XlLineStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLineStyle, values: xlContinuous (1), xlDash (-4115), xlDashDot (4), xlDashDotDot (5), xlDot (-4118), xlDouble (-4119), xlLineStyleNone (-4142), xlSlantDashDot (13) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlContinuous = None
    xlDash = None
    xlDashDot = None
    xlDashDotDot = None
    xlDot = None
    xlDouble = None
    xlLineStyleNone = None
    xlSlantDashDot = None


class XlLink(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLink, values: xlExcelLinks (1), xlOLELinks (2), xlPublishers (5), xlSubscribers (6) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlExcelLinks = None
    xlOLELinks = None
    xlPublishers = None
    xlSubscribers = None


class XlLinkInfo(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLinkInfo, values: xlEditionDate (2), xlLinkInfoStatus (3), xlUpdateState (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlEditionDate = None
    xlLinkInfoStatus = None
    xlUpdateState = None


class XlLinkInfoType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLinkInfoType, values: xlLinkInfoOLELinks (2), xlLinkInfoPublishers (5), xlLinkInfoSubscribers (6) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLinkInfoOLELinks = None
    xlLinkInfoPublishers = None
    xlLinkInfoSubscribers = None


class XlLinkStatus(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLinkStatus, values: xlLinkStatusCopiedValues (10), xlLinkStatusIndeterminate (5), xlLinkStatusInvalidName (7), xlLinkStatusMissingFile (1), xlLinkStatusMissingSheet (2), xlLinkStatusNotStarted (6), xlLinkStatusOK (0), xlLinkStatusOld (3), xlLinkStatusSourceNotCalculated (4), xlLinkStatusSourceNotOpen (8), xlLinkStatusSourceOpen (9) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLinkStatusCopiedValues = None
    xlLinkStatusIndeterminate = None
    xlLinkStatusInvalidName = None
    xlLinkStatusMissingFile = None
    xlLinkStatusMissingSheet = None
    xlLinkStatusNotStarted = None
    xlLinkStatusOK = None
    xlLinkStatusOld = None
    xlLinkStatusSourceNotCalculated = None
    xlLinkStatusSourceNotOpen = None
    xlLinkStatusSourceOpen = None


class XlLinkType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLinkType, values: xlLinkTypeExcelLinks (1), xlLinkTypeOLELinks (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLinkTypeExcelLinks = None
    xlLinkTypeOLELinks = None


class XlListConflict(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlListConflict, values: xlListConflictDialog (0), xlListConflictDiscardAllConflicts (2), xlListConflictError (3), xlListConflictRetryAllConflicts (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlListConflictDialog = None
    xlListConflictDiscardAllConflicts = None
    xlListConflictError = None
    xlListConflictRetryAllConflicts = None


class XlListDataType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlListDataType, values: xlListDataTypeCheckbox (9), xlListDataTypeChoice (6), xlListDataTypeChoiceMulti (7), xlListDataTypeCounter (11), xlListDataTypeCurrency (4), xlListDataTypeDateTime (5), xlListDataTypeHyperLink (10), xlListDataTypeListLookup (8), xlListDataTypeMultiLineRichText (12), xlListDataTypeMultiLineText (2), xlListDataTypeNone (0), xlListDataTypeNumber (3), xlListDataTypeText (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlListDataTypeCheckbox = None
    xlListDataTypeChoice = None
    xlListDataTypeChoiceMulti = None
    xlListDataTypeCounter = None
    xlListDataTypeCurrency = None
    xlListDataTypeDateTime = None
    xlListDataTypeHyperLink = None
    xlListDataTypeListLookup = None
    xlListDataTypeMultiLineRichText = None
    xlListDataTypeMultiLineText = None
    xlListDataTypeNone = None
    xlListDataTypeNumber = None
    xlListDataTypeText = None


class XlListObjectSourceType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlListObjectSourceType, values: xlSrcExternal (0), xlSrcModel (4), xlSrcQuery (3), xlSrcRange (1), xlSrcXml (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSrcExternal = None
    xlSrcModel = None
    xlSrcQuery = None
    xlSrcRange = None
    xlSrcXml = None


class XlLocationInTable(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLocationInTable, values: xlColumnHeader (-4110), xlColumnItem (5), xlDataHeader (3), xlDataItem (7), xlPageHeader (2), xlPageItem (6), xlRowHeader (-4153), xlRowItem (4), xlTableBody (8) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColumnHeader = None
    xlColumnItem = None
    xlDataHeader = None
    xlDataItem = None
    xlPageHeader = None
    xlPageItem = None
    xlRowHeader = None
    xlRowItem = None
    xlTableBody = None


class XlLookAt(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLookAt, values: xlPart (2), xlWhole (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPart = None
    xlWhole = None


class XlLookFor(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlLookFor, values: xlLookForBlanks (0), xlLookForErrors (1), xlLookForFormulas (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLookForBlanks = None
    xlLookForErrors = None
    xlLookForFormulas = None


class XlMailSystem(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMailSystem, values: xlMAPI (1), xlNoMailSystem (0), xlPowerTalk (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMAPI = None
    xlNoMailSystem = None
    xlPowerTalk = None


class XlMarkerStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMarkerStyle, values: xlMarkerStyleAutomatic (-4105), xlMarkerStyleCircle (8), xlMarkerStyleDash (-4115), xlMarkerStyleDiamond (2), xlMarkerStyleDot (-4118), xlMarkerStyleNone (-4142), xlMarkerStylePicture (-4147), xlMarkerStylePlus (9), xlMarkerStyleSquare (1), xlMarkerStyleStar (5), xlMarkerStyleTriangle (3), xlMarkerStyleX (-4168) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMarkerStyleAutomatic = None
    xlMarkerStyleCircle = None
    xlMarkerStyleDash = None
    xlMarkerStyleDiamond = None
    xlMarkerStyleDot = None
    xlMarkerStyleNone = None
    xlMarkerStylePicture = None
    xlMarkerStylePlus = None
    xlMarkerStyleSquare = None
    xlMarkerStyleStar = None
    xlMarkerStyleTriangle = None
    xlMarkerStyleX = None


class XlMeasurementUnits(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMeasurementUnits, values: xlCentimeters (1), xlInches (0), xlMillimeters (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCentimeters = None
    xlInches = None
    xlMillimeters = None


class XlModelChangeSource(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlModelChangeSource, values: xlChangeByExcel (0), xlChangeByPowerPivotAddIn (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlChangeByExcel = None
    xlChangeByPowerPivotAddIn = None


class XlMouseButton(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMouseButton, values: xlNoButton (0), xlPrimaryButton (1), xlSecondaryButton (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNoButton = None
    xlPrimaryButton = None
    xlSecondaryButton = None


class XlMousePointer(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMousePointer, values: xlDefault (-4143), xlIBeam (3), xlNorthwestArrow (1), xlWait (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDefault = None
    xlIBeam = None
    xlNorthwestArrow = None
    xlWait = None


class XlMSApplication(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlMSApplication, values: xlMicrosoftAccess (4), xlMicrosoftFoxPro (5), xlMicrosoftMail (3), xlMicrosoftPowerPoint (2), xlMicrosoftProject (6), xlMicrosoftSchedulePlus (7), xlMicrosoftWord (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMicrosoftAccess = None
    xlMicrosoftFoxPro = None
    xlMicrosoftMail = None
    xlMicrosoftPowerPoint = None
    xlMicrosoftProject = None
    xlMicrosoftSchedulePlus = None
    xlMicrosoftWord = None


class XlOartHorizontalOverflow(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOartHorizontalOverflow, values: xlOartHorizontalOverflowClip (1), xlOartHorizontalOverflowOverflow (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlOartHorizontalOverflowClip = None
    xlOartHorizontalOverflowOverflow = None


class XlOartVerticalOverflow(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOartVerticalOverflow, values: xlOartVerticalOverflowClip (1), xlOartVerticalOverflowEllipsis (2), xlOartVerticalOverflowOverflow (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlOartVerticalOverflowClip = None
    xlOartVerticalOverflowEllipsis = None
    xlOartVerticalOverflowOverflow = None


class XlObjectSize(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlObjectSize, values: xlFitToPage (2), xlFullPage (3), xlScreenSize (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFitToPage = None
    xlFullPage = None
    xlScreenSize = None


class XlOLEType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOLEType, values: xlOLEControl (2), xlOLEEmbed (1), xlOLELink (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlOLEControl = None
    xlOLEEmbed = None
    xlOLELink = None


class XlOLEVerb(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOLEVerb, values: xlVerbOpen (2), xlVerbPrimary (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlVerbOpen = None
    xlVerbPrimary = None


class XlOrder(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOrder, values: xlDownThenOver (1), xlOverThenDown (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDownThenOver = None
    xlOverThenDown = None


class XlOrientation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlOrientation, values: xlDownward (-4170), xlHorizontal (-4128), xlUpward (-4171), xlVertical (-4166) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDownward = None
    xlHorizontal = None
    xlUpward = None
    xlVertical = None


class XlPageBreak(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPageBreak, values: xlPageBreakAutomatic (-4105), xlPageBreakManual (-4135), xlPageBreakNone (-4142) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPageBreakAutomatic = None
    xlPageBreakManual = None
    xlPageBreakNone = None


class XlPageBreakExtent(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPageBreakExtent, values: xlPageBreakFull (1), xlPageBreakPartial (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPageBreakFull = None
    xlPageBreakPartial = None


class XlPageOrientation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPageOrientation, values: xlLandscape (2), xlPortrait (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLandscape = None
    xlPortrait = None


class XlPaperSize(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPaperSize, values: xlPaper10x14 (16), xlPaper11x17 (17), xlPaperA3 (8), xlPaperA4 (9), xlPaperA4Small (10), xlPaperA5 (11), xlPaperB4 (12), xlPaperB5 (13), xlPaperCsheet (24), xlPaperDsheet (25), xlPaperEnvelope10 (20), xlPaperEnvelope11 (21), xlPaperEnvelope12 (22), xlPaperEnvelope14 (23), xlPaperEnvelope9 (19), xlPaperEnvelopeB4 (33), xlPaperEnvelopeB5 (34), xlPaperEnvelopeB6 (35), xlPaperEnvelopeC3 (29), xlPaperEnvelopeC4 (30), xlPaperEnvelopeC5 (28), xlPaperEnvelopeC6 (31), xlPaperEnvelopeC65 (32), xlPaperEnvelopeDL (27), xlPaperEnvelopeItaly (36), xlPaperEnvelopeMonarch (37), xlPaperEnvelopePersonal (38), xlPaperEsheet (26), xlPaperExecutive (7), xlPaperFanfoldLegalGerman (41), xlPaperFanfoldStdGerman (40), xlPaperFanfoldUS (39), xlPaperFolio (14), xlPaperLedger (4), xlPaperLegal (5), xlPaperLetter (1), xlPaperLetterSmall (2), xlPaperNote (18), xlPaperQuarto (15), xlPaperStatement (6), xlPaperTabloid (3), xlPaperUser (256) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPaper10x14 = None
    xlPaper11x17 = None
    xlPaperA3 = None
    xlPaperA4 = None
    xlPaperA4Small = None
    xlPaperA5 = None
    xlPaperB4 = None
    xlPaperB5 = None
    xlPaperCsheet = None
    xlPaperDsheet = None
    xlPaperEnvelope10 = None
    xlPaperEnvelope11 = None
    xlPaperEnvelope12 = None
    xlPaperEnvelope14 = None
    xlPaperEnvelope9 = None
    xlPaperEnvelopeB4 = None
    xlPaperEnvelopeB5 = None
    xlPaperEnvelopeB6 = None
    xlPaperEnvelopeC3 = None
    xlPaperEnvelopeC4 = None
    xlPaperEnvelopeC5 = None
    xlPaperEnvelopeC6 = None
    xlPaperEnvelopeC65 = None
    xlPaperEnvelopeDL = None
    xlPaperEnvelopeItaly = None
    xlPaperEnvelopeMonarch = None
    xlPaperEnvelopePersonal = None
    xlPaperEsheet = None
    xlPaperExecutive = None
    xlPaperFanfoldLegalGerman = None
    xlPaperFanfoldStdGerman = None
    xlPaperFanfoldUS = None
    xlPaperFolio = None
    xlPaperLedger = None
    xlPaperLegal = None
    xlPaperLetter = None
    xlPaperLetterSmall = None
    xlPaperNote = None
    xlPaperQuarto = None
    xlPaperStatement = None
    xlPaperTabloid = None
    xlPaperUser = None


class XlParameterDataType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlParameterDataType, values: xlParamTypeBigInt (-5), xlParamTypeBinary (-2), xlParamTypeBit (-7), xlParamTypeChar (1), xlParamTypeDate (9), xlParamTypeDecimal (3), xlParamTypeDouble (8), xlParamTypeFloat (6), xlParamTypeInteger (4), xlParamTypeLongVarBinary (-4), xlParamTypeLongVarChar (-1), xlParamTypeNumeric (2), xlParamTypeReal (7), xlParamTypeSmallInt (5), xlParamTypeTime (10), xlParamTypeTimestamp (11), xlParamTypeTinyInt (-6), xlParamTypeUnknown (0), xlParamTypeVarBinary (-3), xlParamTypeVarChar (12), xlParamTypeWChar (-8) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlParamTypeBigInt = None
    xlParamTypeBinary = None
    xlParamTypeBit = None
    xlParamTypeChar = None
    xlParamTypeDate = None
    xlParamTypeDecimal = None
    xlParamTypeDouble = None
    xlParamTypeFloat = None
    xlParamTypeInteger = None
    xlParamTypeLongVarBinary = None
    xlParamTypeLongVarChar = None
    xlParamTypeNumeric = None
    xlParamTypeReal = None
    xlParamTypeSmallInt = None
    xlParamTypeTime = None
    xlParamTypeTimestamp = None
    xlParamTypeTinyInt = None
    xlParamTypeUnknown = None
    xlParamTypeVarBinary = None
    xlParamTypeVarChar = None
    xlParamTypeWChar = None


class XlParameterType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlParameterType, values: xlConstant (1), xlPrompt (0), xlRange (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlConstant = None
    xlPrompt = None
    xlRange = None


class XlPasteSpecialOperation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPasteSpecialOperation, values: xlPasteSpecialOperationAdd (2), xlPasteSpecialOperationDivide (5), xlPasteSpecialOperationMultiply (4), xlPasteSpecialOperationNone (-4142), xlPasteSpecialOperationSubtract (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPasteSpecialOperationAdd = None
    xlPasteSpecialOperationDivide = None
    xlPasteSpecialOperationMultiply = None
    xlPasteSpecialOperationNone = None
    xlPasteSpecialOperationSubtract = None


class XlPasteType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPasteType, values: xlPasteAll (-4104), xlPasteAllExceptBorders (7), xlPasteAllMergingConditionalFormats (14), xlPasteAllUsingSourceTheme (13), xlPasteColumnWidths (8), xlPasteComments (-4144), xlPasteFormats (-4122), xlPasteFormulas (-4123), xlPasteFormulasAndNumberFormats (11), xlPasteValidation (6), xlPasteValues (-4163), xlPasteValuesAndNumberFormats (12) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPasteAll = None
    xlPasteAllExceptBorders = None
    xlPasteAllMergingConditionalFormats = None
    xlPasteAllUsingSourceTheme = None
    xlPasteColumnWidths = None
    xlPasteComments = None
    xlPasteFormats = None
    xlPasteFormulas = None
    xlPasteFormulasAndNumberFormats = None
    xlPasteValidation = None
    xlPasteValues = None
    xlPasteValuesAndNumberFormats = None


class XlPattern(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPattern, values: xlPatternAutomatic (-4105), xlPatternChecker (9), xlPatternCrissCross (16), xlPatternDown (-4121), xlPatternGray16 (17), xlPatternGray25 (-4124), xlPatternGray50 (-4125), xlPatternGray75 (-4126), xlPatternGray8 (18), xlPatternGrid (15), xlPatternHorizontal (-4128), xlPatternLightDown (13), xlPatternLightHorizontal (11), xlPatternLightUp (14), xlPatternLightVertical (12), xlPatternLinearGradient (4000), xlPatternNone (-4142), xlPatternRectangularGradient (4001), xlPatternSemiGray75 (10), xlPatternSolid (1), xlPatternUp (-4162), xlPatternVertical (-4166) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPatternAutomatic = None
    xlPatternChecker = None
    xlPatternCrissCross = None
    xlPatternDown = None
    xlPatternGray16 = None
    xlPatternGray25 = None
    xlPatternGray50 = None
    xlPatternGray75 = None
    xlPatternGray8 = None
    xlPatternGrid = None
    xlPatternHorizontal = None
    xlPatternLightDown = None
    xlPatternLightHorizontal = None
    xlPatternLightUp = None
    xlPatternLightVertical = None
    xlPatternLinearGradient = None
    xlPatternNone = None
    xlPatternRectangularGradient = None
    xlPatternSemiGray75 = None
    xlPatternSolid = None
    xlPatternUp = None
    xlPatternVertical = None


class XlPhoneticAlignment(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPhoneticAlignment, values: xlPhoneticAlignCenter (2), xlPhoneticAlignDistributed (3), xlPhoneticAlignLeft (1), xlPhoneticAlignNoControl (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPhoneticAlignCenter = None
    xlPhoneticAlignDistributed = None
    xlPhoneticAlignLeft = None
    xlPhoneticAlignNoControl = None


class XlPhoneticCharacterType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPhoneticCharacterType, values: xlHiragana (2), xlKatakana (1), xlKatakanaHalf (0), xlNoConversion (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHiragana = None
    xlKatakana = None
    xlKatakanaHalf = None
    xlNoConversion = None


class XlPictureAppearance(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPictureAppearance, values: xlPrinter (2), xlScreen (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPrinter = None
    xlScreen = None


class XlPictureConvertorType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPictureConvertorType, values: xlBMP (1), xlCGM (7), xlDRW (4), xlDXF (5), xlEPS (8), xlHGL (6), xlPCT (13), xlPCX (10), xlPIC (11), xlPLT (12), xlTIF (9), xlWMF (2), xlWPG (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBMP = None
    xlCGM = None
    xlDRW = None
    xlDXF = None
    xlEPS = None
    xlHGL = None
    xlPCT = None
    xlPCX = None
    xlPIC = None
    xlPLT = None
    xlTIF = None
    xlWMF = None
    xlWPG = None


class XlPieSliceIndex(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPieSliceIndex, values: xlCenterPoint (5), xlInnerCenterPoint (8), xlInnerClockwisePoint (7), xlInnerCounterClockwisePoint (9), xlMidClockwiseRadiusPoint (4), xlMidCounterClockwiseRadiusPoint (6), xlOuterCenterPoint (2), xlOuterClockwisePoint (3), xlOuterCounterClockwisePoint (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCenterPoint = None
    xlInnerCenterPoint = None
    xlInnerClockwisePoint = None
    xlInnerCounterClockwisePoint = None
    xlMidClockwiseRadiusPoint = None
    xlMidCounterClockwiseRadiusPoint = None
    xlOuterCenterPoint = None
    xlOuterClockwisePoint = None
    xlOuterCounterClockwisePoint = None


class XlPieSliceLocation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPieSliceLocation, values: xlHorizontalCoordinate (1), xlVerticalCoordinate (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlHorizontalCoordinate = None
    xlVerticalCoordinate = None


class XlPivotCellType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotCellType, values: xlPivotCellBlankCell (9), xlPivotCellCustomSubtotal (7), xlPivotCellDataField (4), xlPivotCellDataPivotField (8), xlPivotCellGrandTotal (3), xlPivotCellPageFieldItem (6), xlPivotCellPivotField (5), xlPivotCellPivotItem (1), xlPivotCellSubtotal (2), xlPivotCellValue (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPivotCellBlankCell = None
    xlPivotCellCustomSubtotal = None
    xlPivotCellDataField = None
    xlPivotCellDataPivotField = None
    xlPivotCellGrandTotal = None
    xlPivotCellPageFieldItem = None
    xlPivotCellPivotField = None
    xlPivotCellPivotItem = None
    xlPivotCellSubtotal = None
    xlPivotCellValue = None


class XlPivotConditionScope(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotConditionScope, values: xlDataFieldScope (2), xlFieldsScope (1), xlSelectionScope (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDataFieldScope = None
    xlFieldsScope = None
    xlSelectionScope = None


class XlPivotFieldCalculation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFieldCalculation, values: xlDifferenceFrom (2), xlIndex (9), xlNoAdditionalCalculation (-4143), xlPercentDifferenceFrom (4), xlPercentOf (3), xlPercentOfColumn (7), xlPercentOfParent (12), xlPercentOfParentColumn (11), xlPercentOfParentRow (10), xlPercentOfRow (6), xlPercentOfTotal (8), xlPercentRunningTotal (13), xlRankAscending (14), xlRankDecending (15), xlRunningTotal (5) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDifferenceFrom = None
    xlIndex = None
    xlNoAdditionalCalculation = None
    xlPercentDifferenceFrom = None
    xlPercentOf = None
    xlPercentOfColumn = None
    xlPercentOfParent = None
    xlPercentOfParentColumn = None
    xlPercentOfParentRow = None
    xlPercentOfRow = None
    xlPercentOfTotal = None
    xlPercentRunningTotal = None
    xlRankAscending = None
    xlRankDecending = None
    xlRunningTotal = None


class XlPivotFieldDataType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFieldDataType, values: xlDate (2), xlNumber (-4145), xlText (-4158) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDate = None
    xlNumber = None
    xlText = None


class XlPivotFieldOrientation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFieldOrientation, values: xlColumnField (2), xlDataField (4), xlHidden (0), xlPageField (3), xlRowField (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColumnField = None
    xlDataField = None
    xlHidden = None
    xlPageField = None
    xlRowField = None


class XlPivotFieldRepeatLabels(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFieldRepeatLabels, values: xlDoNotRepeatLabels (1), xlRepeatLabels (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDoNotRepeatLabels = None
    xlRepeatLabels = None


class XlPivotFilterType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFilterType, values: xlAfter (33), xlAfterOrEqualTo (34), xlAllDatesInPeriodApril (60), xlAllDatesInPeriodAugust (64), xlAllDatesInPeriodDecember (68), xlAllDatesInPeriodFebruary (58), xlAllDatesInPeriodJanuary (57), xlAllDatesInPeriodJuly (63), xlAllDatesInPeriodJune (62), xlAllDatesInPeriodMarch (59), xlAllDatesInPeriodMay (61), xlAllDatesInPeriodNovember (67), xlAllDatesInPeriodOctober (66), xlAllDatesInPeriodQuarter1 (53), xlAllDatesInPeriodQuarter2 (54), xlAllDatesInPeriodQuarter3 (55), xlAllDatesInPeriodQuarter4 (56), xlAllDatesInPeriodSeptember (65), xlBefore (31), xlBeforeOrEqualTo (32), xlBottomCount (2), xlBottomPercent (4), xlBottomSum (6), xlCaptionBeginsWith (17), xlCaptionContains (21), xlCaptionDoesNotBeginWith (18), xlCaptionDoesNotContain (22), xlCaptionDoesNotEndWith (20), xlCaptionDoesNotEqual (16), xlCaptionEndsWith (19), xlCaptionEquals (15), xlCaptionIsBetween (27), xlCaptionIsGreaterThan (23), xlCaptionIsGreaterThanOrEqualTo (24), xlCaptionIsLessThan (25), xlCaptionIsLessThanOrEqualTo (26), xlCaptionIsNotBetween (28), xlDateBetween (35), xlDateLastMonth (45), xlDateLastQuarter (48), xlDateLastWeek (42), xlDateLastYear (51), xlDateNextMonth (43), xlDateNextQuarter (46), xlDateNextWeek (40), xlDateNextYear (49), xlDateNotBetween (36), xlDateThisMonth (44), xlDateThisQuarter (47), xlDateThisWeek (41), xlDateThisYear (50), xlDateToday (38), xlDateTomorrow (37), xlDateYesterday (39), xlNotSpecificDate (30), xlSpecificDate (29), xlTopCount (1), xlTopPercent (3), xlTopSum (5), xlValueDoesNotEqual (8), xlValueEquals (7), xlValueIsBetween (13), xlValueIsGreaterThan (9), xlValueIsGreaterThanOrEqualTo (10), xlValueIsLessThan (11), xlValueIsLessThanOrEqualTo (12), xlValueIsNotBetween (14), xlYearToDate (52) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAfter = None
    xlAfterOrEqualTo = None
    xlAllDatesInPeriodApril = None
    xlAllDatesInPeriodAugust = None
    xlAllDatesInPeriodDecember = None
    xlAllDatesInPeriodFebruary = None
    xlAllDatesInPeriodJanuary = None
    xlAllDatesInPeriodJuly = None
    xlAllDatesInPeriodJune = None
    xlAllDatesInPeriodMarch = None
    xlAllDatesInPeriodMay = None
    xlAllDatesInPeriodNovember = None
    xlAllDatesInPeriodOctober = None
    xlAllDatesInPeriodQuarter1 = None
    xlAllDatesInPeriodQuarter2 = None
    xlAllDatesInPeriodQuarter3 = None
    xlAllDatesInPeriodQuarter4 = None
    xlAllDatesInPeriodSeptember = None
    xlBefore = None
    xlBeforeOrEqualTo = None
    xlBottomCount = None
    xlBottomPercent = None
    xlBottomSum = None
    xlCaptionBeginsWith = None
    xlCaptionContains = None
    xlCaptionDoesNotBeginWith = None
    xlCaptionDoesNotContain = None
    xlCaptionDoesNotEndWith = None
    xlCaptionDoesNotEqual = None
    xlCaptionEndsWith = None
    xlCaptionEquals = None
    xlCaptionIsBetween = None
    xlCaptionIsGreaterThan = None
    xlCaptionIsGreaterThanOrEqualTo = None
    xlCaptionIsLessThan = None
    xlCaptionIsLessThanOrEqualTo = None
    xlCaptionIsNotBetween = None
    xlDateBetween = None
    xlDateLastMonth = None
    xlDateLastQuarter = None
    xlDateLastWeek = None
    xlDateLastYear = None
    xlDateNextMonth = None
    xlDateNextQuarter = None
    xlDateNextWeek = None
    xlDateNextYear = None
    xlDateNotBetween = None
    xlDateThisMonth = None
    xlDateThisQuarter = None
    xlDateThisWeek = None
    xlDateThisYear = None
    xlDateToday = None
    xlDateTomorrow = None
    xlDateYesterday = None
    xlNotSpecificDate = None
    xlSpecificDate = None
    xlTopCount = None
    xlTopPercent = None
    xlTopSum = None
    xlValueDoesNotEqual = None
    xlValueEquals = None
    xlValueIsBetween = None
    xlValueIsGreaterThan = None
    xlValueIsGreaterThanOrEqualTo = None
    xlValueIsLessThan = None
    xlValueIsLessThanOrEqualTo = None
    xlValueIsNotBetween = None
    xlYearToDate = None


class XlPivotFormatType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotFormatType, values: xlPTClassic (20), xlPTNone (21), xlReport1 (0), xlReport10 (9), xlReport2 (1), xlReport3 (2), xlReport4 (3), xlReport5 (4), xlReport6 (5), xlReport7 (6), xlReport8 (7), xlReport9 (8), xlTable1 (10), xlTable10 (19), xlTable2 (11), xlTable3 (12), xlTable4 (13), xlTable5 (14), xlTable6 (15), xlTable7 (16), xlTable8 (17), xlTable9 (18) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPTClassic = None
    xlPTNone = None
    xlReport1 = None
    xlReport10 = None
    xlReport2 = None
    xlReport3 = None
    xlReport4 = None
    xlReport5 = None
    xlReport6 = None
    xlReport7 = None
    xlReport8 = None
    xlReport9 = None
    xlTable1 = None
    xlTable10 = None
    xlTable2 = None
    xlTable3 = None
    xlTable4 = None
    xlTable5 = None
    xlTable6 = None
    xlTable7 = None
    xlTable8 = None
    xlTable9 = None


class XlPivotLineType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotLineType, values: xlPivotLineBlank (3), xlPivotLineGrandTotal (2), xlPivotLineRegular (0), xlPivotLineSubtotal (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPivotLineBlank = None
    xlPivotLineGrandTotal = None
    xlPivotLineRegular = None
    xlPivotLineSubtotal = None


class XlPivotTableMissingItems(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotTableMissingItems, values: xlMissingItemsDefault (-1), xlMissingItemsMax (32500), xlMissingItemsMax2 (1048576), xlMissingItemsNone (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMissingItemsDefault = None
    xlMissingItemsMax = None
    xlMissingItemsMax2 = None
    xlMissingItemsNone = None


class XlPivotTableSourceType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotTableSourceType, values: xlConsolidation (3), xlDatabase (1), xlExternal (2), xlPivotTable (-4148), xlScenario (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlConsolidation = None
    xlDatabase = None
    xlExternal = None
    xlPivotTable = None
    xlScenario = None


class XlPivotTableVersionList(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPivotTableVersionList, values: xlPivotTableVersion10 (1), xlPivotTableVersion11 (2), xlPivotTableVersion12 (3), xlPivotTableVersion14 (4), xlPivotTableVersion15 (5), xlPivotTableVersion2000 (0), xlPivotTableVersionCurrent (-1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPivotTableVersion10 = None
    xlPivotTableVersion11 = None
    xlPivotTableVersion12 = None
    xlPivotTableVersion14 = None
    xlPivotTableVersion15 = None
    xlPivotTableVersion2000 = None
    xlPivotTableVersionCurrent = None


class XlPlacement(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPlacement, values: xlFreeFloating (3), xlMove (2), xlMoveAndSize (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFreeFloating = None
    xlMove = None
    xlMoveAndSize = None


class XlPlatform(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPlatform, values: xlMacintosh (1), xlMSDOS (3), xlWindows (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMacintosh = None
    xlMSDOS = None
    xlWindows = None


class XlPortugueseReform(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPortugueseReform, values: xlPortugueseBoth (3), xlPortuguesePostReform (2), xlPortuguesePreReform (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPortugueseBoth = None
    xlPortuguesePostReform = None
    xlPortuguesePreReform = None


class XlPrintErrors(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPrintErrors, values: xlPrintErrorsBlank (1), xlPrintErrorsDash (2), xlPrintErrorsDisplayed (0), xlPrintErrorsNA (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPrintErrorsBlank = None
    xlPrintErrorsDash = None
    xlPrintErrorsDisplayed = None
    xlPrintErrorsNA = None


class XlPrintLocation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPrintLocation, values: xlPrintInPlace (16), xlPrintNoComments (-4142), xlPrintSheetEnd (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPrintInPlace = None
    xlPrintNoComments = None
    xlPrintSheetEnd = None


class XlPriority(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPriority, values: xlPriorityHigh (-4127), xlPriorityLow (-4134), xlPriorityNormal (-4143) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPriorityHigh = None
    xlPriorityLow = None
    xlPriorityNormal = None


class XlPropertyDisplayedIn(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPropertyDisplayedIn, values: xlDisplayPropertyInPivotTable (1), xlDisplayPropertyInPivotTableAndTooltip (3), xlDisplayPropertyInTooltip (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDisplayPropertyInPivotTable = None
    xlDisplayPropertyInPivotTableAndTooltip = None
    xlDisplayPropertyInTooltip = None


class XlProtectedViewCloseReason(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlProtectedViewCloseReason, values: xlProtectedViewCloseEdit (1), xlProtectedViewCloseForced (2), xlProtectedViewCloseNormal (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlProtectedViewCloseEdit = None
    xlProtectedViewCloseForced = None
    xlProtectedViewCloseNormal = None


class XlProtectedViewWindowState(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlProtectedViewWindowState, values: xlProtectedViewWindowMaximized (2), xlProtectedViewWindowMinimized (1), xlProtectedViewWindowNormal (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlProtectedViewWindowMaximized = None
    xlProtectedViewWindowMinimized = None
    xlProtectedViewWindowNormal = None


class XlPTSelectionMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlPTSelectionMode, values: xlBlanks (4), xlButton (15), xlDataAndLabel (0), xlDataOnly (2), xlFirstRow (256), xlLabelOnly (1), xlOrigin (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBlanks = None
    xlButton = None
    xlDataAndLabel = None
    xlDataOnly = None
    xlFirstRow = None
    xlLabelOnly = None
    xlOrigin = None


class XlQueryType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlQueryType, values: xlADORecordset (7), xlDAORecordset (2), xlODBCQuery (1), xlOLEDBQuery (5), xlTextImport (6), xlWebQuery (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlADORecordset = None
    xlDAORecordset = None
    xlODBCQuery = None
    xlOLEDBQuery = None
    xlTextImport = None
    xlWebQuery = None


class XlQuickAnalysisMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlQuickAnalysisMode, values: xlFormatConditions (1), xlLensOnly (0), xlRecommendedCharts (2), xlSparklines (5), xlTables (4), xlTotals (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlFormatConditions = None
    xlLensOnly = None
    xlRecommendedCharts = None
    xlSparklines = None
    xlTables = None
    xlTotals = None


class XlRangeAutoFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRangeAutoFormat, values: xlRangeAutoFormat3DEffects1 (13), xlRangeAutoFormat3DEffects2 (14), xlRangeAutoFormatAccounting1 (4), xlRangeAutoFormatAccounting2 (5), xlRangeAutoFormatAccounting3 (6), xlRangeAutoFormatAccounting4 (17), xlRangeAutoFormatClassic1 (1), xlRangeAutoFormatClassic2 (2), xlRangeAutoFormatClassic3 (3), xlRangeAutoFormatClassicPivotTable (31), xlRangeAutoFormatColor1 (7), xlRangeAutoFormatColor2 (8), xlRangeAutoFormatColor3 (9), xlRangeAutoFormatList1 (10), xlRangeAutoFormatList2 (11), xlRangeAutoFormatList3 (12), xlRangeAutoFormatLocalFormat1 (15), xlRangeAutoFormatLocalFormat2 (16), xlRangeAutoFormatLocalFormat3 (19), xlRangeAutoFormatLocalFormat4 (20), xlRangeAutoFormatNone (-4142), xlRangeAutoFormatPTNone (42), xlRangeAutoFormatReport1 (21), xlRangeAutoFormatReport10 (30), xlRangeAutoFormatReport2 (22), xlRangeAutoFormatReport3 (23), xlRangeAutoFormatReport4 (24), xlRangeAutoFormatReport5 (25), xlRangeAutoFormatReport6 (26), xlRangeAutoFormatReport7 (27), xlRangeAutoFormatReport8 (28), xlRangeAutoFormatReport9 (29), xlRangeAutoFormatSimple (-4154), xlRangeAutoFormatTable1 (32), xlRangeAutoFormatTable10 (41), xlRangeAutoFormatTable2 (33), xlRangeAutoFormatTable3 (34), xlRangeAutoFormatTable4 (35), xlRangeAutoFormatTable5 (36), xlRangeAutoFormatTable6 (37), xlRangeAutoFormatTable7 (38), xlRangeAutoFormatTable8 (39), xlRangeAutoFormatTable9 (40) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlRangeAutoFormat3DEffects1 = None
    xlRangeAutoFormat3DEffects2 = None
    xlRangeAutoFormatAccounting1 = None
    xlRangeAutoFormatAccounting2 = None
    xlRangeAutoFormatAccounting3 = None
    xlRangeAutoFormatAccounting4 = None
    xlRangeAutoFormatClassic1 = None
    xlRangeAutoFormatClassic2 = None
    xlRangeAutoFormatClassic3 = None
    xlRangeAutoFormatClassicPivotTable = None
    xlRangeAutoFormatColor1 = None
    xlRangeAutoFormatColor2 = None
    xlRangeAutoFormatColor3 = None
    xlRangeAutoFormatList1 = None
    xlRangeAutoFormatList2 = None
    xlRangeAutoFormatList3 = None
    xlRangeAutoFormatLocalFormat1 = None
    xlRangeAutoFormatLocalFormat2 = None
    xlRangeAutoFormatLocalFormat3 = None
    xlRangeAutoFormatLocalFormat4 = None
    xlRangeAutoFormatNone = None
    xlRangeAutoFormatPTNone = None
    xlRangeAutoFormatReport1 = None
    xlRangeAutoFormatReport10 = None
    xlRangeAutoFormatReport2 = None
    xlRangeAutoFormatReport3 = None
    xlRangeAutoFormatReport4 = None
    xlRangeAutoFormatReport5 = None
    xlRangeAutoFormatReport6 = None
    xlRangeAutoFormatReport7 = None
    xlRangeAutoFormatReport8 = None
    xlRangeAutoFormatReport9 = None
    xlRangeAutoFormatSimple = None
    xlRangeAutoFormatTable1 = None
    xlRangeAutoFormatTable10 = None
    xlRangeAutoFormatTable2 = None
    xlRangeAutoFormatTable3 = None
    xlRangeAutoFormatTable4 = None
    xlRangeAutoFormatTable5 = None
    xlRangeAutoFormatTable6 = None
    xlRangeAutoFormatTable7 = None
    xlRangeAutoFormatTable8 = None
    xlRangeAutoFormatTable9 = None


class XlRangeValueDataType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRangeValueDataType, values: xlRangeValueDefault (10), xlRangeValueMSPersistXML (12), xlRangeValueXMLSpreadsheet (11) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlRangeValueDefault = None
    xlRangeValueMSPersistXML = None
    xlRangeValueXMLSpreadsheet = None


class XlReferenceStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlReferenceStyle, values: xlA1 (1), xlR1C1 (-4150) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlA1 = None
    xlR1C1 = None


class XlReferenceType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlReferenceType, values: xlAbsolute (1), xlAbsRowRelColumn (2), xlRelative (4), xlRelRowAbsColumn (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAbsolute = None
    xlAbsRowRelColumn = None
    xlRelative = None
    xlRelRowAbsColumn = None


class XlRemoveDocInfoType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRemoveDocInfoType, values: xlRDIAll (99), xlRDIComments (1), xlRDIContentType (16), xlRDIDefinedNameComments (18), xlRDIDocumentManagementPolicy (15), xlRDIDocumentProperties (8), xlRDIDocumentServerProperties (14), xlRDIDocumentWorkspace (10), xlRDIEmailHeader (5), xlRDIExcelDataModel (23), xlRDIInactiveDataConnections (19), xlRDIInkAnnotations (11), xlRDIInlineWebExtensions (21), xlRDIPrinterPath (20), xlRDIPublishInfo (13), xlRDIRemovePersonalInformation (4), xlRDIRoutingSlip (6), xlRDIScenarioComments (12), xlRDISendForReview (7), xlRDITaskpaneWebExtensions (22) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlRDIAll = None
    xlRDIComments = None
    xlRDIContentType = None
    xlRDIDefinedNameComments = None
    xlRDIDocumentManagementPolicy = None
    xlRDIDocumentProperties = None
    xlRDIDocumentServerProperties = None
    xlRDIDocumentWorkspace = None
    xlRDIEmailHeader = None
    xlRDIExcelDataModel = None
    xlRDIInactiveDataConnections = None
    xlRDIInkAnnotations = None
    xlRDIInlineWebExtensions = None
    xlRDIPrinterPath = None
    xlRDIPublishInfo = None
    xlRDIRemovePersonalInformation = None
    xlRDIRoutingSlip = None
    xlRDIScenarioComments = None
    xlRDISendForReview = None
    xlRDITaskpaneWebExtensions = None


class XlRgbColor(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRgbColor, values: rgbAliceBlue (16775408), rgbAntiqueWhite (14150650), rgbAqua (16776960), rgbAquamarine (13959039), rgbAzure (16777200), rgbBeige (14480885), rgbBisque (12903679), rgbBlack (0), rgbBlanchedAlmond (13495295), rgbBlue (16711680), rgbBlueViolet (14822282), rgbBrown (2763429), rgbBurlyWood (8894686), rgbCadetBlue (10526303), rgbChartreuse (65407), rgbCoral (5275647), rgbCornflowerBlue (15570276), rgbCornsilk (14481663), rgbCrimson (3937500), rgbDarkBlue (9109504), rgbDarkCyan (9145088), rgbDarkGoldenrod (755384), rgbDarkGray (11119017), rgbDarkGreen (25600), rgbDarkGrey (11119017), rgbDarkKhaki (7059389), rgbDarkMagenta (9109643), rgbDarkOliveGreen (3107669), rgbDarkOrange (36095), rgbDarkOrchid (13382297), rgbDarkRed (139), rgbDarkSalmon (8034025), rgbDarkSeaGreen (9419919), rgbDarkSlateBlue (9125192), rgbDarkSlateGray (5197615), rgbDarkSlateGrey (5197615), rgbDarkTurquoise (13749760), rgbDarkViolet (13828244), rgbDeepPink (9639167), rgbDeepSkyBlue (16760576), rgbDimGray (6908265), rgbDimGrey (6908265), rgbDodgerBlue (16748574), rgbFireBrick (2237106), rgbFloralWhite (15792895), rgbForestGreen (2263842), rgbFuchsia (16711935), rgbGainsboro (14474460), rgbGhostWhite (16775416), rgbGold (55295), rgbGoldenrod (2139610), rgbGray (8421504), rgbGreen (32768), rgbGreenYellow (3145645), rgbGrey (8421504), rgbHoneydew (15794160), rgbHotPink (11823615), rgbIndianRed (6053069), rgbIndigo (8519755), rgbIvory (15794175), rgbKhaki (9234160), rgbLavender (16443110), rgbLavenderBlush (16118015), rgbLawnGreen (64636), rgbLemonChiffon (13499135), rgbLightBlue (15128749), rgbLightCoral (8421616), rgbLightCyan (9145088), rgbLightGoldenrodYellow (13826810), rgbLightGray (13882323), rgbLightGreen (9498256), rgbLightGrey (13882323), rgbLightPink (12695295), rgbLightSalmon (8036607), rgbLightSeaGreen (11186720), rgbLightSkyBlue (16436871), rgbLightSlateGray (10061943), rgbLightSlateGrey (10061943), rgbLightSteelBlue (14599344), rgbLightYellow (14745599), rgbLime (65280), rgbLimeGreen (3329330), rgbLinen (15134970), rgbMaroon (128), rgbMediumAquamarine (11206502), rgbMediumBlue (13434880), rgbMediumOrchid (13850042), rgbMediumPurple (14381203), rgbMediumSeaGreen (7451452), rgbMediumSlateBlue (15624315), rgbMediumSpringGreen (10156544), rgbMediumTurquoise (13422920), rgbMediumVioletRed (8721863), rgbMidnightBlue (7346457), rgbMintCream (16449525), rgbMistyRose (14804223), rgbMoccasin (11920639), rgbNavajoWhite (11394815), rgbNavy (8388608), rgbNavyBlue (8388608), rgbOldLace (15136253), rgbOlive (32896), rgbOliveDrab (2330219), rgbOrange (42495), rgbOrangeRed (17919), rgbOrchid (14053594), rgbPaleGoldenrod (7071982), rgbPaleGreen (10025880), rgbPaleTurquoise (15658671), rgbPaleVioletRed (9662683), rgbPapayaWhip (14020607), rgbPeachPuff (12180223), rgbPeru (4163021), rgbPink (13353215), rgbPlum (14524637), rgbPowderBlue (15130800), rgbPurple (8388736), rgbRed (255), rgbRosyBrown (9408444), rgbRoyalBlue (14772545), rgbSalmon (7504122), rgbSandyBrown (6333684), rgbSeaGreen (5737262), rgbSeashell (15660543), rgbSienna (2970272), rgbSilver (12632256), rgbSkyBlue (15453831), rgbSlateBlue (13458026), rgbSlateGray (9470064), rgbSlateGrey (9470064), rgbSnow (16448255), rgbSpringGreen (8388352), rgbSteelBlue (11829830), rgbTan (9221330), rgbTeal (8421376), rgbThistle (14204888), rgbTomato (4678655), rgbTurquoise (13688896), rgbViolet (15631086), rgbWheat (11788021), rgbWhite (16777215), rgbWhiteSmoke (16119285), rgbYellow (65535), rgbYellowGreen (3329434) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    rgbAliceBlue = None
    rgbAntiqueWhite = None
    rgbAqua = None
    rgbAquamarine = None
    rgbAzure = None
    rgbBeige = None
    rgbBisque = None
    rgbBlack = None
    rgbBlanchedAlmond = None
    rgbBlue = None
    rgbBlueViolet = None
    rgbBrown = None
    rgbBurlyWood = None
    rgbCadetBlue = None
    rgbChartreuse = None
    rgbCoral = None
    rgbCornflowerBlue = None
    rgbCornsilk = None
    rgbCrimson = None
    rgbDarkBlue = None
    rgbDarkCyan = None
    rgbDarkGoldenrod = None
    rgbDarkGray = None
    rgbDarkGreen = None
    rgbDarkGrey = None
    rgbDarkKhaki = None
    rgbDarkMagenta = None
    rgbDarkOliveGreen = None
    rgbDarkOrange = None
    rgbDarkOrchid = None
    rgbDarkRed = None
    rgbDarkSalmon = None
    rgbDarkSeaGreen = None
    rgbDarkSlateBlue = None
    rgbDarkSlateGray = None
    rgbDarkSlateGrey = None
    rgbDarkTurquoise = None
    rgbDarkViolet = None
    rgbDeepPink = None
    rgbDeepSkyBlue = None
    rgbDimGray = None
    rgbDimGrey = None
    rgbDodgerBlue = None
    rgbFireBrick = None
    rgbFloralWhite = None
    rgbForestGreen = None
    rgbFuchsia = None
    rgbGainsboro = None
    rgbGhostWhite = None
    rgbGold = None
    rgbGoldenrod = None
    rgbGray = None
    rgbGreen = None
    rgbGreenYellow = None
    rgbGrey = None
    rgbHoneydew = None
    rgbHotPink = None
    rgbIndianRed = None
    rgbIndigo = None
    rgbIvory = None
    rgbKhaki = None
    rgbLavender = None
    rgbLavenderBlush = None
    rgbLawnGreen = None
    rgbLemonChiffon = None
    rgbLightBlue = None
    rgbLightCoral = None
    rgbLightCyan = None
    rgbLightGoldenrodYellow = None
    rgbLightGray = None
    rgbLightGreen = None
    rgbLightGrey = None
    rgbLightPink = None
    rgbLightSalmon = None
    rgbLightSeaGreen = None
    rgbLightSkyBlue = None
    rgbLightSlateGray = None
    rgbLightSlateGrey = None
    rgbLightSteelBlue = None
    rgbLightYellow = None
    rgbLime = None
    rgbLimeGreen = None
    rgbLinen = None
    rgbMaroon = None
    rgbMediumAquamarine = None
    rgbMediumBlue = None
    rgbMediumOrchid = None
    rgbMediumPurple = None
    rgbMediumSeaGreen = None
    rgbMediumSlateBlue = None
    rgbMediumSpringGreen = None
    rgbMediumTurquoise = None
    rgbMediumVioletRed = None
    rgbMidnightBlue = None
    rgbMintCream = None
    rgbMistyRose = None
    rgbMoccasin = None
    rgbNavajoWhite = None
    rgbNavy = None
    rgbNavyBlue = None
    rgbOldLace = None
    rgbOlive = None
    rgbOliveDrab = None
    rgbOrange = None
    rgbOrangeRed = None
    rgbOrchid = None
    rgbPaleGoldenrod = None
    rgbPaleGreen = None
    rgbPaleTurquoise = None
    rgbPaleVioletRed = None
    rgbPapayaWhip = None
    rgbPeachPuff = None
    rgbPeru = None
    rgbPink = None
    rgbPlum = None
    rgbPowderBlue = None
    rgbPurple = None
    rgbRed = None
    rgbRosyBrown = None
    rgbRoyalBlue = None
    rgbSalmon = None
    rgbSandyBrown = None
    rgbSeaGreen = None
    rgbSeashell = None
    rgbSienna = None
    rgbSilver = None
    rgbSkyBlue = None
    rgbSlateBlue = None
    rgbSlateGray = None
    rgbSlateGrey = None
    rgbSnow = None
    rgbSpringGreen = None
    rgbSteelBlue = None
    rgbTan = None
    rgbTeal = None
    rgbThistle = None
    rgbTomato = None
    rgbTurquoise = None
    rgbViolet = None
    rgbWheat = None
    rgbWhite = None
    rgbWhiteSmoke = None
    rgbYellow = None
    rgbYellowGreen = None
    value__ = None


class XlRobustConnect(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRobustConnect, values: xlAlways (1), xlAsRequired (0), xlNever (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAlways = None
    xlAsRequired = None
    xlNever = None


class XlRoutingSlipDelivery(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRoutingSlipDelivery, values: xlAllAtOnce (2), xlOneAfterAnother (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllAtOnce = None
    xlOneAfterAnother = None


class XlRoutingSlipStatus(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRoutingSlipStatus, values: xlNotYetRouted (0), xlRoutingComplete (2), xlRoutingInProgress (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNotYetRouted = None
    xlRoutingComplete = None
    xlRoutingInProgress = None


class XlRowCol(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRowCol, values: xlColumns (2), xlRows (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColumns = None
    xlRows = None


class XlRunAutoMacro(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlRunAutoMacro, values: xlAutoActivate (3), xlAutoClose (2), xlAutoDeactivate (4), xlAutoOpen (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAutoActivate = None
    xlAutoClose = None
    xlAutoDeactivate = None
    xlAutoOpen = None


class XlSaveAction(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSaveAction, values: xlDoNotSaveChanges (2), xlSaveChanges (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDoNotSaveChanges = None
    xlSaveChanges = None


class XlSaveAsAccessMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSaveAsAccessMode, values: xlExclusive (3), xlNoChange (1), xlShared (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlExclusive = None
    xlNoChange = None
    xlShared = None


class XlSaveConflictResolution(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSaveConflictResolution, values: xlLocalSessionChanges (2), xlOtherSessionChanges (3), xlUserResolution (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLocalSessionChanges = None
    xlOtherSessionChanges = None
    xlUserResolution = None


class XlScaleType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlScaleType, values: xlScaleLinear (-4132), xlScaleLogarithmic (-4133) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlScaleLinear = None
    xlScaleLogarithmic = None


class XlSearchDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSearchDirection, values: xlNext (1), xlPrevious (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNext = None
    xlPrevious = None


class XlSearchOrder(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSearchOrder, values: xlByColumns (2), xlByRows (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlByColumns = None
    xlByRows = None


class XlSearchWithin(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSearchWithin, values: xlWithinSheet (1), xlWithinWorkbook (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlWithinSheet = None
    xlWithinWorkbook = None


class XlSeriesNameLevel(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSeriesNameLevel, values: xlSeriesNameLevelAll (-1), xlSeriesNameLevelCustom (-2), xlSeriesNameLevelNone (-3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSeriesNameLevelAll = None
    xlSeriesNameLevelCustom = None
    xlSeriesNameLevelNone = None


class XlSheetType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSheetType, values: xlChart (-4109), xlDialogSheet (-4116), xlExcel4IntlMacroSheet (4), xlExcel4MacroSheet (3), xlWorksheet (-4167) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlChart = None
    xlDialogSheet = None
    xlExcel4IntlMacroSheet = None
    xlExcel4MacroSheet = None
    xlWorksheet = None


class XlSheetVisibility(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSheetVisibility, values: xlSheetHidden (0), xlSheetVeryHidden (2), xlSheetVisible (-1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSheetHidden = None
    xlSheetVeryHidden = None
    xlSheetVisible = None


class XlSizeRepresents(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSizeRepresents, values: xlSizeIsArea (1), xlSizeIsWidth (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSizeIsArea = None
    xlSizeIsWidth = None


class XlSlicerCacheType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSlicerCacheType, values: xlSlicer (1), xlTimeline (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSlicer = None
    xlTimeline = None


class XlSlicerCrossFilterType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSlicerCrossFilterType, values: xlSlicerCrossFilterHideButtonsWithNoData (4), xlSlicerCrossFilterShowItemsWithDataAtTop (2), xlSlicerCrossFilterShowItemsWithNoData (3), xlSlicerNoCrossFilter (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSlicerCrossFilterHideButtonsWithNoData = None
    xlSlicerCrossFilterShowItemsWithDataAtTop = None
    xlSlicerCrossFilterShowItemsWithNoData = None
    xlSlicerNoCrossFilter = None


class XlSlicerSort(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSlicerSort, values: xlSlicerSortAscending (2), xlSlicerSortDataSourceOrder (1), xlSlicerSortDescending (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSlicerSortAscending = None
    xlSlicerSortDataSourceOrder = None
    xlSlicerSortDescending = None


class XlSmartTagControlType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSmartTagControlType, values: xlSmartTagControlActiveX (13), xlSmartTagControlButton (6), xlSmartTagControlCheckbox (9), xlSmartTagControlCombo (12), xlSmartTagControlHelp (3), xlSmartTagControlHelpURL (4), xlSmartTagControlImage (8), xlSmartTagControlLabel (7), xlSmartTagControlLink (2), xlSmartTagControlListbox (11), xlSmartTagControlRadioGroup (14), xlSmartTagControlSeparator (5), xlSmartTagControlSmartTag (1), xlSmartTagControlTextbox (10) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSmartTagControlActiveX = None
    xlSmartTagControlButton = None
    xlSmartTagControlCheckbox = None
    xlSmartTagControlCombo = None
    xlSmartTagControlHelp = None
    xlSmartTagControlHelpURL = None
    xlSmartTagControlImage = None
    xlSmartTagControlLabel = None
    xlSmartTagControlLink = None
    xlSmartTagControlListbox = None
    xlSmartTagControlRadioGroup = None
    xlSmartTagControlSeparator = None
    xlSmartTagControlSmartTag = None
    xlSmartTagControlTextbox = None


class XlSmartTagDisplayMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSmartTagDisplayMode, values: xlButtonOnly (2), xlDisplayNone (1), xlIndicatorAndButton (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlButtonOnly = None
    xlDisplayNone = None
    xlIndicatorAndButton = None


class XlSortDataOption(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortDataOption, values: xlSortNormal (0), xlSortTextAsNumbers (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSortNormal = None
    xlSortTextAsNumbers = None


class XlSortMethod(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortMethod, values: xlPinYin (1), xlStroke (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlPinYin = None
    xlStroke = None


class XlSortMethodOld(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortMethodOld, values: xlCodePage (2), xlSyllabary (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCodePage = None
    xlSyllabary = None


class XlSortOn(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortOn, values: xlSortOnCellColor (1), xlSortOnFontColor (2), xlSortOnIcon (3), xlSortOnValues (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSortOnCellColor = None
    xlSortOnFontColor = None
    xlSortOnIcon = None
    xlSortOnValues = None


class XlSortOrder(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortOrder, values: xlAscending (1), xlDescending (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAscending = None
    xlDescending = None


class XlSortOrientation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortOrientation, values: xlSortColumns (1), xlSortRows (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSortColumns = None
    xlSortRows = None


class XlSortType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSortType, values: xlSortLabels (2), xlSortValues (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSortLabels = None
    xlSortValues = None


class XlSourceType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSourceType, values: xlSourceAutoFilter (3), xlSourceChart (5), xlSourcePivotTable (6), xlSourcePrintArea (2), xlSourceQuery (7), xlSourceRange (4), xlSourceSheet (1), xlSourceWorkbook (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSourceAutoFilter = None
    xlSourceChart = None
    xlSourcePivotTable = None
    xlSourcePrintArea = None
    xlSourceQuery = None
    xlSourceRange = None
    xlSourceSheet = None
    xlSourceWorkbook = None


class XlSpanishModes(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSpanishModes, values: xlSpanishTuteoAndVoseo (1), xlSpanishTuteoOnly (0), xlSpanishVoseoOnly (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSpanishTuteoAndVoseo = None
    xlSpanishTuteoOnly = None
    xlSpanishVoseoOnly = None


class XlSparklineRowCol(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSparklineRowCol, values: xlSparklineColumnsSquare (2), xlSparklineNonSquare (0), xlSparklineRowsSquare (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSparklineColumnsSquare = None
    xlSparklineNonSquare = None
    xlSparklineRowsSquare = None


class XlSparkScale(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSparkScale, values: xlSparkScaleCustom (3), xlSparkScaleGroup (1), xlSparkScaleSingle (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSparkScaleCustom = None
    xlSparkScaleGroup = None
    xlSparkScaleSingle = None


class XlSparkType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSparkType, values: xlSparkColumn (2), xlSparkColumnStacked100 (3), xlSparkLine (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSparkColumn = None
    xlSparkColumnStacked100 = None
    xlSparkLine = None


class XlSpeakDirection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSpeakDirection, values: xlSpeakByColumns (1), xlSpeakByRows (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSpeakByColumns = None
    xlSpeakByRows = None


class XlSpecialCellsValue(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSpecialCellsValue, values: xlErrors (16), xlLogical (4), xlNumbers (1), xlTextValues (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlErrors = None
    xlLogical = None
    xlNumbers = None
    xlTextValues = None


class XlStdColorScale(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlStdColorScale, values: xlColorScaleBlackWhite (3), xlColorScaleGYR (2), xlColorScaleRYG (1), xlColorScaleWhiteBlack (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlColorScaleBlackWhite = None
    xlColorScaleGYR = None
    xlColorScaleRYG = None
    xlColorScaleWhiteBlack = None


class XlSubscribeToFormat(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSubscribeToFormat, values: xlSubscribeToPicture (-4147), xlSubscribeToText (-4158) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSubscribeToPicture = None
    xlSubscribeToText = None


class XlSubtototalLocationType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSubtototalLocationType, values: xlAtBottom (2), xlAtTop (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAtBottom = None
    xlAtTop = None


class XlSummaryColumn(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSummaryColumn, values: xlSummaryOnLeft (-4131), xlSummaryOnRight (-4152) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSummaryOnLeft = None
    xlSummaryOnRight = None


class XlSummaryReportType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSummaryReportType, values: xlStandardSummary (1), xlSummaryPivotTable (-4148) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlStandardSummary = None
    xlSummaryPivotTable = None


class XlSummaryRow(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlSummaryRow, values: xlSummaryAbove (0), xlSummaryBelow (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlSummaryAbove = None
    xlSummaryBelow = None


class XlTableStyleElementType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTableStyleElementType, values: xlBlankRow (19), xlColumnStripe1 (7), xlColumnStripe2 (8), xlColumnSubheading1 (20), xlColumnSubheading2 (21), xlColumnSubheading3 (22), xlFirstColumn (3), xlFirstHeaderCell (9), xlFirstTotalCell (11), xlGrandTotalColumn (4), xlGrandTotalRow (2), xlHeaderRow (1), xlLastColumn (4), xlLastHeaderCell (10), xlLastTotalCell (12), xlPageFieldLabels (26), xlPageFieldValues (27), xlRowStripe1 (5), xlRowStripe2 (6), xlRowSubheading1 (23), xlRowSubheading2 (24), xlRowSubheading3 (25), xlSlicerHoveredSelectedItemWithData (33), xlSlicerHoveredSelectedItemWithNoData (35), xlSlicerHoveredUnselectedItemWithData (32), xlSlicerHoveredUnselectedItemWithNoData (34), xlSlicerSelectedItemWithData (30), xlSlicerSelectedItemWithNoData (31), xlSlicerUnselectedItemWithData (28), xlSlicerUnselectedItemWithNoData (29), xlSubtotalColumn1 (13), xlSubtotalColumn2 (14), xlSubtotalColumn3 (15), xlSubtotalRow1 (16), xlSubtotalRow2 (17), xlSubtotalRow3 (18), xlTimelinePeriodLabels1 (38), xlTimelinePeriodLabels2 (39), xlTimelineSelectedTimeBlock (40), xlTimelineSelectedTimeBlockSpace (42), xlTimelineSelectionLabel (36), xlTimelineTimeLevel (37), xlTimelineUnselectedTimeBlock (41), xlTotalRow (2), xlWholeTable (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlBlankRow = None
    xlColumnStripe1 = None
    xlColumnStripe2 = None
    xlColumnSubheading1 = None
    xlColumnSubheading2 = None
    xlColumnSubheading3 = None
    xlFirstColumn = None
    xlFirstHeaderCell = None
    xlFirstTotalCell = None
    xlGrandTotalColumn = None
    xlGrandTotalRow = None
    xlHeaderRow = None
    xlLastColumn = None
    xlLastHeaderCell = None
    xlLastTotalCell = None
    xlPageFieldLabels = None
    xlPageFieldValues = None
    xlRowStripe1 = None
    xlRowStripe2 = None
    xlRowSubheading1 = None
    xlRowSubheading2 = None
    xlRowSubheading3 = None
    xlSlicerHoveredSelectedItemWithData = None
    xlSlicerHoveredSelectedItemWithNoData = None
    xlSlicerHoveredUnselectedItemWithData = None
    xlSlicerHoveredUnselectedItemWithNoData = None
    xlSlicerSelectedItemWithData = None
    xlSlicerSelectedItemWithNoData = None
    xlSlicerUnselectedItemWithData = None
    xlSlicerUnselectedItemWithNoData = None
    xlSubtotalColumn1 = None
    xlSubtotalColumn2 = None
    xlSubtotalColumn3 = None
    xlSubtotalRow1 = None
    xlSubtotalRow2 = None
    xlSubtotalRow3 = None
    xlTimelinePeriodLabels1 = None
    xlTimelinePeriodLabels2 = None
    xlTimelineSelectedTimeBlock = None
    xlTimelineSelectedTimeBlockSpace = None
    xlTimelineSelectionLabel = None
    xlTimelineTimeLevel = None
    xlTimelineUnselectedTimeBlock = None
    xlTotalRow = None
    xlWholeTable = None


class XlTabPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTabPosition, values: xlTabPositionFirst (0), xlTabPositionLast (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTabPositionFirst = None
    xlTabPositionLast = None


class XlTextParsingType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTextParsingType, values: xlDelimited (1), xlFixedWidth (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDelimited = None
    xlFixedWidth = None


class XlTextQualifier(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTextQualifier, values: xlTextQualifierDoubleQuote (1), xlTextQualifierNone (-4142), xlTextQualifierSingleQuote (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTextQualifierDoubleQuote = None
    xlTextQualifierNone = None
    xlTextQualifierSingleQuote = None


class XlTextVisualLayoutType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTextVisualLayoutType, values: xlTextVisualLTR (1), xlTextVisualRTL (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTextVisualLTR = None
    xlTextVisualRTL = None


class XlThemeColor(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlThemeColor, values: xlThemeColorAccent1 (5), xlThemeColorAccent2 (6), xlThemeColorAccent3 (7), xlThemeColorAccent4 (8), xlThemeColorAccent5 (9), xlThemeColorAccent6 (10), xlThemeColorDark1 (1), xlThemeColorDark2 (3), xlThemeColorFollowedHyperlink (12), xlThemeColorHyperlink (11), xlThemeColorLight1 (2), xlThemeColorLight2 (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlThemeColorAccent1 = None
    xlThemeColorAccent2 = None
    xlThemeColorAccent3 = None
    xlThemeColorAccent4 = None
    xlThemeColorAccent5 = None
    xlThemeColorAccent6 = None
    xlThemeColorDark1 = None
    xlThemeColorDark2 = None
    xlThemeColorFollowedHyperlink = None
    xlThemeColorHyperlink = None
    xlThemeColorLight1 = None
    xlThemeColorLight2 = None


class XlThemeFont(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlThemeFont, values: xlThemeFontMajor (1), xlThemeFontMinor (2), xlThemeFontNone (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlThemeFontMajor = None
    xlThemeFontMinor = None
    xlThemeFontNone = None


class XlThreadMode(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlThreadMode, values: xlThreadModeAutomatic (0), xlThreadModeManual (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlThreadModeAutomatic = None
    xlThreadModeManual = None


class XlTickLabelOrientation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTickLabelOrientation, values: xlTickLabelOrientationAutomatic (-4105), xlTickLabelOrientationDownward (-4170), xlTickLabelOrientationHorizontal (-4128), xlTickLabelOrientationUpward (-4171), xlTickLabelOrientationVertical (-4166) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTickLabelOrientationAutomatic = None
    xlTickLabelOrientationDownward = None
    xlTickLabelOrientationHorizontal = None
    xlTickLabelOrientationUpward = None
    xlTickLabelOrientationVertical = None


class XlTickLabelPosition(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTickLabelPosition, values: xlTickLabelPositionHigh (-4127), xlTickLabelPositionLow (-4134), xlTickLabelPositionNextToAxis (4), xlTickLabelPositionNone (-4142) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTickLabelPositionHigh = None
    xlTickLabelPositionLow = None
    xlTickLabelPositionNextToAxis = None
    xlTickLabelPositionNone = None


class XlTickMark(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTickMark, values: xlTickMarkCross (4), xlTickMarkInside (2), xlTickMarkNone (-4142), xlTickMarkOutside (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTickMarkCross = None
    xlTickMarkInside = None
    xlTickMarkNone = None
    xlTickMarkOutside = None


class XlTimelineLevel(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTimelineLevel, values: xlTimelineLevelDays (3), xlTimelineLevelMonths (2), xlTimelineLevelQuarters (1), xlTimelineLevelYears (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTimelineLevelDays = None
    xlTimelineLevelMonths = None
    xlTimelineLevelQuarters = None
    xlTimelineLevelYears = None


class XlTimePeriods(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTimePeriods, values: xlLast7Days (2), xlLastMonth (5), xlLastWeek (4), xlNextMonth (8), xlNextWeek (7), xlThisMonth (9), xlThisWeek (3), xlToday (0), xlTomorrow (6), xlYesterday (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlLast7Days = None
    xlLastMonth = None
    xlLastWeek = None
    xlNextMonth = None
    xlNextWeek = None
    xlThisMonth = None
    xlThisWeek = None
    xlToday = None
    xlTomorrow = None
    xlYesterday = None


class XlTimeUnit(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTimeUnit, values: xlDays (0), xlMonths (1), xlYears (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlDays = None
    xlMonths = None
    xlYears = None


class XlToolbarProtection(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlToolbarProtection, values: xlNoButtonChanges (1), xlNoChanges (4), xlNoDockingChanges (3), xlNoShapeChanges (2), xlToolbarProtectionNone (-4143) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNoButtonChanges = None
    xlNoChanges = None
    xlNoDockingChanges = None
    xlNoShapeChanges = None
    xlToolbarProtectionNone = None


class XlTopBottom(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTopBottom, values: xlTop10Bottom (0), xlTop10Top (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTop10Bottom = None
    xlTop10Top = None


class XlTotalsCalculation(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTotalsCalculation, values: xlTotalsCalculationAverage (2), xlTotalsCalculationCount (3), xlTotalsCalculationCountNums (4), xlTotalsCalculationCustom (9), xlTotalsCalculationMax (6), xlTotalsCalculationMin (5), xlTotalsCalculationNone (0), xlTotalsCalculationStdDev (7), xlTotalsCalculationSum (1), xlTotalsCalculationVar (8) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlTotalsCalculationAverage = None
    xlTotalsCalculationCount = None
    xlTotalsCalculationCountNums = None
    xlTotalsCalculationCustom = None
    xlTotalsCalculationMax = None
    xlTotalsCalculationMin = None
    xlTotalsCalculationNone = None
    xlTotalsCalculationStdDev = None
    xlTotalsCalculationSum = None
    xlTotalsCalculationVar = None


class XlTrendlineType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlTrendlineType, values: xlExponential (5), xlLinear (-4132), xlLogarithmic (-4133), xlMovingAvg (6), xlPolynomial (3), xlPower (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlExponential = None
    xlLinear = None
    xlLogarithmic = None
    xlMovingAvg = None
    xlPolynomial = None
    xlPower = None


class XlUnderlineStyle(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlUnderlineStyle, values: xlUnderlineStyleDouble (-4119), xlUnderlineStyleDoubleAccounting (5), xlUnderlineStyleNone (-4142), xlUnderlineStyleSingle (2), xlUnderlineStyleSingleAccounting (4) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlUnderlineStyleDouble = None
    xlUnderlineStyleDoubleAccounting = None
    xlUnderlineStyleNone = None
    xlUnderlineStyleSingle = None
    xlUnderlineStyleSingleAccounting = None


class XlUpdateLinks(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlUpdateLinks, values: xlUpdateLinksAlways (3), xlUpdateLinksNever (2), xlUpdateLinksUserSetting (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlUpdateLinksAlways = None
    xlUpdateLinksNever = None
    xlUpdateLinksUserSetting = None


class XlVAlign(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlVAlign, values: xlVAlignBottom (-4107), xlVAlignCenter (-4108), xlVAlignDistributed (-4117), xlVAlignJustify (-4130), xlVAlignTop (-4160) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlVAlignBottom = None
    xlVAlignCenter = None
    xlVAlignDistributed = None
    xlVAlignJustify = None
    xlVAlignTop = None


class XlWBATemplate(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWBATemplate, values: xlWBATChart (-4109), xlWBATExcel4IntlMacroSheet (4), xlWBATExcel4MacroSheet (3), xlWBATWorksheet (-4167) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlWBATChart = None
    xlWBATExcel4IntlMacroSheet = None
    xlWBATExcel4MacroSheet = None
    xlWBATWorksheet = None


class XlWebFormatting(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWebFormatting, values: xlWebFormattingAll (1), xlWebFormattingNone (3), xlWebFormattingRTF (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlWebFormattingAll = None
    xlWebFormattingNone = None
    xlWebFormattingRTF = None


class XlWebSelectionType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWebSelectionType, values: xlAllTables (2), xlEntirePage (1), xlSpecifiedTables (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlAllTables = None
    xlEntirePage = None
    xlSpecifiedTables = None


class XlWindowState(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWindowState, values: xlMaximized (-4137), xlMinimized (-4140), xlNormal (-4143) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlMaximized = None
    xlMinimized = None
    xlNormal = None


class XlWindowType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWindowType, values: xlChartAsWindow (5), xlChartInPlace (4), xlClipboard (3), xlInfo (-4129), xlWorkbook (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlChartAsWindow = None
    xlChartInPlace = None
    xlClipboard = None
    xlInfo = None
    xlWorkbook = None


class XlWindowView(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlWindowView, values: xlNormalView (1), xlPageBreakPreview (2), xlPageLayoutView (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlNormalView = None
    xlPageBreakPreview = None
    xlPageLayoutView = None


class XlXLMMacroType(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlXLMMacroType, values: xlCommand (2), xlFunction (1), xlNotXLM (3) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlCommand = None
    xlFunction = None
    xlNotXLM = None


class XlXmlExportResult(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlXmlExportResult, values: xlXmlExportSuccess (0), xlXmlExportValidationFailed (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlXmlExportSuccess = None
    xlXmlExportValidationFailed = None


class XlXmlImportResult(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlXmlImportResult, values: xlXmlImportElementsTruncated (1), xlXmlImportSuccess (0), xlXmlImportValidationFailed (2) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlXmlImportElementsTruncated = None
    xlXmlImportSuccess = None
    xlXmlImportValidationFailed = None


class XlXmlLoadOption(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlXmlLoadOption, values: xlXmlLoadImportToList (2), xlXmlLoadMapXml (3), xlXmlLoadOpenXml (1), xlXmlLoadPromptUser (0) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlXmlLoadImportToList = None
    xlXmlLoadMapXml = None
    xlXmlLoadOpenXml = None
    xlXmlLoadPromptUser = None


class XlYesNoGuess(Enum, IComparable, IFormattable, IConvertible):
    """ enum XlYesNoGuess, values: xlGuess (0), xlNo (2), xlYes (1) """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    value__ = None
    xlGuess = None
    xlNo = None
    xlYes = None


class XmlDataBinding:
    # no doc
    def ClearSettings(self):
        """ ClearSettings(self: XmlDataBinding) """
        pass

    def LoadSettings(self, Url):
        """ LoadSettings(self: XmlDataBinding, Url: str) """
        pass

    def Refresh(self):
        """ Refresh(self: XmlDataBinding) -> XlXmlImportResult """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlDataBinding) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlDataBinding) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlDataBinding) -> object

"""

    SourceUrl = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceUrl(self: XmlDataBinding) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: XmlDataBinding) -> str

"""



class XmlMap:
    # no doc
    def Delete(self):
        """ Delete(self: XmlMap) """
        pass

    def Export(self, Url, Overwrite):
        """ Export(self: XmlMap, Url: str, Overwrite: object) -> XlXmlExportResult """
        pass

    def ExportXml(self, Data):
        """ ExportXml(self: XmlMap) -> (XlXmlExportResult, str) """
        pass

    def Import(self, Url, Overwrite):
        """ Import(self: XmlMap, Url: str, Overwrite: object) -> XlXmlImportResult """
        pass

    def ImportXml(self, XmlData, Overwrite):
        """ ImportXml(self: XmlMap, XmlData: str, Overwrite: object) -> XlXmlImportResult """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: XmlMap) -> bool

Set: AdjustColumnWidth(self: XmlMap) = value
"""

    AppendOnImport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AppendOnImport(self: XmlMap) -> bool

Set: AppendOnImport(self: XmlMap) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlMap) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlMap) -> XlCreator

"""

    DataBinding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DataBinding(self: XmlMap) -> XmlDataBinding

"""

    IsExportable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsExportable(self: XmlMap) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: XmlMap) -> str

Set: Name(self: XmlMap) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlMap) -> object

"""

    PreserveColumnFilter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnFilter(self: XmlMap) -> bool

Set: PreserveColumnFilter(self: XmlMap) = value
"""

    PreserveNumberFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveNumberFormatting(self: XmlMap) -> bool

Set: PreserveNumberFormatting(self: XmlMap) = value
"""

    RootElementName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RootElementName(self: XmlMap) -> str

"""

    RootElementNamespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RootElementNamespace(self: XmlMap) -> XmlNamespace

"""

    SaveDataSourceDefinition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveDataSourceDefinition(self: XmlMap) -> bool

Set: SaveDataSourceDefinition(self: XmlMap) = value
"""

    Schemas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Schemas(self: XmlMap) -> XmlSchemas

"""

    ShowImportExportValidationErrors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowImportExportValidationErrors(self: XmlMap) -> bool

Set: ShowImportExportValidationErrors(self: XmlMap) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: XmlMap) -> WorkbookConnection

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: XmlMap) -> str

"""



class XmlMaps(IEnumerable):
    # no doc
    def Add(self, Schema, RootElementName):
        """ Add(self: XmlMaps, Schema: str, RootElementName: object) -> XmlMap """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: XmlMaps) -> IEnumerator """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlMaps) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: XmlMaps) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlMaps) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlMaps) -> object

"""



class XmlNamespace:
    # no doc
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlNamespace) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlNamespace) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlNamespace) -> object

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Prefix(self: XmlNamespace) -> str

"""

    Uri = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Uri(self: XmlNamespace) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: XmlNamespace) -> str

"""



class XmlNamespaces(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: XmlNamespaces) -> IEnumerator """
        pass

    def InstallManifest(self, Path, InstallForAllUsers):
        """ InstallManifest(self: XmlNamespaces, Path: str, InstallForAllUsers: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlNamespaces) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: XmlNamespaces) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlNamespaces) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlNamespaces) -> object

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: XmlNamespaces) -> str

"""



class XmlSchema:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlSchema) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlSchema) -> XlCreator

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: XmlSchema) -> str

"""

    Namespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Namespace(self: XmlSchema) -> XmlNamespace

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlSchema) -> object

"""

    XML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XML(self: XmlSchema) -> str

"""



class XmlSchemas(IEnumerable):
    # no doc
    def GetEnumerator(self):
        """ GetEnumerator(self: XmlSchemas) -> IEnumerator """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XmlSchemas) -> Application

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: XmlSchemas) -> int

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XmlSchemas) -> XlCreator

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XmlSchemas) -> object

"""



class XPath:
    # no doc
    def Clear(self):
        """ Clear(self: XPath) """
        pass

    def SetValue(self, Map, XPath, SelectionNamespace, Repeating):
        """ SetValue(self: XPath, Map: XmlMap, XPath: str, SelectionNamespace: object, Repeating: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: XPath) -> Application

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: XPath) -> XlCreator

"""

    Map = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Map(self: XPath) -> XmlMap

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: XPath) -> object

"""

    Repeating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Repeating(self: XPath) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: XPath) -> str

"""

    _Default = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: _Default(self: XPath) -> str

"""



class _IOLEObject:
    # no doc
    def Activate(self):
        """ Activate(self: _IOLEObject) -> object """
        pass

    def BringToFront(self):
        """ BringToFront(self: _IOLEObject) -> object """
        pass

    def Copy(self):
        """ Copy(self: _IOLEObject) -> object """
        pass

    def CopyPicture(self, Appearance, Format):
        """ CopyPicture(self: _IOLEObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        pass

    def Cut(self):
        """ Cut(self: _IOLEObject) -> object """
        pass

    def Delete(self):
        """ Delete(self: _IOLEObject) -> object """
        pass

    def Duplicate(self):
        """ Duplicate(self: _IOLEObject) -> object """
        pass

    def Select(self, Replace):
        """ Select(self: _IOLEObject, Replace: object) -> object """
        pass

    def SendToBack(self):
        """ SendToBack(self: _IOLEObject) -> object """
        pass

    def Update(self):
        """ Update(self: _IOLEObject) -> object """
        pass

    def Verb(self, Verb):
        """ Verb(self: _IOLEObject, Verb: XlOLEVerb) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltHTML(self: _IOLEObject) -> str

Set: AltHTML(self: _IOLEObject) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _IOLEObject) -> Application

"""

    AutoLoad = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoLoad(self: _IOLEObject) -> bool

Set: AutoLoad(self: _IOLEObject) = value
"""

    AutoUpdate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AutoUpdate(self: _IOLEObject) -> bool

Set: AutoUpdate(self: _IOLEObject) = value
"""

    Border = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Border(self: _IOLEObject) -> Border

"""

    BottomRightCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomRightCell(self: _IOLEObject) -> Range

"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _IOLEObject) -> XlCreator

"""

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Enabled(self: _IOLEObject) -> bool

Set: Enabled(self: _IOLEObject) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: _IOLEObject) -> float

Set: Height(self: _IOLEObject) = value
"""

    Index = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Index(self: _IOLEObject) -> int

"""

    Interior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Interior(self: _IOLEObject) -> Interior

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Left(self: _IOLEObject) -> float

Set: Left(self: _IOLEObject) = value
"""

    LinkedCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinkedCell(self: _IOLEObject) -> str

Set: LinkedCell(self: _IOLEObject) = value
"""

    ListFillRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListFillRange(self: _IOLEObject) -> str

Set: ListFillRange(self: _IOLEObject) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: _IOLEObject) -> bool

Set: Locked(self: _IOLEObject) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _IOLEObject) -> str

Set: Name(self: _IOLEObject) = value
"""

    Object = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Object(self: _IOLEObject) -> object

"""

    OLEType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLEType(self: _IOLEObject) -> object

"""

    OnAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OnAction(self: _IOLEObject) -> str

Set: OnAction(self: _IOLEObject) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _IOLEObject) -> object

"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Placement(self: _IOLEObject) -> object

Set: Placement(self: _IOLEObject) = value
"""

    PrintObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrintObject(self: _IOLEObject) -> bool

Set: PrintObject(self: _IOLEObject) = value
"""

    progID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: progID(self: _IOLEObject) -> str

"""

    Shadow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Shadow(self: _IOLEObject) -> bool

Set: Shadow(self: _IOLEObject) = value
"""

    ShapeRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShapeRange(self: _IOLEObject) -> ShapeRange

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceName(self: _IOLEObject) -> str

Set: SourceName(self: _IOLEObject) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Top(self: _IOLEObject) -> float

Set: Top(self: _IOLEObject) = value
"""

    TopLeftCell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopLeftCell(self: _IOLEObject) -> Range

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: _IOLEObject) -> bool

Set: Visible(self: _IOLEObject) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: _IOLEObject) -> float

Set: Width(self: _IOLEObject) = value
"""

    ZOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZOrder(self: _IOLEObject) -> int

"""



class _IQueryTable:
    # no doc
    def CancelRefresh(self):
        """ CancelRefresh(self: _IQueryTable) """
        pass

    def Delete(self):
        """ Delete(self: _IQueryTable) """
        pass

    def Refresh(self, BackgroundQuery):
        """ Refresh(self: _IQueryTable, BackgroundQuery: object) -> bool """
        pass

    def ResetTimer(self):
        """ ResetTimer(self: _IQueryTable) """
        pass

    def SaveAsODC(self, ODCFileName, Description, Keywords):
        """ SaveAsODC(self: _IQueryTable, ODCFileName: str, Description: object, Keywords: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustColumnWidth(self: _IQueryTable) -> bool

Set: AdjustColumnWidth(self: _IQueryTable) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: _IQueryTable) -> Application

"""

    BackgroundQuery = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundQuery(self: _IQueryTable) -> bool

Set: BackgroundQuery(self: _IQueryTable) = value
"""

    CommandText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandText(self: _IQueryTable) -> object

Set: CommandText(self: _IQueryTable) = value
"""

    CommandType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CommandType(self: _IQueryTable) -> XlCmdType

Set: CommandType(self: _IQueryTable) = value
"""

    Connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Connection(self: _IQueryTable) -> object

Set: Connection(self: _IQueryTable) = value
"""

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Creator(self: _IQueryTable) -> XlCreator

"""

    Destination = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Destination(self: _IQueryTable) -> Range

"""

    EditWebPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EditWebPage(self: _IQueryTable) -> object

Set: EditWebPage(self: _IQueryTable) = value
"""

    EnableEditing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableEditing(self: _IQueryTable) -> bool

Set: EnableEditing(self: _IQueryTable) = value
"""

    EnableRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableRefresh(self: _IQueryTable) -> bool

Set: EnableRefresh(self: _IQueryTable) = value
"""

    FetchedRowOverflow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FetchedRowOverflow(self: _IQueryTable) -> bool

"""

    FieldNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldNames(self: _IQueryTable) -> bool

Set: FieldNames(self: _IQueryTable) = value
"""

    FillAdjacentFormulas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FillAdjacentFormulas(self: _IQueryTable) -> bool

Set: FillAdjacentFormulas(self: _IQueryTable) = value
"""

    HasAutoFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAutoFormat(self: _IQueryTable) -> bool

Set: HasAutoFormat(self: _IQueryTable) = value
"""

    ListObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ListObject(self: _IQueryTable) -> ListObject

"""

    MaintainConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainConnection(self: _IQueryTable) -> bool

Set: MaintainConnection(self: _IQueryTable) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: _IQueryTable) -> str

Set: Name(self: _IQueryTable) = value
"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parameters(self: _IQueryTable) -> Parameters

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Parent(self: _IQueryTable) -> object

"""

    PostText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PostText(self: _IQueryTable) -> str

Set: PostText(self: _IQueryTable) = value
"""

    PreserveColumnInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveColumnInfo(self: _IQueryTable) -> bool

Set: PreserveColumnInfo(self: _IQueryTable) = value
"""

    PreserveFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PreserveFormatting(self: _IQueryTable) -> bool

Set: PreserveFormatting(self: _IQueryTable) = value
"""

    QueryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: QueryType(self: _IQueryTable) -> XlQueryType

"""

    Recordset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Recordset(self: _IQueryTable) -> object

Set: Recordset(self: _IQueryTable) = value
"""

    Refreshing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Refreshing(self: _IQueryTable) -> bool

"""

    RefreshOnFileOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshOnFileOpen(self: _IQueryTable) -> bool

Set: RefreshOnFileOpen(self: _IQueryTable) = value
"""

    RefreshPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshPeriod(self: _IQueryTable) -> int

Set: RefreshPeriod(self: _IQueryTable) = value
"""

    RefreshStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RefreshStyle(self: _IQueryTable) -> XlCellInsertionMode

Set: RefreshStyle(self: _IQueryTable) = value
"""

    ResultRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ResultRange(self: _IQueryTable) -> Range

"""

    RobustConnect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RobustConnect(self: _IQueryTable) -> XlRobustConnect

Set: RobustConnect(self: _IQueryTable) = value
"""

    RowNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowNumbers(self: _IQueryTable) -> bool

Set: RowNumbers(self: _IQueryTable) = value
"""

    SaveData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SaveData(self: _IQueryTable) -> bool

Set: SaveData(self: _IQueryTable) = value
"""

    SavePassword = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SavePassword(self: _IQueryTable) -> bool

Set: SavePassword(self: _IQueryTable) = value
"""

    Sort = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sort(self: _IQueryTable) -> Sort

"""

    SourceConnectionFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceConnectionFile(self: _IQueryTable) -> str

Set: SourceConnectionFile(self: _IQueryTable) = value
"""

    SourceDataFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceDataFile(self: _IQueryTable) -> str

Set: SourceDataFile(self: _IQueryTable) = value
"""

    Sql = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Sql(self: _IQueryTable) -> object

Set: Sql(self: _IQueryTable) = value
"""

    TablesOnlyFromHTML = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TablesOnlyFromHTML(self: _IQueryTable) -> bool

Set: TablesOnlyFromHTML(self: _IQueryTable) = value
"""

    TextFileColumnDataTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileColumnDataTypes(self: _IQueryTable) -> object

Set: TextFileColumnDataTypes(self: _IQueryTable) = value
"""

    TextFileCommaDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileCommaDelimiter(self: _IQueryTable) -> bool

Set: TextFileCommaDelimiter(self: _IQueryTable) = value
"""

    TextFileConsecutiveDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileConsecutiveDelimiter(self: _IQueryTable) -> bool

Set: TextFileConsecutiveDelimiter(self: _IQueryTable) = value
"""

    TextFileDecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileDecimalSeparator(self: _IQueryTable) -> str

Set: TextFileDecimalSeparator(self: _IQueryTable) = value
"""

    TextFileFixedColumnWidths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileFixedColumnWidths(self: _IQueryTable) -> object

Set: TextFileFixedColumnWidths(self: _IQueryTable) = value
"""

    TextFileOtherDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileOtherDelimiter(self: _IQueryTable) -> str

Set: TextFileOtherDelimiter(self: _IQueryTable) = value
"""

    TextFileParseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileParseType(self: _IQueryTable) -> XlTextParsingType

Set: TextFileParseType(self: _IQueryTable) = value
"""

    TextFilePlatform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePlatform(self: _IQueryTable) -> int

Set: TextFilePlatform(self: _IQueryTable) = value
"""

    TextFilePromptOnRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFilePromptOnRefresh(self: _IQueryTable) -> bool

Set: TextFilePromptOnRefresh(self: _IQueryTable) = value
"""

    TextFileSemicolonDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSemicolonDelimiter(self: _IQueryTable) -> bool

Set: TextFileSemicolonDelimiter(self: _IQueryTable) = value
"""

    TextFileSpaceDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileSpaceDelimiter(self: _IQueryTable) -> bool

Set: TextFileSpaceDelimiter(self: _IQueryTable) = value
"""

    TextFileStartRow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileStartRow(self: _IQueryTable) -> int

Set: TextFileStartRow(self: _IQueryTable) = value
"""

    TextFileTabDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTabDelimiter(self: _IQueryTable) -> bool

Set: TextFileTabDelimiter(self: _IQueryTable) = value
"""

    TextFileTextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTextQualifier(self: _IQueryTable) -> XlTextQualifier

Set: TextFileTextQualifier(self: _IQueryTable) = value
"""

    TextFileThousandsSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileThousandsSeparator(self: _IQueryTable) -> str

Set: TextFileThousandsSeparator(self: _IQueryTable) = value
"""

    TextFileTrailingMinusNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileTrailingMinusNumbers(self: _IQueryTable) -> bool

Set: TextFileTrailingMinusNumbers(self: _IQueryTable) = value
"""

    TextFileVisualLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFileVisualLayout(self: _IQueryTable) -> XlTextVisualLayoutType

Set: TextFileVisualLayout(self: _IQueryTable) = value
"""

    WebConsecutiveDelimitersAsOne = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebConsecutiveDelimitersAsOne(self: _IQueryTable) -> bool

Set: WebConsecutiveDelimitersAsOne(self: _IQueryTable) = value
"""

    WebDisableDateRecognition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableDateRecognition(self: _IQueryTable) -> bool

Set: WebDisableDateRecognition(self: _IQueryTable) = value
"""

    WebDisableRedirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebDisableRedirections(self: _IQueryTable) -> bool

Set: WebDisableRedirections(self: _IQueryTable) = value
"""

    WebFormatting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebFormatting(self: _IQueryTable) -> XlWebFormatting

Set: WebFormatting(self: _IQueryTable) = value
"""

    WebPreFormattedTextToColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebPreFormattedTextToColumns(self: _IQueryTable) -> bool

Set: WebPreFormattedTextToColumns(self: _IQueryTable) = value
"""

    WebSelectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSelectionType(self: _IQueryTable) -> XlWebSelectionType

Set: WebSelectionType(self: _IQueryTable) = value
"""

    WebSingleBlockTextImport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebSingleBlockTextImport(self: _IQueryTable) -> bool

Set: WebSingleBlockTextImport(self: _IQueryTable) = value
"""

    WebTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WebTables(self: _IQueryTable) -> str

Set: WebTables(self: _IQueryTable) = value
"""

    WorkbookConnection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WorkbookConnection(self: _IQueryTable) -> WorkbookConnection

"""



